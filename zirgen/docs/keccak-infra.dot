// Approximate compiler infrastructure as of Aug 2024.
// Key:
//   green: exists,
//   red: doesn't exist, but we might want it to
//   dashed line:

digraph zirgen {
    rankdir="LR"
    node [color="darkgreen"]
    edge [color="darkgreen"]
    edge [penwidth=3]
    compound=true
    layout="dot"
    ranksep=1.3
    penwidth=1
    subgraph {
        label="User-supplied inputs to IR"
        cluster=true
        subgraph {
            label="Programs and circuits"
            cluster=true

            subgraph {
                label="Accelerators"
                accel_keccak [color="red", label="Keccak"]
            }
        }

        subgraph dsl {
            cluster=true
	    label="Zirgen DSL (.zir)"
            dsl_circuit [label="cycle-based circuit"]
        }
        accel_keccak->dsl_circuit
    }

    subgraph ir  {
        label="IR"
        cluster=true
        subgraph {
            label=""
            rank="same"
            cluster=true
            subgraph circuit_ir {
                rank="same"
                cluster=true
                label="IR for cyle-based circuits"
                dsl_circuit_ir [label="Cycle-based, Structured (e.g. zstruct)", rank="same"]
            }
            recursion_ir [label="IR for recursion circuit programs"]
        }
        subgraph transformations {
            cluster=true
            label="Transforms"
            transform_verify [label="Generate verifier for this circuit \n (to be used in a lift predicate)"]
            transform_zirgen_opt [label="Zirgen cycle-based circuit optimization pipeline"]
        }

        dsl_circuit -> dsl_circuit_ir

        dsl_circuit_ir -> transform_zirgen_opt

        dsl_circuit_ir -> transform_verify
        transform_verify -> recursion_ir [constraint=false]

        }

    subgraph codegen {
        cluster=true
        label="Generated code"
        codegen_circuit_v1 [label="Circuit code generated by templates (v1)"]
        subgraph codegen_v2 {
            label="Generalized codegen (zirgen)"
            codegen_circuit_v2 [label="cycle-based circuit"]
            codegen_verify_v2 [label="verify seal", color="red"]
        }
        codegen_zkr [label=".zkr file"]
        transform_zirgen_opt -> codegen_circuit_v2
        transform_zirgen_opt->codegen_circuit_v1 [color="red", style="dotted", label="???"]
        recursion_ir -> codegen_zkr
        transform_verify -> codegen_verify_v2 [color="red"]
    }
}

