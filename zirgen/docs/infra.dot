// Graphviz (with "dot" layout) graph of approximate compiler
// infrastructure as of Aug 2024.
//
// Key:
//   green: exists,
//   red: doesn't exist, but we might want it to
//   dashed line: 

digraph zirgen {
    rankdir="LR"
    node [color="darkgreen"]
    edge [color="darkgreen"]
    edge [penwidth=3]
    compound=true
    layout="dot"
    ranksep=1.3
    penwidth=1
    subgraph cluster_user_input {
        label="User-supplied inputs to IR"
        subgraph cluster_prog_and_circuits {
            label="Programs and circuits"
            rv32imv1 [label="Risc-V rv32im V1"]
            rv32imv2 [label="Risc-V rv32im V2"]
            
            predicates [label="Lift, Resolve, Join, etc."]
            
            subgraph cluster_accel {
                label="Accelerators"
                accel_rsa [label="RSA"]
                accel_ecdsa [color="red", label="ECDSA"]
                accel_kzg [color="red", label="KZG"]
                accel_bls [color="red", label="BLS 12-381"]
                accel_keccak [color="red", label="Keccak"]
                accel_circom [label="Circom-based"]
            }
        }
        subgraph cluster_edsl {
	    label="EDSL (v1) embedded in C++"
            edsl_circuit [label="Cycle-based circuit\n(e.g. rv32im)"]
            edsl_bigint [label="BigInt program", style="dashed"]
            edsl_recursion [label="Recursion program\n(e.g. predicate)"]
        }
        subgraph cluster_dsl {
	    label="Zirgen DSL (.zir)"
            dsl_circuit [label="cycle-based circuit"]
            dsl_bigint [label="BigInt program", color="red"]
            dsl_recursion [label="Recursion program\n(e.g. predicate)", color="red"]
        }
        rv32imv1->edsl_circuit
        rv32imv2->dsl_circuit
        accel_keccak->dsl_circuit
        predicates->edsl_recursion
        predicates->dsl_recursion [color="red", weight=0.3]
    }
    
    subgraph cluster_ir {
        label="IR"
        subgraph cluster_ir_variants {
            label=""
            rank="same"
            subgraph cluster_circuit_ir {
                rank="same"
                label="IR for cyle-based circuits"
                edsl_circuit_ir [label="Flattened/unstructured"]
                dsl_circuit_ir [label="Cycle-based, Structured (e.g. zstruct)", rank="same"]
            }
            bigint_ir [label="IR for bigint programs"]
            recursion_ir [label="IR for recursion circuit programs"]
        }
        subgraph cluster_transforms {
            label="Transforms"
            transform_verify [label="Verify a seal\n(i.e. for a cyle-based circuit)"]
            transform_bigint_witness [label="Generate bigint witness"]
            transform_bigint_zkr [label="Verify bigint wiitness"]
            transform_v1_opt [label="V1 cycle-based circuit optimization pipeline"]
            transform_zirgen_opt [label="Zirgen cycle-based circuit optimization pipeline"]
        }
        
        dsl_circuit -> dsl_circuit_ir
        edsl_circuit -> edsl_circuit_ir
        edsl_bigint -> bigint_ir [style="dashed"]
        bigint_ir -> transform_bigint_zkr
        edsl_recursion -> recursion_ir
        dsl_bigint -> bigint_ir [color="red"]
        
        dsl_recursion -> recursion_ir [color="red"]
        dsl_circuit_ir -> transform_zirgen_opt
        edsl_circuit_ir -> transform_v1_opt
        bigint_ir ->  transform_bigint_witness
        
        dsl_circuit_ir -> transform_verify
        transform_verify -> recursion_ir [constraint=false]
        dsl_circuit_ir -> transform_v1_opt [color="red"]
        edsl_circuit_ir -> transform_zirgen_opt [color="red"]
        
        accel_rsa->edsl_bigint [style="dashed"]
        accel_circom->bigint_ir [color="red"]
        {accel_rsa accel_ecdsa accel_kzg accel_bls}->dsl_bigint [color="red"]
        {accel_ecdsa accel_kzg accel_bls}->edsl_bigint [color="red", style="dashed"]
    }
    
    circom_witness [label="Circom witness generator", color="red"]
    accel_circom -> circom_witness [color="red"]
    subgraph cluster_codegen {
        label="Generated code"
        codegen_circuit_v1 [label="Circuit code generated by templates (v1)"]
        subgraph cluster_codegen_v2 {
            label="Generalized codegen (zirgen)"
            codegen_circuit_v2 [label="cycle-based circuit"]
            codegen_bigint_v2 [label="bigint program"]
            codegen_verify_v2 [label="verify seal", color="red"]
        }
        codegen_zkr [label=".zkr file"]
        transform_bigint_witness -> codegen_bigint_v2
        transform_v1_opt -> codegen_circuit_v1
        transform_zirgen_opt -> codegen_circuit_v2
        transform_v1_opt->codegen_circuit_v2 [color="red"]
        transform_zirgen_opt->codegen_circuit_v1 [color="red", style="dotted", label="???"]
        transform_bigint_zkr -> recursion_ir [constraint=false]
        recursion_ir -> codegen_zkr
        transform_verify -> codegen_verify_v2 [color="red"]
    }
}
