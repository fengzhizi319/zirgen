// RUN: zirgen --emit=zhlt %s 2>&1 | FileCheck %s
// RUN: zirgen --emit=zstruct %s 2>&1

// This test covers a few cases of semi-dynamic layouts. We run the test twice,
// once to check the layout members are used as expected, and again to make sure
// that the layouts fully resolve when generating the validity polynomial.

component A(a: Val) {
  public a := Reg(a);
}

component B(a: A) {
  public aa := a;
  public extra := Reg(0);
  aa
}

component TakeAsValueOnly(a: A) {}

component TakeAsValueAndLayout(a: A) {
  a@1.a // Make sure the layout of the parameter is actually used
}

component Top() {
  a := A(1);
  // CHECK: [[B:%[0-9]+]] = zhlt.construct @B(
  b := B(a);

  // CHECK: [[TMP:%[0-9]+]] = zstruct.lookup [[B]]["@super"] : (!zstruct$B) -> !zstruct$A
  // CHECK-NEXT: zhlt.construct @TakeAsValueOnly([[TMP]])
  TakeAsValueOnly(b);


  // CHECK: [[TMP:%[0-9]+]] = zstruct.lookup [[B]]["@super"] : (!zstruct$B) -> !zstruct$A
  // CHECK-NEXT:  %8 = zhlt.construct @TakeAsValueAndLayout([[TMP]])
  TakeAsValueAndLayout(b);

  // CHECK: [[TMP:%[0-9]+]] = zstruct.lookup [[B]]["aa"] : (!zstruct$B) -> !zstruct$A
  // CHECK-NEXT: %10 = zhlt.construct @TakeAsValueAndLayout([[TMP]])
  TakeAsValueAndLayout(b.aa);
}

test {
  Top()
}
