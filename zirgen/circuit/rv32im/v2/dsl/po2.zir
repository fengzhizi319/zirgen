// RUN: true
// Implments compile time + dynamic power of 2 calculations
// Also: bit decompositions

import lookups;

// TODO: This is a lame workaround to the fact that map/reduce has issues with constants
component Po2(n: Val) {
  arr := [
    0x1,
    0x2,
    0x4,
    0x8,
    0x10,
    0x20,
    0x40,
    0x80,
    0x100,
    0x200,
    0x400,
    0x800,
    0x1000,
    0x2000,
    0x4000,
    0x8000
  ];
  arr[n]
}

component ToBits<n: Val>(x: Val) {
  for i : 0..n { NondetBitReg((x & Po2(i)) / Po2(i)) }
}

component FromBits<n: Val>(bits: Array<Val, n>) {
  reduce for i : 0..n { Po2(i) * bits[i] } init 0 with Add
}

component CondMul(cond: Val, in: Val, mul: Val) {
  cond * in * mul + (1 - cond) * in
}

// Val must be a U16 or less...
component DynPo2(in: Val) {
  low5 := ToBits<5>(in);
  low5_val := FromBits<5>(low5);
  check_u16 := NondetU16Reg((in - low5_val) / 32);
  check_u16 * 32 + low5_val = in;
  b1 := CondMul(low5[0], 1, 2);
  b2 := CondMul(low5[1], b1, 4);
  b3 := Reg(CondMul(low5[2], b2, 16));
  b4 := CondMul(low5[3], b3, 256);
  low := Reg((1 - low5[4]) * b4);
  high := Reg(low5[4] * b4);
  ValU32(low, high)
}

