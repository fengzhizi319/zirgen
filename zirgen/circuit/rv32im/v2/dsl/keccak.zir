import one_hot;
extern GetCycle() : Val;

// po2.zir unpacking up to 24 bits:
component Po2(n: Val) {
  arr := [
    0x1,
    0x2,
    0x4,
    0x8,
    0x10,
    0x20,
    0x40,
    0x80,
    0x100,
    0x200,
    0x400,
    0x800,
    0x1000,
    0x2000,
    0x4000,
    0x8000,
    0x10000,
    0x20000,
    0x40000,
    0x80000,
    0x100000,
    0x200000,
    0x400000,
    0x800000
  ];
  arr[n]
}
component ToBits<n: Val>(x: Val) {
  for i : 0..n { NondetBitReg((x & Po2(i)) / Po2(i)) }
}
component FromBits<n: Val>(bits: Array<Val, n>) {
  reduce for i : 0..n { Po2(i) * bits[i] } init 0 with Add
}
// EOF po2.zir

// concatenate.zir
component InRange<N: Val>(n: Val) {
  reduce for i : 0..N { Isz(i - n) } init 0 with Add
}
component Concatenate<T: Type, N: Val, M: Val>(a: Array<T, N>, b: Array<T, M>) {
  for i : 0..(N + M) {
    in_a := InRange<N>(i);
    [in_a, 1 - in_a] -> (
      a[i],
      b[i - N]
    )
  }
}
component ConcatZeros<N: Val, M: Val>(a: Array<Val, N>) {
  for i : 0..(N + M) {
    in_a := InRange<N>(i);
    [in_a, 1 - in_a] -> (a[i], NondetReg(0))
  }
}
component ConcatElem<T: Type, N: Val>(a: Array<T, N>, b: T) {
  for i : 0..(N + 1) {
    in_a := InRange<N>(i);
    [in_a, 1 - in_a] -> (a[i], b)
  }
}
// EOF concatenate.zir

component BLEN() { 22 }
component SLEN() { 21 }
component INPLEN() { 75 }
component EREGLEN() { 15 }
component RLEN() { INPLEN()+EREGLEN()-3*BLEN() }
component dummyS() { for i : 0.. SLEN() { 0 } }
component dummyB() { for i : 0.. BLEN() { 0 } }
component dummyE() { for i : 0.. RLEN() { 0 } }

component rtable<x: Val, y:Val>() {
  arr := [ [0,0,0], [1,0,0], [21,21,20], [21,7,0], [21,6,0],
           [21,15,0], [21,21,2], [6,0,0], [21,21,13], [20,0,0],
           [3,0,0], [10,0,0], [21,21,1], [21,4,0], [21,18,0],
           [21,20,0], [21,21,3], [15,0,0], [21,0,0], [8,0,0],
           [18,0,0], [2,0,0], [21,21,19], [21,21,14], [14,0,0]];
  arr[5*y + x]
}

component WordTriple(a: Array<Val, BLEN()>, b: Array<Val, SLEN()>, c: Array<Val, SLEN()>) {
  a := a;
  b := b;
  c := c;
}

component RetTuple(a: Array<Val, BLEN()>,
                  b: Array<Val, BLEN()>,
                  c: Array<Val, BLEN()>,
                  d: Array<Val, RLEN()>,
                  e: Array<Val, SLEN()>,
                  f: Array<Val, SLEN()>,
                  in_count: Val,
                  out_count: Val) {
  arr_a := for elem : a { Reg(elem) };
  arr_b := for elem : b { Reg(elem) };
  arr_c := for elem : c { Reg(elem) };
  arr_d := for elem : d { Reg(elem) };
  arr_e := for elem : e { Reg(elem) };
  arr_f := for elem : f { Reg(elem) };
  inner := Reg(in_count);
  outer := Reg(out_count);
}

component xor2(x: Val, y: Val) {
  x + y - 2*x*y
}

component IncMod5(v: Val) {
  d := Isz(4-v);
  [1-d, d] -> (v+1, 0)
}
component DecMod5(v: Val) {
  d := Isz(v);
  [1-d, d] -> (v-1, 4)
}

component RotLeft3impl<T: Type, A: Val, B: Val, C: Val, S: Val>
    (a: Array<T, A>, b: Array<T, B>, c: Array<T, C>) {
  ra := for i : 0..A {
    wraparound := InRange<S>(i);
    [wraparound, 1-wraparound] -> (c[C-S+i], a[i-S])
  };
  rb := for i : 0..B {
    wraparound := InRange<S>(i);
    [wraparound, 1-wraparound] -> (a[A-S+i], b[i-S])
  };
  rc := for i : 0..C {
    wraparound := InRange<S>(i);
    [wraparound, 1-wraparound] -> (b[B-S+i], c[i-S])
  };
}
component RotLeft3<T: Type, A: Val, B: Val, C: Val, S1: Val, S2: Val, S3: Val>
    (a: Array<T, A>, b: Array<T, B>, c: Array<T, C>) {
  za := Isz(S1);
  rot := [za, 1-za] -> ( WordTriple(a,b,c),
      { arr1 := RotLeft3impl<T, A, B, C, S1+za>(a, b, c);
        zb := Isz(S2);
        [zb, 1-zb] -> ( WordTriple(arr1.ra, arr1.rb, arr1.rc),
          { arr2 := RotLeft3impl<T, A, B, C, S2+zb>(arr1.ra, arr1.rb, arr1.rc);
            zc := Isz(S3);
            [zc, 1-zc] -> ( WordTriple(arr2.ra, arr2.rb, arr2.rc),
              { arr3 := RotLeft3impl<T, A, B, C, S3+zc>(arr2.ra, arr2.rb, arr2.rc);
                WordTriple(arr3.ra, arr3.rb, arr3.rc)
              })})});
}

component xor5words_inner0<idx: Val>(rvprev01: RetTuple) {
  unpack_a := ToBits<BLEN()>(rvprev01.arr_a[0+3*idx+15*0]);
  FromBits<BLEN()>(unpack_a) = rvprev01.arr_a[0+3*idx+15*0];

  nxt := Isz(idx-3)+Isz(idx-4);
  val_b := [1-nxt, nxt] ->
         (rvprev01.arr_a[0+3*idx+15*1], rvprev01.arr_b[0+3*idx+15*1 - 22*1]);
  unpack_b := ToBits<BLEN()>(val_b);
  FromBits<BLEN()>(unpack_b) = val_b;

  unpack_c := ToBits<BLEN()>(rvprev01.arr_b[0+3*idx+15*2 - 22*1]);
  FromBits<BLEN()>(unpack_c) = rvprev01.arr_b[0+3*idx+15*2 - 22*1];

  unpack_d := ToBits<BLEN()>(rvprev01.arr_c[0+3*idx+15*3 - 22*2]);
  FromBits<BLEN()>(unpack_d) = rvprev01.arr_c[0+3*idx+15*3 - 22*2];

  xor_ab := for i : 0..BLEN() {
    Reg(xor2(unpack_a[i], unpack_b[i])) };

  xor_cd := for i : 0..BLEN() {
    Reg(xor2(unpack_c[i], unpack_d[i])) };

  RetTuple(xor_ab, xor_cd, dummyB(), dummyE(), dummyS(), dummyS(), 1, idx)
}

component xor5words_inner1<idx: Val>(rvprev01: RetTuple, rvprev02: RetTuple) {
  nxt := Isz(idx)+Isz(idx-1);
  val_e := [nxt, 1-nxt] ->
         (rvprev02.arr_c[0+3*idx+15*4 - 22*2], rvprev02.arr_d[0+3*idx+15*4 - 22*3]);
  unpack_e := ToBits<BLEN()>(val_e);
  FromBits<BLEN()>(unpack_e) = val_e;

  unpack_a2 := ToBits<SLEN()>(rvprev02.arr_a[1+3*idx+15*0]);
  FromBits<SLEN()>(unpack_a2) = rvprev02.arr_a[1+3*idx+15*0];

  val_b2 := [nxt, 1-nxt] ->
         (rvprev02.arr_a[1+3*idx+15*1], rvprev02.arr_b[1+3*idx+15*1 - 22*1]);
  unpack_b2 := ToBits<SLEN()>(val_b2);
  FromBits<SLEN()>(unpack_b2) = val_b2;

  unpack_c2 := ToBits<SLEN()>(rvprev02.arr_b[1+3*idx+15*2 - 22*1]);
  FromBits<SLEN()>(unpack_c2) = rvprev02.arr_b[1+3*idx+15*2 - 22*1];

  xor_abcd := for i : 0..BLEN() {
    Reg(xor2(rvprev01.arr_a[i], rvprev01.arr_b[i])) };

  xor_ab2 := for i : 0..SLEN() {
    Reg(xor2(unpack_a2[i], unpack_b2[i])) };

  xor_vals := for i : 0..BLEN() {
    xor2(xor_abcd[i], unpack_e[i]) };
  result := Reg(FromBits<BLEN()>(xor_vals));
  withr_ab2 := ConcatElem<Val,SLEN()>(xor_ab2, result);

  padded_c2 := ConcatZeros<SLEN(),BLEN()-SLEN()>(unpack_c2);
  RetTuple(padded_c2, dummyB(), withr_ab2, dummyE(), dummyS(), dummyS(), 2, idx)
}

component xor5words_inner2<idx: Val>(rvprev01: RetTuple, rvprev03: RetTuple) {
  unpack_d2 := ToBits<SLEN()>(rvprev03.arr_c[1+3*idx+15*3 - 22*2]);
  FromBits<SLEN()>(unpack_d2) = rvprev03.arr_c[1+3*idx+15*3 - 22*2];

  nxt := Isz(idx)+Isz(idx-1);
  val_e2 := [nxt, 1-nxt] ->
          (rvprev03.arr_c[1+3*idx+15*4 - 22*2], rvprev03.arr_d[1+3*idx+15*4 - 22*3]);
  unpack_e2 := ToBits<SLEN()>(val_e2);
  FromBits<SLEN()>(unpack_e2) = val_e2;

  unpack_a3 := ToBits<SLEN()>(rvprev03.arr_a[2+3*idx+15*0]);
  FromBits<SLEN()>(unpack_a3) = rvprev03.arr_a[2+3*idx+15*0];

  val_b3 := [nxt, 1-nxt] ->
          (rvprev03.arr_a[2+3*idx+15*1], rvprev03.arr_b[2+3*idx+15*1 - 22*1]);
  unpack_b3 := ToBits<SLEN()>(val_b3);
  FromBits<SLEN()>(unpack_b3) = val_b3;

  xor_cd2 := for i : 0..SLEN() {
    Reg(xor2(rvprev01.arr_a[i], unpack_d2[i])) };

  xor_abcd2 := for i : 0..SLEN() {
    Reg(xor2(rvprev01.arr_c[i], xor_cd2[i])) };

  xor_vals := for i : 0..SLEN() {
    xor2(xor_abcd2[i], unpack_e2[i]) };
  result := Reg(FromBits<SLEN()>(xor_vals));

  withr_a3 := ConcatElem<Val,SLEN()>(unpack_a3, result);
  padded_b3 := ConcatZeros<SLEN(),RLEN()-SLEN()>(unpack_b3);
  withr_cd2 := ConcatElem<Val,SLEN()>(xor_cd2, rvprev01.arr_c[BLEN()-1]);
  padded_abcd2 := ConcatZeros<SLEN(),BLEN()-SLEN()>(xor_abcd2);
  RetTuple(dummyB(), withr_cd2, withr_a3, padded_b3, dummyS(), dummyS(), 3, idx)
}

component xor5words_inner3<idx: Val>(rvprev01: RetTuple, rvprev04: RetTuple) {
  val_c3 := [1-Isz(4-idx), Isz(4-idx)] ->
           (rvprev04.arr_b[2+3*idx+15*2 - 22*1], rvprev04.arr_c[2+3*idx+15*2 - 22*2]);
  unpack_c3 := ToBits<SLEN()>(val_c3);
  FromBits<SLEN()>(unpack_c3) = val_c3;

  unpack_d3 := ToBits<SLEN()>(rvprev04.arr_c[2+3*idx+15*3 - 22*2]);
  FromBits<SLEN()>(unpack_d3) = rvprev04.arr_c[2+3*idx+15*3 - 22*2];

  nxt := Isz(idx)+Isz(idx-1);
  val_e3 := [nxt, 1-nxt] ->
         (rvprev04.arr_c[2+3*idx+15*4 - 22*2], rvprev04.arr_d[2+3*idx+15*4 - 22*3]);
  unpack_e3 := ToBits<SLEN()>(val_e3);
  FromBits<SLEN()>(unpack_e3) = val_e3;

  xor_ab3 := for i : 0..SLEN() {
    Reg(xor2(rvprev01.arr_c[i], rvprev01.arr_d[i])) };

  xor_cd3 := for i : 0..SLEN() {
    Reg(xor2(unpack_c3[i], unpack_d3[i])) };

  xor_abcd3 := for i : 0..SLEN() {
    Reg(xor2(xor_ab3[i], xor_cd3[i])) };

  xor_vals := for i : 0..SLEN() {
    xor2(xor_abcd3[i], unpack_e3[i]) };
  result := Reg(FromBits<SLEN()>(xor_vals));

  withr_cd3 := ConcatElem<Val,SLEN()>(xor_cd3, result);
  withr_ab3 := ConcatElem<Val,SLEN()>(xor_ab3, rvprev01.arr_c[BLEN()-1]);
  withr_abcd3 := ConcatElem<Val,SLEN()>(xor_abcd3, rvprev01.arr_b[BLEN()-1]);

  RetTuple(withr_abcd3, withr_ab3, withr_cd3, dummyE(), dummyS(), dummyS(), 4, idx)
}

component xor5words_inner4<idx: Val>(rvprev01: RetTuple, rvprev05: RetTuple) {
  inp_a := for i : 0..BLEN() { Reg(rvprev05.arr_a[i]) };
  inp_b := for i : 0..BLEN() { Reg(rvprev05.arr_b[i]) };
  inp_c := for i : 0..BLEN() { Reg(rvprev05.arr_c[i]) };
  tmp_1 := for i : 0..INPLEN()-BLEN()*3+3*idx { Reg(rvprev05.arr_d[i]) };
  tmp_2 := ConcatElem<Val,INPLEN()-BLEN()*3+3*idx>(tmp_1, Reg(rvprev01.arr_a[BLEN()-1]));
  tmp_3 := ConcatElem<Val,INPLEN()-BLEN()*3+3*idx+1>(tmp_2, Reg(rvprev01.arr_b[BLEN()-1]));
  tmp_4 := ConcatElem<Val,INPLEN()-BLEN()*3+3*idx+2>(tmp_3, Reg(rvprev01.arr_c[BLEN()-1]));
  inp_d := ConcatZeros<INPLEN()-BLEN()*3+3*(idx+1),EREGLEN()-3*(idx+1)>(tmp_4);
  RetTuple(inp_a, inp_b, inp_c, inp_d, dummyS(), dummyS(), 0, idx+1)
}

component xor5words_outer<idx: Val>(inner_onehot: Array<Val, 11>, rvprev01: RetTuple,
            rvprev02: RetTuple, rvprev03: RetTuple, rvprev04: RetTuple, rvprev05: RetTuple) {
  inner_onehot2 := [inner_onehot[0],inner_onehot[1],inner_onehot[2],inner_onehot[3],inner_onehot[4]];
  inner_onehot2 -> (
    xor5words_inner0<idx>(rvprev01),
    xor5words_inner1<idx>(rvprev01, rvprev02),
    xor5words_inner2<idx>(rvprev01, rvprev03),
    xor5words_inner3<idx>(rvprev01, rvprev04),
    xor5words_inner4<idx>(rvprev01, rvprev05)
  )
}

component rho_inner0<X: Val, Y: Val>(rvpstate: RetTuple) {
  v_dec1 := rvpstate.arr_d[INPLEN()-3*BLEN()+3*DecMod5(X)+0];
  unpack_m1 := ToBits<BLEN()>(v_dec1);
  FromBits<BLEN()>(unpack_m1) = v_dec1;

  v_dec2 := rvpstate.arr_d[INPLEN()-3*BLEN()+3*DecMod5(X)+1];
  unpack_m2 := ToBits<SLEN()>(v_dec2);
  FromBits<SLEN()>(unpack_m2) = v_dec2;

  v_dec3 := rvpstate.arr_d[INPLEN()-3*BLEN()+3*DecMod5(X)+2];
  unpack_m3 := ToBits<SLEN()>(v_dec3);
  FromBits<SLEN()>(unpack_m3) = v_dec3;

  v_inc1 := rvpstate.arr_d[INPLEN()-3*BLEN()+3*IncMod5(X)+0];
  unpack_p1 := ToBits<BLEN()>(v_inc1);
  FromBits<BLEN()>(unpack_p1) = v_inc1;

  v_inc2 := rvpstate.arr_d[INPLEN()-3*BLEN()+3*IncMod5(X)+1];
  unpack_p2 := ToBits<SLEN()>(v_inc2);
  FromBits<SLEN()>(unpack_p2) = v_inc2;

  v_inc3 := rvpstate.arr_d[INPLEN()-3*BLEN()+3*IncMod5(X)+2];
  unpack_p3 := ToBits<SLEN()>(v_inc3);
  FromBits<SLEN()>(unpack_p3) = v_inc3;
  rotp := RotLeft3<Val, BLEN(), SLEN(), SLEN(), 1, 0, 0>(unpack_p1, unpack_p2, unpack_p3);
  pad_rb := ConcatZeros<SLEN(),BLEN()-SLEN()>(rotp.rot.b);
  pad_rc := ConcatZeros<SLEN(),BLEN()-SLEN()>(rotp.rot.c);

  padded_m1 := ConcatZeros<BLEN(),RLEN()-BLEN()>(unpack_m1);
  RetTuple(rotp.rot.a, pad_rb, pad_rc, padded_m1, unpack_m2, unpack_m3, 2*X+1, Y+5)
}

component rho_inner1<X: Val, Y: Val>(rvpstate: RetTuple, rvprev01: RetTuple) {
  xor_mp1 := for i : 0..BLEN() {
    Reg(xor2(rvprev01.arr_a[i], rvprev01.arr_d[i])) };
  xor_mp2 := for i : 0..SLEN() {
    Reg(xor2(rvprev01.arr_b[i], rvprev01.arr_e[i])) };
  xor_mp3 := for i : 0..SLEN() {
    Reg(xor2(rvprev01.arr_c[i], rvprev01.arr_f[i])) };

  idx1 := (X+5*Y)*3 + 0;
  in_a := InRange<BLEN()>(idx1);
  v_xy1 := [in_a, 1-in_a] -> (rvpstate.arr_a[idx1],
    { idx2 := idx1 - BLEN();
      in_b := InRange<BLEN()>(idx2);
      [in_b, 1-in_b] -> (rvpstate.arr_b[idx2],
        { idx3 := idx2 - BLEN();
          in_c := InRange<BLEN()>(idx3);
          [in_c, 1-in_c] -> (rvpstate.arr_c[idx3], rvpstate.arr_d[idx3-BLEN()]) })});
  unpack_xy1 := ToBits<BLEN()>(v_xy1);
  FromBits<BLEN()>(unpack_xy1) = v_xy1;

  idx12 := idx1 + 1;
  in_a2 := InRange<BLEN()>(idx12);
  v_xy2 := [in_a2, 1-in_a2] -> (rvpstate.arr_a[idx12],
    { idx22 := idx12 - BLEN();
      in_b2 := InRange<BLEN()>(idx22);
      [in_b2, 1-in_b2] -> (rvpstate.arr_b[idx22],
        { idx32 := idx22 - BLEN();
          in_c2 := InRange<BLEN()>(idx32);
          [in_c2, 1-in_c2] -> (rvpstate.arr_c[idx32], rvpstate.arr_d[idx32-BLEN()]) })});
  unpack_xy2 := ToBits<SLEN()>(v_xy2);
  FromBits<SLEN()>(unpack_xy2) = v_xy2;

  idx13 := idx12 + 1;
  in_a3 := InRange<BLEN()>(idx13);
  v_xy3 := [in_a3, 1-in_a3] -> (rvpstate.arr_a[idx13],
    { idx23 := idx13 - BLEN();
      in_b3 := InRange<BLEN()>(idx23);
      [in_b3, 1-in_b3] -> (rvpstate.arr_b[idx23],
        { idx33 := idx23 - BLEN();
          in_c3 := InRange<BLEN()>(idx33);
          [in_c3, 1-in_c3] -> (rvpstate.arr_c[idx33], rvpstate.arr_d[idx33-BLEN()]) })});
  unpack_xy3 := ToBits<SLEN()>(v_xy3);
  FromBits<SLEN()>(unpack_xy3) = v_xy3;

  xor_1 := for i : 0..BLEN() { xor2(unpack_xy1[i], xor_mp1[i]) };
  xor_2 := for i : 0..SLEN() { xor2(unpack_xy2[i], xor_mp2[i]) };
  xor_3 := for i : 0..SLEN() { xor2(unpack_xy3[i], xor_mp3[i]) };
  t := rtable<X,Y>();
  rotxor := RotLeft3<Val, BLEN(), SLEN(), SLEN(), t[0], t[1], t[2]>(xor_1, xor_2, xor_3);
  result := [Reg(FromBits<BLEN()>(rotxor.rot.a)),
             Reg(FromBits<SLEN()>(rotxor.rot.b)),
             Reg(FromBits<SLEN()>(rotxor.rot.c))];

  withrs_f := ConcatZeros<3,SLEN()-3>(result);
  z := Isz(X-4);
  RetTuple(dummyB(), dummyB(), dummyB(), dummyE(), dummyS(), withrs_f, 2*(X+1), Y+5)
}

component rho_inner2<Y: Val>(rvpstate: RetTuple, rvprev01: RetTuple, rvprev03: RetTuple,
  rvprev05: RetTuple, rvprev07: RetTuple, rvprev09: RetTuple) {
  [Isz(Y), 1-Isz(Y)] -> (
    { rs1 := Concatenate<Reg,12,3>(
               Concatenate<Reg,9,3>(
                 Concatenate<Reg,6,3>(
                   Concatenate<Reg,3,3>(
                    for i : 0..3 { rvprev09.arr_f[i] },
                    for i : 0..3 { rvprev07.arr_f[i] }),
                   for i : 0..3 { rvprev05.arr_f[i] }),
                 for i : 0..3 { rvprev03.arr_f[i] }),
               for i : 0..3 { rvprev01.arr_f[i] });
      a := Concatenate<Reg, 15, 7>(rs1, for i : 15..22 { rvpstate.arr_a[i] });
      RetTuple(a, rvpstate.arr_b, rvpstate.arr_c, rvpstate.arr_d,
               dummyS(), dummyS(), 0, Y+6)
    },
    [Isz(Y-1), 1-Isz(Y-1)] -> (
      { rs1 := [rvprev09.arr_f[0], rvprev09.arr_f[1], rvprev09.arr_f[2],
                rvprev07.arr_f[0], rvprev07.arr_f[1], rvprev07.arr_f[2],
                rvprev05.arr_f[0]+0];
        a := Concatenate<Val, 15, 7>(for i : 0..15 { rvpstate.arr_a[i] }, rs1);
        rs2 := [rvprev05.arr_f[1], rvprev05.arr_f[2],
                rvprev03.arr_f[0], rvprev03.arr_f[1], rvprev03.arr_f[2],
                rvprev01.arr_f[0], rvprev01.arr_f[1], rvprev01.arr_f[2]+0];
        b := Concatenate<Val, 8, 14>(rs2, for i : 8..22 { rvpstate.arr_b[i] });
        RetTuple(a, b, rvpstate.arr_c, rvpstate.arr_d,
                 dummyS(), dummyS(), 0, Y+6)
      },
      [Isz(Y-2), 1-Isz(Y-2)] -> (
        { rs1 := [rvprev09.arr_f[0], rvprev09.arr_f[1], rvprev09.arr_f[2],
                  rvprev07.arr_f[0], rvprev07.arr_f[1], rvprev07.arr_f[2],
                  rvprev05.arr_f[0], rvprev05.arr_f[1], rvprev05.arr_f[2],
                  rvprev03.arr_f[0], rvprev03.arr_f[1], rvprev03.arr_f[2],
                  rvprev01.arr_f[0], rvprev01.arr_f[1]+0];
          b := Concatenate<Val, 8, 14>(for i : 0..8 { rvpstate.arr_b[i] }, rs1);
          rs2 := for i : 2..3 { rvprev01.arr_f[i] };
          c := Concatenate<Reg, 1, 21>(rs2, for i : 1..22 { rvpstate.arr_c[i] });
          RetTuple(rvpstate.arr_a, b, c, rvpstate.arr_d,
                   dummyS(), dummyS(), 0, Y+6)
        },
        [Isz(Y-3), 1-Isz(Y-3)] -> (
          { rs1 := [rvprev09.arr_f[0], rvprev09.arr_f[1], rvprev09.arr_f[2],
                    rvprev07.arr_f[0], rvprev07.arr_f[1], rvprev07.arr_f[2],
                    rvprev05.arr_f[0], rvprev05.arr_f[1], rvprev05.arr_f[2],
                    rvprev03.arr_f[0], rvprev03.arr_f[1], rvprev03.arr_f[2],
                    rvprev01.arr_f[0], rvprev01.arr_f[1], rvprev01.arr_f[2]+0];
            c1 := Concatenate<Val, 1, 15>([rvpstate.arr_c[0]+0], rs1);
            c := Concatenate<Val, 16, 6>(c1, for i : 16..22 { rvpstate.arr_c[i] });
            RetTuple(rvpstate.arr_a, rvpstate.arr_b, c, rvpstate.arr_d,
                     dummyS(), dummyS(), 0, Y+6)
          },
          { // Keccak pi permuation:
            //c': arr_c[0,1,2,3,...,15],p09f[0],p09f[1],p09f[2],p07f[0],p07f[1],p07f[2]
            //d': p05f[0],p05f[1],p05f[2],p03f[0],p03f[1],p03f[2],p01f[0],p01f[1],p01f[2]
            a := [rvpstate.arr_a[0], rvpstate.arr_a[1], rvpstate.arr_a[2],     //B(0,0)=A(0,0)
                  rvpstate.arr_a[18], rvpstate.arr_a[19], rvpstate.arr_a[20],  //B(1,0)=A(1,1)
                  rvpstate.arr_b[14], rvpstate.arr_b[15], rvpstate.arr_b[16],  //B(2,0)=A(2,2)
                  rvpstate.arr_c[10], rvpstate.arr_c[11], rvpstate.arr_c[12],  //B(3,0)=A(3,3)
                  rvprev01.arr_f[0], rvprev01.arr_f[1], rvprev01.arr_f[2],     //B(4,0)=A(4,4)
                  rvpstate.arr_a[9], rvpstate.arr_a[10], rvpstate.arr_a[11],   //B(0,1)=A(3,0)
                  rvpstate.arr_b[5], rvpstate.arr_b[6], rvpstate.arr_b[7],     //B(1,1)=A(4,1)
                  rvpstate.arr_b[8]+0                                          //B(2,1)=A(0,2)
                 ];
            b := [rvpstate.arr_b[9], rvpstate.arr_b[10],                       //B(2,1)=A(0,2)
                  rvpstate.arr_c[4], rvpstate.arr_c[5], rvpstate.arr_c[6],     //B(3,1)=A(1,3)
                  rvprev05.arr_f[0], rvprev05.arr_f[1], rvprev05.arr_f[2],     //B(4,1)=A(2,4)
                  rvpstate.arr_a[3], rvpstate.arr_a[4], rvpstate.arr_a[5],     //B(0,2)=A(1,0)
                  rvpstate.arr_a[21], rvpstate.arr_b[0], rvpstate.arr_b[1],    //B(1,2)=A(2,1)
                  rvpstate.arr_b[17], rvpstate.arr_b[18], rvpstate.arr_b[19],  //B(2,2)=A(3,2)
                  rvpstate.arr_c[13], rvpstate.arr_c[14], rvpstate.arr_c[15],  //B(3,2)=A(4,3)
                  rvprev09.arr_f[0], rvprev09.arr_f[1]+0                       //B(4,2)=A(0,4)
                 ];
            c := [rvprev09.arr_f[2],                                           //B(4,2)=A(0,4)
                  rvpstate.arr_a[12], rvpstate.arr_a[13], rvpstate.arr_a[14],  //B(0,3)=A(4,0)
                  rvpstate.arr_a[15], rvpstate.arr_a[16], rvpstate.arr_a[17],  //B(1,3)=A(0,1)
                  rvpstate.arr_b[11], rvpstate.arr_b[12], rvpstate.arr_b[13],  //B(2,3)=A(1,2)
                  rvpstate.arr_c[7], rvpstate.arr_c[8], rvpstate.arr_c[9],     //B(3,3)=A(2,3)
                  rvprev03.arr_f[0], rvprev03.arr_f[1], rvprev03.arr_f[2],     //B(4,3)=A(3,4)
                  rvpstate.arr_a[6], rvpstate.arr_a[7], rvpstate.arr_a[8],     //B(0,4)=A(2,0)
                  rvpstate.arr_b[2], rvpstate.arr_b[3], rvpstate.arr_b[4]+0    //B(1,4)=A(3,1)
                 ];
            d := [rvpstate.arr_b[20], rvpstate.arr_b[21], rvpstate.arr_c[0],   //B(2,4)=A(4,2)
                  rvpstate.arr_c[1], rvpstate.arr_c[2], rvpstate.arr_c[3],     //B(3,4)=A(0,3)
                  rvprev07.arr_f[0], rvprev07.arr_f[1], rvprev07.arr_f[2],     //B(4,4)=A(1,4)
                  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
            RetTuple(a, b, c, d, dummyS(), dummyS(), 0, Y+6)
          }))))
}

component rho_outer<Y: Val>(inner_onehot: Array<Val, 11>,
                           rvprev01: RetTuple, rvprev02: RetTuple, rvprev03: RetTuple,
                           rvprev04: RetTuple, rvprev05: RetTuple, rvprev06: RetTuple,
                           rvprev07: RetTuple, rvprev08: RetTuple, rvprev09: RetTuple,
                           rvprev10: RetTuple, rvprev11: RetTuple) {
  inner_onehot -> (
    rho_inner0<0,Y>(rvprev01),
    rho_inner1<0,Y>(rvprev02, rvprev01),
    rho_inner0<1,Y>(rvprev03),
    rho_inner1<1,Y>(rvprev04, rvprev01),
    rho_inner0<2,Y>(rvprev05),
    rho_inner1<2,Y>(rvprev06, rvprev01),
    rho_inner0<3,Y>(rvprev07),
    rho_inner1<3,Y>(rvprev08, rvprev01),
    rho_inner0<4,Y>(rvprev09),
    rho_inner1<4,Y>(rvprev10, rvprev01),
    rho_inner2<Y>(rvprev11, rvprev01, rvprev03, rvprev05, rvprev07, rvprev09)
  )
}

component fstep(rvprev01: RetTuple, rvprev02: RetTuple, rvprev03: RetTuple,
                rvprev04: RetTuple, rvprev05: RetTuple, rvprev06: RetTuple,
                rvprev07: RetTuple, rvprev08: RetTuple, rvprev09: RetTuple,
                rvprev10: RetTuple, rvprev11: RetTuple) {
  outer_onehot := OneHot<10>(rvprev01.outer);
  inner_onehot := OneHot<11>(rvprev01.inner);
  outer_onehot -> (
    xor5words_outer<0>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05),
    xor5words_outer<1>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05),
    xor5words_outer<2>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05),
    xor5words_outer<3>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05),
    xor5words_outer<4>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05),
    rho_outer<0>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05,
                  rvprev06, rvprev07, rvprev08, rvprev09, rvprev10, rvprev11),
    rho_outer<1>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05,
                  rvprev06, rvprev07, rvprev08, rvprev09, rvprev10, rvprev11),
    rho_outer<2>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05,
                  rvprev06, rvprev07, rvprev08, rvprev09, rvprev10, rvprev11),
    rho_outer<3>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05,
                  rvprev06, rvprev07, rvprev08, rvprev09, rvprev10, rvprev11),
    rho_outer<4>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05,
                  rvprev06, rvprev07, rvprev08, rvprev09, rvprev10, rvprev11)
  )
}

component fill_input(inp_vals: Array<Val, INPLEN()>) {
  inp_a := for i : 0..BLEN() { Reg(inp_vals[i]) };
  inp_b := for i : BLEN()..BLEN()*2 { Reg(inp_vals[i]) };
  inp_c := for i : BLEN()*2..BLEN()*3 { Reg(inp_vals[i]) };
  tmp := for i : BLEN()*3..INPLEN() { Reg(inp_vals[i]) };
  inp_d := ConcatZeros<INPLEN()-BLEN()*3, EREGLEN()>(tmp);
  inner_counter := 0;
  outer_counter := 0;
  RetTuple(inp_a, inp_b, inp_c, inp_d, dummyS(), dummyS(), inner_counter, outer_counter)
}

component fkeccak(inp_vals: Array<Val, INPLEN()>) {
  retvals : RetTuple;
  PC := NondetReg( GetCycle() );

  round := [Isz(PC), 1-Isz(PC)];
  retvals := round -> (
    fill_input(inp_vals),
    fstep(retvals@1, retvals@2, retvals@3, retvals@4, retvals@5, retvals@6, retvals@7,
          retvals@8, retvals@9, retvals@10, retvals@11)
  );
}

/*
test RotateLeft64bit {
  arr := for i : 0..3 { (999+7*i)*(977-9*i) };
  ua := ToBits<BLEN()>(arr[0]);
  ub := ToBits<SLEN()>(arr[1]);
  uc := ToBits<SLEN()>(arr[2]);
  t20 := rtable<2,0>();
  result1 := RotLeft3<Val, BLEN(), SLEN(), SLEN(), t20[0],t20[1],t20[2]>(ua, ub, uc);
  FromBits<BLEN()>(result1.rot.a) = 244005;
  FromBits<SLEN()>(result1.rot.b) = 1816316;
  FromBits<SLEN()>(result1.rot.c) = 1815730;
  t32 := rtable<3,2>();
  result2 := RotLeft3<Val, BLEN(), SLEN(), SLEN(), t32[0],t32[1],t32[2]>(ua, ub, uc);
  FromBits<BLEN()>(result2.rot.a) = 2960567;
  FromBits<SLEN()>(result2.rot.b) = 1516731;
  FromBits<SLEN()>(result2.rot.c) = 900867;
}
*/

test KeccakTest01 {
  arr := for i : 0..75 { (999+7*i)*(977-9*i) };
  x := fkeccak(arr);
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[0]-1283708) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[1]-1257658) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[2]-1300756) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[3]-2314385) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[4]-1264781) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[5]-1107405) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[6]-533578) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[7]-745759) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[8]-1802187) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[9]-753626) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[10]-333317) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[11]-725108) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[12]-3505293) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[13]-1824121) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[14]-1864658) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[15]-1034941) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[16]-1966174) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[17]-337821) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[18]-2763489) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[19]-519966) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[20]-640852) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_a[21]-245764) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[0]-575058) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[1]-950852) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[2]-4067299) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[3]-1742123) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[4]-1725931) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[5]-2879520) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[6]-787908) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[7]-1958650) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[8]-3574923) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[9]-1510998) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[10]-1413203) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[11]-3395861) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[12]-1999258) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[13]-28939) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[14]-2734294) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[15]-187274) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[16]-1274675) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[17]-1548935) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[18]-1557612) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[19]-1041083) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[20]-3310678) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_b[21]-606282) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[0]-1218410) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[1]-1223777) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[2]-1425591) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[3]-2020828) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[4]-2609105) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[5]-1238538) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[6]-960187) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[7]-3241757) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[8]-630164) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[9]-1222450) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[10]-144716) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[11]-342910) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[12]-920418) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[13]-3917937) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[14]-2074335) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[15]-1910466) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[16]-1468513) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[17]-1684687) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[18]-1731664) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[19]-2131704) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[20]-419362) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_c[21]-91659) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[0]-3579998) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[1]-1256997) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[2]-1937970) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[3]-3889456) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[4]-1936527) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[5]-1409348) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[6]-3290295) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[7]-1542893) = 0;
  Isz(10-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[8]-1259719) = 0;
}
