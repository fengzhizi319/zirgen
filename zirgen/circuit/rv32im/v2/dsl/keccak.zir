import one_hot;
extern GetCycle() : Val;

// po2.zir unpacking up to 24 bits:
component Po2(n: Val) {
  arr := [
    0x1,
    0x2,
    0x4,
    0x8,
    0x10,
    0x20,
    0x40,
    0x80,
    0x100,
    0x200,
    0x400,
    0x800,
    0x1000,
    0x2000,
    0x4000,
    0x8000,
    0x10000,
    0x20000,
    0x40000,
    0x80000,
    0x100000,
    0x200000,
    0x400000,
    0x800000
  ];
  arr[n]
}
component ToBits<n: Val>(x: Val) {
  for i : 0..n { NondetBitReg((x & Po2(i)) / Po2(i)) }
}
component FromBits<n: Val>(bits: Array<Val, n>) {
  reduce for i : 0..n { Po2(i) * bits[i] } init 0 with Add
}
// EOF po2.zir

// concatenate.zir
component InRange<N: Val>(n: Val) {
  reduce for i : 0..N { Isz(i - n) } init 0 with Add
}
component Concatenate<T: Type, N: Val, M: Val>(a: Array<T, N>, b: Array<T, M>) {
  for i : 0..(N + M) {
    in_a := InRange<N>(i);
    [in_a, 1 - in_a] -> (
      a[i],
      b[i - N]
    )
  }
}
component ConcatZeros<N: Val, M: Val>(a: Array<Val, N>) {
  for i : 0..(N + M) {
    in_a := InRange<N>(i);
    [in_a, 1 - in_a] -> (a[i], NondetReg(0))
  }
}
component ConcatElem<T: Type, N: Val>(a: Array<T, N>, b: T) {
  for i : 0..(N + 1) {
    in_a := InRange<N>(i);
    [in_a, 1 - in_a] -> (a[i], b)
  }
}
// EOF concatenate.zir

component BLEN() { 22 }
component SLEN() { 21 }
component INPLEN() { 75 }
component EREGLEN() { 15 }
component RLEN() { INPLEN()+EREGLEN()-3*BLEN() }

component RetTuple(a: Array<Val, BLEN()>,
                  b: Array<Val, BLEN()>,
                  c: Array<Val, BLEN()>,
                  d: Array<Val, RLEN()>,
                  in_count: Val,
                  out_count: Val) {
  arr_a := for elem : a { Reg(elem) };
  arr_b := for elem : b { Reg(elem) };
  arr_c := for elem : c { Reg(elem) };
  arr_d := for elem : d { Reg(elem) };
  inner := Reg(in_count);
  outer := Reg(out_count);
}

component xor2(x: Val, y: Val) {
  x + y - 2*x*y
}

component xor5words_inner0<idx: Val>(rvprev01: RetTuple) {
  unpack_a := ToBits<BLEN()>(rvprev01.arr_a[0+3*idx+15*0]);
  FromBits<BLEN()>(unpack_a) = rvprev01.arr_a[0+3*idx+15*0];

  nxt := Isz(idx-3)+Isz(idx-4);
  val_b := [1-nxt, nxt] ->
         (rvprev01.arr_a[0+3*idx+15*1], rvprev01.arr_b[0+3*idx+15*1 - 22*1]);
  unpack_b := ToBits<BLEN()>(val_b);
  FromBits<BLEN()>(unpack_b) = val_b;

  unpack_c := ToBits<BLEN()>(rvprev01.arr_b[0+3*idx+15*2 - 22*1]);
  FromBits<BLEN()>(unpack_c) = rvprev01.arr_b[0+3*idx+15*2 - 22*1];

  unpack_d := ToBits<BLEN()>(rvprev01.arr_c[0+3*idx+15*3 - 22*2]);
  FromBits<BLEN()>(unpack_d) = rvprev01.arr_c[0+3*idx+15*3 - 22*2];

  xor_ab := for i : 0..BLEN() {
    Reg(xor2(unpack_a[i], unpack_b[i])) };

  xor_cd := for i : 0..BLEN() {
    Reg(xor2(unpack_c[i], unpack_d[i])) };

  padded_b := ConcatZeros<BLEN(),RLEN()-BLEN()>(unpack_b);
  RetTuple(xor_ab, xor_cd, unpack_a, padded_b, 1, idx)
}

component xor5words_inner1<idx: Val>(rvprev01: RetTuple, rvprev02: RetTuple) {
  nxt := Isz(idx)+Isz(idx-1);
  val_e := [nxt, 1-nxt] ->
         (rvprev02.arr_c[0+3*idx+15*4 - 22*2], rvprev02.arr_d[0+3*idx+15*4 - 22*3]);
  unpack_e := ToBits<BLEN()>(val_e);
  FromBits<BLEN()>(unpack_e) = val_e;

  unpack_a2 := ToBits<SLEN()>(rvprev02.arr_a[1+3*idx+15*0]);
  FromBits<SLEN()>(unpack_a2) = rvprev02.arr_a[1+3*idx+15*0];

  val_b2 := [nxt, 1-nxt] ->
         (rvprev02.arr_a[1+3*idx+15*1], rvprev02.arr_b[1+3*idx+15*1 - 22*1]);
  unpack_b2 := ToBits<SLEN()>(val_b2);
  FromBits<SLEN()>(unpack_b2) = val_b2;

  unpack_c2 := ToBits<SLEN()>(rvprev02.arr_b[1+3*idx+15*2 - 22*1]);
  FromBits<SLEN()>(unpack_c2) = rvprev02.arr_b[1+3*idx+15*2 - 22*1];

  xor_abcd := for i : 0..BLEN() {
    Reg(xor2(rvprev01.arr_a[i], rvprev01.arr_b[i])) };

  xor_ab2 := for i : 0..SLEN() {
    Reg(xor2(unpack_a2[i], unpack_b2[i])) };

  xor_vals := for i : 0..BLEN() {
    xor2(xor_abcd[i], unpack_e[i]) };
  result := Reg(FromBits<BLEN()>(xor_vals));
  withr_ab2 := ConcatElem<Val,SLEN()>(xor_ab2, result); //super of Reg and NondetReg

  padded_c2 := ConcatZeros<SLEN(),RLEN()-SLEN()>(unpack_c2);
  RetTuple(xor_abcd, unpack_e, withr_ab2, padded_c2, 2, idx)
}

component xor5words_inner2<idx: Val>(rvprev01: RetTuple, rvprev03: RetTuple) {
  unpack_d2 := ToBits<SLEN()>(rvprev03.arr_c[1+3*idx+15*3 - 22*2]);
  FromBits<SLEN()>(unpack_d2) = rvprev03.arr_c[1+3*idx+15*3 - 22*2];

  nxt := Isz(idx)+Isz(idx-1);
  val_e2 := [nxt, 1-nxt] ->
          (rvprev03.arr_c[1+3*idx+15*4 - 22*2], rvprev03.arr_d[1+3*idx+15*4 - 22*3]);
  unpack_e2 := ToBits<SLEN()>(val_e2);
  FromBits<SLEN()>(unpack_e2) = val_e2;

  unpack_a3 := ToBits<SLEN()>(rvprev03.arr_a[2+3*idx+15*0]);
  FromBits<SLEN()>(unpack_a3) = rvprev03.arr_a[2+3*idx+15*0];

  val_b3 := [nxt, 1-nxt] ->
          (rvprev03.arr_a[2+3*idx+15*1], rvprev03.arr_b[2+3*idx+15*1 - 22*1]);
  unpack_b3 := ToBits<SLEN()>(val_b3);
  FromBits<SLEN()>(unpack_b3) = val_b3;

  xor_cd2 := for i : 0..SLEN() {
    Reg(xor2(rvprev01.arr_d[i], unpack_d2[i])) };

  xor_abcd2 := for i : 0..SLEN() {
    Reg(xor2(rvprev01.arr_c[i], xor_cd2[i])) };

  xor_vals := for i : 0..SLEN() {
    xor2(xor_abcd2[i], unpack_e2[i]) };
  result := Reg(FromBits<SLEN()>(xor_vals));

  withr_a3 := ConcatElem<Val,SLEN()>(unpack_a3, result);
  padded_b3 := ConcatZeros<SLEN(),RLEN()-SLEN()>(unpack_b3);
  withr_cd2 := ConcatElem<Val,SLEN()>(xor_cd2, rvprev01.arr_c[BLEN()-1]);
  padded_abcd2 := ConcatZeros<SLEN(),BLEN()-SLEN()>(xor_abcd2);
  RetTuple(padded_abcd2, withr_cd2, withr_a3, padded_b3, 3, idx)
}

component xor5words_inner3<idx: Val>(rvprev01: RetTuple, rvprev04: RetTuple) {
  val_c3 := [1-Isz(4-idx), Isz(4-idx)] ->
           (rvprev04.arr_b[2+3*idx+15*2 - 22*1], rvprev04.arr_c[2+3*idx+15*2 - 22*2]);
  unpack_c3 := ToBits<SLEN()>(val_c3);
  FromBits<SLEN()>(unpack_c3) = val_c3;

  unpack_d3 := ToBits<SLEN()>(rvprev04.arr_c[2+3*idx+15*3 - 22*2]);
  FromBits<SLEN()>(unpack_d3) = rvprev04.arr_c[2+3*idx+15*3 - 22*2];

  nxt := Isz(idx)+Isz(idx-1);
  val_e3 := [nxt, 1-nxt] ->
         (rvprev04.arr_c[2+3*idx+15*4 - 22*2], rvprev04.arr_d[2+3*idx+15*4 - 22*3]);
  unpack_e3 := ToBits<SLEN()>(val_e3);
  FromBits<SLEN()>(unpack_e3) = val_e3;

  xor_ab3 := for i : 0..SLEN() {
    Reg(xor2(rvprev01.arr_c[i], rvprev01.arr_d[i])) };

  xor_cd3 := for i : 0..SLEN() {
    Reg(xor2(unpack_c3[i], unpack_d3[i])) };

  xor_abcd3 := for i : 0..SLEN() {
    Reg(xor2(xor_ab3[i], xor_cd3[i])) };

  xor_vals := for i : 0..SLEN() {
    xor2(xor_abcd3[i], unpack_e3[i]) };
  result := Reg(FromBits<SLEN()>(xor_vals));

  withr_cd3 := ConcatElem<Val,SLEN()>(xor_cd3, result);
  withr_ab3 := ConcatElem<Val,SLEN()>(xor_ab3, rvprev01.arr_c[BLEN()-1]);
  withr_abcd3 := ConcatElem<Val,SLEN()>(xor_abcd3, rvprev01.arr_b[BLEN()-1]);
  padded_c3 := ConcatZeros<SLEN(),RLEN()-SLEN()>(unpack_c3);

  RetTuple(withr_abcd3, withr_ab3, withr_cd3, padded_c3, 4, idx)
}

component xor5words_inner4<idx: Val>(rvprev01: RetTuple, rvprev05: RetTuple) {
  inp_a := for i : 0..BLEN() { Reg(rvprev05.arr_a[i]) };
  inp_b := for i : 0..BLEN() { Reg(rvprev05.arr_b[i]) };
  inp_c := for i : 0..BLEN() { Reg(rvprev05.arr_c[i]) };
  tmp_1 := for i : 0..INPLEN()-BLEN()*3+3*idx { Reg(rvprev05.arr_d[i]) };
  tmp_2 := ConcatElem<Val,INPLEN()-BLEN()*3+3*idx>(tmp_1, Reg(rvprev01.arr_a[BLEN()-1]));
  tmp_3 := ConcatElem<Val,INPLEN()-BLEN()*3+3*idx+1>(tmp_2, Reg(rvprev01.arr_b[BLEN()-1]));
  tmp_4 := ConcatElem<Val,INPLEN()-BLEN()*3+3*idx+2>(tmp_3, Reg(rvprev01.arr_c[BLEN()-1]));
  inp_d := ConcatZeros<INPLEN()-BLEN()*3+3*(idx+1),EREGLEN()-3*(idx+1)>(tmp_4);
  RetTuple(inp_a, inp_b, inp_c, inp_d, 0, idx+1)
}

component xor5words_outer<idx: Val>(inner_onehot: Array<Val, 5>, rvprev01: RetTuple,
            rvprev02: RetTuple, rvprev03: RetTuple, rvprev04: RetTuple, rvprev05: RetTuple) {
  inner_onehot -> (
    xor5words_inner0<idx>(rvprev01),
    xor5words_inner1<idx>(rvprev01, rvprev02),
    xor5words_inner2<idx>(rvprev01, rvprev03),
    xor5words_inner3<idx>(rvprev01, rvprev04),
    xor5words_inner4<idx>(rvprev01, rvprev05)
  )
}

component fstep(rvprev01: RetTuple, rvprev02: RetTuple, rvprev03: RetTuple,
                rvprev04: RetTuple, rvprev05: RetTuple) {
  outer_onehot := OneHot<5>(rvprev01.outer);
  inner_onehot := OneHot<5>(rvprev01.inner);
  outer_onehot -> (
    xor5words_outer<0>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05),
    xor5words_outer<1>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05),
    xor5words_outer<2>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05),
    xor5words_outer<3>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05),
    xor5words_outer<4>(inner_onehot, rvprev01, rvprev02, rvprev03, rvprev04, rvprev05)
  )
}

component fill_input(inp_vals: Array<Val, INPLEN()>) {
  inp_a := for i : 0..BLEN() { Reg(inp_vals[i]) };
  inp_b := for i : BLEN()..BLEN()*2 { Reg(inp_vals[i]) };
  inp_c := for i : BLEN()*2..BLEN()*3 { Reg(inp_vals[i]) };
  tmp := for i : BLEN()*3..INPLEN() { Reg(inp_vals[i]) };
  inp_d := ConcatZeros<INPLEN()-BLEN()*3, EREGLEN()>(tmp);
  inner_counter := 0;
  outer_counter := 0;
  RetTuple(inp_a, inp_b, inp_c, inp_d, inner_counter, outer_counter)
}

component fkeccak(inp_vals: Array<Val, INPLEN()>) {
  retvals : RetTuple;
  PC := NondetReg( GetCycle() );

  round := [Isz(PC), 1-Isz(PC)];
  retvals := round -> (
    fill_input(inp_vals),
    fstep(retvals@1, retvals@2, retvals@3, retvals@4, retvals@5)
  );
}

test XOR525001 {
  arr := for i : 0..75 { (999+7*i)*(977-9*i) };
  x := fkeccak(arr);
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+0]-1032419) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+1]-933460) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+2]-923463) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+3]-913348) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+4]-907779) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+5]-890364) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+6]-862151) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+7]-885564) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+8]-865667) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+9]-881540) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+10]-182855) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+11]-350868) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+12]-437603) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+13]-417612) = 0;
  Isz(5-x.retvals.outer)*Isz(x.retvals.inner)*(x.retvals.arr_d[9+14]-401447) = 0;
}
