NondetRegStruct
back_NondetReg(ExecContext& ctx, Index distance0, BoundLayout<NondetRegLayout> layout1) {
  NondetRegStruct x2 = NondetRegStruct{._super = LOAD(LAYOUT_LOOKUP(layout1, _super), distance0)};
  return x2;
}
NondetRegStruct exec_NondetReg(ExecContext& ctx, Val arg0, BoundLayout<NondetRegLayout> layout1) {
  BoundLayout<Reg> x2 = LAYOUT_LOOKUP(layout1, _super);
  STORE(x2, arg0);
  return NondetRegStruct{._super = LOAD(x2, 0)};
}
NondetRegStruct back_Reg(ExecContext& ctx, Index distance0, BoundLayout<NondetRegLayout> layout1) {
  // Reg(<preamble>:4)
  NondetRegStruct x2 = back_NondetReg(ctx, distance0, layout1);
  return x2;
}
NondetRegStruct exec_Reg(ExecContext& ctx, Val arg0, BoundLayout<NondetRegLayout> layout1) {
  NondetRegStruct x2 = exec_NondetReg(ctx, arg0, layout1);
  // Reg(<preamble>:5)
  EQZ((arg0 - x2._super), "Reg(<preamble>:5)");
  return x2;
}
NondetRegStruct
exec_NondetBitReg(ExecContext& ctx, Val arg0, BoundLayout<NondetRegLayout> layout1) {
  // NondetBitReg(zirgen/circuit/keccak/bits.zir:11)
  NondetRegStruct x2 = exec_NondetReg(ctx, arg0, layout1);
  Val x3 = x2._super;
  // AssertBit(zirgen/circuit/keccak/bits.zir:6)
  // NondetBitReg(zirgen/circuit/keccak/bits.zir:12)
  EQZ((x3 * (Val(1) - x3)),
      "loc(callsite( AssertBit ( zirgen/circuit/keccak/bits.zir :6:20) at  NondetBitReg ( "
      "zirgen/circuit/keccak/bits.zir :12:13)))");
  return x2;
}
UseOnceMemoryElementStruct
exec_UseOnceMemoryElement(ExecContext& ctx,
                          Val arg0,
                          Val arg1,
                          MemDigestStruct arg2,
                          BoundLayout<UseOnceMemoryElementLayout> layout3) {
  // UseOnceMemoryElement(zirgen/circuit/keccak/sha256_for_keccak.zir:17)
  NondetRegStruct x4 = exec_NondetReg(ctx, arg0, LAYOUT_LOOKUP(layout3, count));
  // UseOnceMemoryElement(zirgen/circuit/keccak/sha256_for_keccak.zir:18)
  NondetRegStruct x5 = exec_NondetReg(ctx, arg1, LAYOUT_LOOKUP(layout3, index));
  // UseOnceMemoryElement(zirgen/circuit/keccak/sha256_for_keccak.zir:16)
  Val4Array x6 = arg2._super;
  // UseOnceMemoryElement(zirgen/circuit/keccak/sha256_for_keccak.zir:20)
  NondetRegStruct x7 = exec_NondetReg(ctx, x6[0], LAYOUT_LOOKUP(layout3, _0));
  NondetRegStruct x8 = exec_NondetReg(ctx, x6[1], LAYOUT_LOOKUP(layout3, _1));
  NondetRegStruct x9 = exec_NondetReg(ctx, x6[2], LAYOUT_LOOKUP(layout3, _2));
  NondetRegStruct x10 = exec_NondetReg(ctx, x6[3], LAYOUT_LOOKUP(layout3, _3));
  return UseOnceMemoryElementStruct{
      .count = x4, .index = x5, .digest = NondetRegStruct4Array{x7, x8, x9, x10}};
}
ReadMemoryStruct
exec_ReadMemory(ExecContext& ctx, Val arg0, BoundLayout<ReadMemoryLayout> layout1) {
  // ReadMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:24)
  Val x2 = (arg0 * Val(4));
  // SimpleMemoryPeek(zirgen/circuit/keccak/sha256_for_keccak.zir:5)
  Val x3 = INVOKE_EXTERN(ctx, simpleMemoryPeek, x2);
  Val x4 = INVOKE_EXTERN(ctx, simpleMemoryPeek, (x2 + Val(1)));
  Val x5 = INVOKE_EXTERN(ctx, simpleMemoryPeek, (x2 + Val(2)));
  Val x6 = INVOKE_EXTERN(ctx, simpleMemoryPeek, (x2 + Val(3)));
  // ReadMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:26)
  UseOnceMemoryElementStruct x7 =
      exec_UseOnceMemoryElement(ctx,
                                Val(2013265920),
                                arg0,
                                MemDigestStruct{._super = Val4Array{x3, x4, x5, x6}},
                                LAYOUT_LOOKUP(layout1, elem));
  return ReadMemoryStruct{._super = x7.digest};
}
WriteMemoryStruct exec_WriteMemory(ExecContext& ctx,
                                   Val arg0,
                                   MemDigestStruct arg1,
                                   BoundLayout<WriteMemoryLayout> layout2) {
  // WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:31)
  Val x3 = (arg0 * Val(4));
  // WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:29)
  Val4Array x4 = arg1._super;
  // SimpleMemoryPoke(zirgen/circuit/keccak/sha256_for_keccak.zir:4)
  // WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:31)
  INVOKE_EXTERN(ctx, simpleMemoryPoke, x3, x4[0]);
  INVOKE_EXTERN(ctx, simpleMemoryPoke, (x3 + Val(1)), x4[1]);
  INVOKE_EXTERN(ctx, simpleMemoryPoke, (x3 + Val(2)), x4[2]);
  INVOKE_EXTERN(ctx, simpleMemoryPoke, (x3 + Val(3)), x4[3]);
  // WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:33)
  UseOnceMemoryElementStruct x5 =
      exec_UseOnceMemoryElement(ctx, Val(1), arg0, arg1, LAYOUT_LOOKUP(layout2, elem));
  // WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:34)
  Val x6 = (x5.count._super - Val(1));
  EQZ(x6, "WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:34)");
  // WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:35)
  Val x7 = (x5.index._super - arg0);
  EQZ(x7, "WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:35)");
  // WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:33)
  NondetRegStruct4Array x8 = x5.digest;
  // WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:37)
  Val x9 = (x8[0]._super - x4[0]);
  EQZ(x9, "WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:37)");
  Val x10 = (x8[1]._super - x4[1]);
  EQZ(x10, "WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:37)");
  Val x11 = (x8[2]._super - x4[2]);
  EQZ(x11, "WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:37)");
  Val x12 = (x8[3]._super - x4[3]);
  EQZ(x12, "WriteMemory(zirgen/circuit/keccak/sha256_for_keccak.zir:37)");
  return WriteMemoryStruct{};
}
RetTupleStruct
back_RetTuple(ExecContext& ctx, Index distance0, BoundLayout<RetTupleLayout> layout1) {
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:132)
  Val22Array x2 = Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                             Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                             Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)};
  NondetRegStruct22Array x3 =
      map(x2,
          LAYOUT_LOOKUP(layout1, arrA),
          std::function([&](Val22Array::value_type x4,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x5) {
            NondetRegStruct x6 = back_Reg(ctx, distance0, x5);
            return x6;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:133)
  NondetRegStruct22Array x7 =
      map(x2,
          LAYOUT_LOOKUP(layout1, arrB),
          std::function([&](Val22Array::value_type x8,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x9) {
            NondetRegStruct x10 = back_Reg(ctx, distance0, x9);
            return x10;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:134)
  NondetRegStruct22Array x11 =
      map(x2,
          LAYOUT_LOOKUP(layout1, arrC),
          std::function([&](Val22Array::value_type x12,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x13) {
            NondetRegStruct x14 = back_Reg(ctx, distance0, x13);
            return x14;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:135)
  NondetRegStruct24Array x15 =
      map(Val24Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                     Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                     Val(16), Val(17), Val(18), Val(19), Val(20), Val(21), Val(22), Val(23)},
          LAYOUT_LOOKUP(layout1, arrD),
          std::function([&](Val24Array::value_type x16,
                            BoundLayout<NondetRegLayout24LayoutArray::value_type> x17) {
            NondetRegStruct x18 = back_Reg(ctx, distance0, x17);
            return x18;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:136)
  NondetRegStruct22Array x19 =
      map(x2,
          LAYOUT_LOOKUP(layout1, arrE),
          std::function([&](Val22Array::value_type x20,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x21) {
            NondetRegStruct x22 = back_Reg(ctx, distance0, x21);
            return x22;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:137)
  NondetRegStruct22Array x23 =
      map(x2,
          LAYOUT_LOOKUP(layout1, arrF),
          std::function([&](Val22Array::value_type x24,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x25) {
            NondetRegStruct x26 = back_Reg(ctx, distance0, x25);
            return x26;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:138)
  NondetRegStruct x27 = back_Reg(ctx, distance0, LAYOUT_LOOKUP(layout1, minor));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:139)
  NondetRegStruct x28 = back_Reg(ctx, distance0, LAYOUT_LOOKUP(layout1, major));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:140)
  NondetRegStruct x29 = back_Reg(ctx, distance0, LAYOUT_LOOKUP(layout1, rnd));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:141)
  NondetRegStruct x30 = back_Reg(ctx, distance0, LAYOUT_LOOKUP(layout1, blk));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:142)
  NondetRegStruct x31 = back_Reg(ctx, distance0, LAYOUT_LOOKUP(layout1, midx));
  return RetTupleStruct{.arrA = x3,
                        .arrB = x7,
                        .arrC = x11,
                        .arrD = x15,
                        .arrE = x19,
                        .arrF = x23,
                        .minor = x27,
                        .major = x28,
                        .rnd = x29,
                        .blk = x30,
                        .midx = x31};
}
RetTupleStruct exec_RetTuple(ExecContext& ctx,
                             Val22Array arg0,
                             Val22Array arg1,
                             Val22Array arg2,
                             Val24Array arg3,
                             Val22Array arg4,
                             Val22Array arg5,
                             Val arg6,
                             Val arg7,
                             Val arg8,
                             Val arg9,
                             Val arg10,
                             BoundLayout<RetTupleLayout> layout11) {
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:132)
  NondetRegStruct22Array x12 =
      map(arg0,
          LAYOUT_LOOKUP(layout11, arrA),
          std::function([&](Val22Array::value_type x13,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x14) {
            NondetRegStruct x15 = exec_Reg(ctx, x13, x14);
            return x15;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:133)
  NondetRegStruct22Array x16 =
      map(arg1,
          LAYOUT_LOOKUP(layout11, arrB),
          std::function([&](Val22Array::value_type x17,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x18) {
            NondetRegStruct x19 = exec_Reg(ctx, x17, x18);
            return x19;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:134)
  NondetRegStruct22Array x20 =
      map(arg2,
          LAYOUT_LOOKUP(layout11, arrC),
          std::function([&](Val22Array::value_type x21,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x22) {
            NondetRegStruct x23 = exec_Reg(ctx, x21, x22);
            return x23;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:135)
  NondetRegStruct24Array x24 =
      map(arg3,
          LAYOUT_LOOKUP(layout11, arrD),
          std::function([&](Val24Array::value_type x25,
                            BoundLayout<NondetRegLayout24LayoutArray::value_type> x26) {
            NondetRegStruct x27 = exec_Reg(ctx, x25, x26);
            return x27;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:136)
  NondetRegStruct22Array x28 =
      map(arg4,
          LAYOUT_LOOKUP(layout11, arrE),
          std::function([&](Val22Array::value_type x29,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x30) {
            NondetRegStruct x31 = exec_Reg(ctx, x29, x30);
            return x31;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:137)
  NondetRegStruct22Array x32 =
      map(arg5,
          LAYOUT_LOOKUP(layout11, arrF),
          std::function([&](Val22Array::value_type x33,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x34) {
            NondetRegStruct x35 = exec_Reg(ctx, x33, x34);
            return x35;
          }));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:138)
  NondetRegStruct x36 = exec_Reg(ctx, arg6, LAYOUT_LOOKUP(layout11, minor));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:139)
  NondetRegStruct x37 = exec_Reg(ctx, arg7, LAYOUT_LOOKUP(layout11, major));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:140)
  NondetRegStruct x38 = exec_Reg(ctx, arg8, LAYOUT_LOOKUP(layout11, rnd));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:141)
  NondetRegStruct x39 = exec_Reg(ctx, arg9, LAYOUT_LOOKUP(layout11, blk));
  // RetTuple(zirgen/circuit/keccak/sha256_for_keccak.zir:142)
  NondetRegStruct x40 = exec_Reg(ctx, arg10, LAYOUT_LOOKUP(layout11, midx));
  return RetTupleStruct{.arrA = x12,
                        .arrB = x16,
                        .arrC = x20,
                        .arrD = x24,
                        .arrE = x28,
                        .arrF = x32,
                        .minor = x36,
                        .major = x37,
                        .rnd = x38,
                        .blk = x39,
                        .midx = x40};
}
Pack2Struct execPack2(ExecContext& ctx, Val32Array arg0, BoundLayout<Pack2Layout> layout1) {
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // pack2(zirgen/circuit/keccak/sha256_for_keccak.zir:244)
  Val x2 = (arg0[0] + (arg0[1] * Val(2)));
  Val x3 = ((x2 + (arg0[2] * Val(4))) + (arg0[3] * Val(8)));
  Val x4 = ((x3 + (arg0[4] * Val(16))) + (arg0[5] * Val(32)));
  Val x5 = ((x4 + (arg0[6] * Val(64))) + (arg0[7] * Val(128)));
  Val x6 = ((x5 + (arg0[8] * Val(256))) + (arg0[9] * Val(512)));
  Val x7 = ((x6 + (arg0[10] * Val(1024))) + (arg0[11] * Val(2048)));
  Val x8 = ((x7 + (arg0[12] * Val(4096))) + (arg0[13] * Val(8192)));
  Val x9 = ((x8 + (arg0[14] * Val(16384))) + (arg0[15] * Val(32768)));
  NondetRegStruct x10 = exec_Reg(ctx, x9, LAYOUT_LOOKUP(layout1, low));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // pack2(zirgen/circuit/keccak/sha256_for_keccak.zir:245)
  Val x11 = (arg0[16] + (arg0[17] * Val(2)));
  Val x12 = ((x11 + (arg0[18] * Val(4))) + (arg0[19] * Val(8)));
  Val x13 = ((x12 + (arg0[20] * Val(16))) + (arg0[21] * Val(32)));
  Val x14 = ((x13 + (arg0[22] * Val(64))) + (arg0[23] * Val(128)));
  Val x15 = ((x14 + (arg0[24] * Val(256))) + (arg0[25] * Val(512)));
  Val x16 = ((x15 + (arg0[26] * Val(1024))) + (arg0[27] * Val(2048)));
  Val x17 = ((x16 + (arg0[28] * Val(4096))) + (arg0[29] * Val(8192)));
  Val x18 = ((x17 + (arg0[30] * Val(16384))) + (arg0[31] * Val(32768)));
  NondetRegStruct x19 = exec_Reg(ctx, x18, LAYOUT_LOOKUP(layout1, high));
  // pack2(zirgen/circuit/keccak/sha256_for_keccak.zir:243)
  Pack2Struct x20 = Pack2Struct{
      ._super = TwoShortsStruct{.low = x10._super, .high = x19._super}, .low = x10, .high = x19};
  return x20;
}
TwoShortsStruct execComputeW(ExecContext& ctx,
                             Val32Array arg0,
                             Val32Array arg1,
                             Val32Array arg2,
                             Val32Array arg3,
                             BoundLayout<ComputeWLayout> layout4) {
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  // computeW(zirgen/circuit/keccak/sha256_for_keccak.zir:255)
  Val x5 = (Val(1) - arg2[7]);
  Val x6 = (Val(1) - arg2[18]);
  Val x7 = ((arg2[7] * arg2[18]) + (x5 * x6));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x8 = (Val(1) - arg2[3]);
  Val x9 = ((Val(1) - x7) * x8);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x10 = (Val(1) - arg2[8]);
  Val x11 = (Val(1) - arg2[19]);
  Val x12 = ((arg2[8] * arg2[19]) + (x10 * x11));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x13 = (Val(1) - arg2[4]);
  Val x14 = ((Val(1) - x12) * x13);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x15 = (Val(1) - arg2[9]);
  Val x16 = (Val(1) - arg2[20]);
  Val x17 = ((arg2[9] * arg2[20]) + (x15 * x16));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x18 = (Val(1) - arg2[5]);
  Val x19 = ((Val(1) - x17) * x18);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x20 = (Val(1) - arg2[10]);
  Val x21 = (Val(1) - arg2[21]);
  Val x22 = ((arg2[10] * arg2[21]) + (x20 * x21));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x23 = (Val(1) - arg2[6]);
  Val x24 = ((Val(1) - x22) * x23);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x25 = (Val(1) - arg2[11]);
  Val x26 = (Val(1) - arg2[22]);
  Val x27 = ((arg2[11] * arg2[22]) + (x25 * x26));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x28 = ((Val(1) - x27) * x5);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x29 = (Val(1) - arg2[12]);
  Val x30 = (Val(1) - arg2[23]);
  Val x31 = ((arg2[12] * arg2[23]) + (x29 * x30));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x32 = ((Val(1) - x31) * x10);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x33 = (Val(1) - arg2[13]);
  Val x34 = (Val(1) - arg2[24]);
  Val x35 = ((arg2[13] * arg2[24]) + (x33 * x34));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x36 = ((Val(1) - x35) * x15);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x37 = (Val(1) - arg2[14]);
  Val x38 = (Val(1) - arg2[25]);
  Val x39 = ((arg2[14] * arg2[25]) + (x37 * x38));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x40 = ((Val(1) - x39) * x20);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x41 = (Val(1) - arg2[15]);
  Val x42 = (Val(1) - arg2[26]);
  Val x43 = ((arg2[15] * arg2[26]) + (x41 * x42));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x44 = ((Val(1) - x43) * x25);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x45 = (Val(1) - arg2[16]);
  Val x46 = (Val(1) - arg2[27]);
  Val x47 = ((arg2[16] * arg2[27]) + (x45 * x46));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x48 = ((Val(1) - x47) * x29);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x49 = (Val(1) - arg2[17]);
  Val x50 = (Val(1) - arg2[28]);
  Val x51 = ((arg2[17] * arg2[28]) + (x49 * x50));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x52 = ((Val(1) - x51) * x33);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x53 = (Val(1) - arg2[29]);
  Val x54 = ((arg2[18] * arg2[29]) + (x6 * x53));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x55 = ((Val(1) - x54) * x37);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x56 = (Val(1) - arg2[30]);
  Val x57 = ((arg2[19] * arg2[30]) + (x11 * x56));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x58 = ((Val(1) - x57) * x41);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x59 = (Val(1) - arg2[31]);
  Val x60 = ((arg2[20] * arg2[31]) + (x16 * x59));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x61 = ((Val(1) - x60) * x45);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x62 = (Val(1) - arg2[0]);
  Val x63 = ((arg2[21] * arg2[0]) + (x21 * x62));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x64 = ((Val(1) - x63) * x49);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x65 = (Val(1) - arg2[1]);
  Val x66 = ((arg2[22] * arg2[1]) + (x26 * x65));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x67 = ((Val(1) - x66) * x6);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x68 = (Val(1) - arg2[2]);
  Val x69 = ((arg2[23] * arg2[2]) + (x30 * x68));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x70 = ((Val(1) - x69) * x11);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x71 = ((arg2[24] * arg2[3]) + (x34 * x8));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x72 = ((Val(1) - x71) * x16);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x73 = ((arg2[25] * arg2[4]) + (x38 * x13));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x74 = ((Val(1) - x73) * x21);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x75 = ((arg2[26] * arg2[5]) + (x42 * x18));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x76 = ((Val(1) - x75) * x26);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x77 = ((arg2[27] * arg2[6]) + (x46 * x23));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x78 = ((Val(1) - x77) * x30);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x79 = ((arg2[28] * arg2[7]) + (x50 * x5));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x80 = ((Val(1) - x79) * x34);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x81 = ((arg2[29] * arg2[8]) + (x53 * x10));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x82 = ((Val(1) - x81) * x38);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x83 = ((arg2[30] * arg2[9]) + (x56 * x15));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x84 = ((Val(1) - x83) * x42);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x85 = ((arg2[31] * arg2[10]) + (x59 * x20));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x86 = ((Val(1) - x85) * x46);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x87 = ((arg2[0] * arg2[11]) + (x62 * x25));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x88 = ((Val(1) - x87) * x50);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x89 = ((arg2[1] * arg2[12]) + (x65 * x29));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x90 = ((Val(1) - x89) * x53);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x91 = ((arg2[2] * arg2[13]) + (x68 * x33));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x92 = ((Val(1) - x91) * x56);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x93 = ((arg2[3] * arg2[14]) + (x8 * x37));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x94 = ((Val(1) - x93) * x59);
  Val x95 = ((arg2[4] * arg2[15]) + (x13 * x41));
  Val x96 = ((arg2[5] * arg2[16]) + (x18 * x45));
  Val x97 = ((arg2[6] * arg2[17]) + (x23 * x49));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  // computeW(zirgen/circuit/keccak/sha256_for_keccak.zir:257)
  Val x98 = (Val(1) - arg0[17]);
  Val x99 = (Val(1) - arg0[19]);
  Val x100 = ((arg0[17] * arg0[19]) + (x98 * x99));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x101 = (Val(1) - arg0[10]);
  Val x102 = ((Val(1) - x100) * x101);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x103 = (Val(1) - arg0[18]);
  Val x104 = (Val(1) - arg0[20]);
  Val x105 = ((arg0[18] * arg0[20]) + (x103 * x104));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x106 = (Val(1) - arg0[11]);
  Val x107 = ((Val(1) - x105) * x106);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x108 = (Val(1) - arg0[21]);
  Val x109 = ((arg0[19] * arg0[21]) + (x99 * x108));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x110 = (Val(1) - arg0[12]);
  Val x111 = ((Val(1) - x109) * x110);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x112 = (Val(1) - arg0[22]);
  Val x113 = ((arg0[20] * arg0[22]) + (x104 * x112));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x114 = (Val(1) - arg0[13]);
  Val x115 = ((Val(1) - x113) * x114);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x116 = (Val(1) - arg0[23]);
  Val x117 = ((arg0[21] * arg0[23]) + (x108 * x116));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x118 = (Val(1) - arg0[14]);
  Val x119 = ((Val(1) - x117) * x118);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x120 = (Val(1) - arg0[24]);
  Val x121 = ((arg0[22] * arg0[24]) + (x112 * x120));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x122 = (Val(1) - arg0[15]);
  Val x123 = ((Val(1) - x121) * x122);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x124 = (Val(1) - arg0[25]);
  Val x125 = ((arg0[23] * arg0[25]) + (x116 * x124));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x126 = (Val(1) - arg0[16]);
  Val x127 = ((Val(1) - x125) * x126);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x128 = (Val(1) - arg0[26]);
  Val x129 = ((arg0[24] * arg0[26]) + (x120 * x128));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x130 = ((Val(1) - x129) * x98);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x131 = (Val(1) - arg0[27]);
  Val x132 = ((arg0[25] * arg0[27]) + (x124 * x131));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x133 = ((Val(1) - x132) * x103);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x134 = (Val(1) - arg0[28]);
  Val x135 = ((arg0[26] * arg0[28]) + (x128 * x134));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x136 = ((Val(1) - x135) * x99);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x137 = (Val(1) - arg0[29]);
  Val x138 = ((arg0[27] * arg0[29]) + (x131 * x137));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x139 = ((Val(1) - x138) * x104);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x140 = (Val(1) - arg0[30]);
  Val x141 = ((arg0[28] * arg0[30]) + (x134 * x140));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x142 = ((Val(1) - x141) * x108);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x143 = (Val(1) - arg0[31]);
  Val x144 = ((arg0[29] * arg0[31]) + (x137 * x143));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x145 = ((Val(1) - x144) * x112);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x146 = (Val(1) - arg0[0]);
  Val x147 = ((arg0[30] * arg0[0]) + (x140 * x146));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x148 = ((Val(1) - x147) * x116);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x149 = (Val(1) - arg0[1]);
  Val x150 = ((arg0[31] * arg0[1]) + (x143 * x149));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x151 = ((Val(1) - x150) * x120);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x152 = (Val(1) - arg0[2]);
  Val x153 = ((arg0[0] * arg0[2]) + (x146 * x152));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x154 = ((Val(1) - x153) * x124);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x155 = (Val(1) - arg0[3]);
  Val x156 = ((arg0[1] * arg0[3]) + (x149 * x155));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x157 = ((Val(1) - x156) * x128);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x158 = (Val(1) - arg0[4]);
  Val x159 = ((arg0[2] * arg0[4]) + (x152 * x158));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x160 = ((Val(1) - x159) * x131);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x161 = (Val(1) - arg0[5]);
  Val x162 = ((arg0[3] * arg0[5]) + (x155 * x161));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x163 = ((Val(1) - x162) * x134);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x164 = (Val(1) - arg0[6]);
  Val x165 = ((arg0[4] * arg0[6]) + (x158 * x164));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x166 = ((Val(1) - x165) * x137);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x167 = (Val(1) - arg0[7]);
  Val x168 = ((arg0[5] * arg0[7]) + (x161 * x167));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x169 = ((Val(1) - x168) * x140);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x170 = (Val(1) - arg0[8]);
  Val x171 = ((arg0[6] * arg0[8]) + (x164 * x170));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x172 = ((Val(1) - x171) * x143);
  Val x173 = (Val(1) - arg0[9]);
  Val x174 = ((arg0[7] * arg0[9]) + (x167 * x173));
  Val x175 = ((arg0[8] * arg0[10]) + (x170 * x101));
  Val x176 = ((arg0[9] * arg0[11]) + (x173 * x106));
  Val x177 = ((arg0[10] * arg0[12]) + (x101 * x110));
  Val x178 = ((arg0[11] * arg0[13]) + (x106 * x114));
  Val x179 = ((arg0[12] * arg0[14]) + (x110 * x118));
  Val x180 = ((arg0[13] * arg0[15]) + (x114 * x122));
  Val x181 = ((arg0[14] * arg0[16]) + (x118 * x126));
  Val x182 = ((arg0[15] * arg0[17]) + (x122 * x98));
  Val x183 = ((arg0[16] * arg0[18]) + (x126 * x103));
  // computeW(zirgen/circuit/keccak/sha256_for_keccak.zir:255)
  Val32Array x184 = Val32Array{((x7 * arg2[3]) + x9),    ((x12 * arg2[4]) + x14),
                               ((x17 * arg2[5]) + x19),  ((x22 * arg2[6]) + x24),
                               ((x27 * arg2[7]) + x28),  ((x31 * arg2[8]) + x32),
                               ((x35 * arg2[9]) + x36),  ((x39 * arg2[10]) + x40),
                               ((x43 * arg2[11]) + x44), ((x47 * arg2[12]) + x48),
                               ((x51 * arg2[13]) + x52), ((x54 * arg2[14]) + x55),
                               ((x57 * arg2[15]) + x58), ((x60 * arg2[16]) + x61),
                               ((x63 * arg2[17]) + x64), ((x66 * arg2[18]) + x67),
                               ((x69 * arg2[19]) + x70), ((x71 * arg2[20]) + x72),
                               ((x73 * arg2[21]) + x74), ((x75 * arg2[22]) + x76),
                               ((x77 * arg2[23]) + x78), ((x79 * arg2[24]) + x80),
                               ((x81 * arg2[25]) + x82), ((x83 * arg2[26]) + x84),
                               ((x85 * arg2[27]) + x86), ((x87 * arg2[28]) + x88),
                               ((x89 * arg2[29]) + x90), ((x91 * arg2[30]) + x92),
                               ((x93 * arg2[31]) + x94), (Val(1) - x95),
                               (Val(1) - x96),           (Val(1) - x97)};
  // computeW(zirgen/circuit/keccak/sha256_for_keccak.zir:259)
  Pack2Struct x185 = execPack2(ctx, x184, LAYOUT_LOOKUP(layout4, packS0));
  // computeW(zirgen/circuit/keccak/sha256_for_keccak.zir:257)
  Val32Array x186 = Val32Array{((x100 * arg0[10]) + x102),
                               ((x105 * arg0[11]) + x107),
                               ((x109 * arg0[12]) + x111),
                               ((x113 * arg0[13]) + x115),
                               ((x117 * arg0[14]) + x119),
                               ((x121 * arg0[15]) + x123),
                               ((x125 * arg0[16]) + x127),
                               ((x129 * arg0[17]) + x130),
                               ((x132 * arg0[18]) + x133),
                               ((x135 * arg0[19]) + x136),
                               ((x138 * arg0[20]) + x139),
                               ((x141 * arg0[21]) + x142),
                               ((x144 * arg0[22]) + x145),
                               ((x147 * arg0[23]) + x148),
                               ((x150 * arg0[24]) + x151),
                               ((x153 * arg0[25]) + x154),
                               ((x156 * arg0[26]) + x157),
                               ((x159 * arg0[27]) + x160),
                               ((x162 * arg0[28]) + x163),
                               ((x165 * arg0[29]) + x166),
                               ((x168 * arg0[30]) + x169),
                               ((x171 * arg0[31]) + x172),
                               (Val(1) - x174),
                               (Val(1) - x175),
                               (Val(1) - x176),
                               (Val(1) - x177),
                               (Val(1) - x178),
                               (Val(1) - x179),
                               (Val(1) - x180),
                               (Val(1) - x181),
                               (Val(1) - x182),
                               (Val(1) - x183)};
  // computeW(zirgen/circuit/keccak/sha256_for_keccak.zir:260)
  Pack2Struct x187 = execPack2(ctx, x186, LAYOUT_LOOKUP(layout4, packS1));
  // computeW(zirgen/circuit/keccak/sha256_for_keccak.zir:261)
  Pack2Struct x188 = execPack2(ctx, arg3, LAYOUT_LOOKUP(layout4, _0));
  Pack2Struct x189 = execPack2(ctx, arg1, LAYOUT_LOOKUP(layout4, _1));
  TwoShortsStruct x190 = x189._super;
  // computeW(zirgen/circuit/keccak/sha256_for_keccak.zir:260)
  TwoShortsStruct x191 = x187._super;
  // computeW(zirgen/circuit/keccak/sha256_for_keccak.zir:259)
  TwoShortsStruct x192 = x185._super;
  // add(zirgen/circuit/keccak/sha256_for_keccak.zir:250)
  // computeW(zirgen/circuit/keccak/sha256_for_keccak.zir:261)
  Val x193 = (x192.low + (x190.low + x191.low));
  Val x194 = (x192.high + (x190.high + x191.high));
  TwoShortsStruct x195 = x188._super;
  // TwoShorts(zirgen/circuit/keccak/sha256_for_keccak.zir:204)
  // add(zirgen/circuit/keccak/sha256_for_keccak.zir:250)
  TwoShortsStruct x196 = TwoShortsStruct{.low = (x195.low + x193), .high = (x195.high + x194)};
  return x196;
}
ComputeAEStruct execComputeAE(ExecContext& ctx,
                              Val32Array arg0,
                              Val32Array arg1,
                              Val32Array arg2,
                              Val32Array arg3,
                              Val32Array arg4,
                              Val32Array arg5,
                              Val32Array arg6,
                              Val32Array arg7,
                              Val32Array arg8,
                              TwoShortsStruct arg9,
                              BoundLayout<ComputeAELayout> layout10) {
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:268)
  Val x11 = (Val(1) - arg0[2]);
  Val x12 = (Val(1) - arg0[13]);
  Val x13 = ((arg0[2] * arg0[13]) + (x11 * x12));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x14 = (Val(1) - arg0[22]);
  Val x15 = ((Val(1) - x13) * x14);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x16 = (Val(1) - arg0[3]);
  Val x17 = (Val(1) - arg0[14]);
  Val x18 = ((arg0[3] * arg0[14]) + (x16 * x17));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x19 = (Val(1) - arg0[23]);
  Val x20 = ((Val(1) - x18) * x19);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x21 = (Val(1) - arg0[4]);
  Val x22 = (Val(1) - arg0[15]);
  Val x23 = ((arg0[4] * arg0[15]) + (x21 * x22));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x24 = (Val(1) - arg0[24]);
  Val x25 = ((Val(1) - x23) * x24);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x26 = (Val(1) - arg0[5]);
  Val x27 = (Val(1) - arg0[16]);
  Val x28 = ((arg0[5] * arg0[16]) + (x26 * x27));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x29 = (Val(1) - arg0[25]);
  Val x30 = ((Val(1) - x28) * x29);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x31 = (Val(1) - arg0[6]);
  Val x32 = (Val(1) - arg0[17]);
  Val x33 = ((arg0[6] * arg0[17]) + (x31 * x32));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x34 = (Val(1) - arg0[26]);
  Val x35 = ((Val(1) - x33) * x34);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x36 = (Val(1) - arg0[7]);
  Val x37 = (Val(1) - arg0[18]);
  Val x38 = ((arg0[7] * arg0[18]) + (x36 * x37));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x39 = (Val(1) - arg0[27]);
  Val x40 = ((Val(1) - x38) * x39);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x41 = (Val(1) - arg0[8]);
  Val x42 = (Val(1) - arg0[19]);
  Val x43 = ((arg0[8] * arg0[19]) + (x41 * x42));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x44 = (Val(1) - arg0[28]);
  Val x45 = ((Val(1) - x43) * x44);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x46 = (Val(1) - arg0[9]);
  Val x47 = (Val(1) - arg0[20]);
  Val x48 = ((arg0[9] * arg0[20]) + (x46 * x47));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x49 = (Val(1) - arg0[29]);
  Val x50 = ((Val(1) - x48) * x49);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x51 = (Val(1) - arg0[10]);
  Val x52 = (Val(1) - arg0[21]);
  Val x53 = ((arg0[10] * arg0[21]) + (x51 * x52));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x54 = (Val(1) - arg0[30]);
  Val x55 = ((Val(1) - x53) * x54);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x56 = (Val(1) - arg0[11]);
  Val x57 = ((arg0[11] * arg0[22]) + (x56 * x14));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x58 = (Val(1) - arg0[31]);
  Val x59 = ((Val(1) - x57) * x58);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x60 = (Val(1) - arg0[12]);
  Val x61 = ((arg0[12] * arg0[23]) + (x60 * x19));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x62 = (Val(1) - arg0[0]);
  Val x63 = ((Val(1) - x61) * x62);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x64 = ((arg0[13] * arg0[24]) + (x12 * x24));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x65 = (Val(1) - arg0[1]);
  Val x66 = ((Val(1) - x64) * x65);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x67 = ((arg0[14] * arg0[25]) + (x17 * x29));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x68 = ((Val(1) - x67) * x11);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x69 = ((arg0[15] * arg0[26]) + (x22 * x34));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x70 = ((Val(1) - x69) * x16);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x71 = ((arg0[16] * arg0[27]) + (x27 * x39));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x72 = ((Val(1) - x71) * x21);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x73 = ((arg0[17] * arg0[28]) + (x32 * x44));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x74 = ((Val(1) - x73) * x26);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x75 = ((arg0[18] * arg0[29]) + (x37 * x49));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x76 = ((Val(1) - x75) * x31);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x77 = ((arg0[19] * arg0[30]) + (x42 * x54));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x78 = ((Val(1) - x77) * x36);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x79 = ((arg0[20] * arg0[31]) + (x47 * x58));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x80 = ((Val(1) - x79) * x41);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x81 = ((arg0[21] * arg0[0]) + (x52 * x62));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x82 = ((Val(1) - x81) * x46);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x83 = ((arg0[22] * arg0[1]) + (x14 * x65));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x84 = ((Val(1) - x83) * x51);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x85 = ((arg0[23] * arg0[2]) + (x19 * x11));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x86 = ((Val(1) - x85) * x56);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x87 = ((arg0[24] * arg0[3]) + (x24 * x16));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x88 = ((Val(1) - x87) * x60);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x89 = ((arg0[25] * arg0[4]) + (x29 * x21));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x90 = ((Val(1) - x89) * x12);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x91 = ((arg0[26] * arg0[5]) + (x34 * x26));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x92 = ((Val(1) - x91) * x17);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x93 = ((arg0[27] * arg0[6]) + (x39 * x31));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x94 = ((Val(1) - x93) * x22);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x95 = ((arg0[28] * arg0[7]) + (x44 * x36));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x96 = ((Val(1) - x95) * x27);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x97 = ((arg0[29] * arg0[8]) + (x49 * x41));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x98 = ((Val(1) - x97) * x32);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x99 = ((arg0[30] * arg0[9]) + (x54 * x46));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x100 = ((Val(1) - x99) * x37);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x101 = ((arg0[31] * arg0[10]) + (x58 * x51));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x102 = ((Val(1) - x101) * x42);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x103 = ((arg0[0] * arg0[11]) + (x62 * x56));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x104 = ((Val(1) - x103) * x47);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x105 = ((arg0[1] * arg0[12]) + (x65 * x60));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x106 = ((Val(1) - x105) * x52);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:270)
  Val x107 = (Val(1) - arg4[6]);
  Val x108 = (Val(1) - arg4[11]);
  Val x109 = ((arg4[6] * arg4[11]) + (x107 * x108));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x110 = (Val(1) - arg4[25]);
  Val x111 = ((Val(1) - x109) * x110);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x112 = (Val(1) - arg4[7]);
  Val x113 = (Val(1) - arg4[12]);
  Val x114 = ((arg4[7] * arg4[12]) + (x112 * x113));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x115 = (Val(1) - arg4[26]);
  Val x116 = ((Val(1) - x114) * x115);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x117 = (Val(1) - arg4[8]);
  Val x118 = (Val(1) - arg4[13]);
  Val x119 = ((arg4[8] * arg4[13]) + (x117 * x118));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x120 = (Val(1) - arg4[27]);
  Val x121 = ((Val(1) - x119) * x120);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x122 = (Val(1) - arg4[9]);
  Val x123 = (Val(1) - arg4[14]);
  Val x124 = ((arg4[9] * arg4[14]) + (x122 * x123));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x125 = (Val(1) - arg4[28]);
  Val x126 = ((Val(1) - x124) * x125);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x127 = (Val(1) - arg4[10]);
  Val x128 = (Val(1) - arg4[15]);
  Val x129 = ((arg4[10] * arg4[15]) + (x127 * x128));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x130 = (Val(1) - arg4[29]);
  Val x131 = ((Val(1) - x129) * x130);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x132 = (Val(1) - arg4[16]);
  Val x133 = ((arg4[11] * arg4[16]) + (x108 * x132));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x134 = (Val(1) - arg4[30]);
  Val x135 = ((Val(1) - x133) * x134);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x136 = (Val(1) - arg4[17]);
  Val x137 = ((arg4[12] * arg4[17]) + (x113 * x136));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x138 = (Val(1) - arg4[31]);
  Val x139 = ((Val(1) - x137) * x138);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x140 = (Val(1) - arg4[18]);
  Val x141 = ((arg4[13] * arg4[18]) + (x118 * x140));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x142 = (Val(1) - arg4[0]);
  Val x143 = ((Val(1) - x141) * x142);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x144 = (Val(1) - arg4[19]);
  Val x145 = ((arg4[14] * arg4[19]) + (x123 * x144));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x146 = (Val(1) - arg4[1]);
  Val x147 = ((Val(1) - x145) * x146);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x148 = (Val(1) - arg4[20]);
  Val x149 = ((arg4[15] * arg4[20]) + (x128 * x148));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x150 = (Val(1) - arg4[2]);
  Val x151 = ((Val(1) - x149) * x150);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x152 = (Val(1) - arg4[21]);
  Val x153 = ((arg4[16] * arg4[21]) + (x132 * x152));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x154 = (Val(1) - arg4[3]);
  Val x155 = ((Val(1) - x153) * x154);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x156 = (Val(1) - arg4[22]);
  Val x157 = ((arg4[17] * arg4[22]) + (x136 * x156));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x158 = (Val(1) - arg4[4]);
  Val x159 = ((Val(1) - x157) * x158);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x160 = (Val(1) - arg4[23]);
  Val x161 = ((arg4[18] * arg4[23]) + (x140 * x160));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x162 = (Val(1) - arg4[5]);
  Val x163 = ((Val(1) - x161) * x162);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x164 = (Val(1) - arg4[24]);
  Val x165 = ((arg4[19] * arg4[24]) + (x144 * x164));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x166 = ((Val(1) - x165) * x107);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x167 = ((arg4[20] * arg4[25]) + (x148 * x110));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x168 = ((Val(1) - x167) * x112);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x169 = ((arg4[21] * arg4[26]) + (x152 * x115));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x170 = ((Val(1) - x169) * x117);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x171 = ((arg4[22] * arg4[27]) + (x156 * x120));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x172 = ((Val(1) - x171) * x122);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x173 = ((arg4[23] * arg4[28]) + (x160 * x125));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x174 = ((Val(1) - x173) * x127);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x175 = ((arg4[24] * arg4[29]) + (x164 * x130));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x176 = ((Val(1) - x175) * x108);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x177 = ((arg4[25] * arg4[30]) + (x110 * x134));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x178 = ((Val(1) - x177) * x113);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x179 = ((arg4[26] * arg4[31]) + (x115 * x138));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x180 = ((Val(1) - x179) * x118);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x181 = ((arg4[27] * arg4[0]) + (x120 * x142));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x182 = ((Val(1) - x181) * x123);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x183 = ((arg4[28] * arg4[1]) + (x125 * x146));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x184 = ((Val(1) - x183) * x128);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x185 = ((arg4[29] * arg4[2]) + (x130 * x150));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x186 = ((Val(1) - x185) * x132);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x187 = ((arg4[30] * arg4[3]) + (x134 * x154));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x188 = ((Val(1) - x187) * x136);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x189 = ((arg4[31] * arg4[4]) + (x138 * x158));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x190 = ((Val(1) - x189) * x140);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x191 = ((arg4[0] * arg4[5]) + (x142 * x162));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x192 = ((Val(1) - x191) * x144);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x193 = ((arg4[1] * arg4[6]) + (x146 * x107));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x194 = ((Val(1) - x193) * x148);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x195 = ((arg4[2] * arg4[7]) + (x150 * x112));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x196 = ((Val(1) - x195) * x152);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x197 = ((arg4[3] * arg4[8]) + (x154 * x117));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x198 = ((Val(1) - x197) * x156);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x199 = ((arg4[4] * arg4[9]) + (x158 * x122));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x200 = ((Val(1) - x199) * x160);
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:226)
  Val x201 = ((arg4[5] * arg4[10]) + (x162 * x127));
  // xor3a(zirgen/circuit/keccak/sha256_for_keccak.zir:227)
  Val x202 = ((Val(1) - x201) * x164);
  // ch(zirgen/circuit/keccak/sha256_for_keccak.zir:240)
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:272)
  Val x203 = ((arg4[0] * arg5[0]) + (x142 * arg6[0]));
  Val x204 = ((arg4[1] * arg5[1]) + (x146 * arg6[1]));
  Val x205 = ((arg4[2] * arg5[2]) + (x150 * arg6[2]));
  Val x206 = ((arg4[3] * arg5[3]) + (x154 * arg6[3]));
  Val x207 = ((arg4[4] * arg5[4]) + (x158 * arg6[4]));
  Val x208 = ((arg4[5] * arg5[5]) + (x162 * arg6[5]));
  Val x209 = ((arg4[6] * arg5[6]) + (x107 * arg6[6]));
  Val x210 = ((arg4[7] * arg5[7]) + (x112 * arg6[7]));
  Val x211 = ((arg4[8] * arg5[8]) + (x117 * arg6[8]));
  Val x212 = ((arg4[9] * arg5[9]) + (x122 * arg6[9]));
  Val x213 = ((arg4[10] * arg5[10]) + (x127 * arg6[10]));
  Val x214 = ((arg4[11] * arg5[11]) + (x108 * arg6[11]));
  Val x215 = ((arg4[12] * arg5[12]) + (x113 * arg6[12]));
  Val x216 = ((arg4[13] * arg5[13]) + (x118 * arg6[13]));
  Val x217 = ((arg4[14] * arg5[14]) + (x123 * arg6[14]));
  Val x218 = ((arg4[15] * arg5[15]) + (x128 * arg6[15]));
  Val x219 = ((arg4[16] * arg5[16]) + (x132 * arg6[16]));
  Val x220 = ((arg4[17] * arg5[17]) + (x136 * arg6[17]));
  Val x221 = ((arg4[18] * arg5[18]) + (x140 * arg6[18]));
  Val x222 = ((arg4[19] * arg5[19]) + (x144 * arg6[19]));
  Val x223 = ((arg4[20] * arg5[20]) + (x148 * arg6[20]));
  Val x224 = ((arg4[21] * arg5[21]) + (x152 * arg6[21]));
  Val x225 = ((arg4[22] * arg5[22]) + (x156 * arg6[22]));
  Val x226 = ((arg4[23] * arg5[23]) + (x160 * arg6[23]));
  Val x227 = ((arg4[24] * arg5[24]) + (x164 * arg6[24]));
  Val x228 = ((arg4[25] * arg5[25]) + (x110 * arg6[25]));
  Val x229 = ((arg4[26] * arg5[26]) + (x115 * arg6[26]));
  Val x230 = ((arg4[27] * arg5[27]) + (x120 * arg6[27]));
  Val x231 = ((arg4[28] * arg5[28]) + (x125 * arg6[28]));
  Val x232 = ((arg4[29] * arg5[29]) + (x130 * arg6[29]));
  Val x233 = ((arg4[30] * arg5[30]) + (x134 * arg6[30]));
  Val x234 = ((arg4[31] * arg5[31]) + (x138 * arg6[31]));
  Pack2Struct x235 =
      execPack2(ctx,
                Val32Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                           x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224,
                           x225, x226, x227, x228, x229, x230, x231, x232, x233, x234},
                LAYOUT_LOOKUP(layout10, packCh));
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:273)
  Pack2Struct x236 = execPack2(ctx, arg8, LAYOUT_LOOKUP(layout10, _0));
  Pack2Struct x237 = execPack2(ctx, arg7, LAYOUT_LOOKUP(layout10, _1));
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:270)
  Val32Array x238 =
      Val32Array{((x109 * arg4[25]) + x111), ((x114 * arg4[26]) + x116), ((x119 * arg4[27]) + x121),
                 ((x124 * arg4[28]) + x126), ((x129 * arg4[29]) + x131), ((x133 * arg4[30]) + x135),
                 ((x137 * arg4[31]) + x139), ((x141 * arg4[0]) + x143),  ((x145 * arg4[1]) + x147),
                 ((x149 * arg4[2]) + x151),  ((x153 * arg4[3]) + x155),  ((x157 * arg4[4]) + x159),
                 ((x161 * arg4[5]) + x163),  ((x165 * arg4[6]) + x166),  ((x167 * arg4[7]) + x168),
                 ((x169 * arg4[8]) + x170),  ((x171 * arg4[9]) + x172),  ((x173 * arg4[10]) + x174),
                 ((x175 * arg4[11]) + x176), ((x177 * arg4[12]) + x178), ((x179 * arg4[13]) + x180),
                 ((x181 * arg4[14]) + x182), ((x183 * arg4[15]) + x184), ((x185 * arg4[16]) + x186),
                 ((x187 * arg4[17]) + x188), ((x189 * arg4[18]) + x190), ((x191 * arg4[19]) + x192),
                 ((x193 * arg4[20]) + x194), ((x195 * arg4[21]) + x196), ((x197 * arg4[22]) + x198),
                 ((x199 * arg4[23]) + x200), ((x201 * arg4[24]) + x202)};
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:273)
  Pack2Struct x239 = execPack2(ctx, x238, LAYOUT_LOOKUP(layout10, _2));
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:272)
  TwoShortsStruct x240 = x235._super;
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:273)
  TwoShortsStruct x241 = x239._super;
  TwoShortsStruct x242 = x237._super;
  // add(zirgen/circuit/keccak/sha256_for_keccak.zir:250)
  Val x243 = (x242.low + (x240.low + x241.low));
  Val x244 = (x242.high + (x240.high + x241.high));
  TwoShortsStruct x245 = x236._super;
  // add(zirgen/circuit/keccak/sha256_for_keccak.zir:250)
  Val x246 = (x245.low + (arg9.low + x243));
  Val x247 = (x245.high + (arg9.high + x244));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:274)
  Val x248 = (arg0[0] * arg1[0]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x249 = (arg0[0] * (Val(1) - arg1[0]));
  Val x250 = (((x248 * (Val(1) - arg2[0])) + (x249 * arg2[0])) + ((x62 * arg1[0]) * arg2[0]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x251 = (arg0[1] * arg1[1]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x252 = (arg0[1] * (Val(1) - arg1[1]));
  Val x253 = (((x251 * (Val(1) - arg2[1])) + (x252 * arg2[1])) + ((x65 * arg1[1]) * arg2[1]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x254 = (arg0[2] * arg1[2]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x255 = (arg0[2] * (Val(1) - arg1[2]));
  Val x256 = (((x254 * (Val(1) - arg2[2])) + (x255 * arg2[2])) + ((x11 * arg1[2]) * arg2[2]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x257 = (arg0[3] * arg1[3]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x258 = (arg0[3] * (Val(1) - arg1[3]));
  Val x259 = (((x257 * (Val(1) - arg2[3])) + (x258 * arg2[3])) + ((x16 * arg1[3]) * arg2[3]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x260 = (arg0[4] * arg1[4]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x261 = (arg0[4] * (Val(1) - arg1[4]));
  Val x262 = (((x260 * (Val(1) - arg2[4])) + (x261 * arg2[4])) + ((x21 * arg1[4]) * arg2[4]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x263 = (arg0[5] * arg1[5]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x264 = (arg0[5] * (Val(1) - arg1[5]));
  Val x265 = (((x263 * (Val(1) - arg2[5])) + (x264 * arg2[5])) + ((x26 * arg1[5]) * arg2[5]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x266 = (arg0[6] * arg1[6]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x267 = (arg0[6] * (Val(1) - arg1[6]));
  Val x268 = (((x266 * (Val(1) - arg2[6])) + (x267 * arg2[6])) + ((x31 * arg1[6]) * arg2[6]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x269 = (arg0[7] * arg1[7]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x270 = (arg0[7] * (Val(1) - arg1[7]));
  Val x271 = (((x269 * (Val(1) - arg2[7])) + (x270 * arg2[7])) + ((x36 * arg1[7]) * arg2[7]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x272 = (arg0[8] * arg1[8]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x273 = (arg0[8] * (Val(1) - arg1[8]));
  Val x274 = (((x272 * (Val(1) - arg2[8])) + (x273 * arg2[8])) + ((x41 * arg1[8]) * arg2[8]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x275 = (arg0[9] * arg1[9]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x276 = (arg0[9] * (Val(1) - arg1[9]));
  Val x277 = (((x275 * (Val(1) - arg2[9])) + (x276 * arg2[9])) + ((x46 * arg1[9]) * arg2[9]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x278 = (arg0[10] * arg1[10]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x279 = (arg0[10] * (Val(1) - arg1[10]));
  Val x280 = (((x278 * (Val(1) - arg2[10])) + (x279 * arg2[10])) + ((x51 * arg1[10]) * arg2[10]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x281 = (arg0[11] * arg1[11]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x282 = (arg0[11] * (Val(1) - arg1[11]));
  Val x283 = (((x281 * (Val(1) - arg2[11])) + (x282 * arg2[11])) + ((x56 * arg1[11]) * arg2[11]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x284 = (arg0[12] * arg1[12]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x285 = (arg0[12] * (Val(1) - arg1[12]));
  Val x286 = (((x284 * (Val(1) - arg2[12])) + (x285 * arg2[12])) + ((x60 * arg1[12]) * arg2[12]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x287 = (arg0[13] * arg1[13]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x288 = (arg0[13] * (Val(1) - arg1[13]));
  Val x289 = (((x287 * (Val(1) - arg2[13])) + (x288 * arg2[13])) + ((x12 * arg1[13]) * arg2[13]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x290 = (arg0[14] * arg1[14]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x291 = (arg0[14] * (Val(1) - arg1[14]));
  Val x292 = (((x290 * (Val(1) - arg2[14])) + (x291 * arg2[14])) + ((x17 * arg1[14]) * arg2[14]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x293 = (arg0[15] * arg1[15]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x294 = (arg0[15] * (Val(1) - arg1[15]));
  Val x295 = (((x293 * (Val(1) - arg2[15])) + (x294 * arg2[15])) + ((x22 * arg1[15]) * arg2[15]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x296 = (arg0[16] * arg1[16]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x297 = (arg0[16] * (Val(1) - arg1[16]));
  Val x298 = (((x296 * (Val(1) - arg2[16])) + (x297 * arg2[16])) + ((x27 * arg1[16]) * arg2[16]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x299 = (arg0[17] * arg1[17]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x300 = (arg0[17] * (Val(1) - arg1[17]));
  Val x301 = (((x299 * (Val(1) - arg2[17])) + (x300 * arg2[17])) + ((x32 * arg1[17]) * arg2[17]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x302 = (arg0[18] * arg1[18]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x303 = (arg0[18] * (Val(1) - arg1[18]));
  Val x304 = (((x302 * (Val(1) - arg2[18])) + (x303 * arg2[18])) + ((x37 * arg1[18]) * arg2[18]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x305 = (arg0[19] * arg1[19]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x306 = (arg0[19] * (Val(1) - arg1[19]));
  Val x307 = (((x305 * (Val(1) - arg2[19])) + (x306 * arg2[19])) + ((x42 * arg1[19]) * arg2[19]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x308 = (arg0[20] * arg1[20]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x309 = (arg0[20] * (Val(1) - arg1[20]));
  Val x310 = (((x308 * (Val(1) - arg2[20])) + (x309 * arg2[20])) + ((x47 * arg1[20]) * arg2[20]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x311 = (arg0[21] * arg1[21]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x312 = (arg0[21] * (Val(1) - arg1[21]));
  Val x313 = (((x311 * (Val(1) - arg2[21])) + (x312 * arg2[21])) + ((x52 * arg1[21]) * arg2[21]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x314 = (arg0[22] * arg1[22]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x315 = (arg0[22] * (Val(1) - arg1[22]));
  Val x316 = (((x314 * (Val(1) - arg2[22])) + (x315 * arg2[22])) + ((x14 * arg1[22]) * arg2[22]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x317 = (arg0[23] * arg1[23]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x318 = (arg0[23] * (Val(1) - arg1[23]));
  Val x319 = (((x317 * (Val(1) - arg2[23])) + (x318 * arg2[23])) + ((x19 * arg1[23]) * arg2[23]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x320 = (arg0[24] * arg1[24]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x321 = (arg0[24] * (Val(1) - arg1[24]));
  Val x322 = (((x320 * (Val(1) - arg2[24])) + (x321 * arg2[24])) + ((x24 * arg1[24]) * arg2[24]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x323 = (arg0[25] * arg1[25]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x324 = (arg0[25] * (Val(1) - arg1[25]));
  Val x325 = (((x323 * (Val(1) - arg2[25])) + (x324 * arg2[25])) + ((x29 * arg1[25]) * arg2[25]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x326 = (arg0[26] * arg1[26]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x327 = (arg0[26] * (Val(1) - arg1[26]));
  Val x328 = (((x326 * (Val(1) - arg2[26])) + (x327 * arg2[26])) + ((x34 * arg1[26]) * arg2[26]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x329 = (arg0[27] * arg1[27]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x330 = (arg0[27] * (Val(1) - arg1[27]));
  Val x331 = (((x329 * (Val(1) - arg2[27])) + (x330 * arg2[27])) + ((x39 * arg1[27]) * arg2[27]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x332 = (arg0[28] * arg1[28]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x333 = (arg0[28] * (Val(1) - arg1[28]));
  Val x334 = (((x332 * (Val(1) - arg2[28])) + (x333 * arg2[28])) + ((x44 * arg1[28]) * arg2[28]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x335 = (arg0[29] * arg1[29]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x336 = (arg0[29] * (Val(1) - arg1[29]));
  Val x337 = (((x335 * (Val(1) - arg2[29])) + (x336 * arg2[29])) + ((x49 * arg1[29]) * arg2[29]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x338 = (arg0[30] * arg1[30]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x339 = (arg0[30] * (Val(1) - arg1[30]));
  Val x340 = (((x338 * (Val(1) - arg2[30])) + (x339 * arg2[30])) + ((x54 * arg1[30]) * arg2[30]));
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:233)
  Val x341 = (arg0[31] * arg1[31]);
  // maj3(zirgen/circuit/keccak/sha256_for_keccak.zir:234)
  Val x342 = (arg0[31] * (Val(1) - arg1[31]));
  Val x343 = (((x341 * (Val(1) - arg2[31])) + (x342 * arg2[31])) + ((x58 * arg1[31]) * arg2[31]));
  Pack2Struct x344 = execPack2(
      ctx,
      Val32Array{(x250 + (x248 * arg2[0])),  (x253 + (x251 * arg2[1])),  (x256 + (x254 * arg2[2])),
                 (x259 + (x257 * arg2[3])),  (x262 + (x260 * arg2[4])),  (x265 + (x263 * arg2[5])),
                 (x268 + (x266 * arg2[6])),  (x271 + (x269 * arg2[7])),  (x274 + (x272 * arg2[8])),
                 (x277 + (x275 * arg2[9])),  (x280 + (x278 * arg2[10])), (x283 + (x281 * arg2[11])),
                 (x286 + (x284 * arg2[12])), (x289 + (x287 * arg2[13])), (x292 + (x290 * arg2[14])),
                 (x295 + (x293 * arg2[15])), (x298 + (x296 * arg2[16])), (x301 + (x299 * arg2[17])),
                 (x304 + (x302 * arg2[18])), (x307 + (x305 * arg2[19])), (x310 + (x308 * arg2[20])),
                 (x313 + (x311 * arg2[21])), (x316 + (x314 * arg2[22])), (x319 + (x317 * arg2[23])),
                 (x322 + (x320 * arg2[24])), (x325 + (x323 * arg2[25])), (x328 + (x326 * arg2[26])),
                 (x331 + (x329 * arg2[27])), (x334 + (x332 * arg2[28])), (x337 + (x335 * arg2[29])),
                 (x340 + (x338 * arg2[30])), (x343 + (x341 * arg2[31]))},
      LAYOUT_LOOKUP(layout10, packMaj));
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:268)
  Val32Array x345 =
      Val32Array{((x13 * arg0[22]) + x15),   ((x18 * arg0[23]) + x20),  ((x23 * arg0[24]) + x25),
                 ((x28 * arg0[25]) + x30),   ((x33 * arg0[26]) + x35),  ((x38 * arg0[27]) + x40),
                 ((x43 * arg0[28]) + x45),   ((x48 * arg0[29]) + x50),  ((x53 * arg0[30]) + x55),
                 ((x57 * arg0[31]) + x59),   ((x61 * arg0[0]) + x63),   ((x64 * arg0[1]) + x66),
                 ((x67 * arg0[2]) + x68),    ((x69 * arg0[3]) + x70),   ((x71 * arg0[4]) + x72),
                 ((x73 * arg0[5]) + x74),    ((x75 * arg0[6]) + x76),   ((x77 * arg0[7]) + x78),
                 ((x79 * arg0[8]) + x80),    ((x81 * arg0[9]) + x82),   ((x83 * arg0[10]) + x84),
                 ((x85 * arg0[11]) + x86),   ((x87 * arg0[12]) + x88),  ((x89 * arg0[13]) + x90),
                 ((x91 * arg0[14]) + x92),   ((x93 * arg0[15]) + x94),  ((x95 * arg0[16]) + x96),
                 ((x97 * arg0[17]) + x98),   ((x99 * arg0[18]) + x100), ((x101 * arg0[19]) + x102),
                 ((x103 * arg0[20]) + x104), ((x105 * arg0[21]) + x106)};
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:275)
  Pack2Struct x346 = execPack2(ctx, x345, LAYOUT_LOOKUP(layout10, _3));
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:274)
  TwoShortsStruct x347 = x344._super;
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:275)
  TwoShortsStruct x348 = x346._super;
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:276)
  Pack2Struct x349 = execPack2(ctx, arg3, LAYOUT_LOOKUP(layout10, _4));
  TwoShortsStruct x350 = x349._super;
  // computeAE(zirgen/circuit/keccak/sha256_for_keccak.zir:264)
  ComputeAEStruct x351 = ComputeAEStruct{
      .aOut = TwoShortsStruct{.low = (x246 + (x347.low + x348.low)),
                              .high = (x247 + (x347.high + x348.high))},
      .eOut = TwoShortsStruct{.low = (x246 + x350.low), .high = (x247 + x350.high)}};
  return x351;
}
ToBits_19_Struct
exec_ToBits_19_(ExecContext& ctx, Val arg0, BoundLayout<ToBits_19_Layout> layout1) {
  // ToBits(zirgen/circuit/keccak/sha256_for_keccak.zir:80)
  NondetRegStruct19Array x2 = map(
      Val19Array{Val(0),
                 Val(1),
                 Val(2),
                 Val(3),
                 Val(4),
                 Val(5),
                 Val(6),
                 Val(7),
                 Val(8),
                 Val(9),
                 Val(10),
                 Val(11),
                 Val(12),
                 Val(13),
                 Val(14),
                 Val(15),
                 Val(16),
                 Val(17),
                 Val(18)},
      LAYOUT_LOOKUP(layout1, _super),
      std::function([&](Val19Array::value_type x3,
                        BoundLayout<NondetRegLayout19LayoutArray::value_type> x4) {
        // Div(<preamble>:10)
        Val x5 = inv(Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                                Val(16),        Val(32),        Val(64),        Val(128),
                                Val(256),       Val(512),       Val(1024),      Val(2048),
                                Val(4096),      Val(8192),      Val(16384),     Val(32768),
                                Val(65536),     Val(131072),    Val(262144),    Val(524288),
                                Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                                Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                                Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]);
        // Div(<preamble>:11)
        EQZ(((x5 * Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                              Val(16),        Val(32),        Val(64),        Val(128),
                              Val(256),       Val(512),       Val(1024),      Val(2048),
                              Val(4096),      Val(8192),      Val(16384),     Val(32768),
                              Val(65536),     Val(131072),    Val(262144),    Val(524288),
                              Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                              Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                              Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]) -
             Val(1)),
            "loc(callsite( Div ( <preamble> :11:22) at  ToBits ( "
            "zirgen/circuit/keccak/sha256_for_keccak.zir :80:43)))");
        NondetRegStruct x6 = exec_NondetBitReg(
            ctx,
            (x5 *
             bitAnd(arg0,
                    Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                               Val(16),        Val(32),        Val(64),        Val(128),
                               Val(256),       Val(512),       Val(1024),      Val(2048),
                               Val(4096),      Val(8192),      Val(16384),     Val(32768),
                               Val(65536),     Val(131072),    Val(262144),    Val(524288),
                               Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                               Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                               Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)])),
            x4);
        return x6;
      }));
  return ToBits_19_Struct{._super = x2};
}
ToBits_20_Struct
exec_ToBits_20_(ExecContext& ctx, Val arg0, BoundLayout<ToBits_20_Layout> layout1) {
  NondetRegStruct20Array x2 = map(
      Val20Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                 Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                 Val(14), Val(15), Val(16), Val(17), Val(18), Val(19)},
      LAYOUT_LOOKUP(layout1, _super),
      std::function([&](Val20Array::value_type x3,
                        BoundLayout<NondetRegLayout20LayoutArray::value_type> x4) {
        // Div(<preamble>:10)
        Val x5 = inv(Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                                Val(16),        Val(32),        Val(64),        Val(128),
                                Val(256),       Val(512),       Val(1024),      Val(2048),
                                Val(4096),      Val(8192),      Val(16384),     Val(32768),
                                Val(65536),     Val(131072),    Val(262144),    Val(524288),
                                Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                                Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                                Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]);
        // Div(<preamble>:11)
        EQZ(((x5 * Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                              Val(16),        Val(32),        Val(64),        Val(128),
                              Val(256),       Val(512),       Val(1024),      Val(2048),
                              Val(4096),      Val(8192),      Val(16384),     Val(32768),
                              Val(65536),     Val(131072),    Val(262144),    Val(524288),
                              Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                              Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                              Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]) -
             Val(1)),
            "loc(callsite( Div ( <preamble> :11:22) at  ToBits ( "
            "zirgen/circuit/keccak/sha256_for_keccak.zir :80:43)))");
        NondetRegStruct x6 = exec_NondetBitReg(
            ctx,
            (x5 *
             bitAnd(arg0,
                    Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                               Val(16),        Val(32),        Val(64),        Val(128),
                               Val(256),       Val(512),       Val(1024),      Val(2048),
                               Val(4096),      Val(8192),      Val(16384),     Val(32768),
                               Val(65536),     Val(131072),    Val(262144),    Val(524288),
                               Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                               Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                               Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)])),
            x4);
        return x6;
      }));
  return ToBits_20_Struct{._super = x2};
}
Concatenate_NondetReg__16__16_Struct execUnpackWithCarry(
    ExecContext& ctx, Val arg0, Val arg1, BoundLayout<UnpackWithCarryLayout> layout2) {
  // unpack_with_carry(zirgen/circuit/keccak/sha256_for_keccak.zir:280)
  ToBits_19_Struct x3 = exec_ToBits_19_(ctx, arg0, LAYOUT_LOOKUP(layout2, lowBits));
  NondetRegStruct19Array x4 = x3._super;
  Val x5 = x4[0]._super;
  Val x6 = x4[1]._super;
  Val x7 = x4[2]._super;
  Val x8 = x4[3]._super;
  Val x9 = x4[4]._super;
  Val x10 = x4[5]._super;
  Val x11 = x4[6]._super;
  Val x12 = x4[7]._super;
  Val x13 = x4[8]._super;
  Val x14 = x4[9]._super;
  Val x15 = x4[10]._super;
  Val x16 = x4[11]._super;
  Val x17 = x4[12]._super;
  Val x18 = x4[13]._super;
  Val x19 = x4[14]._super;
  Val x20 = x4[15]._super;
  Val x21 = x4[16]._super;
  Val x22 = x4[17]._super;
  Val x23 = x4[18]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // unpack_with_carry(zirgen/circuit/keccak/sha256_for_keccak.zir:281)
  Val x24 = (((x5 + (x6 * Val(2))) + (x7 * Val(4))) + (x8 * Val(8)));
  Val x25 = (((x24 + (x9 * Val(16))) + (x10 * Val(32))) + (x11 * Val(64)));
  Val x26 = (((x25 + (x12 * Val(128))) + (x13 * Val(256))) + (x14 * Val(512)));
  Val x27 = (((x26 + (x15 * Val(1024))) + (x16 * Val(2048))) + (x17 * Val(4096)));
  Val x28 = (((x27 + (x18 * Val(8192))) + (x19 * Val(16384))) + (x20 * Val(32768)));
  Val x29 = (((x28 + (x21 * Val(65536))) + (x22 * Val(131072))) + (x23 * Val(262144)));
  EQZ((x29 - arg0), "unpack_with_carry(zirgen/circuit/keccak/sha256_for_keccak.zir:281)");
  // unpack_with_carry(zirgen/circuit/keccak/sha256_for_keccak.zir:283)
  Val x30 = (arg1 + ((x21 + (x22 * Val(2))) + (x23 * Val(4))));
  // unpack_with_carry(zirgen/circuit/keccak/sha256_for_keccak.zir:284)
  ToBits_20_Struct x31 = exec_ToBits_20_(ctx, x30, LAYOUT_LOOKUP(layout2, highBits));
  NondetRegStruct20Array x32 = x31._super;
  Val x33 = x32[0]._super;
  Val x34 = x32[1]._super;
  Val x35 = x32[2]._super;
  Val x36 = x32[3]._super;
  Val x37 = x32[4]._super;
  Val x38 = x32[5]._super;
  Val x39 = x32[6]._super;
  Val x40 = x32[7]._super;
  Val x41 = x32[8]._super;
  Val x42 = x32[9]._super;
  Val x43 = x32[10]._super;
  Val x44 = x32[11]._super;
  Val x45 = x32[12]._super;
  Val x46 = x32[13]._super;
  Val x47 = x32[14]._super;
  Val x48 = x32[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // unpack_with_carry(zirgen/circuit/keccak/sha256_for_keccak.zir:285)
  Val x49 = (x32[16]._super * Val(65536));
  Val x50 = (x32[17]._super * Val(131072));
  Val x51 = (x32[18]._super * Val(262144));
  Val x52 = (x32[19]._super * Val(524288));
  Val x53 = (((x33 + (x34 * Val(2))) + (x35 * Val(4))) + (x36 * Val(8)));
  Val x54 = (((x53 + (x37 * Val(16))) + (x38 * Val(32))) + (x39 * Val(64)));
  Val x55 = (((x54 + (x40 * Val(128))) + (x41 * Val(256))) + (x42 * Val(512)));
  Val x56 = (((x55 + (x43 * Val(1024))) + (x44 * Val(2048))) + (x45 * Val(4096)));
  Val x57 = (((x56 + (x46 * Val(8192))) + (x47 * Val(16384))) + (x48 * Val(32768)));
  Val x58 = (((x57 + x49) + x50) + x51);
  EQZ(((x58 + x52) - x30), "unpack_with_carry(zirgen/circuit/keccak/sha256_for_keccak.zir:285)");
  // Concatenate(zirgen/circuit/keccak/sha256_for_keccak.zir:88)
  // unpack_with_carry(zirgen/circuit/keccak/sha256_for_keccak.zir:288)
  Concatenate_NondetReg__16__16_Struct x59 = Concatenate_NondetReg__16__16_Struct{
      ._super = Concatenate_NondetReg__16__16__Super_SuperStruct32Array{
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x5},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x6},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x7},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x8},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x9},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x10},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x11},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x12},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x13},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x14},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x15},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x16},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x17},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x18},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x19},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x20},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x33},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x34},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x35},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x36},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x37},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x38},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x39},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x40},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x41},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x42},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x43},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x44},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x45},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x46},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x47},
          Concatenate_NondetReg__16__16__Super_SuperStruct{._super = x48}}};
  return x59;
}
OneHot_16_Struct
exec_OneHot_16_(ExecContext& ctx, Val arg0, BoundLayout<OneHot_16_Layout> layout1) {
  // OneHot(zirgen/circuit/keccak/one_hot.zir:7)
  NondetRegStruct16Array x2 =
      map(Val16Array{Val(0),
                     Val(1),
                     Val(2),
                     Val(3),
                     Val(4),
                     Val(5),
                     Val(6),
                     Val(7),
                     Val(8),
                     Val(9),
                     Val(10),
                     Val(11),
                     Val(12),
                     Val(13),
                     Val(14),
                     Val(15)},
          LAYOUT_LOOKUP(layout1, _super),
          std::function([&](Val16Array::value_type x3,
                            BoundLayout<NondetRegLayout16LayoutArray::value_type> x4) {
            NondetRegStruct x5 = exec_NondetBitReg(ctx, isz((x3 - arg0)), x4);
            return x5;
          }));
  // OneHot(zirgen/circuit/keccak/one_hot.zir:9)
  Val x6 = x2[1]._super;
  Val x7 = (x2[0]._super + x6);
  Val x8 = x2[2]._super;
  Val x9 = x2[3]._super;
  Val x10 = x2[4]._super;
  Val x11 = (((x7 + x8) + x9) + x10);
  Val x12 = x2[5]._super;
  Val x13 = x2[6]._super;
  Val x14 = x2[7]._super;
  Val x15 = (((x11 + x12) + x13) + x14);
  Val x16 = x2[8]._super;
  Val x17 = x2[9]._super;
  Val x18 = x2[10]._super;
  Val x19 = (((x15 + x16) + x17) + x18);
  Val x20 = x2[11]._super;
  Val x21 = x2[12]._super;
  Val x22 = x2[13]._super;
  Val x23 = (((x19 + x20) + x21) + x22);
  Val x24 = x2[14]._super;
  Val x25 = x2[15]._super;
  Val x26 = (((x23 + x24) + x25) - Val(1));
  EQZ(x26, "OneHot(zirgen/circuit/keccak/one_hot.zir:9)");
  // OneHot(zirgen/circuit/keccak/one_hot.zir:11)
  Val x27 = (((x6 + (x8 * Val(2))) + (x9 * Val(3))) + (x10 * Val(4)));
  Val x28 = (((x27 + (x12 * Val(5))) + (x13 * Val(6))) + (x14 * Val(7)));
  Val x29 = (((x28 + (x16 * Val(8))) + (x17 * Val(9))) + (x18 * Val(10)));
  Val x30 = (((x29 + (x20 * Val(11))) + (x21 * Val(12))) + (x22 * Val(13)));
  Val x31 = (((x30 + (x24 * Val(14))) + (x25 * Val(15))) - arg0);
  EQZ(x31, "OneHot(zirgen/circuit/keccak/one_hot.zir:11)");
  return OneHot_16_Struct{._super = x2};
}
ToBits_16_Struct
exec_ToBits_16_(ExecContext& ctx, Val arg0, BoundLayout<ToBits_16_Layout> layout1) {
  // ToBits(zirgen/circuit/keccak/sha256_for_keccak.zir:80)
  NondetRegStruct16Array x2 = map(
      Val16Array{Val(0),
                 Val(1),
                 Val(2),
                 Val(3),
                 Val(4),
                 Val(5),
                 Val(6),
                 Val(7),
                 Val(8),
                 Val(9),
                 Val(10),
                 Val(11),
                 Val(12),
                 Val(13),
                 Val(14),
                 Val(15)},
      LAYOUT_LOOKUP(layout1, _super),
      std::function([&](Val16Array::value_type x3,
                        BoundLayout<NondetRegLayout16LayoutArray::value_type> x4) {
        // Div(<preamble>:10)
        Val x5 = inv(Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                                Val(16),        Val(32),        Val(64),        Val(128),
                                Val(256),       Val(512),       Val(1024),      Val(2048),
                                Val(4096),      Val(8192),      Val(16384),     Val(32768),
                                Val(65536),     Val(131072),    Val(262144),    Val(524288),
                                Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                                Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                                Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]);
        // Div(<preamble>:11)
        EQZ(((x5 * Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                              Val(16),        Val(32),        Val(64),        Val(128),
                              Val(256),       Val(512),       Val(1024),      Val(2048),
                              Val(4096),      Val(8192),      Val(16384),     Val(32768),
                              Val(65536),     Val(131072),    Val(262144),    Val(524288),
                              Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                              Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                              Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]) -
             Val(1)),
            "loc(callsite( Div ( <preamble> :11:22) at  ToBits ( "
            "zirgen/circuit/keccak/sha256_for_keccak.zir :80:43)))");
        NondetRegStruct x6 = exec_NondetBitReg(
            ctx,
            (x5 *
             bitAnd(arg0,
                    Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                               Val(16),        Val(32),        Val(64),        Val(128),
                               Val(256),       Val(512),       Val(1024),      Val(2048),
                               Val(4096),      Val(8192),      Val(16384),     Val(32768),
                               Val(65536),     Val(131072),    Val(262144),    Val(524288),
                               Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                               Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                               Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)])),
            x4);
        return x6;
      }));
  return ToBits_16_Struct{._super = x2};
}
RetTupleStruct execSha256load_0_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256load_0_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_0_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_0__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(12184), .high = Val(17034)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(1),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_1_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256load_1_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_1_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_1__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(17553), .high = Val(28983)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(2),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_2_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256load_2_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_2_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_2__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(64463), .high = Val(46528)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(3),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_3_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256load_3_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_3_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_3__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(56229), .high = Val(59829)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(4),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_4_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256load_4_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_4_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_4__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(49755), .high = Val(14678)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(5),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_5_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256load_5_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_5_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_5__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(4593), .high = Val(23025)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(6),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_6_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256load_6_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_6_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_6__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(33444), .high = Val(37439)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(7),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_7_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256load_7_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_7_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_7__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(24277), .high = Val(43804)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(8),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_8_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256load_8_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_8_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_8__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(43672), .high = Val(55303)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(9),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_9_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256load_9_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_9_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_9__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(23297), .high = Val(4739)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(10),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_10_(ExecContext& ctx,
                                  RetTupleStruct arg0,
                                  BoundLayout<RetTupleLayout> arg1,
                                  BoundLayout<Sha256load_10_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_10_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_10__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(34238), .high = Val(9265)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(11),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_11_(ExecContext& ctx,
                                  RetTupleStruct arg0,
                                  BoundLayout<RetTupleLayout> arg1,
                                  BoundLayout<Sha256load_11_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_11_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_11__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(32195), .high = Val(21772)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(12),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_12_(ExecContext& ctx,
                                  RetTupleStruct arg0,
                                  BoundLayout<RetTupleLayout> arg1,
                                  BoundLayout<Sha256load_12_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_12_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_12__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(23924), .high = Val(29374)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(13),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_13_(ExecContext& ctx,
                                  RetTupleStruct arg0,
                                  BoundLayout<RetTupleLayout> arg1,
                                  BoundLayout<Sha256load_13_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_13_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_13__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(45566), .high = Val(32990)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(14),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_14_(ExecContext& ctx,
                                  RetTupleStruct arg0,
                                  BoundLayout<RetTupleLayout> arg1,
                                  BoundLayout<Sha256load_14_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_14_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_14__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(1703), .high = Val(39900)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:329)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(15),
                    Val(19),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm0));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256load_15_(ExecContext& ctx,
                                  RetTupleStruct arg0,
                                  BoundLayout<RetTupleLayout> arg1,
                                  BoundLayout<Sha256load_15_Layout> layout2) {
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<Sha256load_15_ValsLayout> x3 = LAYOUT_LOOKUP(layout2, vals);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  BoundLayout<Sha256load_15__SuperLayout> x4 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:293)
  RetTupleStruct x6 = back_RetTuple(ctx, 2, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:294)
  RetTupleStruct x7 = back_RetTuple(ctx, 3, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:295)
  RetTupleStruct x8 = back_RetTuple(ctx, 4, arg1);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x9 = x5.midx._super;
  Val x10 = x5.blk._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:298)
  Val x11 = ((x9 + Val(1)) - x10);
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:299)
  NondetRegStruct x12 = exec_NondetReg(ctx, inv(x11), LAYOUT_LOOKUP(layout2, invWithin));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)
  EQZ(((x11 * x12._super) - Val(1)), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:300)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:292)
  Val x13 = x5.rnd._super;
  NondetRegStruct24Array x14 = x5.arrD;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
  BoundLayout<NondetRegLayout> x15 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm1), _extra0), count);
  BoundLayout<Reg> x16 = LAYOUT_LOOKUP(x15, _super);
  Val6Array x17;
  if (to_size_t((Val(1) - x13))) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:303)
    ReadMemoryStruct x18 = exec_ReadMemory(ctx, x10, LAYOUT_LOOKUP(LAYOUT_LOOKUP(x3, arm0), mem));
    NondetRegStruct4Array x19 = x18._super;
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:304)
    Val6Array x20 =
        Val6Array{x19[0]._super, x19[1]._super, x19[2]._super, x19[3]._super, Val(1), x10};
    x17 = x20;
  } else if (to_size_t(x13)) {
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:306)
    Val6Array x21 = Val6Array{x14[0]._super, x14[1]._super, Val(0), Val(0), Val(0), (x10 + Val(1))};
    // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)
    STORE(x16, Val(0));
    EQZ(LOAD(x16, 0), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:302)");
    x17 = x21;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:309)
  ToBits_16_Struct x22 = exec_ToBits_16_(ctx, x17[0], LAYOUT_LOOKUP(layout2, highW));
  NondetRegStruct16Array x23 = x22._super;
  Val x24 = x23[0]._super;
  Val x25 = x23[1]._super;
  Val x26 = x23[2]._super;
  Val x27 = x23[3]._super;
  Val x28 = x23[4]._super;
  Val x29 = x23[5]._super;
  Val x30 = x23[6]._super;
  Val x31 = x23[7]._super;
  Val x32 = x23[8]._super;
  Val x33 = x23[9]._super;
  Val x34 = x23[10]._super;
  Val x35 = x23[11]._super;
  Val x36 = x23[12]._super;
  Val x37 = x23[13]._super;
  Val x38 = x23[14]._super;
  Val x39 = x23[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)
  Val x40 = (((x24 + (x25 * Val(2))) + (x26 * Val(4))) + (x27 * Val(8)));
  Val x41 = (((x40 + (x28 * Val(16))) + (x29 * Val(32))) + (x30 * Val(64)));
  Val x42 = (((x41 + (x31 * Val(128))) + (x32 * Val(256))) + (x33 * Val(512)));
  Val x43 = (((x42 + (x34 * Val(1024))) + (x35 * Val(2048))) + (x36 * Val(4096)));
  Val x44 = (((x43 + (x37 * Val(8192))) + (x38 * Val(16384))) + (x39 * Val(32768)));
  EQZ((x44 - x17[0]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:310)");
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:312)
  ToBits_16_Struct x45 = exec_ToBits_16_(ctx, x17[1], LAYOUT_LOOKUP(layout2, lowW));
  NondetRegStruct16Array x46 = x45._super;
  Val x47 = x46[0]._super;
  Val x48 = x46[1]._super;
  Val x49 = x46[2]._super;
  Val x50 = x46[3]._super;
  Val x51 = x46[4]._super;
  Val x52 = x46[5]._super;
  Val x53 = x46[6]._super;
  Val x54 = x46[7]._super;
  Val x55 = x46[8]._super;
  Val x56 = x46[9]._super;
  Val x57 = x46[10]._super;
  Val x58 = x46[11]._super;
  Val x59 = x46[12]._super;
  Val x60 = x46[13]._super;
  Val x61 = x46[14]._super;
  Val x62 = x46[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)
  Val x63 = (((x47 + (x48 * Val(2))) + (x49 * Val(4))) + (x50 * Val(8)));
  Val x64 = (((x63 + (x51 * Val(16))) + (x52 * Val(32))) + (x53 * Val(64)));
  Val x65 = (((x64 + (x54 * Val(128))) + (x55 * Val(256))) + (x56 * Val(512)));
  Val x66 = (((x65 + (x57 * Val(1024))) + (x58 * Val(2048))) + (x59 * Val(4096)));
  Val x67 = (((x66 + (x60 * Val(8192))) + (x61 * Val(16384))) + (x62 * Val(32768)));
  EQZ((x67 - x17[1]), "sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:313)");
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  NondetRegStruct22Array x68 = x5.arrA;
  NondetRegStruct22Array x69 = x5.arrB;
  NondetRegStruct22Array x70 = x6.arrA;
  NondetRegStruct22Array x71 = x6.arrB;
  NondetRegStruct22Array x72 = x7.arrA;
  NondetRegStruct22Array x73 = x7.arrB;
  NondetRegStruct22Array x74 = x8.arrA;
  NondetRegStruct22Array x75 = x8.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  NondetRegStruct22Array x76 = x5.arrC;
  NondetRegStruct22Array x77 = x6.arrC;
  NondetRegStruct22Array x78 = x7.arrC;
  NondetRegStruct22Array x79 = x8.arrC;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  Val32Array x80 =
      Val32Array{x68[0]._super,  x68[1]._super,  x68[2]._super,  x68[3]._super,  x68[4]._super,
                 x68[5]._super,  x68[6]._super,  x68[7]._super,  x68[8]._super,  x68[9]._super,
                 x68[10]._super, x68[11]._super, x68[12]._super, x68[13]._super, x68[14]._super,
                 x68[15]._super, x68[16]._super, x68[17]._super, x68[18]._super, x68[19]._super,
                 x68[20]._super, x68[21]._super, x69[0]._super,  x69[1]._super,  x69[2]._super,
                 x69[3]._super,  x69[4]._super,  x69[5]._super,  x69[6]._super,  x69[7]._super,
                 x69[8]._super,  x69[9]._super};
  Val32Array x81 =
      Val32Array{x70[0]._super,  x70[1]._super,  x70[2]._super,  x70[3]._super,  x70[4]._super,
                 x70[5]._super,  x70[6]._super,  x70[7]._super,  x70[8]._super,  x70[9]._super,
                 x70[10]._super, x70[11]._super, x70[12]._super, x70[13]._super, x70[14]._super,
                 x70[15]._super, x70[16]._super, x70[17]._super, x70[18]._super, x70[19]._super,
                 x70[20]._super, x70[21]._super, x71[0]._super,  x71[1]._super,  x71[2]._super,
                 x71[3]._super,  x71[4]._super,  x71[5]._super,  x71[6]._super,  x71[7]._super,
                 x71[8]._super,  x71[9]._super};
  Val32Array x82 =
      Val32Array{x72[0]._super,  x72[1]._super,  x72[2]._super,  x72[3]._super,  x72[4]._super,
                 x72[5]._super,  x72[6]._super,  x72[7]._super,  x72[8]._super,  x72[9]._super,
                 x72[10]._super, x72[11]._super, x72[12]._super, x72[13]._super, x72[14]._super,
                 x72[15]._super, x72[16]._super, x72[17]._super, x72[18]._super, x72[19]._super,
                 x72[20]._super, x72[21]._super, x73[0]._super,  x73[1]._super,  x73[2]._super,
                 x73[3]._super,  x73[4]._super,  x73[5]._super,  x73[6]._super,  x73[7]._super,
                 x73[8]._super,  x73[9]._super};
  Val32Array x83 =
      Val32Array{x74[0]._super,  x74[1]._super,  x74[2]._super,  x74[3]._super,  x74[4]._super,
                 x74[5]._super,  x74[6]._super,  x74[7]._super,  x74[8]._super,  x74[9]._super,
                 x74[10]._super, x74[11]._super, x74[12]._super, x74[13]._super, x74[14]._super,
                 x74[15]._super, x74[16]._super, x74[17]._super, x74[18]._super, x74[19]._super,
                 x74[20]._super, x74[21]._super, x75[0]._super,  x75[1]._super,  x75[2]._super,
                 x75[3]._super,  x75[4]._super,  x75[5]._super,  x75[6]._super,  x75[7]._super,
                 x75[8]._super,  x75[9]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:321)
  Val32Array x84 =
      Val32Array{x69[10]._super, x69[11]._super, x69[12]._super, x69[13]._super, x69[14]._super,
                 x69[15]._super, x69[16]._super, x69[17]._super, x69[18]._super, x69[19]._super,
                 x69[20]._super, x69[21]._super, x76[0]._super,  x76[1]._super,  x76[2]._super,
                 x76[3]._super,  x76[4]._super,  x76[5]._super,  x76[6]._super,  x76[7]._super,
                 x76[8]._super,  x76[9]._super,  x76[10]._super, x76[11]._super, x76[12]._super,
                 x76[13]._super, x76[14]._super, x76[15]._super, x76[16]._super, x76[17]._super,
                 x76[18]._super, x76[19]._super};
  Val32Array x85 =
      Val32Array{x71[10]._super, x71[11]._super, x71[12]._super, x71[13]._super, x71[14]._super,
                 x71[15]._super, x71[16]._super, x71[17]._super, x71[18]._super, x71[19]._super,
                 x71[20]._super, x71[21]._super, x77[0]._super,  x77[1]._super,  x77[2]._super,
                 x77[3]._super,  x77[4]._super,  x77[5]._super,  x77[6]._super,  x77[7]._super,
                 x77[8]._super,  x77[9]._super,  x77[10]._super, x77[11]._super, x77[12]._super,
                 x77[13]._super, x77[14]._super, x77[15]._super, x77[16]._super, x77[17]._super,
                 x77[18]._super, x77[19]._super};
  Val32Array x86 =
      Val32Array{x73[10]._super, x73[11]._super, x73[12]._super, x73[13]._super, x73[14]._super,
                 x73[15]._super, x73[16]._super, x73[17]._super, x73[18]._super, x73[19]._super,
                 x73[20]._super, x73[21]._super, x78[0]._super,  x78[1]._super,  x78[2]._super,
                 x78[3]._super,  x78[4]._super,  x78[5]._super,  x78[6]._super,  x78[7]._super,
                 x78[8]._super,  x78[9]._super,  x78[10]._super, x78[11]._super, x78[12]._super,
                 x78[13]._super, x78[14]._super, x78[15]._super, x78[16]._super, x78[17]._super,
                 x78[18]._super, x78[19]._super};
  Val32Array x87 =
      Val32Array{x75[10]._super, x75[11]._super, x75[12]._super, x75[13]._super, x75[14]._super,
                 x75[15]._super, x75[16]._super, x75[17]._super, x75[18]._super, x75[19]._super,
                 x75[20]._super, x75[21]._super, x79[0]._super,  x79[1]._super,  x79[2]._super,
                 x79[3]._super,  x79[4]._super,  x79[5]._super,  x79[6]._super,  x79[7]._super,
                 x79[8]._super,  x79[9]._super,  x79[10]._super, x79[11]._super, x79[12]._super,
                 x79[13]._super, x79[14]._super, x79[15]._super, x79[16]._super, x79[17]._super,
                 x79[18]._super, x79[19]._super};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  ComputeAEStruct x88 = execComputeAE(
      ctx,
      x80,
      x81,
      x82,
      x83,
      x84,
      x85,
      x86,
      x87,
      Val32Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49, x50, x51, x52, x53, x54,
                 x32, x33, x34, x35, x36, x37, x38, x39, x24, x25, x26, x27, x28, x29, x30, x31},
      TwoShortsStruct{.low = Val(61812), .high = Val(49563)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x89 = x88.aOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16_Struct x90 =
      execUnpackWithCarry(ctx, x89.low, x89.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:320)
  TwoShortsStruct x91 = x88.eOut;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16_Struct x92 =
      execUnpackWithCarry(ctx, x91.low, x91.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:323)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x93 = x90._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:324)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x94 = x92._super;
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:326)
  Val22Array x95 =
      Val22Array{x93[0]._super,  x93[1]._super,  x93[2]._super,  x93[3]._super,  x93[4]._super,
                 x93[5]._super,  x93[6]._super,  x93[7]._super,  x93[8]._super,  x93[9]._super,
                 x93[10]._super, x93[11]._super, x93[12]._super, x93[13]._super, x93[14]._super,
                 x93[15]._super, x93[16]._super, x93[17]._super, x93[18]._super, x93[19]._super,
                 x93[20]._super, x93[21]._super};
  Val22Array x96 =
      Val22Array{x93[22]._super, x93[23]._super, x93[24]._super, x93[25]._super, x93[26]._super,
                 x93[27]._super, x93[28]._super, x93[29]._super, x93[30]._super, x93[31]._super,
                 x94[0]._super,  x94[1]._super,  x94[2]._super,  x94[3]._super,  x94[4]._super,
                 x94[5]._super,  x94[6]._super,  x94[7]._super,  x94[8]._super,  x94[9]._super,
                 x94[10]._super, x94[11]._super};
  Val22Array x97 =
      Val22Array{x94[12]._super, x94[13]._super, x94[14]._super, x94[15]._super, x94[16]._super,
                 x94[17]._super, x94[18]._super, x94[19]._super, x94[20]._super, x94[21]._super,
                 x94[22]._super, x94[23]._super, x94[24]._super, x94[25]._super, x94[26]._super,
                 x94[27]._super, x94[28]._super, x94[29]._super, x94[30]._super, x94[31]._super,
                 Val(0),         Val(0)};
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:331)
  RetTupleStruct x98 =
      exec_RetTuple(ctx,
                    x95,
                    x96,
                    x97,
                    Val24Array{x17[2], x17[3], Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x55, x56, x57, x58, x59, x60, x61, x62, x47, x48, x49,
                               x50, x51, x52, x53, x54, x32, x33, x34, x35, x36, x37},
                    Val22Array{x38,    x39,    x24,    x25,    x26,    x27,    x28,    x29,
                               x30,    x31,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(0),
                    Val(20),
                    x17[4],
                    x17[5],
                    x9,
                    LAYOUT_LOOKUP(x4, arm1));
  // sha256load(zirgen/circuit/keccak/sha256_for_keccak.zir:328)
  RetTupleStruct x99 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x4, _super));
  return x99;
}
RetTupleStruct execSha256loadAll(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256loadAllLayout> layout2) {
  // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:337)
  BoundLayout<Sha256loadAll_SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:336)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_16_Struct x5 = exec_OneHot_16_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct16Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:338)
    RetTupleStruct x8 = execSha256load_0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm0));
    x7 = x8;
  } else if (to_size_t(x6[1]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:339)
    RetTupleStruct x9 = execSha256load_1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x9;
  } else if (to_size_t(x6[2]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:340)
    RetTupleStruct x10 = execSha256load_2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x10;
  } else if (to_size_t(x6[3]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:341)
    RetTupleStruct x11 = execSha256load_3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x11;
  } else if (to_size_t(x6[4]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:342)
    RetTupleStruct x12 = execSha256load_4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x12;
  } else if (to_size_t(x6[5]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:343)
    RetTupleStruct x13 = execSha256load_5_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm5));
    x7 = x13;
  } else if (to_size_t(x6[6]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:344)
    RetTupleStruct x14 = execSha256load_6_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm6));
    x7 = x14;
  } else if (to_size_t(x6[7]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:345)
    RetTupleStruct x15 = execSha256load_7_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x15;
  } else if (to_size_t(x6[8]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:346)
    RetTupleStruct x16 = execSha256load_8_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x16;
  } else if (to_size_t(x6[9]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:347)
    RetTupleStruct x17 = execSha256load_9_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm9));
    x7 = x17;
  } else if (to_size_t(x6[10]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:348)
    RetTupleStruct x18 = execSha256load_10_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm10));
    x7 = x18;
  } else if (to_size_t(x6[11]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:349)
    RetTupleStruct x19 = execSha256load_11_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm11));
    x7 = x19;
  } else if (to_size_t(x6[12]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:350)
    RetTupleStruct x20 = execSha256load_12_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm12));
    x7 = x20;
  } else if (to_size_t(x6[13]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:351)
    RetTupleStruct x21 = execSha256load_13_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm13));
    x7 = x21;
  } else if (to_size_t(x6[14]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:352)
    RetTupleStruct x22 = execSha256load_14_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm14));
    x7 = x22;
  } else if (to_size_t(x6[15]._super)) {
    // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:353)
    RetTupleStruct x23 = execSha256load_15_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm15));
    x7 = x23;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256load_all(zirgen/circuit/keccak/sha256_for_keccak.zir:337)
  RetTupleStruct x24 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x24;
}
ToBits_22_Struct
exec_ToBits_22_(ExecContext& ctx, Val arg0, BoundLayout<ToBits_22_Layout> layout1) {
  // ToBits(zirgen/circuit/keccak/sha256_for_keccak.zir:80)
  NondetRegStruct22Array x2 = map(
      Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                 Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                 Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)},
      LAYOUT_LOOKUP(layout1, _super),
      std::function([&](Val22Array::value_type x3,
                        BoundLayout<NondetRegLayout22LayoutArray::value_type> x4) {
        // Div(<preamble>:10)
        Val x5 = inv(Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                                Val(16),        Val(32),        Val(64),        Val(128),
                                Val(256),       Val(512),       Val(1024),      Val(2048),
                                Val(4096),      Val(8192),      Val(16384),     Val(32768),
                                Val(65536),     Val(131072),    Val(262144),    Val(524288),
                                Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                                Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                                Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]);
        // Div(<preamble>:11)
        EQZ(((x5 * Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                              Val(16),        Val(32),        Val(64),        Val(128),
                              Val(256),       Val(512),       Val(1024),      Val(2048),
                              Val(4096),      Val(8192),      Val(16384),     Val(32768),
                              Val(65536),     Val(131072),    Val(262144),    Val(524288),
                              Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                              Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                              Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]) -
             Val(1)),
            "loc(callsite( Div ( <preamble> :11:22) at  ToBits ( "
            "zirgen/circuit/keccak/sha256_for_keccak.zir :80:43)))");
        NondetRegStruct x6 = exec_NondetBitReg(
            ctx,
            (x5 *
             bitAnd(arg0,
                    Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                               Val(16),        Val(32),        Val(64),        Val(128),
                               Val(256),       Val(512),       Val(1024),      Val(2048),
                               Val(4096),      Val(8192),      Val(16384),     Val(32768),
                               Val(65536),     Val(131072),    Val(262144),    Val(524288),
                               Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                               Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                               Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)])),
            x4);
        return x6;
      }));
  return ToBits_22_Struct{._super = x2};
}
ToBits_21_Struct
exec_ToBits_21_(ExecContext& ctx, Val arg0, BoundLayout<ToBits_21_Layout> layout1) {
  NondetRegStruct21Array x2 = map(
      Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                 Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                 Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
      LAYOUT_LOOKUP(layout1, _super),
      std::function([&](Val21Array::value_type x3,
                        BoundLayout<NondetRegLayout21LayoutArray::value_type> x4) {
        // Div(<preamble>:10)
        Val x5 = inv(Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                                Val(16),        Val(32),        Val(64),        Val(128),
                                Val(256),       Val(512),       Val(1024),      Val(2048),
                                Val(4096),      Val(8192),      Val(16384),     Val(32768),
                                Val(65536),     Val(131072),    Val(262144),    Val(524288),
                                Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                                Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                                Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]);
        // Div(<preamble>:11)
        EQZ(((x5 * Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                              Val(16),        Val(32),        Val(64),        Val(128),
                              Val(256),       Val(512),       Val(1024),      Val(2048),
                              Val(4096),      Val(8192),      Val(16384),     Val(32768),
                              Val(65536),     Val(131072),    Val(262144),    Val(524288),
                              Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                              Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                              Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]) -
             Val(1)),
            "loc(callsite( Div ( <preamble> :11:22) at  ToBits ( "
            "zirgen/circuit/keccak/sha256_for_keccak.zir :80:43)))");
        NondetRegStruct x6 = exec_NondetBitReg(
            ctx,
            (x5 *
             bitAnd(arg0,
                    Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                               Val(16),        Val(32),        Val(64),        Val(128),
                               Val(256),       Val(512),       Val(1024),      Val(2048),
                               Val(4096),      Val(8192),      Val(16384),     Val(32768),
                               Val(65536),     Val(131072),    Val(262144),    Val(524288),
                               Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                               Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                               Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)])),
            x4);
        return x6;
      }));
  return ToBits_21_Struct{._super = x2};
}
RetTupleStruct
execIotaXorRc(ExecContext& ctx, RetTupleStruct arg0, BoundLayout<IotaXorRcLayout> layout1) {
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  NondetRegStruct22Array x2 = arg0.arrA;
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  ToBits_22_Struct x3 = exec_ToBits_22_(ctx, x2[0]._super, LAYOUT_LOOKUP(layout1, unpackA000));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  ToBits_21_Struct x4 = exec_ToBits_21_(ctx, x2[1]._super, LAYOUT_LOOKUP(layout1, unpackA001));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  NondetRegStruct24Array x5 = arg0.arrD;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  Val x28 = x5[22]._super;
  Val x29 = x5[23]._super;
  // rctable(zirgen/circuit/keccak/keccak.zir:19)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:812)
  Val22Array x30 = Val22Array{Val(1), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  // rctable(zirgen/circuit/keccak/keccak.zir:20)
  Val22Array x31 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  // rctable(zirgen/circuit/keccak/keccak.zir:22)
  Val22Array3Array x32 =
      Val22Array3Array{Val22Array{Val(0), Val(1), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x31,
                       x31};
  // rctable(zirgen/circuit/keccak/keccak.zir:27)
  Val22Array x33 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(1), Val(0)};
  // rctable(zirgen/circuit/keccak/keccak.zir:25)
  Val22Array3Array x34 =
      Val22Array3Array{Val22Array{Val(0), Val(1), Val(0), Val(1), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x31,
                       x33};
  // rctable(zirgen/circuit/keccak/keccak.zir:29)
  Val22Array x35 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(1), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  // rctable(zirgen/circuit/keccak/keccak.zir:28)
  Val22Array3Array x36 =
      Val22Array3Array{Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x35,
                       x33};
  // rctable(zirgen/circuit/keccak/keccak.zir:31)
  Val22Array x37 = Val22Array{Val(1), Val(1), Val(0), Val(1), Val(0), Val(0), Val(0), Val(1),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  // rctable(zirgen/circuit/keccak/keccak.zir:18)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:813)
  RctableStruct x38 = RctableStruct{._super = Val22Array3Array{x30, x35, x31}};
  // rctable(zirgen/circuit/keccak/keccak.zir:37)
  Val22Array3Array x39 =
      Val22Array3Array{Val22Array{Val(1), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x35,
                       x33};
  // rctable(zirgen/circuit/keccak/keccak.zir:18)
  RctableStruct x40 = RctableStruct{._super = x39};
  // rctable(zirgen/circuit/keccak/keccak.zir:40)
  Val22Array x41 = Val22Array{Val(1), Val(0), Val(0), Val(1), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  // rctable(zirgen/circuit/keccak/keccak.zir:43)
  Val22Array3Array x42 =
      Val22Array3Array{Val22Array{Val(0), Val(1), Val(0), Val(1), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x31,
                       x31};
  // rctable(zirgen/circuit/keccak/keccak.zir:46)
  Val22Array3Array x43 =
      Val22Array3Array{Val22Array{Val(0), Val(0), Val(0), Val(1), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x31,
                       x31};
  // rctable(zirgen/circuit/keccak/keccak.zir:52)
  Val22Array x44 = Val22Array{Val(0), Val(1), Val(0), Val(1), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  // rctable(zirgen/circuit/keccak/keccak.zir:58)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:814)
  Val22Array3Array x45 =
      Val22Array3Array{Val22Array{Val(1), Val(1), Val(0), Val(1), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x31,
                       x33};
  // rctable(zirgen/circuit/keccak/keccak.zir:61)
  Val22Array3Array x46 =
      Val22Array3Array{Val22Array{Val(1), Val(0), Val(0), Val(1), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x31,
                       x33};
  // rctable(zirgen/circuit/keccak/keccak.zir:64)
  Val22Array3Array x47 =
      Val22Array3Array{Val22Array{Val(1), Val(1), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x31,
                       x33};
  // rctable(zirgen/circuit/keccak/keccak.zir:67)
  Val22Array3Array x48 =
      Val22Array3Array{Val22Array{Val(0), Val(1), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x31,
                       x33};
  // rctable(zirgen/circuit/keccak/keccak.zir:70)
  Val22Array3Array x49 =
      Val22Array3Array{Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x31,
                       x33};
  // rctable(zirgen/circuit/keccak/keccak.zir:73)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:815)
  Val22Array3Array x50 =
      Val22Array3Array{Val22Array{Val(0), Val(1), Val(0), Val(1), Val(0), Val(0), Val(0), Val(0),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x31,
                       x31};
  // rctable(zirgen/circuit/keccak/keccak.zir:82)
  Val22Array3Array x51 =
      Val22Array3Array{Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x31,
                       x33};
  // rctable(zirgen/circuit/keccak/keccak.zir:88)
  Val22Array3Array x52 =
      Val22Array3Array{Val22Array{Val(0), Val(0), Val(0), Val(1), Val(0), Val(0), Val(0), Val(0),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(1),
                                  Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                       x35,
                       x33};
  RctableStruct x53;
  if (to_size_t(x6)) {
    x53 = RctableStruct{._super = Val22Array3Array{x30, x31, x31}};
  } else if (to_size_t(x7)) {
    x53 = RctableStruct{._super = x32};
  } else if (to_size_t(x8)) {
    x53 = RctableStruct{._super = x34};
  } else if (to_size_t(x9)) {
    x53 = RctableStruct{._super = x36};
  } else if (to_size_t(x10)) {
    x53 = RctableStruct{._super = Val22Array3Array{x37, x31, x31}};
  } else if (to_size_t(x11)) {
    x53 = x38;
  } else if (to_size_t(x12)) {
    x53 = x40;
  } else if (to_size_t(x13)) {
    x53 = RctableStruct{._super = Val22Array3Array{x41, x31, x33}};
  } else if (to_size_t(x14)) {
    x53 = RctableStruct{._super = x42};
  } else if (to_size_t(x15)) {
    x53 = RctableStruct{._super = x43};
  } else if (to_size_t(x16)) {
    x53 = RctableStruct{._super = Val22Array3Array{x41, x35, x31}};
  } else if (to_size_t(x17)) {
    x53 = RctableStruct{._super = Val22Array3Array{x44, x35, x31}};
  } else if (to_size_t(x18)) {
    x53 = RctableStruct{._super = Val22Array3Array{x37, x35, x31}};
  } else if (to_size_t(x19)) {
    x53 = RctableStruct{._super = x45};
  } else if (to_size_t(x20)) {
    x53 = RctableStruct{._super = x46};
  } else if (to_size_t(x21)) {
    x53 = RctableStruct{._super = x47};
  } else if (to_size_t(x22)) {
    x53 = RctableStruct{._super = x48};
  } else if (to_size_t(x23)) {
    x53 = RctableStruct{._super = x49};
  } else if (to_size_t(x24)) {
    x53 = RctableStruct{._super = x50};
  } else if (to_size_t(x25)) {
    x53 = RctableStruct{._super = Val22Array3Array{x44, x35, x33}};
  } else if (to_size_t(x26)) {
    x53 = x40;
  } else if (to_size_t(x27)) {
    x53 = RctableStruct{._super = x51};
  } else if (to_size_t(x28)) {
    x53 = x38;
  } else if (to_size_t(x29)) {
    x53 = RctableStruct{._super = x52};
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:819)
  BoundLayout<IotaXorRcArm23_SuperLayout> x54 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(layout1, nxt), arm23);
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x55 = arg0.blk._super;
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:823)
  Val x56 = (x55 - Val(1));
  Val3Array x57;
  if (to_size_t(x6)) {
    x57 = Val3Array{Val(0), Val(1), x55};
  } else if (to_size_t(x7)) {
    x57 = Val3Array{Val(0), Val(2), x55};
  } else if (to_size_t(x8)) {
    x57 = Val3Array{Val(0), Val(3), x55};
  } else if (to_size_t(x9)) {
    x57 = Val3Array{Val(0), Val(4), x55};
  } else if (to_size_t(x10)) {
    x57 = Val3Array{Val(0), Val(5), x55};
  } else if (to_size_t(x11)) {
    x57 = Val3Array{Val(0), Val(6), x55};
  } else if (to_size_t(x12)) {
    x57 = Val3Array{Val(0), Val(7), x55};
  } else if (to_size_t(x13)) {
    x57 = Val3Array{Val(0), Val(8), x55};
  } else if (to_size_t(x14)) {
    x57 = Val3Array{Val(0), Val(9), x55};
  } else if (to_size_t(x15)) {
    x57 = Val3Array{Val(0), Val(10), x55};
  } else if (to_size_t(x16)) {
    x57 = Val3Array{Val(0), Val(11), x55};
  } else if (to_size_t(x17)) {
    x57 = Val3Array{Val(0), Val(12), x55};
  } else if (to_size_t(x18)) {
    x57 = Val3Array{Val(0), Val(13), x55};
  } else if (to_size_t(x19)) {
    x57 = Val3Array{Val(0), Val(14), x55};
  } else if (to_size_t(x20)) {
    x57 = Val3Array{Val(0), Val(15), x55};
  } else if (to_size_t(x21)) {
    x57 = Val3Array{Val(0), Val(16), x55};
  } else if (to_size_t(x22)) {
    x57 = Val3Array{Val(0), Val(17), x55};
  } else if (to_size_t(x23)) {
    x57 = Val3Array{Val(0), Val(18), x55};
  } else if (to_size_t(x24)) {
    x57 = Val3Array{Val(0), Val(19), x55};
  } else if (to_size_t(x25)) {
    x57 = Val3Array{Val(0), Val(20), x55};
  } else if (to_size_t(x26)) {
    x57 = Val3Array{Val(0), Val(21), x55};
  } else if (to_size_t(x27)) {
    x57 = Val3Array{Val(0), Val(22), x55};
  } else if (to_size_t(x28)) {
    x57 = Val3Array{Val(0), Val(23), x55};
  } else if (to_size_t(x29)) {
    // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:824)
    NondetRegStruct x58 = exec_NondetReg(ctx, inv(x56), LAYOUT_LOOKUP(x54, invNewBlk));
    // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:825)
    NondetRegStruct x59 = exec_Reg(ctx, (x56 * x58._super), LAYOUT_LOOKUP(x54, prod));
    Val x60 = x59._super;
    // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:826)
    Val x61 = (Val(1) - x60);
    EQZ((x56 * x61), "iota_xor_rc(zirgen/circuit/keccak/keccak.zir:826)");
    Val3Array x62;
    if (to_size_t(x60)) {
      x62 = Val3Array{Val(15), Val(0), x56};
    } else if (to_size_t(x61)) {
      x62 = Val3Array{Val(17), Val(0), Val(0)};
    } else {
      assert(0 && "Reached unreachable mux arm");
    }
    x57 = x62;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:812)
  Val22Array3Array x63 = x53._super;
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  NondetRegStruct22Array x64 = x3._super;
  Val x65 = x64[0]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x66 = (x63[0][0] + x65);
  Val x67 = (x63[0][0] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x68 = x64[1]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x69 = (x63[0][1] + x68);
  Val x70 = (x63[0][1] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x71 = x64[2]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x72 = (x63[0][2] + x71);
  Val x73 = (x63[0][2] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x74 = x64[3]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x75 = (x63[0][3] + x74);
  Val x76 = (x63[0][3] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x77 = x64[4]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x78 = (x63[0][4] + x77);
  Val x79 = (x63[0][4] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x80 = x64[5]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x81 = (x63[0][5] + x80);
  Val x82 = (x63[0][5] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x83 = x64[6]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x84 = (x63[0][6] + x83);
  Val x85 = (x63[0][6] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x86 = x64[7]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x87 = (x63[0][7] + x86);
  Val x88 = (x63[0][7] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x89 = x64[8]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x90 = (x63[0][8] + x89);
  Val x91 = (x63[0][8] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x92 = x64[9]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x93 = (x63[0][9] + x92);
  Val x94 = (x63[0][9] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x95 = x64[10]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x96 = (x63[0][10] + x95);
  Val x97 = (x63[0][10] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x98 = x64[11]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x99 = (x63[0][11] + x98);
  Val x100 = (x63[0][11] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x101 = x64[12]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x102 = (x63[0][12] + x101);
  Val x103 = (x63[0][12] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x104 = x64[13]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x105 = (x63[0][13] + x104);
  Val x106 = (x63[0][13] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x107 = x64[14]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x108 = (x63[0][14] + x107);
  Val x109 = (x63[0][14] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x110 = x64[15]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x111 = (x63[0][15] + x110);
  Val x112 = (x63[0][15] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x113 = x64[16]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x114 = (x63[0][16] + x113);
  Val x115 = (x63[0][16] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x116 = x64[17]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x117 = (x63[0][17] + x116);
  Val x118 = (x63[0][17] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x119 = x64[18]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x120 = (x63[0][18] + x119);
  Val x121 = (x63[0][18] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x122 = x64[19]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x123 = (x63[0][19] + x122);
  Val x124 = (x63[0][19] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x125 = x64[20]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x126 = (x63[0][20] + x125);
  Val x127 = (x63[0][20] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:809)
  Val x128 = x64[21]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:829)
  Val x129 = (x63[0][21] + x128);
  Val x130 = (x63[0][21] * Val(2));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x131 = ((x66 - (x67 * x65)) + ((x69 - (x70 * x68)) * Val(2)));
  Val x132 = ((x131 + ((x72 - (x73 * x71)) * Val(4))) + ((x75 - (x76 * x74)) * Val(8)));
  Val x133 = ((x132 + ((x78 - (x79 * x77)) * Val(16))) + ((x81 - (x82 * x80)) * Val(32)));
  Val x134 = ((x133 + ((x84 - (x85 * x83)) * Val(64))) + ((x87 - (x88 * x86)) * Val(128)));
  Val x135 = ((x134 + ((x90 - (x91 * x89)) * Val(256))) + ((x93 - (x94 * x92)) * Val(512)));
  Val x136 = ((x135 + ((x96 - (x97 * x95)) * Val(1024))) + ((x99 - (x100 * x98)) * Val(2048)));
  Val x137 = ((x136 + ((x102 - (x103 * x101)) * Val(4096))) + ((x105 - (x106 * x104)) * Val(8192)));
  Val x138 =
      ((x137 + ((x108 - (x109 * x107)) * Val(16384))) + ((x111 - (x112 * x110)) * Val(32768)));
  Val x139 =
      ((x138 + ((x114 - (x115 * x113)) * Val(65536))) + ((x117 - (x118 * x116)) * Val(131072)));
  Val x140 =
      ((x139 + ((x120 - (x121 * x119)) * Val(262144))) + ((x123 - (x124 * x122)) * Val(524288)));
  Val x141 =
      ((x140 + ((x126 - (x127 * x125)) * Val(1048576))) + ((x129 - (x130 * x128)) * Val(2097152)));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  NondetRegStruct21Array x142 = x4._super;
  Val x143 = x142[0]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x144 = (x63[1][0] + x143);
  Val x145 = (x63[1][0] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x146 = x142[1]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x147 = (x63[1][1] + x146);
  Val x148 = (x63[1][1] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x149 = x142[2]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x150 = (x63[1][2] + x149);
  Val x151 = (x63[1][2] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x152 = x142[3]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x153 = (x63[1][3] + x152);
  Val x154 = (x63[1][3] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x155 = x142[4]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x156 = (x63[1][4] + x155);
  Val x157 = (x63[1][4] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x158 = x142[5]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x159 = (x63[1][5] + x158);
  Val x160 = (x63[1][5] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x161 = x142[6]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x162 = (x63[1][6] + x161);
  Val x163 = (x63[1][6] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x164 = x142[7]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x165 = (x63[1][7] + x164);
  Val x166 = (x63[1][7] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x167 = x142[8]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x168 = (x63[1][8] + x167);
  Val x169 = (x63[1][8] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x170 = x142[9]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x171 = (x63[1][9] + x170);
  Val x172 = (x63[1][9] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x173 = x142[10]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x174 = (x63[1][10] + x173);
  Val x175 = (x63[1][10] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x176 = x142[11]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x177 = (x63[1][11] + x176);
  Val x178 = (x63[1][11] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x179 = x142[12]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x180 = (x63[1][12] + x179);
  Val x181 = (x63[1][12] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x182 = x142[13]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x183 = (x63[1][13] + x182);
  Val x184 = (x63[1][13] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x185 = x142[14]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x186 = (x63[1][14] + x185);
  Val x187 = (x63[1][14] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x188 = x142[15]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x189 = (x63[1][15] + x188);
  Val x190 = (x63[1][15] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x191 = x142[16]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x192 = (x63[1][16] + x191);
  Val x193 = (x63[1][16] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x194 = x142[17]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x195 = (x63[1][17] + x194);
  Val x196 = (x63[1][17] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x197 = x142[18]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x198 = (x63[1][18] + x197);
  Val x199 = (x63[1][18] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x200 = x142[19]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x201 = (x63[1][19] + x200);
  Val x202 = (x63[1][19] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:810)
  Val x203 = x142[20]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:830)
  Val x204 = (x63[1][20] + x203);
  Val x205 = (x63[1][20] * Val(2));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x206 = ((x144 - (x145 * x143)) + ((x147 - (x148 * x146)) * Val(2)));
  Val x207 = ((x206 + ((x150 - (x151 * x149)) * Val(4))) + ((x153 - (x154 * x152)) * Val(8)));
  Val x208 = ((x207 + ((x156 - (x157 * x155)) * Val(16))) + ((x159 - (x160 * x158)) * Val(32)));
  Val x209 = ((x208 + ((x162 - (x163 * x161)) * Val(64))) + ((x165 - (x166 * x164)) * Val(128)));
  Val x210 = ((x209 + ((x168 - (x169 * x167)) * Val(256))) + ((x171 - (x172 * x170)) * Val(512)));
  Val x211 = ((x210 + ((x174 - (x175 * x173)) * Val(1024))) + ((x177 - (x178 * x176)) * Val(2048)));
  Val x212 = ((x211 + ((x180 - (x181 * x179)) * Val(4096))) + ((x183 - (x184 * x182)) * Val(8192)));
  Val x213 =
      ((x212 + ((x186 - (x187 * x185)) * Val(16384))) + ((x189 - (x190 * x188)) * Val(32768)));
  Val x214 =
      ((x213 + ((x192 - (x193 * x191)) * Val(65536))) + ((x195 - (x196 * x194)) * Val(131072)));
  Val x215 =
      ((x214 + ((x198 - (x199 * x197)) * Val(262144))) + ((x201 - (x202 * x200)) * Val(524288)));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  NondetRegStruct22Array x216 = arg0.arrF;
  Val x217 = x216[0]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x218 = (x63[2][0] + x217);
  Val x219 = (x63[2][0] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x220 = x216[1]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x221 = (x63[2][1] + x220);
  Val x222 = (x63[2][1] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x223 = x216[2]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x224 = (x63[2][2] + x223);
  Val x225 = (x63[2][2] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x226 = x216[3]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x227 = (x63[2][3] + x226);
  Val x228 = (x63[2][3] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x229 = x216[4]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x230 = (x63[2][4] + x229);
  Val x231 = (x63[2][4] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x232 = x216[5]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x233 = (x63[2][5] + x232);
  Val x234 = (x63[2][5] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x235 = x216[6]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x236 = (x63[2][6] + x235);
  Val x237 = (x63[2][6] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x238 = x216[7]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x239 = (x63[2][7] + x238);
  Val x240 = (x63[2][7] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x241 = x216[8]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x242 = (x63[2][8] + x241);
  Val x243 = (x63[2][8] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x244 = x216[9]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x245 = (x63[2][9] + x244);
  Val x246 = (x63[2][9] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x247 = x216[10]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x248 = (x63[2][10] + x247);
  Val x249 = (x63[2][10] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x250 = x216[11]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x251 = (x63[2][11] + x250);
  Val x252 = (x63[2][11] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x253 = x216[12]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x254 = (x63[2][12] + x253);
  Val x255 = (x63[2][12] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x256 = x216[13]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x257 = (x63[2][13] + x256);
  Val x258 = (x63[2][13] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x259 = x216[14]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x260 = (x63[2][14] + x259);
  Val x261 = (x63[2][14] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x262 = x216[15]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x263 = (x63[2][15] + x262);
  Val x264 = (x63[2][15] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x265 = x216[16]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x266 = (x63[2][16] + x265);
  Val x267 = (x63[2][16] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x268 = x216[17]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x269 = (x63[2][17] + x268);
  Val x270 = (x63[2][17] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x271 = x216[18]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x272 = (x63[2][18] + x271);
  Val x273 = (x63[2][18] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x274 = x216[19]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x275 = (x63[2][19] + x274);
  Val x276 = (x63[2][19] * Val(2));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  Val x277 = x216[20]._super;
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:831)
  Val x278 = (x63[2][20] + x277);
  Val x279 = (x63[2][20] * Val(2));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x280 = ((x218 - (x219 * x217)) + ((x221 - (x222 * x220)) * Val(2)));
  Val x281 = ((x280 + ((x224 - (x225 * x223)) * Val(4))) + ((x227 - (x228 * x226)) * Val(8)));
  Val x282 = ((x281 + ((x230 - (x231 * x229)) * Val(16))) + ((x233 - (x234 * x232)) * Val(32)));
  Val x283 = ((x282 + ((x236 - (x237 * x235)) * Val(64))) + ((x239 - (x240 * x238)) * Val(128)));
  Val x284 = ((x283 + ((x242 - (x243 * x241)) * Val(256))) + ((x245 - (x246 * x244)) * Val(512)));
  Val x285 = ((x284 + ((x248 - (x249 * x247)) * Val(1024))) + ((x251 - (x252 * x250)) * Val(2048)));
  Val x286 = ((x285 + ((x254 - (x255 * x253)) * Val(4096))) + ((x257 - (x258 * x256)) * Val(8192)));
  Val x287 =
      ((x286 + ((x260 - (x261 * x259)) * Val(16384))) + ((x263 - (x264 * x262)) * Val(32768)));
  Val x288 =
      ((x287 + ((x266 - (x267 * x265)) * Val(65536))) + ((x269 - (x270 * x268)) * Val(131072)));
  Val x289 =
      ((x288 + ((x272 - (x273 * x271)) * Val(262144))) + ((x275 - (x276 * x274)) * Val(524288)));
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:807)
  NondetRegStruct22Array x290 = arg0.arrE;
  NondetRegStruct22Array x291 = arg0.arrB;
  NondetRegStruct22Array x292 = arg0.arrC;
  Val22Array x293 = Val22Array{x291[0]._super,  x291[1]._super,  x291[2]._super,  x291[3]._super,
                               x291[4]._super,  x291[5]._super,  x291[6]._super,  x291[7]._super,
                               x291[8]._super,  x291[9]._super,  x291[10]._super, x291[11]._super,
                               x291[12]._super, x291[13]._super, x291[14]._super, x291[15]._super,
                               x291[16]._super, x291[17]._super, x291[18]._super, x291[19]._super,
                               x291[20]._super, x291[21]._super};
  Val22Array x294 = Val22Array{x292[0]._super,  x292[1]._super,  x292[2]._super,  x292[3]._super,
                               x292[4]._super,  x292[5]._super,  x292[6]._super,  x292[7]._super,
                               x292[8]._super,  x292[9]._super,  x292[10]._super, x292[11]._super,
                               x292[12]._super, x292[13]._super, x292[14]._super, x292[15]._super,
                               x292[16]._super, x292[17]._super, x292[18]._super, x292[19]._super,
                               x292[20]._super, x292[21]._super};
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:833)
  Val24Array x295 = Val24Array{x290[0]._super,  x290[1]._super,  x290[2]._super,  x290[3]._super,
                               x290[4]._super,  x290[5]._super,  x290[6]._super,  x290[7]._super,
                               x290[8]._super,  x290[9]._super,  x290[10]._super, x290[11]._super,
                               x290[12]._super, x290[13]._super, x290[14]._super, x290[15]._super,
                               x290[16]._super, x290[17]._super, x290[18]._super, x290[19]._super,
                               x290[20]._super, x290[21]._super, Val(0),          Val(0)};
  // iota_xor_rc(zirgen/circuit/keccak/keccak.zir:835)
  RetTupleStruct x296 = exec_RetTuple(ctx,
                                      Val22Array{x141,
                                                 (x215 + ((x204 - (x205 * x203)) * Val(1048576))),
                                                 (x289 + ((x278 - (x279 * x277)) * Val(1048576))),
                                                 x2[3]._super,
                                                 x2[4]._super,
                                                 x2[5]._super,
                                                 x2[6]._super,
                                                 x2[7]._super,
                                                 x2[8]._super,
                                                 x2[9]._super,
                                                 x2[10]._super,
                                                 x2[11]._super,
                                                 x2[12]._super,
                                                 x2[13]._super,
                                                 x2[14]._super,
                                                 x2[15]._super,
                                                 x2[16]._super,
                                                 x2[17]._super,
                                                 x2[18]._super,
                                                 x2[19]._super,
                                                 x2[20]._super,
                                                 x2[21]._super},
                                      x293,
                                      x294,
                                      x295,
                                      x31,
                                      x31,
                                      Val(0),
                                      x57[0],
                                      x57[1],
                                      x57[2],
                                      arg0.midx._super,
                                      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execAbsorbCopy1(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<RetTupleLayout> layout2) {
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:924)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:925)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:926)
  RetTupleStruct x5 = back_RetTuple(ctx, 3, arg1);
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:927)
  RetTupleStruct x6 = back_RetTuple(ctx, 4, arg1);
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:928)
  RetTupleStruct x7 = back_RetTuple(ctx, 5, arg1);
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:929)
  RetTupleStruct x8 = back_RetTuple(ctx, 6, arg1);
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:930)
  RetTupleStruct x9 = back_RetTuple(ctx, 7, arg1);
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:931)
  RetTupleStruct x10 = back_RetTuple(ctx, 8, arg1);
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:932)
  RetTupleStruct x11 = back_RetTuple(ctx, 9, arg1);
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:933)
  RetTupleStruct x12 = back_RetTuple(ctx, 10, arg1);
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:932)
  NondetRegStruct24Array x13 = x11.arrD;
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:931)
  NondetRegStruct24Array x14 = x10.arrD;
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:930)
  NondetRegStruct24Array x15 = x9.arrD;
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:929)
  NondetRegStruct24Array x16 = x8.arrD;
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:928)
  NondetRegStruct24Array x17 = x7.arrD;
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:927)
  NondetRegStruct24Array x18 = x6.arrD;
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:926)
  NondetRegStruct24Array x19 = x5.arrD;
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:925)
  NondetRegStruct24Array x20 = x4.arrD;
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:924)
  NondetRegStruct24Array x21 = x3.arrD;
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:933)
  NondetRegStruct22Array x22 = x12.arrB;
  NondetRegStruct22Array x23 = x12.arrC;
  NondetRegStruct24Array x24 = x12.arrD;
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:934)
  Val22Array x25 =
      Val22Array{x13[21]._super, x13[22]._super, x13[23]._super, x14[21]._super, x14[22]._super,
                 x14[23]._super, x15[21]._super, x15[22]._super, x15[23]._super, x16[21]._super,
                 x16[22]._super, x16[23]._super, x17[21]._super, x17[22]._super, x17[23]._super,
                 x18[21]._super, x18[22]._super, x18[23]._super, x19[21]._super, x19[22]._super,
                 x19[23]._super, x20[21]._super};
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:942)
  Val22Array x26 =
      Val22Array{x20[22]._super, x20[23]._super, x21[21]._super, x21[22]._super, x21[23]._super,
                 x22[5]._super,  x22[6]._super,  x22[7]._super,  x22[8]._super,  x22[9]._super,
                 x22[10]._super, x22[11]._super, x22[12]._super, x22[13]._super, x22[14]._super,
                 x22[15]._super, x22[16]._super, x22[17]._super, x22[18]._super, x22[19]._super,
                 x22[20]._super, x22[21]._super};
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:933)
  Val22Array x27 =
      Val22Array{x23[0]._super,  x23[1]._super,  x23[2]._super,  x23[3]._super,  x23[4]._super,
                 x23[5]._super,  x23[6]._super,  x23[7]._super,  x23[8]._super,  x23[9]._super,
                 x23[10]._super, x23[11]._super, x23[12]._super, x23[13]._super, x23[14]._super,
                 x23[15]._super, x23[16]._super, x23[17]._super, x23[18]._super, x23[19]._super,
                 x23[20]._super, x23[21]._super};
  Val24Array x28 =
      Val24Array{x24[0]._super,  x24[1]._super,  x24[2]._super,  x24[3]._super,  x24[4]._super,
                 x24[5]._super,  x24[6]._super,  x24[7]._super,  x24[8]._super,  x24[9]._super,
                 x24[10]._super, x24[11]._super, x24[12]._super, x24[13]._super, x24[14]._super,
                 x24[15]._super, x24[16]._super, x24[17]._super, x24[18]._super, x24[19]._super,
                 x24[20]._super, x24[21]._super, x24[22]._super, x24[23]._super};
  // absorb_copy1(zirgen/circuit/keccak/keccak.zir:949)
  Val22Array x29 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x30 = exec_RetTuple(ctx,
                                     x25,
                                     x26,
                                     x27,
                                     x28,
                                     x29,
                                     x29,
                                     Val(0),
                                     Val(16),
                                     Val(0),
                                     x3.blk._super,
                                     x3.midx._super,
                                     layout2);
  return x30;
}
OneHot_10_Struct
exec_OneHot_10_(ExecContext& ctx, Val arg0, BoundLayout<OneHot_10_Layout> layout1) {
  // OneHot(zirgen/circuit/keccak/one_hot.zir:7)
  NondetRegStruct10Array x2 = map(
      Val10Array{Val(0), Val(1), Val(2), Val(3), Val(4), Val(5), Val(6), Val(7), Val(8), Val(9)},
      LAYOUT_LOOKUP(layout1, _super),
      std::function(
          [&](Val10Array::value_type x3, BoundLayout<NondetRegLayout10LayoutArray::value_type> x4) {
            NondetRegStruct x5 = exec_NondetBitReg(ctx, isz((x3 - arg0)), x4);
            return x5;
          }));
  // OneHot(zirgen/circuit/keccak/one_hot.zir:9)
  Val x6 = x2[1]._super;
  Val x7 = (x2[0]._super + x6);
  Val x8 = x2[2]._super;
  Val x9 = x2[3]._super;
  Val x10 = x2[4]._super;
  Val x11 = (((x7 + x8) + x9) + x10);
  Val x12 = x2[5]._super;
  Val x13 = x2[6]._super;
  Val x14 = x2[7]._super;
  Val x15 = (((x11 + x12) + x13) + x14);
  Val x16 = x2[8]._super;
  Val x17 = x2[9]._super;
  Val x18 = (((x15 + x16) + x17) - Val(1));
  EQZ(x18, "OneHot(zirgen/circuit/keccak/one_hot.zir:9)");
  // OneHot(zirgen/circuit/keccak/one_hot.zir:11)
  Val x19 = (((x6 + (x8 * Val(2))) + (x9 * Val(3))) + (x10 * Val(4)));
  Val x20 = (((x19 + (x12 * Val(5))) + (x13 * Val(6))) + (x14 * Val(7)));
  Val x21 = (((x20 + (x16 * Val(8))) + (x17 * Val(9))) - arg0);
  EQZ(x21, "OneHot(zirgen/circuit/keccak/one_hot.zir:11)");
  return OneHot_10_Struct{._super = x2};
}
RetTupleStruct execAbsorbWord_0__0_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_0__0_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrA;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[0]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[1]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[2]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = (x110 + Val(1));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(1),
                    Val(15),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_1__0_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_1__0_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrA;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[3]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[4]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[5]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = ((x110 + Val(1)) + Val(1));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(2),
                    Val(15),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_2__0_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_2__0_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrA;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[6]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[7]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[8]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = ((x110 + Val(1)) + Val(2));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(3),
                    Val(15),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_3__0_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_3__0_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrA;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[9]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[10]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[11]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = ((x110 + Val(1)) + Val(3));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(4),
                    Val(15),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_4__0_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_4__0_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrA;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[12]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[13]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[14]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = ((x110 + Val(1)) + Val(4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(5),
                    Val(15),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_0__1_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_0__1_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrA;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[15]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[16]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[17]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = ((x110 + Val(1)) + Val(5));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(6),
                    Val(15),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_1__1_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_1__1_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrA;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[18]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[19]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[20]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = (((x110 + Val(1)) + Val(1)) + Val(5));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(7),
                    Val(15),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_2__1_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_2__1_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrB;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = arg0.arrA[21]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[0]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[1]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = (((x110 + Val(1)) + Val(2)) + Val(5));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(8),
                    Val(15),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_3__1_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_3__1_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrB;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[2]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[3]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[4]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = (((x110 + Val(1)) + Val(3)) + Val(5));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(9),
                    Val(15),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbMajor1(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<AbsorbMajor1Layout> layout2) {
  // absorb_major1(zirgen/circuit/keccak/keccak.zir:956)
  BoundLayout<AbsorbMajor1_SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // absorb_major1(zirgen/circuit/keccak/keccak.zir:955)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_10_Struct x5 = exec_OneHot_10_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct10Array x6 = x5._super;
  // absorb_major1(zirgen/circuit/keccak/keccak.zir:956)
  BoundLayout<AbsorbMajor1Arm9Layout> x7 = LAYOUT_LOOKUP(x3, arm9);
  BoundLayout<Reg> x8 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x7, _extra0), count), _super);
  RetTupleStruct x9;
  if (to_size_t(x6[0]._super)) {
    // absorb_major1(zirgen/circuit/keccak/keccak.zir:957)
    RetTupleStruct x10 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x11 = execAbsorbWord_0__0_(ctx, x10, LAYOUT_LOOKUP(x3, arm0));
    x9 = x11;
  } else if (to_size_t(x6[1]._super)) {
    // absorb_major1(zirgen/circuit/keccak/keccak.zir:958)
    RetTupleStruct x12 = back_RetTuple(ctx, 2, arg1);
    RetTupleStruct x13 = execAbsorbWord_1__0_(ctx, x12, LAYOUT_LOOKUP(x3, arm1));
    x9 = x13;
  } else if (to_size_t(x6[2]._super)) {
    // absorb_major1(zirgen/circuit/keccak/keccak.zir:959)
    RetTupleStruct x14 = back_RetTuple(ctx, 3, arg1);
    RetTupleStruct x15 = execAbsorbWord_2__0_(ctx, x14, LAYOUT_LOOKUP(x3, arm2));
    x9 = x15;
  } else if (to_size_t(x6[3]._super)) {
    // absorb_major1(zirgen/circuit/keccak/keccak.zir:960)
    RetTupleStruct x16 = back_RetTuple(ctx, 4, arg1);
    RetTupleStruct x17 = execAbsorbWord_3__0_(ctx, x16, LAYOUT_LOOKUP(x3, arm3));
    x9 = x17;
  } else if (to_size_t(x6[4]._super)) {
    // absorb_major1(zirgen/circuit/keccak/keccak.zir:961)
    RetTupleStruct x18 = back_RetTuple(ctx, 5, arg1);
    RetTupleStruct x19 = execAbsorbWord_4__0_(ctx, x18, LAYOUT_LOOKUP(x3, arm4));
    x9 = x19;
  } else if (to_size_t(x6[5]._super)) {
    // absorb_major1(zirgen/circuit/keccak/keccak.zir:962)
    RetTupleStruct x20 = back_RetTuple(ctx, 6, arg1);
    RetTupleStruct x21 = execAbsorbWord_0__1_(ctx, x20, LAYOUT_LOOKUP(x3, arm5));
    x9 = x21;
  } else if (to_size_t(x6[6]._super)) {
    // absorb_major1(zirgen/circuit/keccak/keccak.zir:963)
    RetTupleStruct x22 = back_RetTuple(ctx, 7, arg1);
    RetTupleStruct x23 = execAbsorbWord_1__1_(ctx, x22, LAYOUT_LOOKUP(x3, arm6));
    x9 = x23;
  } else if (to_size_t(x6[7]._super)) {
    // absorb_major1(zirgen/circuit/keccak/keccak.zir:964)
    RetTupleStruct x24 = back_RetTuple(ctx, 8, arg1);
    RetTupleStruct x25 = execAbsorbWord_2__1_(ctx, x24, LAYOUT_LOOKUP(x3, arm7));
    x9 = x25;
  } else if (to_size_t(x6[8]._super)) {
    // absorb_major1(zirgen/circuit/keccak/keccak.zir:965)
    RetTupleStruct x26 = back_RetTuple(ctx, 9, arg1);
    RetTupleStruct x27 = execAbsorbWord_3__1_(ctx, x26, LAYOUT_LOOKUP(x3, arm8));
    x9 = x27;
  } else if (to_size_t(x6[9]._super)) {
    // absorb_major1(zirgen/circuit/keccak/keccak.zir:966)
    RetTupleStruct x28 = execAbsorbCopy1(ctx, arg0, arg1, LAYOUT_LOOKUP(x7, _super));
    // absorb_major1(zirgen/circuit/keccak/keccak.zir:956)
    STORE(x8, Val(0));
    EQZ(LOAD(x8, 0), "absorb_major1(zirgen/circuit/keccak/keccak.zir:956)");
    x9 = x28;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  RetTupleStruct x29 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x29;
}
RetTupleStruct execAbsorbCopy2(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<RetTupleLayout> layout2) {
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:971)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:972)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:973)
  RetTupleStruct x5 = back_RetTuple(ctx, 3, arg1);
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:974)
  RetTupleStruct x6 = back_RetTuple(ctx, 4, arg1);
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:975)
  RetTupleStruct x7 = back_RetTuple(ctx, 5, arg1);
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:976)
  RetTupleStruct x8 = back_RetTuple(ctx, 6, arg1);
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:977)
  RetTupleStruct x9 = back_RetTuple(ctx, 7, arg1);
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:978)
  RetTupleStruct x10 = back_RetTuple(ctx, 8, arg1);
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:979)
  RetTupleStruct x11 = back_RetTuple(ctx, 9, arg1);
  NondetRegStruct22Array x12 = x11.arrB;
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:978)
  NondetRegStruct24Array x13 = x10.arrD;
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:977)
  NondetRegStruct24Array x14 = x9.arrD;
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:976)
  NondetRegStruct24Array x15 = x8.arrD;
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:975)
  NondetRegStruct24Array x16 = x7.arrD;
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:974)
  NondetRegStruct24Array x17 = x6.arrD;
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:973)
  NondetRegStruct24Array x18 = x5.arrD;
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:972)
  NondetRegStruct24Array x19 = x4.arrD;
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:971)
  NondetRegStruct24Array x20 = x3.arrD;
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:979)
  NondetRegStruct22Array x21 = x11.arrC;
  NondetRegStruct22Array x22 = x11.arrA;
  NondetRegStruct24Array x23 = x11.arrD;
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:996)
  Val x24 = (x3.midx._super + Val(17));
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:979)
  Val22Array x25 =
      Val22Array{x22[0]._super,  x22[1]._super,  x22[2]._super,  x22[3]._super,  x22[4]._super,
                 x22[5]._super,  x22[6]._super,  x22[7]._super,  x22[8]._super,  x22[9]._super,
                 x22[10]._super, x22[11]._super, x22[12]._super, x22[13]._super, x22[14]._super,
                 x22[15]._super, x22[16]._super, x22[17]._super, x22[18]._super, x22[19]._super,
                 x22[20]._super, x22[21]._super};
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:980)
  Val22Array x26 =
      Val22Array{x12[0]._super,  x12[1]._super,  x12[2]._super,  x12[3]._super,  x12[4]._super,
                 x13[21]._super, x13[22]._super, x13[23]._super, x14[21]._super, x14[22]._super,
                 x14[23]._super, x15[21]._super, x15[22]._super, x15[23]._super, x16[21]._super,
                 x16[22]._super, x16[23]._super, x17[21]._super, x17[22]._super, x17[23]._super,
                 x18[21]._super, x18[22]._super};
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:988)
  Val22Array x27 =
      Val22Array{x18[23]._super, x19[21]._super, x19[22]._super, x19[23]._super, x20[21]._super,
                 x20[22]._super, x20[23]._super, x21[7]._super,  x21[8]._super,  x21[9]._super,
                 x21[10]._super, x21[11]._super, x21[12]._super, x21[13]._super, x21[14]._super,
                 x21[15]._super, x21[16]._super, x21[17]._super, x21[18]._super, x21[19]._super,
                 x21[20]._super, x21[21]._super};
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:979)
  Val24Array x28 =
      Val24Array{x23[0]._super,  x23[1]._super,  x23[2]._super,  x23[3]._super,  x23[4]._super,
                 x23[5]._super,  x23[6]._super,  x23[7]._super,  x23[8]._super,  x23[9]._super,
                 x23[10]._super, x23[11]._super, x23[12]._super, x23[13]._super, x23[14]._super,
                 x23[15]._super, x23[16]._super, x23[17]._super, x23[18]._super, x23[19]._super,
                 x23[20]._super, x23[21]._super, x23[22]._super, x23[23]._super};
  // absorb_copy2(zirgen/circuit/keccak/keccak.zir:995)
  Val22Array x29 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x30 = exec_RetTuple(
      ctx, x25, x26, x27, x28, x29, x29, Val(0), Val(0), Val(0), x3.blk._super, x24, layout2);
  return x30;
}
OneHot_9_Struct exec_OneHot_9_(ExecContext& ctx, Val arg0, BoundLayout<OneHot_9_Layout> layout1) {
  // OneHot(zirgen/circuit/keccak/one_hot.zir:7)
  NondetRegStruct9Array x2 =
      map(Val9Array{Val(0), Val(1), Val(2), Val(3), Val(4), Val(5), Val(6), Val(7), Val(8)},
          LAYOUT_LOOKUP(layout1, _super),
          std::function([&](Val9Array::value_type x3,
                            BoundLayout<NondetRegLayout9LayoutArray::value_type> x4) {
            NondetRegStruct x5 = exec_NondetBitReg(ctx, isz((x3 - arg0)), x4);
            return x5;
          }));
  // OneHot(zirgen/circuit/keccak/one_hot.zir:9)
  Val x6 = x2[1]._super;
  Val x7 = (x2[0]._super + x6);
  Val x8 = x2[2]._super;
  Val x9 = x2[3]._super;
  Val x10 = x2[4]._super;
  Val x11 = (((x7 + x8) + x9) + x10);
  Val x12 = x2[5]._super;
  Val x13 = x2[6]._super;
  Val x14 = x2[7]._super;
  Val x15 = (((x11 + x12) + x13) + x14);
  Val x16 = x2[8]._super;
  EQZ(((x15 + x16) - Val(1)), "OneHot(zirgen/circuit/keccak/one_hot.zir:9)");
  // OneHot(zirgen/circuit/keccak/one_hot.zir:11)
  Val x17 = (((x6 + (x8 * Val(2))) + (x9 * Val(3))) + (x10 * Val(4)));
  Val x18 = (((x17 + (x12 * Val(5))) + (x13 * Val(6))) + (x14 * Val(7)));
  EQZ(((x18 + (x16 * Val(8))) - arg0), "OneHot(zirgen/circuit/keccak/one_hot.zir:11)");
  return OneHot_9_Struct{._super = x2};
}
RetTupleStruct execAbsorbWord_4__1_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_4__1_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrB;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[5]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[6]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[7]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = (((x110 + Val(1)) + Val(4)) + Val(5));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(1),
                    Val(16),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_0__2_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_0__2_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrB;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[8]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[9]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[10]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = ((x110 + Val(1)) + Val(10));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(2),
                    Val(16),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_1__2_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_1__2_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrB;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[11]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[12]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[13]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = (((x110 + Val(1)) + Val(1)) + Val(10));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(3),
                    Val(16),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_2__2_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_2__2_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrB;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[14]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[15]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[16]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = (((x110 + Val(1)) + Val(2)) + Val(10));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(4),
                    Val(16),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_3__2_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_3__2_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrB;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[17]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[18]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[19]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = (((x110 + Val(1)) + Val(3)) + Val(10));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(5),
                    Val(16),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_4__2_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_4__2_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrB;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[20]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[21]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = arg0.arrC[0]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = (((x110 + Val(1)) + Val(4)) + Val(10));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(6),
                    Val(16),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_0__3_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_0__3_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrC;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[1]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[2]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[3]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = ((x110 + Val(1)) + Val(15));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(7),
                    Val(16),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbWord_1__3_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<AbsorbWord_1__3_Layout> layout1) {
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  NondetRegStruct22Array x2 = arg0.arrC;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:862)
  Val x3 = x2[4]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:874)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:875)
  Val x28 = (x7 * Val(2));
  Val x29 = (((x6 + x28) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x30 = (((x29 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x31 = (((x30 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x32 = (((x31 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x33 = (((x32 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x34 = (((x33 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x35 = (((x34 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x35 - x3), "absorb_word(zirgen/circuit/keccak/keccak.zir:875)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:866)
  Val x36 = x2[5]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:876)
  ToBits_22_Struct x37 = exec_ToBits_22_(ctx, x36, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  Val x60 = x38[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:877)
  Val x61 = (x40 * Val(2));
  Val x62 = (((x39 + x61) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x63 = (((x62 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x64 = (((x63 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x65 = (((x64 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x66 = (((x65 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x67 = (((x66 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x68 = (((x67 + (x58 * Val(524288))) + (x59 * Val(1048576))) + (x60 * Val(2097152)));
  EQZ((x68 - x36), "absorb_word(zirgen/circuit/keccak/keccak.zir:877)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:870)
  Val x69 = x2[6]._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:878)
  ToBits_22_Struct x70 = exec_ToBits_22_(ctx, x69, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct22Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  Val x93 = x71[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:879)
  Val x94 = (x73 * Val(2));
  Val x95 = (((x72 + x94) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x96 = (((x95 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x97 = (((x96 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x98 = (((x97 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x99 = (((x98 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x100 = (((x99 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x101 = (((x100 + (x91 * Val(524288))) + (x92 * Val(1048576))) + (x93 * Val(2097152)));
  EQZ((x101 - x69), "absorb_word(zirgen/circuit/keccak/keccak.zir:879)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:881)
  Val x102 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  ToBits_16_Struct x103 = exec_ToBits_16_(ctx, x102, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:883)
  Val x104 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  ToBits_16_Struct x105 = exec_ToBits_16_(ctx, x104, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:885)
  Val x106 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  ToBits_16_Struct x107 = exec_ToBits_16_(ctx, x106, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:887)
  Val x108 = INVOKE_EXTERN(ctx, readInput);
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  ToBits_16_Struct x109 = exec_ToBits_16_(ctx, x108, LAYOUT_LOOKUP(layout1, unpack_4));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:855)
  Val x110 = arg0.midx._super;
  // absorb_word(zirgen/circuit/keccak/keccak.zir:889)
  Val x111 = (((x110 + Val(1)) + Val(1)) + Val(15));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:890)
  NondetRegStruct x112 = exec_NondetReg(ctx, inv(x111), LAYOUT_LOOKUP(layout1, invmidx));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:891)
  Val x113 = ((x112._super * x111) - Val(1));
  EQZ(x113, "absorb_word(zirgen/circuit/keccak/keccak.zir:891)");
  // absorb_word(zirgen/circuit/keccak/keccak.zir:882)
  NondetRegStruct16Array x114 = x103._super;
  Val x115 = x114[0]._super;
  Val x116 = x114[1]._super;
  Val x117 = x114[2]._super;
  Val x118 = x114[3]._super;
  Val x119 = x114[4]._super;
  Val x120 = x114[5]._super;
  Val x121 = x114[6]._super;
  Val x122 = x114[7]._super;
  Val x123 = x114[8]._super;
  Val x124 = x114[9]._super;
  Val x125 = x114[10]._super;
  Val x126 = x114[11]._super;
  Val x127 = x114[12]._super;
  Val x128 = x114[13]._super;
  Val x129 = x114[14]._super;
  Val x130 = x114[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x131 = (((x115 + (x116 * Val(2))) + (x117 * Val(4))) + (x118 * Val(8)));
  Val x132 = (((x131 + (x119 * Val(16))) + (x120 * Val(32))) + (x121 * Val(64)));
  Val x133 = (((x132 + (x122 * Val(128))) + (x123 * Val(256))) + (x124 * Val(512)));
  Val x134 = (((x133 + (x125 * Val(1024))) + (x126 * Val(2048))) + (x127 * Val(4096)));
  Val x135 = (((x134 + (x128 * Val(8192))) + (x129 * Val(16384))) + (x130 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:884)
  NondetRegStruct16Array x136 = x105._super;
  Val x137 = x136[0]._super;
  Val x138 = x136[1]._super;
  Val x139 = x136[2]._super;
  Val x140 = x136[3]._super;
  Val x141 = x136[4]._super;
  Val x142 = x136[5]._super;
  Val x143 = x136[6]._super;
  Val x144 = x136[7]._super;
  Val x145 = x136[8]._super;
  Val x146 = x136[9]._super;
  Val x147 = x136[10]._super;
  Val x148 = x136[11]._super;
  Val x149 = x136[12]._super;
  Val x150 = x136[13]._super;
  Val x151 = x136[14]._super;
  Val x152 = x136[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x153 = (((x137 + (x138 * Val(2))) + (x139 * Val(4))) + (x140 * Val(8)));
  Val x154 = (((x153 + (x141 * Val(16))) + (x142 * Val(32))) + (x143 * Val(64)));
  Val x155 = (((x154 + (x144 * Val(128))) + (x145 * Val(256))) + (x146 * Val(512)));
  Val x156 = (((x155 + (x147 * Val(1024))) + (x148 * Val(2048))) + (x149 * Val(4096)));
  Val x157 = (((x156 + (x150 * Val(8192))) + (x151 * Val(16384))) + (x152 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:886)
  NondetRegStruct16Array x158 = x107._super;
  Val x159 = x158[0]._super;
  Val x160 = x158[1]._super;
  Val x161 = x158[2]._super;
  Val x162 = x158[3]._super;
  Val x163 = x158[4]._super;
  Val x164 = x158[5]._super;
  Val x165 = x158[6]._super;
  Val x166 = x158[7]._super;
  Val x167 = x158[8]._super;
  Val x168 = x158[9]._super;
  Val x169 = x158[10]._super;
  Val x170 = x158[11]._super;
  Val x171 = x158[12]._super;
  Val x172 = x158[13]._super;
  Val x173 = x158[14]._super;
  Val x174 = x158[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x175 = (((x159 + (x160 * Val(2))) + (x161 * Val(4))) + (x162 * Val(8)));
  Val x176 = (((x175 + (x163 * Val(16))) + (x164 * Val(32))) + (x165 * Val(64)));
  Val x177 = (((x176 + (x166 * Val(128))) + (x167 * Val(256))) + (x168 * Val(512)));
  Val x178 = (((x177 + (x169 * Val(1024))) + (x170 * Val(2048))) + (x171 * Val(4096)));
  Val x179 = (((x178 + (x172 * Val(8192))) + (x173 * Val(16384))) + (x174 * Val(32768)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:888)
  NondetRegStruct16Array x180 = x109._super;
  Val x181 = x180[0]._super;
  Val x182 = x180[1]._super;
  Val x183 = x180[2]._super;
  Val x184 = x180[3]._super;
  Val x185 = x180[4]._super;
  Val x186 = x180[5]._super;
  Val x187 = x180[6]._super;
  Val x188 = x180[7]._super;
  Val x189 = x180[8]._super;
  Val x190 = x180[9]._super;
  Val x191 = x180[10]._super;
  Val x192 = x180[11]._super;
  Val x193 = x180[12]._super;
  Val x194 = x180[13]._super;
  Val x195 = x180[14]._super;
  Val x196 = x180[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:892)
  Val x197 = (((x181 + (x182 * Val(2))) + (x183 * Val(4))) + (x184 * Val(8)));
  Val x198 = (((x197 + (x185 * Val(16))) + (x186 * Val(32))) + (x187 * Val(64)));
  Val x199 = (((x198 + (x188 * Val(128))) + (x189 * Val(256))) + (x190 * Val(512)));
  Val x200 = (((x199 + (x191 * Val(1024))) + (x192 * Val(2048))) + (x193 * Val(4096)));
  Val x201 = (((x200 + (x194 * Val(8192))) + (x195 * Val(16384))) + (x196 * Val(32768)));
  WriteMemoryStruct x202 =
      exec_WriteMemory(ctx,
                       x111,
                       MemDigestStruct{._super = Val4Array{x135, x157, x179, x201}},
                       LAYOUT_LOOKUP(layout1, _0));
  // xor2(zirgen/circuit/keccak/keccak.zir:114)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:897)
  Val x203 = ((x6 + x115) - ((x6 * Val(2)) * x115));
  Val x204 = ((x7 + x116) - (x28 * x116));
  Val x205 = ((x8 + x117) - ((x8 * Val(2)) * x117));
  Val x206 = ((x9 + x118) - ((x9 * Val(2)) * x118));
  Val x207 = ((x10 + x119) - ((x10 * Val(2)) * x119));
  Val x208 = ((x11 + x120) - ((x11 * Val(2)) * x120));
  Val x209 = ((x12 + x121) - ((x12 * Val(2)) * x121));
  Val x210 = ((x13 + x122) - ((x13 * Val(2)) * x122));
  Val x211 = ((x14 + x123) - ((x14 * Val(2)) * x123));
  Val x212 = ((x15 + x124) - ((x15 * Val(2)) * x124));
  Val x213 = ((x16 + x125) - ((x16 * Val(2)) * x125));
  Val x214 = ((x17 + x126) - ((x17 * Val(2)) * x126));
  Val x215 = ((x18 + x127) - ((x18 * Val(2)) * x127));
  Val x216 = ((x19 + x128) - ((x19 * Val(2)) * x128));
  Val x217 = ((x20 + x129) - ((x20 * Val(2)) * x129));
  Val x218 = ((x21 + x130) - ((x21 * Val(2)) * x130));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:898)
  Val x219 = ((x22 + x137) - ((x22 * Val(2)) * x137));
  Val x220 = ((x23 + x138) - ((x23 * Val(2)) * x138));
  Val x221 = ((x24 + x139) - ((x24 * Val(2)) * x139));
  Val x222 = ((x25 + x140) - ((x25 * Val(2)) * x140));
  Val x223 = ((x26 + x141) - ((x26 * Val(2)) * x141));
  Val x224 = ((x27 + x142) - ((x27 * Val(2)) * x142));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:902)
  Val x225 = ((x39 + x143) - ((x39 * Val(2)) * x143));
  Val x226 = ((x40 + x144) - (x61 * x144));
  Val x227 = ((x41 + x145) - ((x41 * Val(2)) * x145));
  Val x228 = ((x42 + x146) - ((x42 * Val(2)) * x146));
  Val x229 = ((x43 + x147) - ((x43 * Val(2)) * x147));
  Val x230 = ((x44 + x148) - ((x44 * Val(2)) * x148));
  Val x231 = ((x45 + x149) - ((x45 * Val(2)) * x149));
  Val x232 = ((x46 + x150) - ((x46 * Val(2)) * x150));
  Val x233 = ((x47 + x151) - ((x47 * Val(2)) * x151));
  Val x234 = ((x48 + x152) - ((x48 * Val(2)) * x152));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:903)
  Val x235 = ((x49 + x159) - ((x49 * Val(2)) * x159));
  Val x236 = ((x50 + x160) - ((x50 * Val(2)) * x160));
  Val x237 = ((x51 + x161) - ((x51 * Val(2)) * x161));
  Val x238 = ((x52 + x162) - ((x52 * Val(2)) * x162));
  Val x239 = ((x53 + x163) - ((x53 * Val(2)) * x163));
  Val x240 = ((x54 + x164) - ((x54 * Val(2)) * x164));
  Val x241 = ((x55 + x165) - ((x55 * Val(2)) * x165));
  Val x242 = ((x56 + x166) - ((x56 * Val(2)) * x166));
  Val x243 = ((x57 + x167) - ((x57 * Val(2)) * x167));
  Val x244 = ((x58 + x168) - ((x58 * Val(2)) * x168));
  Val x245 = ((x59 + x169) - ((x59 * Val(2)) * x169));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:907)
  Val x246 = ((x72 + x170) - ((x72 * Val(2)) * x170));
  Val x247 = ((x73 + x171) - (x94 * x171));
  Val x248 = ((x74 + x172) - ((x74 * Val(2)) * x172));
  Val x249 = ((x75 + x173) - ((x75 * Val(2)) * x173));
  Val x250 = ((x76 + x174) - ((x76 * Val(2)) * x174));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:908)
  Val x251 = ((x77 + x181) - ((x77 * Val(2)) * x181));
  Val x252 = ((x78 + x182) - ((x78 * Val(2)) * x182));
  Val x253 = ((x79 + x183) - ((x79 * Val(2)) * x183));
  Val x254 = ((x80 + x184) - ((x80 * Val(2)) * x184));
  Val x255 = ((x81 + x185) - ((x81 * Val(2)) * x185));
  Val x256 = ((x82 + x186) - ((x82 * Val(2)) * x186));
  Val x257 = ((x83 + x187) - ((x83 * Val(2)) * x187));
  Val x258 = ((x84 + x188) - ((x84 * Val(2)) * x188));
  Val x259 = ((x85 + x189) - ((x85 * Val(2)) * x189));
  Val x260 = ((x86 + x190) - ((x86 * Val(2)) * x190));
  Val x261 = ((x87 + x191) - ((x87 * Val(2)) * x191));
  Val x262 = ((x88 + x192) - ((x88 * Val(2)) * x192));
  Val x263 = ((x89 + x193) - ((x89 * Val(2)) * x193));
  Val x264 = ((x90 + x194) - ((x90 * Val(2)) * x194));
  Val x265 = ((x91 + x195) - ((x91 * Val(2)) * x195));
  Val x266 = ((x92 + x196) - ((x92 * Val(2)) * x196));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // absorb_word(zirgen/circuit/keccak/keccak.zir:911)
  Val x267 = (((x203 + (x204 * Val(2))) + (x205 * Val(4))) + (x206 * Val(8)));
  Val x268 = (((x267 + (x207 * Val(16))) + (x208 * Val(32))) + (x209 * Val(64)));
  Val x269 = (((x268 + (x210 * Val(128))) + (x211 * Val(256))) + (x212 * Val(512)));
  Val x270 = (((x269 + (x213 * Val(1024))) + (x214 * Val(2048))) + (x215 * Val(4096)));
  Val x271 = (((x270 + (x216 * Val(8192))) + (x217 * Val(16384))) + (x218 * Val(32768)));
  Val x272 = (((x271 + (x219 * Val(65536))) + (x220 * Val(131072))) + (x221 * Val(262144)));
  Val x273 = (((x272 + (x222 * Val(524288))) + (x223 * Val(1048576))) + (x224 * Val(2097152)));
  Val x274 = (((x225 + (x226 * Val(2))) + (x227 * Val(4))) + (x228 * Val(8)));
  Val x275 = (((x274 + (x229 * Val(16))) + (x230 * Val(32))) + (x231 * Val(64)));
  Val x276 = (((x275 + (x232 * Val(128))) + (x233 * Val(256))) + (x234 * Val(512)));
  Val x277 = (((x276 + (x235 * Val(1024))) + (x236 * Val(2048))) + (x237 * Val(4096)));
  Val x278 = (((x277 + (x238 * Val(8192))) + (x239 * Val(16384))) + (x240 * Val(32768)));
  Val x279 = (((x278 + (x241 * Val(65536))) + (x242 * Val(131072))) + (x243 * Val(262144)));
  Val x280 = (((x246 + (x247 * Val(2))) + (x248 * Val(4))) + (x249 * Val(8)));
  Val x281 = (((x280 + (x250 * Val(16))) + (x251 * Val(32))) + (x252 * Val(64)));
  Val x282 = (((x281 + (x253 * Val(128))) + (x254 * Val(256))) + (x255 * Val(512)));
  Val x283 = (((x282 + (x256 * Val(1024))) + (x257 * Val(2048))) + (x258 * Val(4096)));
  Val x284 = (((x283 + (x259 * Val(8192))) + (x260 * Val(16384))) + (x261 * Val(32768)));
  Val x285 = (((x284 + (x262 * Val(65536))) + (x263 * Val(131072))) + (x264 * Val(262144)));
  // absorb_word(zirgen/circuit/keccak/keccak.zir:919)
  RetTupleStruct x286 =
      exec_RetTuple(ctx,
                    Val22Array{x6,  x7,  x8,  x9,  x10, x11, x12, x13, x14, x15, x16,
                               x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27},
                    Val22Array{x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213,
                               x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224},
                    Val22Array{x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235,
                               x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, Val(0)},
                    Val24Array{x246,
                               x247,
                               x248,
                               x249,
                               x250,
                               x251,
                               x252,
                               x253,
                               x254,
                               x255,
                               x256,
                               x257,
                               x258,
                               x259,
                               x260,
                               x261,
                               x262,
                               x263,
                               x264,
                               x265,
                               x266,
                               x273,
                               ((x279 + (x244 * Val(524288))) + (x245 * Val(1048576))),
                               ((x285 + (x265 * Val(524288))) + (x266 * Val(1048576)))},
                    Val22Array{x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49,
                               x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60},
                    Val22Array{x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82,
                               x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93},
                    Val(8),
                    Val(16),
                    Val(0),
                    arg0.blk._super,
                    x110,
                    LAYOUT_LOOKUP(layout1, _super));
  return x286;
}
RetTupleStruct execAbsorbMajor2(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<AbsorbMajor2Layout> layout2) {
  // absorb_major2(zirgen/circuit/keccak/keccak.zir:1001)
  BoundLayout<AbsorbMajor2_SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // absorb_major2(zirgen/circuit/keccak/keccak.zir:1000)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_9_Struct x5 = exec_OneHot_9_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct9Array x6 = x5._super;
  // absorb_major2(zirgen/circuit/keccak/keccak.zir:1001)
  BoundLayout<AbsorbMajor2Arm8Layout> x7 = LAYOUT_LOOKUP(x3, arm8);
  BoundLayout<Reg> x8 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x7, _extra0), count), _super);
  RetTupleStruct x9;
  if (to_size_t(x6[0]._super)) {
    // absorb_major2(zirgen/circuit/keccak/keccak.zir:1002)
    RetTupleStruct x10 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x11 = execAbsorbWord_4__1_(ctx, x10, LAYOUT_LOOKUP(x3, arm0));
    x9 = x11;
  } else if (to_size_t(x6[1]._super)) {
    // absorb_major2(zirgen/circuit/keccak/keccak.zir:1003)
    RetTupleStruct x12 = back_RetTuple(ctx, 2, arg1);
    RetTupleStruct x13 = execAbsorbWord_0__2_(ctx, x12, LAYOUT_LOOKUP(x3, arm1));
    x9 = x13;
  } else if (to_size_t(x6[2]._super)) {
    // absorb_major2(zirgen/circuit/keccak/keccak.zir:1004)
    RetTupleStruct x14 = back_RetTuple(ctx, 3, arg1);
    RetTupleStruct x15 = execAbsorbWord_1__2_(ctx, x14, LAYOUT_LOOKUP(x3, arm2));
    x9 = x15;
  } else if (to_size_t(x6[3]._super)) {
    // absorb_major2(zirgen/circuit/keccak/keccak.zir:1005)
    RetTupleStruct x16 = back_RetTuple(ctx, 4, arg1);
    RetTupleStruct x17 = execAbsorbWord_2__2_(ctx, x16, LAYOUT_LOOKUP(x3, arm3));
    x9 = x17;
  } else if (to_size_t(x6[4]._super)) {
    // absorb_major2(zirgen/circuit/keccak/keccak.zir:1006)
    RetTupleStruct x18 = back_RetTuple(ctx, 5, arg1);
    RetTupleStruct x19 = execAbsorbWord_3__2_(ctx, x18, LAYOUT_LOOKUP(x3, arm4));
    x9 = x19;
  } else if (to_size_t(x6[5]._super)) {
    // absorb_major2(zirgen/circuit/keccak/keccak.zir:1007)
    RetTupleStruct x20 = back_RetTuple(ctx, 6, arg1);
    RetTupleStruct x21 = execAbsorbWord_4__2_(ctx, x20, LAYOUT_LOOKUP(x3, arm5));
    x9 = x21;
  } else if (to_size_t(x6[6]._super)) {
    // absorb_major2(zirgen/circuit/keccak/keccak.zir:1008)
    RetTupleStruct x22 = back_RetTuple(ctx, 7, arg1);
    RetTupleStruct x23 = execAbsorbWord_0__3_(ctx, x22, LAYOUT_LOOKUP(x3, arm6));
    x9 = x23;
  } else if (to_size_t(x6[7]._super)) {
    // absorb_major2(zirgen/circuit/keccak/keccak.zir:1009)
    RetTupleStruct x24 = back_RetTuple(ctx, 8, arg1);
    RetTupleStruct x25 = execAbsorbWord_1__3_(ctx, x24, LAYOUT_LOOKUP(x3, arm7));
    x9 = x25;
  } else if (to_size_t(x6[8]._super)) {
    // absorb_major2(zirgen/circuit/keccak/keccak.zir:1010)
    RetTupleStruct x26 = execAbsorbCopy2(ctx, arg0, arg1, LAYOUT_LOOKUP(x7, _super));
    // absorb_major2(zirgen/circuit/keccak/keccak.zir:1001)
    STORE(x8, Val(0));
    EQZ(LOAD(x8, 0), "absorb_major2(zirgen/circuit/keccak/keccak.zir:1001)");
    x9 = x26;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  RetTupleStruct x27 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x27;
}
ToBits_30_Struct
exec_ToBits_30_(ExecContext& ctx, Val arg0, BoundLayout<ToBits_30_Layout> layout1) {
  // ToBits(zirgen/circuit/keccak/sha256_for_keccak.zir:80)
  NondetRegStruct30Array x2 = map(
      Val30Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                 Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                 Val(16), Val(17), Val(18), Val(19), Val(20), Val(21), Val(22), Val(23),
                 Val(24), Val(25), Val(26), Val(27), Val(28), Val(29)},
      LAYOUT_LOOKUP(layout1, _super),
      std::function([&](Val30Array::value_type x3,
                        BoundLayout<NondetRegLayout30LayoutArray::value_type> x4) {
        // Div(<preamble>:10)
        Val x5 = inv(Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                                Val(16),        Val(32),        Val(64),        Val(128),
                                Val(256),       Val(512),       Val(1024),      Val(2048),
                                Val(4096),      Val(8192),      Val(16384),     Val(32768),
                                Val(65536),     Val(131072),    Val(262144),    Val(524288),
                                Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                                Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                                Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]);
        // Div(<preamble>:11)
        EQZ(((x5 * Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                              Val(16),        Val(32),        Val(64),        Val(128),
                              Val(256),       Val(512),       Val(1024),      Val(2048),
                              Val(4096),      Val(8192),      Val(16384),     Val(32768),
                              Val(65536),     Val(131072),    Val(262144),    Val(524288),
                              Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                              Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                              Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]) -
             Val(1)),
            "loc(callsite( Div ( <preamble> :11:22) at  ToBits ( "
            "zirgen/circuit/keccak/sha256_for_keccak.zir :80:43)))");
        NondetRegStruct x6 = exec_NondetBitReg(
            ctx,
            (x5 *
             bitAnd(arg0,
                    Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                               Val(16),        Val(32),        Val(64),        Val(128),
                               Val(256),       Val(512),       Val(1024),      Val(2048),
                               Val(4096),      Val(8192),      Val(16384),     Val(32768),
                               Val(65536),     Val(131072),    Val(262144),    Val(524288),
                               Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                               Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                               Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)])),
            x4);
        return x6;
      }));
  return ToBits_30_Struct{._super = x2};
}
RetTupleStruct execMemPaddingSha256(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<MemPaddingSha256Layout> layout1) {
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1115)
  BoundLayout<MemPaddingSha256_SuperLayout> x2 = LAYOUT_LOOKUP(layout1, _super);
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1088)
  Val x3 = arg0.rnd._super;
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1090)
  ToBits_30_Struct x4 = exec_ToBits_30_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackBitlen));
  NondetRegStruct30Array x5 = x4._super;
  Val x6 = x5[8]._super;
  Val x7 = x5[9]._super;
  Val x8 = x5[10]._super;
  Val x9 = x5[11]._super;
  Val x10 = x5[12]._super;
  Val x11 = x5[13]._super;
  Val x12 = x5[14]._super;
  Val x13 = x5[15]._super;
  Val x14 = x5[16]._super;
  Val x15 = x5[17]._super;
  Val x16 = x5[18]._super;
  Val x17 = x5[19]._super;
  Val x18 = x5[20]._super;
  Val x19 = x5[21]._super;
  Val x20 = x5[22]._super;
  Val x21 = x5[23]._super;
  Val x22 = x5[24]._super;
  Val x23 = x5[25]._super;
  Val x24 = x5[26]._super;
  Val x25 = x5[27]._super;
  Val x26 = x5[28]._super;
  Val x27 = x5[29]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1091)
  Val x28 = (x5[1]._super * Val(2));
  Val x29 = (x5[2]._super * Val(4));
  Val x30 = (x5[3]._super * Val(8));
  Val x31 = (x5[4]._super * Val(16));
  Val x32 = (x5[5]._super * Val(32));
  Val x33 = (x5[6]._super * Val(64));
  Val x34 = (x5[7]._super * Val(128));
  Val x35 = (x5[0]._super + x28);
  Val x36 = (((x35 + x29) + x30) + x31);
  Val x37 = (((x36 + x32) + x33) + x34);
  Val x38 = (((x37 + (x6 * Val(256))) + (x7 * Val(512))) + (x8 * Val(1024)));
  Val x39 = (((x38 + (x9 * Val(2048))) + (x10 * Val(4096))) + (x11 * Val(8192)));
  Val x40 = (((x39 + (x12 * Val(16384))) + (x13 * Val(32768))) + (x14 * Val(65536)));
  Val x41 = (((x40 + (x15 * Val(131072))) + (x16 * Val(262144))) + (x17 * Val(524288)));
  Val x42 = (((x41 + (x18 * Val(1048576))) + (x19 * Val(2097152))) + (x20 * Val(4194304)));
  Val x43 = (((x42 + (x21 * Val(8388608))) + (x22 * Val(16777216))) + (x23 * Val(33554432)));
  Val x44 = (((x43 + (x24 * Val(67108864))) + (x25 * Val(134217728))) + (x26 * Val(268435456)));
  EQZ(((x44 + (x27 * Val(536870912))) - x3),
      "mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1091)");
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1097)
  Val x45 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x46 = (((x45 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1099)
  Val x47 = (((x14 + (x15 * Val(2))) + (x16 * Val(4))) + (x17 * Val(8)));
  Val x48 = (((x47 + (x18 * Val(16))) + (x19 * Val(32))) + (x20 * Val(64)));
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1100)
  Val x49 = (((x22 + (x23 * Val(2))) + (x24 * Val(4))) + (x25 * Val(8)));
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1101)
  Val x50 = (((x48 + (x21 * Val(128))) * Val(256)) + ((x49 + (x26 * Val(16))) + (x27 * Val(32))));
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1103)
  Val x51 = (arg0.midx._super + Val(1));
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1088)
  Val x52 = arg0.blk._super;
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1105)
  NondetRegStruct x53 = exec_NondetReg(ctx, inv(x52), LAYOUT_LOOKUP(layout1, invn));
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1106)
  NondetRegStruct x54 = exec_Reg(ctx, (x52 * x53._super), LAYOUT_LOOKUP(layout1, prod));
  Val x55 = x54._super;
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1107)
  Val x56 = (Val(1) - x55);
  EQZ((x52 * x56), "mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1107)");
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1109)
  Val x57 = (x51 + Val(1));
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1110)
  Val x58 = (x52 - Val(1));
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1111)
  NondetRegStruct x59 = exec_NondetReg(ctx, inv(x58), LAYOUT_LOOKUP(layout1, invnNxt));
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1112)
  NondetRegStruct x60 = exec_Reg(ctx, (x58 * x59._super), LAYOUT_LOOKUP(layout1, prodNxt));
  Val x61 = x60._super;
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1113)
  Val x62 = (Val(1) - x61);
  EQZ((x58 * x62), "mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1113)");
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1115)
  BoundLayout<MemPaddingSha256Arm0Layout> x63 = LAYOUT_LOOKUP(x2, arm0);
  BoundLayout<MemPaddingSha256Arm1_SuperLayout> x64 = LAYOUT_LOOKUP(x2, arm1);
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1116)
  BoundLayout<MemPaddingSha256Arm0_SuperLayout> x65 = LAYOUT_LOOKUP(x63, _super);
  // MemDigest(zirgen/circuit/keccak/sha256_for_keccak.zir:7)
  MemDigestStruct x66 = MemDigestStruct{
      ._super = Val4Array{Val(0), Val(0), x50, ((x37 * Val(256)) + (x46 + (x13 * Val(128))))}};
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1117)
  Val22Array x67 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  Val24Array x68 = Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1115)
  BoundLayout<Reg> x69 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x63, _extra0), count), _super);
  BoundLayout<MemPaddingSha256Arm1_Super_SuperLayout> x70 = LAYOUT_LOOKUP(x64, _super);
  // MemDigest(zirgen/circuit/keccak/sha256_for_keccak.zir:7)
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1120)
  MemDigestStruct x71 = MemDigestStruct{._super = Val4Array{Val(0), Val(0), Val(0), Val(0)}};
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1121)
  BoundLayout<MemPaddingSha256Arm1_SuperArm0_SuperLayout> x72 = LAYOUT_LOOKUP(x70, arm0);
  BoundLayout<MemPaddingSha256Arm1_SuperArm1_SuperLayout> x73 = LAYOUT_LOOKUP(x70, arm1);
  RetTupleStruct x74;
  if (to_size_t(x56)) {
    // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1116)
    WriteMemoryStruct x75 = exec_WriteMemory(ctx, x51, x66, LAYOUT_LOOKUP(x65, _0));
    // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1117)
    RetTupleStruct x76 = exec_RetTuple(ctx,
                                       x67,
                                       x67,
                                       x67,
                                       x68,
                                       x67,
                                       x67,
                                       Val(5),
                                       Val(17),
                                       Val(0),
                                       Val(0),
                                       x51,
                                       LAYOUT_LOOKUP(x65, _super));
    // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1115)
    STORE(x69, Val(0));
    EQZ(LOAD(x69, 0), "mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1115)");
    x74 = x76;
  } else if (to_size_t(x55)) {
    // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1120)
    WriteMemoryStruct x77 = exec_WriteMemory(ctx, x51, x71, LAYOUT_LOOKUP(x64, _0));
    RetTupleStruct x78;
    if (to_size_t(x62)) {
      // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1122)
      WriteMemoryStruct x79 = exec_WriteMemory(ctx, x57, x66, LAYOUT_LOOKUP(x72, _0));
      // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1123)
      RetTupleStruct x80 = exec_RetTuple(ctx,
                                         x67,
                                         x67,
                                         x67,
                                         x68,
                                         x67,
                                         x67,
                                         Val(5),
                                         Val(17),
                                         Val(0),
                                         Val(0),
                                         x57,
                                         LAYOUT_LOOKUP(x72, _super));
      x78 = x80;
    } else if (to_size_t(x61)) {
      // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1126)
      WriteMemoryStruct x81 = exec_WriteMemory(ctx, x57, x71, LAYOUT_LOOKUP(x73, _0));
      // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1127)
      RetTupleStruct x82 = exec_RetTuple(ctx,
                                         x67,
                                         x67,
                                         x67,
                                         x68,
                                         x67,
                                         x67,
                                         Val(4),
                                         Val(17),
                                         x3,
                                         (x58 - Val(1)),
                                         x57,
                                         LAYOUT_LOOKUP(x73, _super));
      x78 = x82;
    } else {
      assert(0 && "Reached unreachable mux arm");
    }
    // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1121)
    RetTupleStruct x83 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x70, _super));
    x74 = x83;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // mem_padding_sha256(zirgen/circuit/keccak/keccak.zir:1115)
  RetTupleStruct x84 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x2, _super));
  return x84;
}
ShaOutputStruct
exec_ShaOutput(ExecContext& ctx, Val16Array arg0, BoundLayout<ShaOutputLayout> layout1) {
  // ShaOutput(zirgen/circuit/keccak/keccak.zir:1134)
  ShaOutputValsStruct16Array x2 =
      map(arg0,
          LAYOUT_LOOKUP(layout1, vals),
          std::function([&](Val16Array::value_type x3,
                            BoundLayout<NondetRegLayout16LayoutArray::value_type> x4) {
            NondetRegStruct x5 = exec_Reg(ctx, x3, x4);
            return ShaOutputValsStruct{};
          }));
  return ShaOutputStruct{};
}
OneHot_14_Struct
exec_OneHot_14_(ExecContext& ctx, Val arg0, BoundLayout<OneHot_14_Layout> layout1) {
  // OneHot(zirgen/circuit/keccak/one_hot.zir:7)
  NondetRegStruct14Array x2 =
      map(Val14Array{Val(0),
                     Val(1),
                     Val(2),
                     Val(3),
                     Val(4),
                     Val(5),
                     Val(6),
                     Val(7),
                     Val(8),
                     Val(9),
                     Val(10),
                     Val(11),
                     Val(12),
                     Val(13)},
          LAYOUT_LOOKUP(layout1, _super),
          std::function([&](Val14Array::value_type x3,
                            BoundLayout<NondetRegLayout14LayoutArray::value_type> x4) {
            NondetRegStruct x5 = exec_NondetBitReg(ctx, isz((x3 - arg0)), x4);
            return x5;
          }));
  // OneHot(zirgen/circuit/keccak/one_hot.zir:9)
  Val x6 = x2[1]._super;
  Val x7 = (x2[0]._super + x6);
  Val x8 = x2[2]._super;
  Val x9 = x2[3]._super;
  Val x10 = x2[4]._super;
  Val x11 = (((x7 + x8) + x9) + x10);
  Val x12 = x2[5]._super;
  Val x13 = x2[6]._super;
  Val x14 = x2[7]._super;
  Val x15 = (((x11 + x12) + x13) + x14);
  Val x16 = x2[8]._super;
  Val x17 = x2[9]._super;
  Val x18 = x2[10]._super;
  Val x19 = (((x15 + x16) + x17) + x18);
  Val x20 = x2[11]._super;
  Val x21 = x2[12]._super;
  Val x22 = x2[13]._super;
  Val x23 = (((x19 + x20) + x21) + x22);
  EQZ((x23 - Val(1)), "OneHot(zirgen/circuit/keccak/one_hot.zir:9)");
  // OneHot(zirgen/circuit/keccak/one_hot.zir:11)
  Val x24 = (((x6 + (x8 * Val(2))) + (x9 * Val(3))) + (x10 * Val(4)));
  Val x25 = (((x24 + (x12 * Val(5))) + (x13 * Val(6))) + (x14 * Val(7)));
  Val x26 = (((x25 + (x16 * Val(8))) + (x17 * Val(9))) + (x18 * Val(10)));
  Val x27 = (((x26 + (x20 * Val(11))) + (x21 * Val(12))) + (x22 * Val(13)));
  EQZ((x27 - arg0), "OneHot(zirgen/circuit/keccak/one_hot.zir:11)");
  return OneHot_14_Struct{._super = x2};
}
ToBits_3_Struct exec_ToBits_3_(ExecContext& ctx, Val arg0, BoundLayout<ToBits_3_Layout> layout1) {
  // ToBits(zirgen/circuit/keccak/sha256_for_keccak.zir:80)
  NondetRegStruct3Array x2 = map(
      Val3Array{Val(0), Val(1), Val(2)},
      LAYOUT_LOOKUP(layout1, _super),
      std::function([&](Val3Array::value_type x3,
                        BoundLayout<NondetRegLayout3LayoutArray::value_type> x4) {
        // Div(<preamble>:10)
        Val x5 = inv(Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                                Val(16),        Val(32),        Val(64),        Val(128),
                                Val(256),       Val(512),       Val(1024),      Val(2048),
                                Val(4096),      Val(8192),      Val(16384),     Val(32768),
                                Val(65536),     Val(131072),    Val(262144),    Val(524288),
                                Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                                Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                                Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]);
        // Div(<preamble>:11)
        EQZ(((x5 * Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                              Val(16),        Val(32),        Val(64),        Val(128),
                              Val(256),       Val(512),       Val(1024),      Val(2048),
                              Val(4096),      Val(8192),      Val(16384),     Val(32768),
                              Val(65536),     Val(131072),    Val(262144),    Val(524288),
                              Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                              Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                              Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)]) -
             Val(1)),
            "loc(callsite( Div ( <preamble> :11:22) at  ToBits ( "
            "zirgen/circuit/keccak/sha256_for_keccak.zir :80:43)))");
        NondetRegStruct x6 = exec_NondetBitReg(
            ctx,
            (x5 *
             bitAnd(arg0,
                    Val31Array{Val(1),         Val(2),         Val(4),         Val(8),
                               Val(16),        Val(32),        Val(64),        Val(128),
                               Val(256),       Val(512),       Val(1024),      Val(2048),
                               Val(4096),      Val(8192),      Val(16384),     Val(32768),
                               Val(65536),     Val(131072),    Val(262144),    Val(524288),
                               Val(1048576),   Val(2097152),   Val(4194304),   Val(8388608),
                               Val(16777216),  Val(33554432),  Val(67108864),  Val(134217728),
                               Val(268435456), Val(536870912), Val(1073741824)}[to_size_t(x3)])),
            x4);
        return x6;
      }));
  return ToBits_3_Struct{._super = x2};
}
RetTupleStruct
execEqualWord_0_(ExecContext& ctx, RetTupleStruct arg0, BoundLayout<EqualWord_0_Layout> layout1) {
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  NondetRegStruct22Array x2 = arg0.arrA;
  Val x3 = x2[0]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1018)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1019)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "equal_word(zirgen/circuit/keccak/keccak.zir:1019)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  Val x35 = x2[1]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1020)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1021)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "equal_word(zirgen/circuit/keccak/keccak.zir:1021)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  Val x66 = x2[2]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1022)
  ToBits_21_Struct x67 = exec_ToBits_21_(ctx, x66, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct21Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1023)
  Val x90 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x91 = (((x90 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x92 = (((x91 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x93 = (((x92 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x94 = (((x93 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x95 = (((x94 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x96 = (((x95 + (x88 * Val(524288))) + (x89 * Val(1048576))) - x66);
  EQZ(x96, "equal_word(zirgen/circuit/keccak/keccak.zir:1023)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1025)
  Val x97 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1026)
  ToBits_16_Struct x98 = exec_ToBits_16_(ctx, x97, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1027)
  Val x99 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1028)
  ToBits_16_Struct x100 = exec_ToBits_16_(ctx, x99, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1029)
  Val x101 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1030)
  ToBits_16_Struct x102 = exec_ToBits_16_(ctx, x101, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1031)
  Val x103 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1032)
  ToBits_16_Struct x104 = exec_ToBits_16_(ctx, x103, LAYOUT_LOOKUP(layout1, unpack_4));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1033)
  Val x105 = (arg0.midx._super + Val(1));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1034)
  NondetRegStruct x106 = exec_NondetReg(ctx, inv(x105), LAYOUT_LOOKUP(layout1, invmidx));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1035)
  Val x107 = ((x106._super * x105) - Val(1));
  EQZ(x107, "equal_word(zirgen/circuit/keccak/keccak.zir:1035)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1026)
  NondetRegStruct16Array x108 = x98._super;
  Val x109 = x108[0]._super;
  Val x110 = x108[1]._super;
  Val x111 = x108[2]._super;
  Val x112 = x108[3]._super;
  Val x113 = x108[4]._super;
  Val x114 = x108[5]._super;
  Val x115 = x108[6]._super;
  Val x116 = x108[7]._super;
  Val x117 = x108[8]._super;
  Val x118 = x108[9]._super;
  Val x119 = x108[10]._super;
  Val x120 = x108[11]._super;
  Val x121 = x108[12]._super;
  Val x122 = x108[13]._super;
  Val x123 = x108[14]._super;
  Val x124 = x108[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x125 = (((x109 + (x110 * Val(2))) + (x111 * Val(4))) + (x112 * Val(8)));
  Val x126 = (((x125 + (x113 * Val(16))) + (x114 * Val(32))) + (x115 * Val(64)));
  Val x127 = (((x126 + (x116 * Val(128))) + (x117 * Val(256))) + (x118 * Val(512)));
  Val x128 = (((x127 + (x119 * Val(1024))) + (x120 * Val(2048))) + (x121 * Val(4096)));
  Val x129 = (((x128 + (x122 * Val(8192))) + (x123 * Val(16384))) + (x124 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1028)
  NondetRegStruct16Array x130 = x100._super;
  Val x131 = x130[0]._super;
  Val x132 = x130[1]._super;
  Val x133 = x130[2]._super;
  Val x134 = x130[3]._super;
  Val x135 = x130[4]._super;
  Val x136 = x130[5]._super;
  Val x137 = x130[6]._super;
  Val x138 = x130[7]._super;
  Val x139 = x130[8]._super;
  Val x140 = x130[9]._super;
  Val x141 = x130[10]._super;
  Val x142 = x130[11]._super;
  Val x143 = x130[12]._super;
  Val x144 = x130[13]._super;
  Val x145 = x130[14]._super;
  Val x146 = x130[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x147 = (((x131 + (x132 * Val(2))) + (x133 * Val(4))) + (x134 * Val(8)));
  Val x148 = (((x147 + (x135 * Val(16))) + (x136 * Val(32))) + (x137 * Val(64)));
  Val x149 = (((x148 + (x138 * Val(128))) + (x139 * Val(256))) + (x140 * Val(512)));
  Val x150 = (((x149 + (x141 * Val(1024))) + (x142 * Val(2048))) + (x143 * Val(4096)));
  Val x151 = (((x150 + (x144 * Val(8192))) + (x145 * Val(16384))) + (x146 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1030)
  NondetRegStruct16Array x152 = x102._super;
  Val x153 = x152[0]._super;
  Val x154 = x152[1]._super;
  Val x155 = x152[2]._super;
  Val x156 = x152[3]._super;
  Val x157 = x152[4]._super;
  Val x158 = x152[5]._super;
  Val x159 = x152[6]._super;
  Val x160 = x152[7]._super;
  Val x161 = x152[8]._super;
  Val x162 = x152[9]._super;
  Val x163 = x152[10]._super;
  Val x164 = x152[11]._super;
  Val x165 = x152[12]._super;
  Val x166 = x152[13]._super;
  Val x167 = x152[14]._super;
  Val x168 = x152[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x169 = (((x153 + (x154 * Val(2))) + (x155 * Val(4))) + (x156 * Val(8)));
  Val x170 = (((x169 + (x157 * Val(16))) + (x158 * Val(32))) + (x159 * Val(64)));
  Val x171 = (((x170 + (x160 * Val(128))) + (x161 * Val(256))) + (x162 * Val(512)));
  Val x172 = (((x171 + (x163 * Val(1024))) + (x164 * Val(2048))) + (x165 * Val(4096)));
  Val x173 = (((x172 + (x166 * Val(8192))) + (x167 * Val(16384))) + (x168 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1032)
  NondetRegStruct16Array x174 = x104._super;
  Val x175 = x174[0]._super;
  Val x176 = x174[1]._super;
  Val x177 = x174[2]._super;
  Val x178 = x174[3]._super;
  Val x179 = x174[4]._super;
  Val x180 = x174[5]._super;
  Val x181 = x174[6]._super;
  Val x182 = x174[7]._super;
  Val x183 = x174[8]._super;
  Val x184 = x174[9]._super;
  Val x185 = x174[10]._super;
  Val x186 = x174[11]._super;
  Val x187 = x174[12]._super;
  Val x188 = x174[13]._super;
  Val x189 = x174[14]._super;
  Val x190 = x174[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x191 = (((x175 + (x176 * Val(2))) + (x177 * Val(4))) + (x178 * Val(8)));
  Val x192 = (((x191 + (x179 * Val(16))) + (x180 * Val(32))) + (x181 * Val(64)));
  Val x193 = (((x192 + (x182 * Val(128))) + (x183 * Val(256))) + (x184 * Val(512)));
  Val x194 = (((x193 + (x185 * Val(1024))) + (x186 * Val(2048))) + (x187 * Val(4096)));
  Val x195 = (((x194 + (x188 * Val(8192))) + (x189 * Val(16384))) + (x190 * Val(32768)));
  WriteMemoryStruct x196 =
      exec_WriteMemory(ctx,
                       x105,
                       MemDigestStruct{._super = Val4Array{x129, x151, x173, x195}},
                       LAYOUT_LOOKUP(layout1, _0));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1039)
  EQZ((x6 - x109), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x7 - x110), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x8 - x111), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x9 - x112), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x10 - x113), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x11 - x114), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x12 - x115), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x13 - x116), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x14 - x117), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x15 - x118), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x16 - x119), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x17 - x120), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x18 - x121), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x19 - x122), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x20 - x123), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x21 - x124), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1041)
  EQZ((x22 - x131), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x23 - x132), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x24 - x133), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x25 - x134), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x26 - x135), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x27 - x136), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1043)
  EQZ((x38 - x137), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x39 - x138), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x40 - x139), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x41 - x140), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x42 - x141), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x43 - x142), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x44 - x143), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x45 - x144), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x46 - x145), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x47 - x146), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1045)
  EQZ((x48 - x153), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x49 - x154), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x50 - x155), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x51 - x156), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x52 - x157), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x53 - x158), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x54 - x159), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x55 - x160), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x56 - x161), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x57 - x162), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x58 - x163), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1047)
  EQZ((x69 - x164), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x70 - x165), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x71 - x166), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x72 - x167), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x73 - x168), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1049)
  EQZ((x74 - x175), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x75 - x176), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x76 - x177), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x77 - x178), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x78 - x179), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x79 - x180), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x80 - x181), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x81 - x182), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x82 - x183), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x83 - x184), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x84 - x185), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x85 - x186), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x86 - x187), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x87 - x188), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x88 - x189), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x89 - x190), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  // Log(<preamble>:16)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1052)
  INVOKE_EXTERN(ctx, log, "Z: %u", std::initializer_list<Val>{Val(0)});
  // equal_word(zirgen/circuit/keccak/keccak.zir:1053)
  BoundLayout<EqualWord_0_Arm0Layout> x197 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(layout1, nxt), arm0);
  BoundLayout<Reg> x198 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x197, _extra0), count), _super);
  STORE(x198, Val(0));
  EQZ(LOAD(x198, 0), "equal_word(zirgen/circuit/keccak/keccak.zir:1053)");
  BoundLayout<Reg> x199 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x197, _extra1), count), _super);
  STORE(x199, Val(0));
  EQZ(LOAD(x199, 0), "equal_word(zirgen/circuit/keccak/keccak.zir:1053)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1084)
  Val22Array x200 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x201 =
      exec_RetTuple(ctx,
                    x200,
                    x200,
                    x200,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x200,
                    x200,
                    Val(1),
                    Val(17),
                    Val(0),
                    Val(0),
                    x105,
                    LAYOUT_LOOKUP(layout1, _super));
  return x201;
}
RetTupleStruct
execEqualWord_1_(ExecContext& ctx, RetTupleStruct arg0, BoundLayout<EqualWord_1_Layout> layout1) {
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  NondetRegStruct22Array x2 = arg0.arrA;
  Val x3 = x2[3]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1018)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1019)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "equal_word(zirgen/circuit/keccak/keccak.zir:1019)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  Val x35 = x2[4]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1020)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1021)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "equal_word(zirgen/circuit/keccak/keccak.zir:1021)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  Val x66 = x2[5]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1022)
  ToBits_21_Struct x67 = exec_ToBits_21_(ctx, x66, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct21Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1023)
  Val x90 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x91 = (((x90 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x92 = (((x91 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x93 = (((x92 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x94 = (((x93 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x95 = (((x94 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x96 = (((x95 + (x88 * Val(524288))) + (x89 * Val(1048576))) - x66);
  EQZ(x96, "equal_word(zirgen/circuit/keccak/keccak.zir:1023)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1025)
  Val x97 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1026)
  ToBits_16_Struct x98 = exec_ToBits_16_(ctx, x97, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1027)
  Val x99 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1028)
  ToBits_16_Struct x100 = exec_ToBits_16_(ctx, x99, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1029)
  Val x101 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1030)
  ToBits_16_Struct x102 = exec_ToBits_16_(ctx, x101, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1031)
  Val x103 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1032)
  ToBits_16_Struct x104 = exec_ToBits_16_(ctx, x103, LAYOUT_LOOKUP(layout1, unpack_4));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1033)
  Val x105 = (arg0.midx._super + Val(1));
  Val x106 = (x105 + Val(1));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1034)
  NondetRegStruct x107 = exec_NondetReg(ctx, inv(x106), LAYOUT_LOOKUP(layout1, invmidx));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1035)
  Val x108 = ((x107._super * x106) - Val(1));
  EQZ(x108, "equal_word(zirgen/circuit/keccak/keccak.zir:1035)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1026)
  NondetRegStruct16Array x109 = x98._super;
  Val x110 = x109[0]._super;
  Val x111 = x109[1]._super;
  Val x112 = x109[2]._super;
  Val x113 = x109[3]._super;
  Val x114 = x109[4]._super;
  Val x115 = x109[5]._super;
  Val x116 = x109[6]._super;
  Val x117 = x109[7]._super;
  Val x118 = x109[8]._super;
  Val x119 = x109[9]._super;
  Val x120 = x109[10]._super;
  Val x121 = x109[11]._super;
  Val x122 = x109[12]._super;
  Val x123 = x109[13]._super;
  Val x124 = x109[14]._super;
  Val x125 = x109[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x126 = (((x110 + (x111 * Val(2))) + (x112 * Val(4))) + (x113 * Val(8)));
  Val x127 = (((x126 + (x114 * Val(16))) + (x115 * Val(32))) + (x116 * Val(64)));
  Val x128 = (((x127 + (x117 * Val(128))) + (x118 * Val(256))) + (x119 * Val(512)));
  Val x129 = (((x128 + (x120 * Val(1024))) + (x121 * Val(2048))) + (x122 * Val(4096)));
  Val x130 = (((x129 + (x123 * Val(8192))) + (x124 * Val(16384))) + (x125 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1028)
  NondetRegStruct16Array x131 = x100._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x148 = (((x132 + (x133 * Val(2))) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x149 = (((x148 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x150 = (((x149 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x151 = (((x150 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x152 = (((x151 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1030)
  NondetRegStruct16Array x153 = x102._super;
  Val x154 = x153[0]._super;
  Val x155 = x153[1]._super;
  Val x156 = x153[2]._super;
  Val x157 = x153[3]._super;
  Val x158 = x153[4]._super;
  Val x159 = x153[5]._super;
  Val x160 = x153[6]._super;
  Val x161 = x153[7]._super;
  Val x162 = x153[8]._super;
  Val x163 = x153[9]._super;
  Val x164 = x153[10]._super;
  Val x165 = x153[11]._super;
  Val x166 = x153[12]._super;
  Val x167 = x153[13]._super;
  Val x168 = x153[14]._super;
  Val x169 = x153[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x170 = (((x154 + (x155 * Val(2))) + (x156 * Val(4))) + (x157 * Val(8)));
  Val x171 = (((x170 + (x158 * Val(16))) + (x159 * Val(32))) + (x160 * Val(64)));
  Val x172 = (((x171 + (x161 * Val(128))) + (x162 * Val(256))) + (x163 * Val(512)));
  Val x173 = (((x172 + (x164 * Val(1024))) + (x165 * Val(2048))) + (x166 * Val(4096)));
  Val x174 = (((x173 + (x167 * Val(8192))) + (x168 * Val(16384))) + (x169 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1032)
  NondetRegStruct16Array x175 = x104._super;
  Val x176 = x175[0]._super;
  Val x177 = x175[1]._super;
  Val x178 = x175[2]._super;
  Val x179 = x175[3]._super;
  Val x180 = x175[4]._super;
  Val x181 = x175[5]._super;
  Val x182 = x175[6]._super;
  Val x183 = x175[7]._super;
  Val x184 = x175[8]._super;
  Val x185 = x175[9]._super;
  Val x186 = x175[10]._super;
  Val x187 = x175[11]._super;
  Val x188 = x175[12]._super;
  Val x189 = x175[13]._super;
  Val x190 = x175[14]._super;
  Val x191 = x175[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x192 = (((x176 + (x177 * Val(2))) + (x178 * Val(4))) + (x179 * Val(8)));
  Val x193 = (((x192 + (x180 * Val(16))) + (x181 * Val(32))) + (x182 * Val(64)));
  Val x194 = (((x193 + (x183 * Val(128))) + (x184 * Val(256))) + (x185 * Val(512)));
  Val x195 = (((x194 + (x186 * Val(1024))) + (x187 * Val(2048))) + (x188 * Val(4096)));
  Val x196 = (((x195 + (x189 * Val(8192))) + (x190 * Val(16384))) + (x191 * Val(32768)));
  WriteMemoryStruct x197 =
      exec_WriteMemory(ctx,
                       x106,
                       MemDigestStruct{._super = Val4Array{x130, x152, x174, x196}},
                       LAYOUT_LOOKUP(layout1, _0));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1039)
  EQZ((x6 - x110), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x7 - x111), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x8 - x112), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x9 - x113), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x10 - x114), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x11 - x115), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x12 - x116), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x13 - x117), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x14 - x118), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x15 - x119), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x16 - x120), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x17 - x121), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x18 - x122), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x19 - x123), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x20 - x124), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x21 - x125), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1041)
  EQZ((x22 - x132), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x23 - x133), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x24 - x134), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x25 - x135), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x26 - x136), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x27 - x137), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1043)
  EQZ((x38 - x138), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x39 - x139), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x40 - x140), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x41 - x141), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x42 - x142), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x43 - x143), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x44 - x144), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x45 - x145), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x46 - x146), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x47 - x147), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1045)
  EQZ((x48 - x154), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x49 - x155), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x50 - x156), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x51 - x157), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x52 - x158), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x53 - x159), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x54 - x160), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x55 - x161), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x56 - x162), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x57 - x163), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x58 - x164), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1047)
  EQZ((x69 - x165), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x70 - x166), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x71 - x167), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x72 - x168), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x73 - x169), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1049)
  EQZ((x74 - x176), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x75 - x177), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x76 - x178), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x77 - x179), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x78 - x180), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x79 - x181), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x80 - x182), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x81 - x183), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x82 - x184), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x83 - x185), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x84 - x186), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x85 - x187), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x86 - x188), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x87 - x189), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x88 - x190), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x89 - x191), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  // Log(<preamble>:16)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1052)
  INVOKE_EXTERN(ctx, log, "Z: %u", std::initializer_list<Val>{Val(0)});
  // equal_word(zirgen/circuit/keccak/keccak.zir:1053)
  BoundLayout<EqualWord_1_Arm0Layout> x198 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(layout1, nxt), arm0);
  BoundLayout<Reg> x199 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x198, _extra0), count), _super);
  STORE(x199, Val(0));
  EQZ(LOAD(x199, 0), "equal_word(zirgen/circuit/keccak/keccak.zir:1053)");
  BoundLayout<Reg> x200 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x198, _extra1), count), _super);
  STORE(x200, Val(0));
  EQZ(LOAD(x200, 0), "equal_word(zirgen/circuit/keccak/keccak.zir:1053)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1084)
  Val22Array x201 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x202 =
      exec_RetTuple(ctx,
                    x201,
                    x201,
                    x201,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x201,
                    x201,
                    Val(2),
                    Val(17),
                    Val(0),
                    Val(0),
                    x106,
                    LAYOUT_LOOKUP(layout1, _super));
  return x202;
}
RetTupleStruct
execEqualWord_2_(ExecContext& ctx, RetTupleStruct arg0, BoundLayout<EqualWord_2_Layout> layout1) {
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  NondetRegStruct22Array x2 = arg0.arrA;
  Val x3 = x2[6]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1018)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1019)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "equal_word(zirgen/circuit/keccak/keccak.zir:1019)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  Val x35 = x2[7]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1020)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1021)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "equal_word(zirgen/circuit/keccak/keccak.zir:1021)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  Val x66 = x2[8]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1022)
  ToBits_21_Struct x67 = exec_ToBits_21_(ctx, x66, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct21Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1023)
  Val x90 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x91 = (((x90 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x92 = (((x91 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x93 = (((x92 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x94 = (((x93 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x95 = (((x94 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x96 = (((x95 + (x88 * Val(524288))) + (x89 * Val(1048576))) - x66);
  EQZ(x96, "equal_word(zirgen/circuit/keccak/keccak.zir:1023)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1025)
  Val x97 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1026)
  ToBits_16_Struct x98 = exec_ToBits_16_(ctx, x97, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1027)
  Val x99 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1028)
  ToBits_16_Struct x100 = exec_ToBits_16_(ctx, x99, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1029)
  Val x101 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1030)
  ToBits_16_Struct x102 = exec_ToBits_16_(ctx, x101, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1031)
  Val x103 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1032)
  ToBits_16_Struct x104 = exec_ToBits_16_(ctx, x103, LAYOUT_LOOKUP(layout1, unpack_4));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1033)
  Val x105 = (arg0.midx._super + Val(1));
  Val x106 = (x105 + Val(2));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1034)
  NondetRegStruct x107 = exec_NondetReg(ctx, inv(x106), LAYOUT_LOOKUP(layout1, invmidx));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1035)
  Val x108 = ((x107._super * x106) - Val(1));
  EQZ(x108, "equal_word(zirgen/circuit/keccak/keccak.zir:1035)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1026)
  NondetRegStruct16Array x109 = x98._super;
  Val x110 = x109[0]._super;
  Val x111 = x109[1]._super;
  Val x112 = x109[2]._super;
  Val x113 = x109[3]._super;
  Val x114 = x109[4]._super;
  Val x115 = x109[5]._super;
  Val x116 = x109[6]._super;
  Val x117 = x109[7]._super;
  Val x118 = x109[8]._super;
  Val x119 = x109[9]._super;
  Val x120 = x109[10]._super;
  Val x121 = x109[11]._super;
  Val x122 = x109[12]._super;
  Val x123 = x109[13]._super;
  Val x124 = x109[14]._super;
  Val x125 = x109[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x126 = (((x110 + (x111 * Val(2))) + (x112 * Val(4))) + (x113 * Val(8)));
  Val x127 = (((x126 + (x114 * Val(16))) + (x115 * Val(32))) + (x116 * Val(64)));
  Val x128 = (((x127 + (x117 * Val(128))) + (x118 * Val(256))) + (x119 * Val(512)));
  Val x129 = (((x128 + (x120 * Val(1024))) + (x121 * Val(2048))) + (x122 * Val(4096)));
  Val x130 = (((x129 + (x123 * Val(8192))) + (x124 * Val(16384))) + (x125 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1028)
  NondetRegStruct16Array x131 = x100._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x148 = (((x132 + (x133 * Val(2))) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x149 = (((x148 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x150 = (((x149 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x151 = (((x150 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x152 = (((x151 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1030)
  NondetRegStruct16Array x153 = x102._super;
  Val x154 = x153[0]._super;
  Val x155 = x153[1]._super;
  Val x156 = x153[2]._super;
  Val x157 = x153[3]._super;
  Val x158 = x153[4]._super;
  Val x159 = x153[5]._super;
  Val x160 = x153[6]._super;
  Val x161 = x153[7]._super;
  Val x162 = x153[8]._super;
  Val x163 = x153[9]._super;
  Val x164 = x153[10]._super;
  Val x165 = x153[11]._super;
  Val x166 = x153[12]._super;
  Val x167 = x153[13]._super;
  Val x168 = x153[14]._super;
  Val x169 = x153[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x170 = (((x154 + (x155 * Val(2))) + (x156 * Val(4))) + (x157 * Val(8)));
  Val x171 = (((x170 + (x158 * Val(16))) + (x159 * Val(32))) + (x160 * Val(64)));
  Val x172 = (((x171 + (x161 * Val(128))) + (x162 * Val(256))) + (x163 * Val(512)));
  Val x173 = (((x172 + (x164 * Val(1024))) + (x165 * Val(2048))) + (x166 * Val(4096)));
  Val x174 = (((x173 + (x167 * Val(8192))) + (x168 * Val(16384))) + (x169 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1032)
  NondetRegStruct16Array x175 = x104._super;
  Val x176 = x175[0]._super;
  Val x177 = x175[1]._super;
  Val x178 = x175[2]._super;
  Val x179 = x175[3]._super;
  Val x180 = x175[4]._super;
  Val x181 = x175[5]._super;
  Val x182 = x175[6]._super;
  Val x183 = x175[7]._super;
  Val x184 = x175[8]._super;
  Val x185 = x175[9]._super;
  Val x186 = x175[10]._super;
  Val x187 = x175[11]._super;
  Val x188 = x175[12]._super;
  Val x189 = x175[13]._super;
  Val x190 = x175[14]._super;
  Val x191 = x175[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x192 = (((x176 + (x177 * Val(2))) + (x178 * Val(4))) + (x179 * Val(8)));
  Val x193 = (((x192 + (x180 * Val(16))) + (x181 * Val(32))) + (x182 * Val(64)));
  Val x194 = (((x193 + (x183 * Val(128))) + (x184 * Val(256))) + (x185 * Val(512)));
  Val x195 = (((x194 + (x186 * Val(1024))) + (x187 * Val(2048))) + (x188 * Val(4096)));
  Val x196 = (((x195 + (x189 * Val(8192))) + (x190 * Val(16384))) + (x191 * Val(32768)));
  WriteMemoryStruct x197 =
      exec_WriteMemory(ctx,
                       x106,
                       MemDigestStruct{._super = Val4Array{x130, x152, x174, x196}},
                       LAYOUT_LOOKUP(layout1, _0));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1039)
  EQZ((x6 - x110), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x7 - x111), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x8 - x112), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x9 - x113), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x10 - x114), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x11 - x115), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x12 - x116), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x13 - x117), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x14 - x118), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x15 - x119), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x16 - x120), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x17 - x121), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x18 - x122), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x19 - x123), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x20 - x124), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x21 - x125), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1041)
  EQZ((x22 - x132), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x23 - x133), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x24 - x134), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x25 - x135), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x26 - x136), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x27 - x137), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1043)
  EQZ((x38 - x138), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x39 - x139), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x40 - x140), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x41 - x141), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x42 - x142), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x43 - x143), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x44 - x144), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x45 - x145), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x46 - x146), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x47 - x147), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1045)
  EQZ((x48 - x154), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x49 - x155), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x50 - x156), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x51 - x157), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x52 - x158), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x53 - x159), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x54 - x160), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x55 - x161), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x56 - x162), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x57 - x163), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x58 - x164), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1047)
  EQZ((x69 - x165), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x70 - x166), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x71 - x167), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x72 - x168), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x73 - x169), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1049)
  EQZ((x74 - x176), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x75 - x177), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x76 - x178), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x77 - x179), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x78 - x180), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x79 - x181), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x80 - x182), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x81 - x183), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x82 - x184), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x83 - x185), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x84 - x186), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x85 - x187), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x86 - x188), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x87 - x189), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x88 - x190), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x89 - x191), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  // Log(<preamble>:16)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1052)
  INVOKE_EXTERN(ctx, log, "Z: %u", std::initializer_list<Val>{Val(0)});
  // equal_word(zirgen/circuit/keccak/keccak.zir:1053)
  BoundLayout<EqualWord_2_Arm0Layout> x198 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(layout1, nxt), arm0);
  BoundLayout<Reg> x199 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x198, _extra0), count), _super);
  STORE(x199, Val(0));
  EQZ(LOAD(x199, 0), "equal_word(zirgen/circuit/keccak/keccak.zir:1053)");
  BoundLayout<Reg> x200 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x198, _extra1), count), _super);
  STORE(x200, Val(0));
  EQZ(LOAD(x200, 0), "equal_word(zirgen/circuit/keccak/keccak.zir:1053)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1084)
  Val22Array x201 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x202 =
      exec_RetTuple(ctx,
                    x201,
                    x201,
                    x201,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x201,
                    x201,
                    Val(3),
                    Val(17),
                    Val(0),
                    Val(0),
                    x106,
                    LAYOUT_LOOKUP(layout1, _super));
  return x202;
}
RetTupleStruct
execEqualWord_3_(ExecContext& ctx, RetTupleStruct arg0, BoundLayout<EqualWord_3_Layout> layout1) {
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  NondetRegStruct22Array x2 = arg0.arrA;
  Val x3 = x2[9]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1018)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1019)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "equal_word(zirgen/circuit/keccak/keccak.zir:1019)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  Val x35 = x2[10]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1020)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1021)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "equal_word(zirgen/circuit/keccak/keccak.zir:1021)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1014)
  Val x66 = x2[11]._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1022)
  ToBits_21_Struct x67 = exec_ToBits_21_(ctx, x66, LAYOUT_LOOKUP(layout1, unpackF));
  NondetRegStruct21Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1023)
  Val x90 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x91 = (((x90 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x92 = (((x91 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x93 = (((x92 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x94 = (((x93 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x95 = (((x94 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x96 = (((x95 + (x88 * Val(524288))) + (x89 * Val(1048576))) - x66);
  EQZ(x96, "equal_word(zirgen/circuit/keccak/keccak.zir:1023)");
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1025)
  Val x97 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1026)
  ToBits_16_Struct x98 = exec_ToBits_16_(ctx, x97, LAYOUT_LOOKUP(layout1, unpack_1));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1027)
  Val x99 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1028)
  ToBits_16_Struct x100 = exec_ToBits_16_(ctx, x99, LAYOUT_LOOKUP(layout1, unpack_2));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1029)
  Val x101 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1030)
  ToBits_16_Struct x102 = exec_ToBits_16_(ctx, x101, LAYOUT_LOOKUP(layout1, unpack_3));
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1031)
  Val x103 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1032)
  ToBits_16_Struct x104 = exec_ToBits_16_(ctx, x103, LAYOUT_LOOKUP(layout1, unpack_4));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1033)
  Val x105 = (arg0.midx._super + Val(1));
  Val x106 = (x105 + Val(3));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1034)
  NondetRegStruct x107 = exec_NondetReg(ctx, inv(x106), LAYOUT_LOOKUP(layout1, invmidx));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1035)
  Val x108 = ((x107._super * x106) - Val(1));
  EQZ(x108, "equal_word(zirgen/circuit/keccak/keccak.zir:1035)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1026)
  NondetRegStruct16Array x109 = x98._super;
  Val x110 = x109[0]._super;
  Val x111 = x109[1]._super;
  Val x112 = x109[2]._super;
  Val x113 = x109[3]._super;
  Val x114 = x109[4]._super;
  Val x115 = x109[5]._super;
  Val x116 = x109[6]._super;
  Val x117 = x109[7]._super;
  Val x118 = x109[8]._super;
  Val x119 = x109[9]._super;
  Val x120 = x109[10]._super;
  Val x121 = x109[11]._super;
  Val x122 = x109[12]._super;
  Val x123 = x109[13]._super;
  Val x124 = x109[14]._super;
  Val x125 = x109[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x126 = (((x110 + (x111 * Val(2))) + (x112 * Val(4))) + (x113 * Val(8)));
  Val x127 = (((x126 + (x114 * Val(16))) + (x115 * Val(32))) + (x116 * Val(64)));
  Val x128 = (((x127 + (x117 * Val(128))) + (x118 * Val(256))) + (x119 * Val(512)));
  Val x129 = (((x128 + (x120 * Val(1024))) + (x121 * Val(2048))) + (x122 * Val(4096)));
  Val x130 = (((x129 + (x123 * Val(8192))) + (x124 * Val(16384))) + (x125 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1028)
  NondetRegStruct16Array x131 = x100._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x148 = (((x132 + (x133 * Val(2))) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x149 = (((x148 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x150 = (((x149 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x151 = (((x150 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x152 = (((x151 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1030)
  NondetRegStruct16Array x153 = x102._super;
  Val x154 = x153[0]._super;
  Val x155 = x153[1]._super;
  Val x156 = x153[2]._super;
  Val x157 = x153[3]._super;
  Val x158 = x153[4]._super;
  Val x159 = x153[5]._super;
  Val x160 = x153[6]._super;
  Val x161 = x153[7]._super;
  Val x162 = x153[8]._super;
  Val x163 = x153[9]._super;
  Val x164 = x153[10]._super;
  Val x165 = x153[11]._super;
  Val x166 = x153[12]._super;
  Val x167 = x153[13]._super;
  Val x168 = x153[14]._super;
  Val x169 = x153[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x170 = (((x154 + (x155 * Val(2))) + (x156 * Val(4))) + (x157 * Val(8)));
  Val x171 = (((x170 + (x158 * Val(16))) + (x159 * Val(32))) + (x160 * Val(64)));
  Val x172 = (((x171 + (x161 * Val(128))) + (x162 * Val(256))) + (x163 * Val(512)));
  Val x173 = (((x172 + (x164 * Val(1024))) + (x165 * Val(2048))) + (x166 * Val(4096)));
  Val x174 = (((x173 + (x167 * Val(8192))) + (x168 * Val(16384))) + (x169 * Val(32768)));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1032)
  NondetRegStruct16Array x175 = x104._super;
  Val x176 = x175[0]._super;
  Val x177 = x175[1]._super;
  Val x178 = x175[2]._super;
  Val x179 = x175[3]._super;
  Val x180 = x175[4]._super;
  Val x181 = x175[5]._super;
  Val x182 = x175[6]._super;
  Val x183 = x175[7]._super;
  Val x184 = x175[8]._super;
  Val x185 = x175[9]._super;
  Val x186 = x175[10]._super;
  Val x187 = x175[11]._super;
  Val x188 = x175[12]._super;
  Val x189 = x175[13]._super;
  Val x190 = x175[14]._super;
  Val x191 = x175[15]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1036)
  Val x192 = (((x176 + (x177 * Val(2))) + (x178 * Val(4))) + (x179 * Val(8)));
  Val x193 = (((x192 + (x180 * Val(16))) + (x181 * Val(32))) + (x182 * Val(64)));
  Val x194 = (((x193 + (x183 * Val(128))) + (x184 * Val(256))) + (x185 * Val(512)));
  Val x195 = (((x194 + (x186 * Val(1024))) + (x187 * Val(2048))) + (x188 * Val(4096)));
  Val x196 = (((x195 + (x189 * Val(8192))) + (x190 * Val(16384))) + (x191 * Val(32768)));
  WriteMemoryStruct x197 =
      exec_WriteMemory(ctx,
                       x106,
                       MemDigestStruct{._super = Val4Array{x130, x152, x174, x196}},
                       LAYOUT_LOOKUP(layout1, _0));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1039)
  EQZ((x6 - x110), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x7 - x111), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x8 - x112), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x9 - x113), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x10 - x114), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x11 - x115), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x12 - x116), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x13 - x117), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x14 - x118), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x15 - x119), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x16 - x120), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x17 - x121), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x18 - x122), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x19 - x123), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x20 - x124), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  EQZ((x21 - x125), "equal_word(zirgen/circuit/keccak/keccak.zir:1039)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1041)
  EQZ((x22 - x132), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x23 - x133), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x24 - x134), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x25 - x135), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x26 - x136), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  EQZ((x27 - x137), "equal_word(zirgen/circuit/keccak/keccak.zir:1041)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1043)
  EQZ((x38 - x138), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x39 - x139), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x40 - x140), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x41 - x141), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x42 - x142), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x43 - x143), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x44 - x144), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x45 - x145), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x46 - x146), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  EQZ((x47 - x147), "equal_word(zirgen/circuit/keccak/keccak.zir:1043)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1045)
  EQZ((x48 - x154), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x49 - x155), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x50 - x156), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x51 - x157), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x52 - x158), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x53 - x159), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x54 - x160), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x55 - x161), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x56 - x162), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x57 - x163), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  EQZ((x58 - x164), "equal_word(zirgen/circuit/keccak/keccak.zir:1045)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1047)
  EQZ((x69 - x165), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x70 - x166), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x71 - x167), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x72 - x168), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  EQZ((x73 - x169), "equal_word(zirgen/circuit/keccak/keccak.zir:1047)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1049)
  EQZ((x74 - x176), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x75 - x177), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x76 - x178), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x77 - x179), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x78 - x180), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x79 - x181), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x80 - x182), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x81 - x183), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x82 - x184), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x83 - x185), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x84 - x186), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x85 - x187), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x86 - x188), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x87 - x189), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x88 - x190), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  EQZ((x89 - x191), "equal_word(zirgen/circuit/keccak/keccak.zir:1049)");
  // Log(<preamble>:16)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1052)
  INVOKE_EXTERN(ctx, log, "Z: %u", std::initializer_list<Val>{Val(1)});
  // equal_word(zirgen/circuit/keccak/keccak.zir:1053)
  BoundLayout<EqualWord_3_Arm1_SuperLayout> x198 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(layout1, nxt), arm1);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1068)
  BoundLayout<EqualWord_3_Arm1_Super_SuperLayout> x199 = LAYOUT_LOOKUP(x198, _super);
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1055)
  Val x200 = INVOKE_EXTERN(ctx, readInput);
  NondetRegStruct x201 = exec_NondetReg(ctx, x200, LAYOUT_LOOKUP(x198, blk));
  Val x202 = x201._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1056)
  NondetRegStruct x203 = exec_NondetReg(ctx, inv(x202), LAYOUT_LOOKUP(x198, invBlk));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1057)
  NondetRegStruct x204 = exec_Reg(ctx, (x202 * x203._super), LAYOUT_LOOKUP(x198, prod));
  Val x205 = x204._super;
  // equal_word(zirgen/circuit/keccak/keccak.zir:1058)
  Val x206 = (Val(1) - x205);
  EQZ((x202 * x206), "equal_word(zirgen/circuit/keccak/keccak.zir:1058)");
  // Log(<preamble>:16)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1060)
  INVOKE_EXTERN(ctx, log, "blk, prod %u, %u", std::initializer_list<Val>{x202, x205});
  // readInput(zirgen/circuit/keccak/keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1062)
  Val x207 = INVOKE_EXTERN(ctx, readInput);
  Val x208 = INVOKE_EXTERN(ctx, readInput);
  Val x209 = INVOKE_EXTERN(ctx, readInput);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1063)
  Val x210 = (x106 + Val(1));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1064)
  NondetRegStruct x211 = exec_NondetReg(ctx, inv(x210), LAYOUT_LOOKUP(x198, invmidxnxt));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1065)
  Val x212 = ((x211._super * x210) - Val(1));
  EQZ(x212, "equal_word(zirgen/circuit/keccak/keccak.zir:1065)");
  // equal_word(zirgen/circuit/keccak/keccak.zir:1066)
  WriteMemoryStruct x213 =
      exec_WriteMemory(ctx,
                       x210,
                       MemDigestStruct{._super = Val4Array{x202, Val(0), Val(0), Val(0)}},
                       LAYOUT_LOOKUP(x198, _0));
  // equal_word(zirgen/circuit/keccak/keccak.zir:1068)
  BoundLayout<EqualWord_3_Arm1_SuperArm1_SuperLayout> x214 = LAYOUT_LOOKUP(x199, arm1);
  BoundLayout<NondetRegLayout> x215 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x199, arm0), _extra0), count);
  BoundLayout<Reg> x216 = LAYOUT_LOOKUP(x215, _super);
  // equal_word(zirgen/circuit/keccak/keccak.zir:1070)
  Val x217 = (x210 + Val(1));
  // MemDigest(zirgen/circuit/keccak/sha256_for_keccak.zir:7)
  // equal_word(zirgen/circuit/keccak/keccak.zir:1074)
  MemDigestStruct x218 = MemDigestStruct{._super = Val4Array{Val(128), Val(0), Val(0), Val(0)}};
  // equal_word(zirgen/circuit/keccak/keccak.zir:1075)
  Val x219 = (Val(7) - bitAnd((x217 + Val(1)), Val(7)));
  Val5Array x220;
  if (to_size_t(x205)) {
    // equal_word(zirgen/circuit/keccak/keccak.zir:1068)
    STORE(x216, Val(0));
    EQZ(LOAD(x216, 0), "equal_word(zirgen/circuit/keccak/keccak.zir:1068)");
    x220 = Val5Array{Val(0), Val(15), Val(0), x202, x210};
  } else if (to_size_t(x206)) {
    // equal_word(zirgen/circuit/keccak/keccak.zir:1071)
    NondetRegStruct x221 = exec_NondetReg(ctx, inv(x217), LAYOUT_LOOKUP(x214, invmidxNN));
    // equal_word(zirgen/circuit/keccak/keccak.zir:1072)
    Val x222 = ((x221._super * x217) - Val(1));
    EQZ(x222, "equal_word(zirgen/circuit/keccak/keccak.zir:1072)");
    // Log(<preamble>:16)
    // equal_word(zirgen/circuit/keccak/keccak.zir:1073)
    INVOKE_EXTERN(ctx, log, "midx %u (hex %x)", std::initializer_list<Val>{x217, x217});
    // equal_word(zirgen/circuit/keccak/keccak.zir:1074)
    WriteMemoryStruct x223 = exec_WriteMemory(ctx, x217, x218, LAYOUT_LOOKUP(x214, _0));
    // equal_word(zirgen/circuit/keccak/keccak.zir:1075)
    NondetRegStruct x224 = exec_NondetReg(ctx, x219, LAYOUT_LOOKUP(x214, nskip));
    Val x225 = x224._super;
    // equal_word(zirgen/circuit/keccak/keccak.zir:1077)
    ToBits_3_Struct x226 = exec_ToBits_3_(ctx, x225, LAYOUT_LOOKUP(x214, unpackNskip));
    NondetRegStruct3Array x227 = x226._super;
    Val x228 = x227[0]._super;
    Val x229 = x227[1]._super;
    Val x230 = x227[2]._super;
    // Log(<preamble>:16)
    // equal_word(zirgen/circuit/keccak/keccak.zir:1078)
    INVOKE_EXTERN(
        ctx, log, "Unpack: %u, %u, %u -> 0x%x", std::initializer_list<Val>{x228, x229, x230, x225});
    // equal_word(zirgen/circuit/keccak/keccak.zir:1079)
    Val x231 = (((x228 + (x229 * Val(2))) + (x230 * Val(4))) - x225);
    EQZ(x231, "equal_word(zirgen/circuit/keccak/keccak.zir:1079)");
    x220 = Val5Array{Val(4), Val(17), (x217 * Val(64)), x225, x217};
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // equal_word(zirgen/circuit/keccak/keccak.zir:1084)
  Val22Array x232 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x233 =
      exec_RetTuple(ctx,
                    x232,
                    x232,
                    x232,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x232,
                    x232,
                    x220[0],
                    x220[1],
                    x220[2],
                    x220[3],
                    x220[4],
                    LAYOUT_LOOKUP(layout1, _super));
  return x233;
}
RetTupleStruct
execSha256init_1_(ExecContext& ctx, RetTupleStruct arg0, BoundLayout<Sha256init_1_Layout> layout1) {
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:422)
  BoundLayout<Sha256init_1__SuperLayout> x2 = LAYOUT_LOOKUP(layout1, _super);
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:413)
  ToBits_16_Struct x3 = exec_ToBits_16_(ctx, Val(62778), LAYOUT_LOOKUP(layout1, lowA));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:414)
  ToBits_16_Struct x4 = exec_ToBits_16_(ctx, Val(42319), LAYOUT_LOOKUP(layout1, highA));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:413)
  NondetRegStruct16Array x5 = x3._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:414)
  NondetRegStruct16Array x6 = x4._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:417)
  ToBits_16_Struct x7 = exec_ToBits_16_(ctx, Val(52505), LAYOUT_LOOKUP(layout1, lowE));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:418)
  ToBits_16_Struct x8 = exec_ToBits_16_(ctx, Val(23520), LAYOUT_LOOKUP(layout1, highE));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:417)
  NondetRegStruct16Array x9 = x7._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:418)
  NondetRegStruct16Array x10 = x8._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:420)
  Val22Array x11 = Val22Array{
      x5[0]._super,  x5[1]._super,  x5[2]._super,  x5[3]._super,  x5[4]._super,  x5[5]._super,
      x5[6]._super,  x5[7]._super,  x5[8]._super,  x5[9]._super,  x5[10]._super, x5[11]._super,
      x5[12]._super, x5[13]._super, x5[14]._super, x5[15]._super, x6[0]._super,  x6[1]._super,
      x6[2]._super,  x6[3]._super,  x6[4]._super,  x6[5]._super};
  Val22Array x12 = Val22Array{
      x6[6]._super,  x6[7]._super,  x6[8]._super,  x6[9]._super,  x6[10]._super, x6[11]._super,
      x6[12]._super, x6[13]._super, x6[14]._super, x6[15]._super, x9[0]._super,  x9[1]._super,
      x9[2]._super,  x9[3]._super,  x9[4]._super,  x9[5]._super,  x9[6]._super,  x9[7]._super,
      x9[8]._super,  x9[9]._super,  x9[10]._super, x9[11]._super};
  Val22Array x13 =
      Val22Array{x9[12]._super,  x9[13]._super,  x9[14]._super,  x9[15]._super,  x10[0]._super,
                 x10[1]._super,  x10[2]._super,  x10[3]._super,  x10[4]._super,  x10[5]._super,
                 x10[6]._super,  x10[7]._super,  x10[8]._super,  x10[9]._super,  x10[10]._super,
                 x10[11]._super, x10[12]._super, x10[13]._super, x10[14]._super, x10[15]._super,
                 Val(0),         Val(0)};
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:423)
  Val22Array x14 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x15 =
      exec_RetTuple(ctx,
                    x11,
                    x12,
                    x13,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x14,
                    x14,
                    Val(6),
                    Val(17),
                    Val(0),
                    Val(0),
                    arg0.midx._super,
                    LAYOUT_LOOKUP(x2, arm0));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:422)
  RetTupleStruct x16 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x2, _super));
  return x16;
}
RetTupleStruct
execSha256init_2_(ExecContext& ctx, RetTupleStruct arg0, BoundLayout<Sha256init_2_Layout> layout1) {
  BoundLayout<Sha256init_2__SuperLayout> x2 = LAYOUT_LOOKUP(layout1, _super);
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:413)
  ToBits_16_Struct x3 = exec_ToBits_16_(ctx, Val(62322), LAYOUT_LOOKUP(layout1, lowA));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:414)
  ToBits_16_Struct x4 = exec_ToBits_16_(ctx, Val(15470), LAYOUT_LOOKUP(layout1, highA));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:413)
  NondetRegStruct16Array x5 = x3._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:414)
  NondetRegStruct16Array x6 = x4._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:417)
  ToBits_16_Struct x7 = exec_ToBits_16_(ctx, Val(55723), LAYOUT_LOOKUP(layout1, lowE));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:418)
  ToBits_16_Struct x8 = exec_ToBits_16_(ctx, Val(8067), LAYOUT_LOOKUP(layout1, highE));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:417)
  NondetRegStruct16Array x9 = x7._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:418)
  NondetRegStruct16Array x10 = x8._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:420)
  Val22Array x11 = Val22Array{
      x5[0]._super,  x5[1]._super,  x5[2]._super,  x5[3]._super,  x5[4]._super,  x5[5]._super,
      x5[6]._super,  x5[7]._super,  x5[8]._super,  x5[9]._super,  x5[10]._super, x5[11]._super,
      x5[12]._super, x5[13]._super, x5[14]._super, x5[15]._super, x6[0]._super,  x6[1]._super,
      x6[2]._super,  x6[3]._super,  x6[4]._super,  x6[5]._super};
  Val22Array x12 = Val22Array{
      x6[6]._super,  x6[7]._super,  x6[8]._super,  x6[9]._super,  x6[10]._super, x6[11]._super,
      x6[12]._super, x6[13]._super, x6[14]._super, x6[15]._super, x9[0]._super,  x9[1]._super,
      x9[2]._super,  x9[3]._super,  x9[4]._super,  x9[5]._super,  x9[6]._super,  x9[7]._super,
      x9[8]._super,  x9[9]._super,  x9[10]._super, x9[11]._super};
  Val22Array x13 =
      Val22Array{x9[12]._super,  x9[13]._super,  x9[14]._super,  x9[15]._super,  x10[0]._super,
                 x10[1]._super,  x10[2]._super,  x10[3]._super,  x10[4]._super,  x10[5]._super,
                 x10[6]._super,  x10[7]._super,  x10[8]._super,  x10[9]._super,  x10[10]._super,
                 x10[11]._super, x10[12]._super, x10[13]._super, x10[14]._super, x10[15]._super,
                 Val(0),         Val(0)};
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:423)
  Val22Array x14 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x15 =
      exec_RetTuple(ctx,
                    x11,
                    x12,
                    x13,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x14,
                    x14,
                    Val(7),
                    Val(17),
                    Val(0),
                    Val(0),
                    arg0.midx._super,
                    LAYOUT_LOOKUP(x2, arm0));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:422)
  RetTupleStruct x16 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x2, _super));
  return x16;
}
RetTupleStruct
execSha256init_3_(ExecContext& ctx, RetTupleStruct arg0, BoundLayout<Sha256init_3_Layout> layout1) {
  BoundLayout<Sha256init_3__SuperLayout> x2 = LAYOUT_LOOKUP(layout1, _super);
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:413)
  ToBits_16_Struct x3 = exec_ToBits_16_(ctx, Val(44677), LAYOUT_LOOKUP(layout1, lowA));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:414)
  ToBits_16_Struct x4 = exec_ToBits_16_(ctx, Val(47975), LAYOUT_LOOKUP(layout1, highA));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:413)
  NondetRegStruct16Array x5 = x3._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:414)
  NondetRegStruct16Array x6 = x4._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:417)
  ToBits_16_Struct x7 = exec_ToBits_16_(ctx, Val(26764), LAYOUT_LOOKUP(layout1, lowE));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:418)
  ToBits_16_Struct x8 = exec_ToBits_16_(ctx, Val(39685), LAYOUT_LOOKUP(layout1, highE));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:417)
  NondetRegStruct16Array x9 = x7._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:418)
  NondetRegStruct16Array x10 = x8._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:420)
  Val22Array x11 = Val22Array{
      x5[0]._super,  x5[1]._super,  x5[2]._super,  x5[3]._super,  x5[4]._super,  x5[5]._super,
      x5[6]._super,  x5[7]._super,  x5[8]._super,  x5[9]._super,  x5[10]._super, x5[11]._super,
      x5[12]._super, x5[13]._super, x5[14]._super, x5[15]._super, x6[0]._super,  x6[1]._super,
      x6[2]._super,  x6[3]._super,  x6[4]._super,  x6[5]._super};
  Val22Array x12 = Val22Array{
      x6[6]._super,  x6[7]._super,  x6[8]._super,  x6[9]._super,  x6[10]._super, x6[11]._super,
      x6[12]._super, x6[13]._super, x6[14]._super, x6[15]._super, x9[0]._super,  x9[1]._super,
      x9[2]._super,  x9[3]._super,  x9[4]._super,  x9[5]._super,  x9[6]._super,  x9[7]._super,
      x9[8]._super,  x9[9]._super,  x9[10]._super, x9[11]._super};
  Val22Array x13 =
      Val22Array{x9[12]._super,  x9[13]._super,  x9[14]._super,  x9[15]._super,  x10[0]._super,
                 x10[1]._super,  x10[2]._super,  x10[3]._super,  x10[4]._super,  x10[5]._super,
                 x10[6]._super,  x10[7]._super,  x10[8]._super,  x10[9]._super,  x10[10]._super,
                 x10[11]._super, x10[12]._super, x10[13]._super, x10[14]._super, x10[15]._super,
                 Val(0),         Val(0)};
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:423)
  Val22Array x14 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x15 =
      exec_RetTuple(ctx,
                    x11,
                    x12,
                    x13,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x14,
                    x14,
                    Val(8),
                    Val(17),
                    Val(0),
                    Val(0),
                    arg0.midx._super,
                    LAYOUT_LOOKUP(x2, arm0));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:422)
  RetTupleStruct x16 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x2, _super));
  return x16;
}
RetTupleStruct
execSha256init_4_(ExecContext& ctx, RetTupleStruct arg0, BoundLayout<Sha256init_4_Layout> layout1) {
  BoundLayout<Sha256init_4__SuperLayout> x2 = LAYOUT_LOOKUP(layout1, _super);
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:413)
  ToBits_16_Struct x3 = exec_ToBits_16_(ctx, Val(58983), LAYOUT_LOOKUP(layout1, lowA));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:414)
  ToBits_16_Struct x4 = exec_ToBits_16_(ctx, Val(27145), LAYOUT_LOOKUP(layout1, highA));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:413)
  NondetRegStruct16Array x5 = x3._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:414)
  NondetRegStruct16Array x6 = x4._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:417)
  ToBits_16_Struct x7 = exec_ToBits_16_(ctx, Val(21119), LAYOUT_LOOKUP(layout1, lowE));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:418)
  ToBits_16_Struct x8 = exec_ToBits_16_(ctx, Val(20750), LAYOUT_LOOKUP(layout1, highE));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:417)
  NondetRegStruct16Array x9 = x7._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:418)
  NondetRegStruct16Array x10 = x8._super;
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:420)
  Val22Array x11 = Val22Array{
      x5[0]._super,  x5[1]._super,  x5[2]._super,  x5[3]._super,  x5[4]._super,  x5[5]._super,
      x5[6]._super,  x5[7]._super,  x5[8]._super,  x5[9]._super,  x5[10]._super, x5[11]._super,
      x5[12]._super, x5[13]._super, x5[14]._super, x5[15]._super, x6[0]._super,  x6[1]._super,
      x6[2]._super,  x6[3]._super,  x6[4]._super,  x6[5]._super};
  Val22Array x12 = Val22Array{
      x6[6]._super,  x6[7]._super,  x6[8]._super,  x6[9]._super,  x6[10]._super, x6[11]._super,
      x6[12]._super, x6[13]._super, x6[14]._super, x6[15]._super, x9[0]._super,  x9[1]._super,
      x9[2]._super,  x9[3]._super,  x9[4]._super,  x9[5]._super,  x9[6]._super,  x9[7]._super,
      x9[8]._super,  x9[9]._super,  x9[10]._super, x9[11]._super};
  Val22Array x13 =
      Val22Array{x9[12]._super,  x9[13]._super,  x9[14]._super,  x9[15]._super,  x10[0]._super,
                 x10[1]._super,  x10[2]._super,  x10[3]._super,  x10[4]._super,  x10[5]._super,
                 x10[6]._super,  x10[7]._super,  x10[8]._super,  x10[9]._super,  x10[10]._super,
                 x10[11]._super, x10[12]._super, x10[13]._super, x10[14]._super, x10[15]._super,
                 Val(0),         Val(0)};
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:425)
  Val22Array x14 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x15 =
      exec_RetTuple(ctx,
                    x11,
                    x12,
                    x13,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x14,
                    x14,
                    Val(0),
                    Val(19),
                    Val(0),
                    Val(0),
                    arg0.midx._super,
                    LAYOUT_LOOKUP(x2, arm1));
  // sha256init(zirgen/circuit/keccak/sha256_for_keccak.zir:422)
  RetTupleStruct x16 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x2, _super));
  return x16;
}
RetTupleStruct execSha256fini_5_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256fini_5_Layout> layout2) {
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:443)
  BoundLayout<Sha256fini_5__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:431)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:432)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:433)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:434)
  RetTupleStruct x8 = back_RetTuple(ctx, 68, arg1);
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:436)
  NondetRegStruct22Array x9 = x7.arrA;
  NondetRegStruct22Array x10 = x7.arrB;
  Val32Array x11 = Val32Array{
      x9[0]._super,  x9[1]._super,  x9[2]._super,  x9[3]._super,  x9[4]._super,  x9[5]._super,
      x9[6]._super,  x9[7]._super,  x9[8]._super,  x9[9]._super,  x9[10]._super, x9[11]._super,
      x9[12]._super, x9[13]._super, x9[14]._super, x9[15]._super, x9[16]._super, x9[17]._super,
      x9[18]._super, x9[19]._super, x9[20]._super, x9[21]._super, x10[0]._super, x10[1]._super,
      x10[2]._super, x10[3]._super, x10[4]._super, x10[5]._super, x10[6]._super, x10[7]._super,
      x10[8]._super, x10[9]._super};
  Pack2Struct x12 = execPack2(ctx, x11, LAYOUT_LOOKUP(layout2, _0));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  NondetRegStruct22Array x13 = x8.arrA;
  NondetRegStruct22Array x14 = x8.arrB;
  Val32Array x15 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Pack2Struct x16 = execPack2(ctx, x15, LAYOUT_LOOKUP(layout2, _1));
  TwoShortsStruct x17 = x12._super;
  TwoShortsStruct x18 = x16._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:437)
  Concatenate_NondetReg__16__16_Struct x19 = execUnpackWithCarry(
      ctx, (x17.low + x18.low), (x17.high + x18.high), LAYOUT_LOOKUP(layout2, newA));
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:438)
  NondetRegStruct22Array x20 = x7.arrC;
  Val32Array x21 =
      Val32Array{x10[10]._super, x10[11]._super, x10[12]._super, x10[13]._super, x10[14]._super,
                 x10[15]._super, x10[16]._super, x10[17]._super, x10[18]._super, x10[19]._super,
                 x10[20]._super, x10[21]._super, x20[0]._super,  x20[1]._super,  x20[2]._super,
                 x20[3]._super,  x20[4]._super,  x20[5]._super,  x20[6]._super,  x20[7]._super,
                 x20[8]._super,  x20[9]._super,  x20[10]._super, x20[11]._super, x20[12]._super,
                 x20[13]._super, x20[14]._super, x20[15]._super, x20[16]._super, x20[17]._super,
                 x20[18]._super, x20[19]._super};
  Pack2Struct x22 = execPack2(ctx, x21, LAYOUT_LOOKUP(layout2, _2));
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  NondetRegStruct22Array x23 = x8.arrC;
  Val32Array x24 =
      Val32Array{x14[10]._super, x14[11]._super, x14[12]._super, x14[13]._super, x14[14]._super,
                 x14[15]._super, x14[16]._super, x14[17]._super, x14[18]._super, x14[19]._super,
                 x14[20]._super, x14[21]._super, x23[0]._super,  x23[1]._super,  x23[2]._super,
                 x23[3]._super,  x23[4]._super,  x23[5]._super,  x23[6]._super,  x23[7]._super,
                 x23[8]._super,  x23[9]._super,  x23[10]._super, x23[11]._super, x23[12]._super,
                 x23[13]._super, x23[14]._super, x23[15]._super, x23[16]._super, x23[17]._super,
                 x23[18]._super, x23[19]._super};
  Pack2Struct x25 = execPack2(ctx, x24, LAYOUT_LOOKUP(layout2, _3));
  TwoShortsStruct x26 = x22._super;
  TwoShortsStruct x27 = x25._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:439)
  Concatenate_NondetReg__16__16_Struct x28 = execUnpackWithCarry(
      ctx, (x26.low + x27.low), (x26.high + x27.high), LAYOUT_LOOKUP(layout2, newE));
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:437)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x29 = x19._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:439)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x30 = x28._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  NondetRegStruct24Array x31 = x4.arrD;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:440)
  Val22Array x32 =
      Val22Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super};
  Val22Array x33 =
      Val22Array{x29[22]._super, x29[23]._super, x29[24]._super, x29[25]._super, x29[26]._super,
                 x29[27]._super, x29[28]._super, x29[29]._super, x29[30]._super, x29[31]._super,
                 x30[0]._super,  x30[1]._super,  x30[2]._super,  x30[3]._super,  x30[4]._super,
                 x30[5]._super,  x30[6]._super,  x30[7]._super,  x30[8]._super,  x30[9]._super,
                 x30[10]._super, x30[11]._super};
  Val22Array x34 =
      Val22Array{x30[12]._super, x30[13]._super, x30[14]._super, x30[15]._super, x30[16]._super,
                 x30[17]._super, x30[18]._super, x30[19]._super, x30[20]._super, x30[21]._super,
                 x30[22]._super, x30[23]._super, x30[24]._super, x30[25]._super, x30[26]._super,
                 x30[27]._super, x30[28]._super, x30[29]._super, x30[30]._super, x30[31]._super,
                 Val(0),         Val(0)};
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  Val24Array x35 =
      Val24Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x31[22]._super, x31[23]._super};
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:444)
  Val22Array x36 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x37 = exec_RetTuple(ctx,
                                     x32,
                                     x33,
                                     x34,
                                     x35,
                                     x36,
                                     x36,
                                     Val(10),
                                     Val(17),
                                     x4.rnd._super,
                                     x4.blk._super,
                                     x4.midx._super,
                                     LAYOUT_LOOKUP(x3, arm0));
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:443)
  RetTupleStruct x38 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x38;
}
RetTupleStruct execSha256fini_6_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256fini_6_Layout> layout2) {
  BoundLayout<Sha256fini_6__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:431)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:432)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:433)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:434)
  RetTupleStruct x8 = back_RetTuple(ctx, 68, arg1);
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:436)
  NondetRegStruct22Array x9 = x7.arrA;
  NondetRegStruct22Array x10 = x7.arrB;
  Val32Array x11 = Val32Array{
      x9[0]._super,  x9[1]._super,  x9[2]._super,  x9[3]._super,  x9[4]._super,  x9[5]._super,
      x9[6]._super,  x9[7]._super,  x9[8]._super,  x9[9]._super,  x9[10]._super, x9[11]._super,
      x9[12]._super, x9[13]._super, x9[14]._super, x9[15]._super, x9[16]._super, x9[17]._super,
      x9[18]._super, x9[19]._super, x9[20]._super, x9[21]._super, x10[0]._super, x10[1]._super,
      x10[2]._super, x10[3]._super, x10[4]._super, x10[5]._super, x10[6]._super, x10[7]._super,
      x10[8]._super, x10[9]._super};
  Pack2Struct x12 = execPack2(ctx, x11, LAYOUT_LOOKUP(layout2, _0));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  NondetRegStruct22Array x13 = x8.arrA;
  NondetRegStruct22Array x14 = x8.arrB;
  Val32Array x15 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Pack2Struct x16 = execPack2(ctx, x15, LAYOUT_LOOKUP(layout2, _1));
  TwoShortsStruct x17 = x12._super;
  TwoShortsStruct x18 = x16._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:437)
  Concatenate_NondetReg__16__16_Struct x19 = execUnpackWithCarry(
      ctx, (x17.low + x18.low), (x17.high + x18.high), LAYOUT_LOOKUP(layout2, newA));
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:438)
  NondetRegStruct22Array x20 = x7.arrC;
  Val32Array x21 =
      Val32Array{x10[10]._super, x10[11]._super, x10[12]._super, x10[13]._super, x10[14]._super,
                 x10[15]._super, x10[16]._super, x10[17]._super, x10[18]._super, x10[19]._super,
                 x10[20]._super, x10[21]._super, x20[0]._super,  x20[1]._super,  x20[2]._super,
                 x20[3]._super,  x20[4]._super,  x20[5]._super,  x20[6]._super,  x20[7]._super,
                 x20[8]._super,  x20[9]._super,  x20[10]._super, x20[11]._super, x20[12]._super,
                 x20[13]._super, x20[14]._super, x20[15]._super, x20[16]._super, x20[17]._super,
                 x20[18]._super, x20[19]._super};
  Pack2Struct x22 = execPack2(ctx, x21, LAYOUT_LOOKUP(layout2, _2));
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  NondetRegStruct22Array x23 = x8.arrC;
  Val32Array x24 =
      Val32Array{x14[10]._super, x14[11]._super, x14[12]._super, x14[13]._super, x14[14]._super,
                 x14[15]._super, x14[16]._super, x14[17]._super, x14[18]._super, x14[19]._super,
                 x14[20]._super, x14[21]._super, x23[0]._super,  x23[1]._super,  x23[2]._super,
                 x23[3]._super,  x23[4]._super,  x23[5]._super,  x23[6]._super,  x23[7]._super,
                 x23[8]._super,  x23[9]._super,  x23[10]._super, x23[11]._super, x23[12]._super,
                 x23[13]._super, x23[14]._super, x23[15]._super, x23[16]._super, x23[17]._super,
                 x23[18]._super, x23[19]._super};
  Pack2Struct x25 = execPack2(ctx, x24, LAYOUT_LOOKUP(layout2, _3));
  TwoShortsStruct x26 = x22._super;
  TwoShortsStruct x27 = x25._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:439)
  Concatenate_NondetReg__16__16_Struct x28 = execUnpackWithCarry(
      ctx, (x26.low + x27.low), (x26.high + x27.high), LAYOUT_LOOKUP(layout2, newE));
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:437)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x29 = x19._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:439)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x30 = x28._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  NondetRegStruct24Array x31 = x4.arrD;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:440)
  Val22Array x32 =
      Val22Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super};
  Val22Array x33 =
      Val22Array{x29[22]._super, x29[23]._super, x29[24]._super, x29[25]._super, x29[26]._super,
                 x29[27]._super, x29[28]._super, x29[29]._super, x29[30]._super, x29[31]._super,
                 x30[0]._super,  x30[1]._super,  x30[2]._super,  x30[3]._super,  x30[4]._super,
                 x30[5]._super,  x30[6]._super,  x30[7]._super,  x30[8]._super,  x30[9]._super,
                 x30[10]._super, x30[11]._super};
  Val22Array x34 =
      Val22Array{x30[12]._super, x30[13]._super, x30[14]._super, x30[15]._super, x30[16]._super,
                 x30[17]._super, x30[18]._super, x30[19]._super, x30[20]._super, x30[21]._super,
                 x30[22]._super, x30[23]._super, x30[24]._super, x30[25]._super, x30[26]._super,
                 x30[27]._super, x30[28]._super, x30[29]._super, x30[30]._super, x30[31]._super,
                 Val(0),         Val(0)};
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  Val24Array x35 =
      Val24Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x31[22]._super, x31[23]._super};
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:444)
  Val22Array x36 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x37 = exec_RetTuple(ctx,
                                     x32,
                                     x33,
                                     x34,
                                     x35,
                                     x36,
                                     x36,
                                     Val(11),
                                     Val(17),
                                     x4.rnd._super,
                                     x4.blk._super,
                                     x4.midx._super,
                                     LAYOUT_LOOKUP(x3, arm0));
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:443)
  RetTupleStruct x38 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x38;
}
RetTupleStruct execSha256fini_7_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256fini_7_Layout> layout2) {
  BoundLayout<Sha256fini_7__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:431)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:432)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:433)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:434)
  RetTupleStruct x8 = back_RetTuple(ctx, 68, arg1);
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:436)
  NondetRegStruct22Array x9 = x7.arrA;
  NondetRegStruct22Array x10 = x7.arrB;
  Val32Array x11 = Val32Array{
      x9[0]._super,  x9[1]._super,  x9[2]._super,  x9[3]._super,  x9[4]._super,  x9[5]._super,
      x9[6]._super,  x9[7]._super,  x9[8]._super,  x9[9]._super,  x9[10]._super, x9[11]._super,
      x9[12]._super, x9[13]._super, x9[14]._super, x9[15]._super, x9[16]._super, x9[17]._super,
      x9[18]._super, x9[19]._super, x9[20]._super, x9[21]._super, x10[0]._super, x10[1]._super,
      x10[2]._super, x10[3]._super, x10[4]._super, x10[5]._super, x10[6]._super, x10[7]._super,
      x10[8]._super, x10[9]._super};
  Pack2Struct x12 = execPack2(ctx, x11, LAYOUT_LOOKUP(layout2, _0));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  NondetRegStruct22Array x13 = x8.arrA;
  NondetRegStruct22Array x14 = x8.arrB;
  Val32Array x15 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Pack2Struct x16 = execPack2(ctx, x15, LAYOUT_LOOKUP(layout2, _1));
  TwoShortsStruct x17 = x12._super;
  TwoShortsStruct x18 = x16._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:437)
  Concatenate_NondetReg__16__16_Struct x19 = execUnpackWithCarry(
      ctx, (x17.low + x18.low), (x17.high + x18.high), LAYOUT_LOOKUP(layout2, newA));
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:438)
  NondetRegStruct22Array x20 = x7.arrC;
  Val32Array x21 =
      Val32Array{x10[10]._super, x10[11]._super, x10[12]._super, x10[13]._super, x10[14]._super,
                 x10[15]._super, x10[16]._super, x10[17]._super, x10[18]._super, x10[19]._super,
                 x10[20]._super, x10[21]._super, x20[0]._super,  x20[1]._super,  x20[2]._super,
                 x20[3]._super,  x20[4]._super,  x20[5]._super,  x20[6]._super,  x20[7]._super,
                 x20[8]._super,  x20[9]._super,  x20[10]._super, x20[11]._super, x20[12]._super,
                 x20[13]._super, x20[14]._super, x20[15]._super, x20[16]._super, x20[17]._super,
                 x20[18]._super, x20[19]._super};
  Pack2Struct x22 = execPack2(ctx, x21, LAYOUT_LOOKUP(layout2, _2));
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  NondetRegStruct22Array x23 = x8.arrC;
  Val32Array x24 =
      Val32Array{x14[10]._super, x14[11]._super, x14[12]._super, x14[13]._super, x14[14]._super,
                 x14[15]._super, x14[16]._super, x14[17]._super, x14[18]._super, x14[19]._super,
                 x14[20]._super, x14[21]._super, x23[0]._super,  x23[1]._super,  x23[2]._super,
                 x23[3]._super,  x23[4]._super,  x23[5]._super,  x23[6]._super,  x23[7]._super,
                 x23[8]._super,  x23[9]._super,  x23[10]._super, x23[11]._super, x23[12]._super,
                 x23[13]._super, x23[14]._super, x23[15]._super, x23[16]._super, x23[17]._super,
                 x23[18]._super, x23[19]._super};
  Pack2Struct x25 = execPack2(ctx, x24, LAYOUT_LOOKUP(layout2, _3));
  TwoShortsStruct x26 = x22._super;
  TwoShortsStruct x27 = x25._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:439)
  Concatenate_NondetReg__16__16_Struct x28 = execUnpackWithCarry(
      ctx, (x26.low + x27.low), (x26.high + x27.high), LAYOUT_LOOKUP(layout2, newE));
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:437)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x29 = x19._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:439)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x30 = x28._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  NondetRegStruct24Array x31 = x4.arrD;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:440)
  Val22Array x32 =
      Val22Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super};
  Val22Array x33 =
      Val22Array{x29[22]._super, x29[23]._super, x29[24]._super, x29[25]._super, x29[26]._super,
                 x29[27]._super, x29[28]._super, x29[29]._super, x29[30]._super, x29[31]._super,
                 x30[0]._super,  x30[1]._super,  x30[2]._super,  x30[3]._super,  x30[4]._super,
                 x30[5]._super,  x30[6]._super,  x30[7]._super,  x30[8]._super,  x30[9]._super,
                 x30[10]._super, x30[11]._super};
  Val22Array x34 =
      Val22Array{x30[12]._super, x30[13]._super, x30[14]._super, x30[15]._super, x30[16]._super,
                 x30[17]._super, x30[18]._super, x30[19]._super, x30[20]._super, x30[21]._super,
                 x30[22]._super, x30[23]._super, x30[24]._super, x30[25]._super, x30[26]._super,
                 x30[27]._super, x30[28]._super, x30[29]._super, x30[30]._super, x30[31]._super,
                 Val(0),         Val(0)};
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  Val24Array x35 =
      Val24Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x31[22]._super, x31[23]._super};
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:444)
  Val22Array x36 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x37 = exec_RetTuple(ctx,
                                     x32,
                                     x33,
                                     x34,
                                     x35,
                                     x36,
                                     x36,
                                     Val(12),
                                     Val(17),
                                     x4.rnd._super,
                                     x4.blk._super,
                                     x4.midx._super,
                                     LAYOUT_LOOKUP(x3, arm0));
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:443)
  RetTupleStruct x38 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x38;
}
RetTupleStruct execSha256fini_8_(ExecContext& ctx,
                                 RetTupleStruct arg0,
                                 BoundLayout<RetTupleLayout> arg1,
                                 BoundLayout<Sha256fini_8_Layout> layout2) {
  BoundLayout<Sha256fini_8__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:431)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:432)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:433)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:434)
  RetTupleStruct x8 = back_RetTuple(ctx, 68, arg1);
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:436)
  NondetRegStruct22Array x9 = x7.arrA;
  NondetRegStruct22Array x10 = x7.arrB;
  Val32Array x11 = Val32Array{
      x9[0]._super,  x9[1]._super,  x9[2]._super,  x9[3]._super,  x9[4]._super,  x9[5]._super,
      x9[6]._super,  x9[7]._super,  x9[8]._super,  x9[9]._super,  x9[10]._super, x9[11]._super,
      x9[12]._super, x9[13]._super, x9[14]._super, x9[15]._super, x9[16]._super, x9[17]._super,
      x9[18]._super, x9[19]._super, x9[20]._super, x9[21]._super, x10[0]._super, x10[1]._super,
      x10[2]._super, x10[3]._super, x10[4]._super, x10[5]._super, x10[6]._super, x10[7]._super,
      x10[8]._super, x10[9]._super};
  Pack2Struct x12 = execPack2(ctx, x11, LAYOUT_LOOKUP(layout2, _0));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  NondetRegStruct22Array x13 = x8.arrA;
  NondetRegStruct22Array x14 = x8.arrB;
  Val32Array x15 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Pack2Struct x16 = execPack2(ctx, x15, LAYOUT_LOOKUP(layout2, _1));
  TwoShortsStruct x17 = x12._super;
  TwoShortsStruct x18 = x16._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:437)
  Concatenate_NondetReg__16__16_Struct x19 = execUnpackWithCarry(
      ctx, (x17.low + x18.low), (x17.high + x18.high), LAYOUT_LOOKUP(layout2, newA));
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:438)
  NondetRegStruct22Array x20 = x7.arrC;
  Val32Array x21 =
      Val32Array{x10[10]._super, x10[11]._super, x10[12]._super, x10[13]._super, x10[14]._super,
                 x10[15]._super, x10[16]._super, x10[17]._super, x10[18]._super, x10[19]._super,
                 x10[20]._super, x10[21]._super, x20[0]._super,  x20[1]._super,  x20[2]._super,
                 x20[3]._super,  x20[4]._super,  x20[5]._super,  x20[6]._super,  x20[7]._super,
                 x20[8]._super,  x20[9]._super,  x20[10]._super, x20[11]._super, x20[12]._super,
                 x20[13]._super, x20[14]._super, x20[15]._super, x20[16]._super, x20[17]._super,
                 x20[18]._super, x20[19]._super};
  Pack2Struct x22 = execPack2(ctx, x21, LAYOUT_LOOKUP(layout2, _2));
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  NondetRegStruct22Array x23 = x8.arrC;
  Val32Array x24 =
      Val32Array{x14[10]._super, x14[11]._super, x14[12]._super, x14[13]._super, x14[14]._super,
                 x14[15]._super, x14[16]._super, x14[17]._super, x14[18]._super, x14[19]._super,
                 x14[20]._super, x14[21]._super, x23[0]._super,  x23[1]._super,  x23[2]._super,
                 x23[3]._super,  x23[4]._super,  x23[5]._super,  x23[6]._super,  x23[7]._super,
                 x23[8]._super,  x23[9]._super,  x23[10]._super, x23[11]._super, x23[12]._super,
                 x23[13]._super, x23[14]._super, x23[15]._super, x23[16]._super, x23[17]._super,
                 x23[18]._super, x23[19]._super};
  Pack2Struct x25 = execPack2(ctx, x24, LAYOUT_LOOKUP(layout2, _3));
  TwoShortsStruct x26 = x22._super;
  TwoShortsStruct x27 = x25._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:439)
  Concatenate_NondetReg__16__16_Struct x28 = execUnpackWithCarry(
      ctx, (x26.low + x27.low), (x26.high + x27.high), LAYOUT_LOOKUP(layout2, newE));
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:437)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x29 = x19._super;
  Val x30 = x29[0]._super;
  Val x31 = x29[1]._super;
  Val x32 = x29[2]._super;
  Val x33 = x29[3]._super;
  Val x34 = x29[4]._super;
  Val x35 = x29[5]._super;
  Val x36 = x29[6]._super;
  Val x37 = x29[7]._super;
  Val x38 = x29[8]._super;
  Val x39 = x29[9]._super;
  Val x40 = x29[10]._super;
  Val x41 = x29[11]._super;
  Val x42 = x29[12]._super;
  Val x43 = x29[13]._super;
  Val x44 = x29[14]._super;
  Val x45 = x29[15]._super;
  Val x46 = x29[16]._super;
  Val x47 = x29[17]._super;
  Val x48 = x29[18]._super;
  Val x49 = x29[19]._super;
  Val x50 = x29[20]._super;
  Val x51 = x29[21]._super;
  Val x52 = x29[22]._super;
  Val x53 = x29[23]._super;
  Val x54 = x29[24]._super;
  Val x55 = x29[25]._super;
  Val x56 = x29[26]._super;
  Val x57 = x29[27]._super;
  Val x58 = x29[28]._super;
  Val x59 = x29[29]._super;
  Val x60 = x29[30]._super;
  Val x61 = x29[31]._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:439)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x62 = x28._super;
  Val x63 = x62[0]._super;
  Val x64 = x62[1]._super;
  Val x65 = x62[2]._super;
  Val x66 = x62[3]._super;
  Val x67 = x62[4]._super;
  Val x68 = x62[5]._super;
  Val x69 = x62[6]._super;
  Val x70 = x62[7]._super;
  Val x71 = x62[8]._super;
  Val x72 = x62[9]._super;
  Val x73 = x62[10]._super;
  Val x74 = x62[11]._super;
  Val x75 = x62[12]._super;
  Val x76 = x62[13]._super;
  Val x77 = x62[14]._super;
  Val x78 = x62[15]._super;
  Val x79 = x62[16]._super;
  Val x80 = x62[17]._super;
  Val x81 = x62[18]._super;
  Val x82 = x62[19]._super;
  Val x83 = x62[20]._super;
  Val x84 = x62[21]._super;
  Val x85 = x62[22]._super;
  Val x86 = x62[23]._super;
  Val x87 = x62[24]._super;
  Val x88 = x62[25]._super;
  Val x89 = x62[26]._super;
  Val x90 = x62[27]._super;
  Val x91 = x62[28]._super;
  Val x92 = x62[29]._super;
  Val x93 = x62[30]._super;
  Val x94 = x62[31]._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:443)
  BoundLayout<Sha256fini_8_Arm1_SuperLayout> x95 = LAYOUT_LOOKUP(x3, arm1);
  BoundLayout<Sha256fini_8_Arm1_Super_SuperLayout> x96 = LAYOUT_LOOKUP(x95, _super);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  Val x97 = x4.midx._super;
  Val x98 = x4.blk._super;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:447)
  Val x99 = ((x97 + Val(1)) - x98);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:448)
  NondetRegStruct x100 = exec_NondetReg(ctx, inv(x99), LAYOUT_LOOKUP(x95, invMoreInput));
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:449)
  Val x101 = (x99 * x100._super);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:450)
  Val x102 = (Val(1) - x101);
  EQZ((x99 * x102), "sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:450)");
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:451)
  BoundLayout<Sha256fini_8_Arm1_SuperArm1_SuperLayout> x103 = LAYOUT_LOOKUP(x96, arm1);
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
  NondetRegStruct24Array x104 = x4.arrD;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:452)
  Val22Array x105 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:455)
  NondetRegStruct22Array x106 = x4.arrA;
  NondetRegStruct22Array x107 = x4.arrB;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:456)
  NondetRegStruct22Array x108 = x5.arrA;
  NondetRegStruct22Array x109 = x5.arrB;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:457)
  NondetRegStruct22Array x110 = x6.arrA;
  NondetRegStruct22Array x111 = x6.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:459)
  NondetRegStruct22Array x112 = x4.arrC;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:460)
  NondetRegStruct22Array x113 = x5.arrC;
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:461)
  NondetRegStruct22Array x114 = x6.arrC;
  RetTupleStruct x115;
  if (to_size_t(x101)) {
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:430)
    Val24Array x116 = Val24Array{
        x104[0]._super,  x104[1]._super,  x104[2]._super,  x104[3]._super,  x104[4]._super,
        x104[5]._super,  x104[6]._super,  x104[7]._super,  x104[8]._super,  x104[9]._super,
        x104[10]._super, x104[11]._super, x104[12]._super, x104[13]._super, x104[14]._super,
        x104[15]._super, x104[16]._super, x104[17]._super, x104[18]._super, x104[19]._super,
        x104[20]._super, x104[21]._super, x104[22]._super, x104[23]._super};
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:452)
    RetTupleStruct x117 =
        exec_RetTuple(ctx,
                      Val22Array{x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40,
                                 x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51},
                      Val22Array{x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x63,
                                 x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74},
                      Val22Array{x75, x76, x77, x78, x79, x80, x81, x82, x83, x84,    x85,
                                 x86, x87, x88, x89, x90, x91, x92, x93, x94, Val(0), Val(0)},
                      x116,
                      x105,
                      x105,
                      Val(0),
                      Val(19),
                      x4.rnd._super,
                      x98,
                      x97,
                      LAYOUT_LOOKUP(x96, arm0));
    x115 = x117;
  } else if (to_size_t(x102)) {
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:454)
    Pack2Struct x118 = execPack2(ctx,
                                 Val32Array{x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40,
                                            x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51,
                                            x52, x53, x54, x55, x56, x57, x58, x59, x60, x61},
                                 LAYOUT_LOOKUP(x103, fa));
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:455)
    Val32Array x119 = Val32Array{x106[0]._super,  x106[1]._super,  x106[2]._super,  x106[3]._super,
                                 x106[4]._super,  x106[5]._super,  x106[6]._super,  x106[7]._super,
                                 x106[8]._super,  x106[9]._super,  x106[10]._super, x106[11]._super,
                                 x106[12]._super, x106[13]._super, x106[14]._super, x106[15]._super,
                                 x106[16]._super, x106[17]._super, x106[18]._super, x106[19]._super,
                                 x106[20]._super, x106[21]._super, x107[0]._super,  x107[1]._super,
                                 x107[2]._super,  x107[3]._super,  x107[4]._super,  x107[5]._super,
                                 x107[6]._super,  x107[7]._super,  x107[8]._super,  x107[9]._super};
    Pack2Struct x120 = execPack2(ctx, x119, LAYOUT_LOOKUP(x103, fb));
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:456)
    Val32Array x121 = Val32Array{x108[0]._super,  x108[1]._super,  x108[2]._super,  x108[3]._super,
                                 x108[4]._super,  x108[5]._super,  x108[6]._super,  x108[7]._super,
                                 x108[8]._super,  x108[9]._super,  x108[10]._super, x108[11]._super,
                                 x108[12]._super, x108[13]._super, x108[14]._super, x108[15]._super,
                                 x108[16]._super, x108[17]._super, x108[18]._super, x108[19]._super,
                                 x108[20]._super, x108[21]._super, x109[0]._super,  x109[1]._super,
                                 x109[2]._super,  x109[3]._super,  x109[4]._super,  x109[5]._super,
                                 x109[6]._super,  x109[7]._super,  x109[8]._super,  x109[9]._super};
    Pack2Struct x122 = execPack2(ctx, x121, LAYOUT_LOOKUP(x103, fc));
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:457)
    Val32Array x123 = Val32Array{x110[0]._super,  x110[1]._super,  x110[2]._super,  x110[3]._super,
                                 x110[4]._super,  x110[5]._super,  x110[6]._super,  x110[7]._super,
                                 x110[8]._super,  x110[9]._super,  x110[10]._super, x110[11]._super,
                                 x110[12]._super, x110[13]._super, x110[14]._super, x110[15]._super,
                                 x110[16]._super, x110[17]._super, x110[18]._super, x110[19]._super,
                                 x110[20]._super, x110[21]._super, x111[0]._super,  x111[1]._super,
                                 x111[2]._super,  x111[3]._super,  x111[4]._super,  x111[5]._super,
                                 x111[6]._super,  x111[7]._super,  x111[8]._super,  x111[9]._super};
    Pack2Struct x124 = execPack2(ctx, x123, LAYOUT_LOOKUP(x103, fd));
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:458)
    Pack2Struct x125 = execPack2(ctx,
                                 Val32Array{x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73,
                                            x74, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84,
                                            x85, x86, x87, x88, x89, x90, x91, x92, x93, x94},
                                 LAYOUT_LOOKUP(x103, fe));
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:459)
    Val32Array x126 = Val32Array{
        x107[10]._super, x107[11]._super, x107[12]._super, x107[13]._super, x107[14]._super,
        x107[15]._super, x107[16]._super, x107[17]._super, x107[18]._super, x107[19]._super,
        x107[20]._super, x107[21]._super, x112[0]._super,  x112[1]._super,  x112[2]._super,
        x112[3]._super,  x112[4]._super,  x112[5]._super,  x112[6]._super,  x112[7]._super,
        x112[8]._super,  x112[9]._super,  x112[10]._super, x112[11]._super, x112[12]._super,
        x112[13]._super, x112[14]._super, x112[15]._super, x112[16]._super, x112[17]._super,
        x112[18]._super, x112[19]._super};
    Pack2Struct x127 = execPack2(ctx, x126, LAYOUT_LOOKUP(x103, ff));
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:460)
    Val32Array x128 = Val32Array{
        x109[10]._super, x109[11]._super, x109[12]._super, x109[13]._super, x109[14]._super,
        x109[15]._super, x109[16]._super, x109[17]._super, x109[18]._super, x109[19]._super,
        x109[20]._super, x109[21]._super, x113[0]._super,  x113[1]._super,  x113[2]._super,
        x113[3]._super,  x113[4]._super,  x113[5]._super,  x113[6]._super,  x113[7]._super,
        x113[8]._super,  x113[9]._super,  x113[10]._super, x113[11]._super, x113[12]._super,
        x113[13]._super, x113[14]._super, x113[15]._super, x113[16]._super, x113[17]._super,
        x113[18]._super, x113[19]._super};
    Pack2Struct x129 = execPack2(ctx, x128, LAYOUT_LOOKUP(x103, fg));
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:461)
    Val32Array x130 = Val32Array{
        x111[10]._super, x111[11]._super, x111[12]._super, x111[13]._super, x111[14]._super,
        x111[15]._super, x111[16]._super, x111[17]._super, x111[18]._super, x111[19]._super,
        x111[20]._super, x111[21]._super, x114[0]._super,  x114[1]._super,  x114[2]._super,
        x114[3]._super,  x114[4]._super,  x114[5]._super,  x114[6]._super,  x114[7]._super,
        x114[8]._super,  x114[9]._super,  x114[10]._super, x114[11]._super, x114[12]._super,
        x114[13]._super, x114[14]._super, x114[15]._super, x114[16]._super, x114[17]._super,
        x114[18]._super, x114[19]._super};
    Pack2Struct x131 = execPack2(ctx, x130, LAYOUT_LOOKUP(x103, fh));
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:462)
    Val22Array x132 =
        Val22Array{x118.high._super, x118.low._super, x120.high._super, x120.low._super,
                   x122.high._super, x122.low._super, x124.high._super, x124.low._super,
                   x125.high._super, x125.low._super, x127.high._super, x127.low._super,
                   x129.high._super, x129.low._super, x131.high._super, x131.low._super,
                   Val(0),           Val(0),          Val(0),           Val(0),
                   Val(0),           Val(0)};
    // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:465)
    RetTupleStruct x133 =
        exec_RetTuple(ctx,
                      x132,
                      x105,
                      x105,
                      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                      x105,
                      x105,
                      Val(13),
                      Val(17),
                      Val(0),
                      Val(0),
                      x97,
                      LAYOUT_LOOKUP(x103, _super));
    x115 = x133;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:451)
  RetTupleStruct x134 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x96, _super));
  // sha256fini(zirgen/circuit/keccak/sha256_for_keccak.zir:443)
  RetTupleStruct x135 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x135;
}
RetTupleStruct execSetupMajor(ExecContext& ctx,
                              RetTupleStruct arg0,
                              BoundLayout<RetTupleLayout> arg1,
                              BoundLayout<SetupMajorLayout> layout2,
                              GlobalBuf global3) {
  // setup_major(zirgen/circuit/keccak/keccak.zir:1137)
  BoundLayout<_globalLayout> x4 = BIND_LAYOUT(kLayoutGlobal, global3);
  // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
  BoundLayout<SetupMajor_SuperLayout> x5 = LAYOUT_LOOKUP(layout2, _super);
  // setup_major(zirgen/circuit/keccak/keccak.zir:1138)
  RetTupleStruct x6 = back_RetTuple(ctx, 1, arg1);
  OneHot_14_Struct x7 = exec_OneHot_14_(ctx, x6.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct14Array x8 = x7._super;
  // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
  BoundLayout<SetupMajorArm4Layout> x9 = LAYOUT_LOOKUP(x5, arm4);
  BoundLayout<SetupMajorArm5Layout> x10 = LAYOUT_LOOKUP(x5, arm5);
  BoundLayout<SetupMajorArm6Layout> x11 = LAYOUT_LOOKUP(x5, arm6);
  BoundLayout<SetupMajorArm7Layout> x12 = LAYOUT_LOOKUP(x5, arm7);
  BoundLayout<SetupMajorArm8Layout> x13 = LAYOUT_LOOKUP(x5, arm8);
  BoundLayout<SetupMajorArm9Layout> x14 = LAYOUT_LOOKUP(x5, arm9);
  BoundLayout<SetupMajorArm10Layout> x15 = LAYOUT_LOOKUP(x5, arm10);
  BoundLayout<SetupMajorArm11Layout> x16 = LAYOUT_LOOKUP(x5, arm11);
  BoundLayout<SetupMajorArm12Layout> x17 = LAYOUT_LOOKUP(x5, arm12);
  BoundLayout<SetupMajorArm13Layout> x18 = LAYOUT_LOOKUP(x5, arm13);
  BoundLayout<Reg> x19 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x9, _extra0), count), _super);
  BoundLayout<Reg> x20 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x10, _extra0), count), _super);
  BoundLayout<Reg> x21 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x10, _extra1), count), _super);
  BoundLayout<Reg> x22 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x10, _extra2), count), _super);
  BoundLayout<Reg> x23 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x11, _extra0), count), _super);
  BoundLayout<Reg> x24 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x11, _extra1), count), _super);
  BoundLayout<Reg> x25 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x11, _extra2), count), _super);
  BoundLayout<Reg> x26 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x12, _extra0), count), _super);
  BoundLayout<Reg> x27 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x12, _extra1), count), _super);
  BoundLayout<Reg> x28 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x12, _extra2), count), _super);
  BoundLayout<Reg> x29 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x13, _extra0), count), _super);
  BoundLayout<Reg> x30 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x13, _extra1), count), _super);
  BoundLayout<Reg> x31 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x13, _extra2), count), _super);
  BoundLayout<Reg> x32 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x14, _extra0), count), _super);
  BoundLayout<Reg> x33 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x14, _extra1), count), _super);
  BoundLayout<Reg> x34 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x14, _extra2), count), _super);
  BoundLayout<Reg> x35 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x15, _extra0), count), _super);
  BoundLayout<Reg> x36 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x15, _extra1), count), _super);
  BoundLayout<Reg> x37 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x15, _extra2), count), _super);
  BoundLayout<Reg> x38 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x16, _extra0), count), _super);
  BoundLayout<Reg> x39 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x16, _extra1), count), _super);
  BoundLayout<Reg> x40 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x16, _extra2), count), _super);
  BoundLayout<Reg> x41 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x17, _extra0), count), _super);
  BoundLayout<Reg> x42 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x17, _extra1), count), _super);
  BoundLayout<Reg> x43 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x17, _extra2), count), _super);
  // setup_major(zirgen/circuit/keccak/keccak.zir:1160)
  Val22Array x44 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
  BoundLayout<Reg> x45 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x18, _extra0), count), _super);
  BoundLayout<Reg> x46 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x18, _extra1), count), _super);
  BoundLayout<Reg> x47 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x18, _extra2), count), _super);
  RetTupleStruct x48;
  if (to_size_t(x8[0]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1140)
    RetTupleStruct x49 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x50 = execEqualWord_0_(ctx, x49, LAYOUT_LOOKUP(x5, arm0));
    x48 = x50;
  } else if (to_size_t(x8[1]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1141)
    RetTupleStruct x51 = back_RetTuple(ctx, 2, arg1);
    RetTupleStruct x52 = execEqualWord_1_(ctx, x51, LAYOUT_LOOKUP(x5, arm1));
    x48 = x52;
  } else if (to_size_t(x8[2]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1142)
    RetTupleStruct x53 = back_RetTuple(ctx, 3, arg1);
    RetTupleStruct x54 = execEqualWord_2_(ctx, x53, LAYOUT_LOOKUP(x5, arm2));
    x48 = x54;
  } else if (to_size_t(x8[3]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1143)
    RetTupleStruct x55 = back_RetTuple(ctx, 4, arg1);
    RetTupleStruct x56 = execEqualWord_3_(ctx, x55, LAYOUT_LOOKUP(x5, arm3));
    x48 = x56;
  } else if (to_size_t(x8[4]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1144)
    RetTupleStruct x57 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x58 = execMemPaddingSha256(ctx, x57, LAYOUT_LOOKUP(x9, _super));
    // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
    STORE(x19, Val(0));
    EQZ(LOAD(x19, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    x48 = x58;
  } else if (to_size_t(x8[5]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1145)
    RetTupleStruct x59 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x60 = execSha256init_1_(ctx, x59, LAYOUT_LOOKUP(x10, _super));
    // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
    STORE(x20, Val(0));
    EQZ(LOAD(x20, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x21, Val(0));
    EQZ(LOAD(x21, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x22, Val(0));
    EQZ(LOAD(x22, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    x48 = x60;
  } else if (to_size_t(x8[6]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1146)
    RetTupleStruct x61 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x62 = execSha256init_2_(ctx, x61, LAYOUT_LOOKUP(x11, _super));
    // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
    STORE(x23, Val(0));
    EQZ(LOAD(x23, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x24, Val(0));
    EQZ(LOAD(x24, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x25, Val(0));
    EQZ(LOAD(x25, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    x48 = x62;
  } else if (to_size_t(x8[7]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1147)
    RetTupleStruct x63 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x64 = execSha256init_3_(ctx, x63, LAYOUT_LOOKUP(x12, _super));
    // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
    STORE(x26, Val(0));
    EQZ(LOAD(x26, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x27, Val(0));
    EQZ(LOAD(x27, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x28, Val(0));
    EQZ(LOAD(x28, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    x48 = x64;
  } else if (to_size_t(x8[8]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1148)
    RetTupleStruct x65 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x66 = execSha256init_4_(ctx, x65, LAYOUT_LOOKUP(x13, _super));
    // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
    STORE(x29, Val(0));
    EQZ(LOAD(x29, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x30, Val(0));
    EQZ(LOAD(x30, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x31, Val(0));
    EQZ(LOAD(x31, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    x48 = x66;
  } else if (to_size_t(x8[9]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1149)
    RetTupleStruct x67 = back_RetTuple(ctx, 0, arg1);
    RetTupleStruct x68 = execSha256fini_5_(ctx, x67, arg1, LAYOUT_LOOKUP(x14, _super));
    // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
    STORE(x32, Val(0));
    EQZ(LOAD(x32, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x33, Val(0));
    EQZ(LOAD(x33, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x34, Val(0));
    EQZ(LOAD(x34, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    x48 = x68;
  } else if (to_size_t(x8[10]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1150)
    RetTupleStruct x69 = back_RetTuple(ctx, 0, arg1);
    RetTupleStruct x70 = execSha256fini_6_(ctx, x69, arg1, LAYOUT_LOOKUP(x15, _super));
    // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
    STORE(x35, Val(0));
    EQZ(LOAD(x35, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x36, Val(0));
    EQZ(LOAD(x36, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x37, Val(0));
    EQZ(LOAD(x37, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    x48 = x70;
  } else if (to_size_t(x8[11]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1151)
    RetTupleStruct x71 = back_RetTuple(ctx, 0, arg1);
    RetTupleStruct x72 = execSha256fini_7_(ctx, x71, arg1, LAYOUT_LOOKUP(x16, _super));
    // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
    STORE(x38, Val(0));
    EQZ(LOAD(x38, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x39, Val(0));
    EQZ(LOAD(x39, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x40, Val(0));
    EQZ(LOAD(x40, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    x48 = x72;
  } else if (to_size_t(x8[12]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1152)
    RetTupleStruct x73 = back_RetTuple(ctx, 0, arg1);
    RetTupleStruct x74 = execSha256fini_8_(ctx, x73, arg1, LAYOUT_LOOKUP(x17, _super));
    // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
    STORE(x41, Val(0));
    EQZ(LOAD(x41, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x42, Val(0));
    EQZ(LOAD(x42, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x43, Val(0));
    EQZ(LOAD(x43, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    x48 = x74;
  } else if (to_size_t(x8[13]._super)) {
    // setup_major(zirgen/circuit/keccak/keccak.zir:1153)
    RetTupleStruct x75 = back_RetTuple(ctx, 1, arg1);
    NondetRegStruct22Array x76 = x75.arrA;
    // setup_major(zirgen/circuit/keccak/keccak.zir:1154)
    Val x77 = x76[0]._super;
    Val x78 = x76[1]._super;
    Val x79 = x76[2]._super;
    Val x80 = x76[3]._super;
    Val x81 = x76[4]._super;
    Val x82 = x76[5]._super;
    Val x83 = x76[6]._super;
    Val x84 = x76[7]._super;
    Val x85 = x76[8]._super;
    Val x86 = x76[9]._super;
    Val x87 = x76[10]._super;
    Val x88 = x76[11]._super;
    Val x89 = x76[12]._super;
    Val x90 = x76[13]._super;
    Val x91 = x76[14]._super;
    Val x92 = x76[15]._super;
    ShaOutputStruct x93 = exec_ShaOutput(
        ctx,
        Val16Array{x77, x78, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92},
        LAYOUT_LOOKUP(x4, output));
    // Log(<preamble>:16)
    // setup_major(zirgen/circuit/keccak/keccak.zir:1155)
    INVOKE_EXTERN(
        ctx,
        log,
        "sha256output: %x,%x %x,%x %x,%x %x,%x %x,%x %x,%x %x,%x %x,%x",
        std::initializer_list<Val>{
            x77, x78, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92});
    // setup_major(zirgen/circuit/keccak/keccak.zir:1160)
    RetTupleStruct x94 = back_RetTuple(ctx, 1, arg1);
    NondetRegStruct22Array x95 = x94.arrA;
    Val22Array x96 =
        Val22Array{x95[0]._super,  x95[1]._super,  x95[2]._super,  x95[3]._super,  x95[4]._super,
                   x95[5]._super,  x95[6]._super,  x95[7]._super,  x95[8]._super,  x95[9]._super,
                   x95[10]._super, x95[11]._super, x95[12]._super, x95[13]._super, x95[14]._super,
                   x95[15]._super, x95[16]._super, x95[17]._super, x95[18]._super, x95[19]._super,
                   x95[20]._super, x95[21]._super};
    RetTupleStruct x97 =
        exec_RetTuple(ctx,
                      x96,
                      x44,
                      x44,
                      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                      x44,
                      x44,
                      Val(13),
                      Val(17),
                      Val(0),
                      Val(0),
                      Val(0),
                      LAYOUT_LOOKUP(x18, _super));
    // setup_major(zirgen/circuit/keccak/keccak.zir:1139)
    STORE(x45, Val(0));
    EQZ(LOAD(x45, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x46, Val(0));
    EQZ(LOAD(x46, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    STORE(x47, Val(0));
    EQZ(LOAD(x47, 0), "setup_major(zirgen/circuit/keccak/keccak.zir:1139)");
    x48 = x97;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  RetTupleStruct x98 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x5, _super));
  return x98;
}
OneHot_23_Struct
exec_OneHot_23_(ExecContext& ctx, Val arg0, BoundLayout<OneHot_23_Layout> layout1) {
  // OneHot(zirgen/circuit/keccak/one_hot.zir:7)
  NondetRegStruct23Array x2 =
      map(Val23Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                     Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                     Val(16), Val(17), Val(18), Val(19), Val(20), Val(21), Val(22)},
          LAYOUT_LOOKUP(layout1, _super),
          std::function([&](Val23Array::value_type x3,
                            BoundLayout<NondetRegLayout23LayoutArray::value_type> x4) {
            NondetRegStruct x5 = exec_NondetBitReg(ctx, isz((x3 - arg0)), x4);
            return x5;
          }));
  // OneHot(zirgen/circuit/keccak/one_hot.zir:9)
  Val x6 = x2[1]._super;
  Val x7 = (x2[0]._super + x6);
  Val x8 = x2[2]._super;
  Val x9 = x2[3]._super;
  Val x10 = x2[4]._super;
  Val x11 = (((x7 + x8) + x9) + x10);
  Val x12 = x2[5]._super;
  Val x13 = x2[6]._super;
  Val x14 = x2[7]._super;
  Val x15 = (((x11 + x12) + x13) + x14);
  Val x16 = x2[8]._super;
  Val x17 = x2[9]._super;
  Val x18 = x2[10]._super;
  Val x19 = (((x15 + x16) + x17) + x18);
  Val x20 = x2[11]._super;
  Val x21 = x2[12]._super;
  Val x22 = x2[13]._super;
  Val x23 = (((x19 + x20) + x21) + x22);
  Val x24 = x2[14]._super;
  Val x25 = x2[15]._super;
  Val x26 = x2[16]._super;
  Val x27 = (((x23 + x24) + x25) + x26);
  Val x28 = x2[17]._super;
  Val x29 = x2[18]._super;
  Val x30 = x2[19]._super;
  Val x31 = (((x27 + x28) + x29) + x30);
  Val x32 = x2[20]._super;
  Val x33 = x2[21]._super;
  Val x34 = x2[22]._super;
  Val x35 = (((x31 + x32) + x33) + x34);
  EQZ((x35 - Val(1)), "OneHot(zirgen/circuit/keccak/one_hot.zir:9)");
  // OneHot(zirgen/circuit/keccak/one_hot.zir:11)
  Val x36 = (((x6 + (x8 * Val(2))) + (x9 * Val(3))) + (x10 * Val(4)));
  Val x37 = (((x36 + (x12 * Val(5))) + (x13 * Val(6))) + (x14 * Val(7)));
  Val x38 = (((x37 + (x16 * Val(8))) + (x17 * Val(9))) + (x18 * Val(10)));
  Val x39 = (((x38 + (x20 * Val(11))) + (x21 * Val(12))) + (x22 * Val(13)));
  Val x40 = (((x39 + (x24 * Val(14))) + (x25 * Val(15))) + (x26 * Val(16)));
  Val x41 = (((x40 + (x28 * Val(17))) + (x29 * Val(18))) + (x30 * Val(19)));
  Val x42 = (((x41 + (x32 * Val(20))) + (x33 * Val(21))) + (x34 * Val(22)));
  EQZ((x42 - arg0), "OneHot(zirgen/circuit/keccak/one_hot.zir:11)");
  return OneHot_23_Struct{._super = x2};
}
OneHot_4_Struct exec_OneHot_4_(ExecContext& ctx, Val arg0, BoundLayout<OneHot_4_Layout> layout1) {
  // OneHot(zirgen/circuit/keccak/one_hot.zir:7)
  NondetRegStruct4Array x2 =
      map(Val4Array{Val(0), Val(1), Val(2), Val(3)},
          LAYOUT_LOOKUP(layout1, _super),
          std::function([&](Val4Array::value_type x3,
                            BoundLayout<NondetRegLayout4LayoutArray::value_type> x4) {
            NondetRegStruct x5 = exec_NondetBitReg(ctx, isz((x3 - arg0)), x4);
            return x5;
          }));
  // OneHot(zirgen/circuit/keccak/one_hot.zir:9)
  Val x6 = x2[1]._super;
  Val x7 = (x2[0]._super + x6);
  Val x8 = x2[2]._super;
  Val x9 = x2[3]._super;
  Val x10 = (((x7 + x8) + x9) - Val(1));
  EQZ(x10, "OneHot(zirgen/circuit/keccak/one_hot.zir:9)");
  // OneHot(zirgen/circuit/keccak/one_hot.zir:11)
  Val x11 = (((x6 + (x8 * Val(2))) + (x9 * Val(3))) - arg0);
  EQZ(x11, "OneHot(zirgen/circuit/keccak/one_hot.zir:11)");
  return OneHot_4_Struct{._super = x2};
}
FromBits_22_Struct execXor5wordsResult_0__0_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_0__0_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x2 = arg0.arrA;
  Val x3 = x2[0]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x6 = (x5[1]._super * Val(2));
  Val x7 = (x5[2]._super * Val(4));
  Val x8 = (x5[3]._super * Val(8));
  Val x9 = (x5[4]._super * Val(16));
  Val x10 = (x5[5]._super * Val(32));
  Val x11 = (x5[6]._super * Val(64));
  Val x12 = (x5[7]._super * Val(128));
  Val x13 = (x5[8]._super * Val(256));
  Val x14 = (x5[9]._super * Val(512));
  Val x15 = (x5[10]._super * Val(1024));
  Val x16 = (x5[11]._super * Val(2048));
  Val x17 = (x5[12]._super * Val(4096));
  Val x18 = (x5[13]._super * Val(8192));
  Val x19 = (x5[14]._super * Val(16384));
  Val x20 = (x5[15]._super * Val(32768));
  Val x21 = (x5[16]._super * Val(65536));
  Val x22 = (x5[17]._super * Val(131072));
  Val x23 = (x5[18]._super * Val(262144));
  Val x24 = (x5[19]._super * Val(524288));
  Val x25 = (x5[20]._super * Val(1048576));
  Val x26 = (x5[21]._super * Val(2097152));
  Val x27 = (x5[0]._super + x6);
  Val x28 = (((x27 + x7) + x8) + x9);
  Val x29 = (((x28 + x10) + x11) + x12);
  Val x30 = (((x29 + x13) + x14) + x15);
  Val x31 = (((x30 + x16) + x17) + x18);
  Val x32 = (((x31 + x19) + x20) + x21);
  Val x33 = (((x32 + x22) + x23) + x24);
  Val x34 = (((x33 + x25) + x26) - x3);
  EQZ(x34, "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x35 = x2[15]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_22_Struct x36 = exec_ToBits_22_(ctx, x35, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct22Array x37 = x36._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x38 = (x37[1]._super * Val(2));
  Val x39 = (x37[2]._super * Val(4));
  Val x40 = (x37[3]._super * Val(8));
  Val x41 = (x37[4]._super * Val(16));
  Val x42 = (x37[5]._super * Val(32));
  Val x43 = (x37[6]._super * Val(64));
  Val x44 = (x37[7]._super * Val(128));
  Val x45 = (x37[8]._super * Val(256));
  Val x46 = (x37[9]._super * Val(512));
  Val x47 = (x37[10]._super * Val(1024));
  Val x48 = (x37[11]._super * Val(2048));
  Val x49 = (x37[12]._super * Val(4096));
  Val x50 = (x37[13]._super * Val(8192));
  Val x51 = (x37[14]._super * Val(16384));
  Val x52 = (x37[15]._super * Val(32768));
  Val x53 = (x37[16]._super * Val(65536));
  Val x54 = (x37[17]._super * Val(131072));
  Val x55 = (x37[18]._super * Val(262144));
  Val x56 = (x37[19]._super * Val(524288));
  Val x57 = (x37[20]._super * Val(1048576));
  Val x58 = (x37[21]._super * Val(2097152));
  Val x59 = (x37[0]._super + x38);
  Val x60 = (((x59 + x39) + x40) + x41);
  Val x61 = (((x60 + x42) + x43) + x44);
  Val x62 = (((x61 + x45) + x46) + x47);
  Val x63 = (((x62 + x48) + x49) + x50);
  Val x64 = (((x63 + x51) + x52) + x53);
  Val x65 = (((x64 + x54) + x55) + x56);
  Val x66 = (((x65 + x57) + x58) - x35);
  EQZ(x66, "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x67 = arg0.arrB[8]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_22_Struct x68 = exec_ToBits_22_(ctx, x67, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct22Array x69 = x68._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x70 = (x69[1]._super * Val(2));
  Val x71 = (x69[2]._super * Val(4));
  Val x72 = (x69[3]._super * Val(8));
  Val x73 = (x69[4]._super * Val(16));
  Val x74 = (x69[5]._super * Val(32));
  Val x75 = (x69[6]._super * Val(64));
  Val x76 = (x69[7]._super * Val(128));
  Val x77 = (x69[8]._super * Val(256));
  Val x78 = (x69[9]._super * Val(512));
  Val x79 = (x69[10]._super * Val(1024));
  Val x80 = (x69[11]._super * Val(2048));
  Val x81 = (x69[12]._super * Val(4096));
  Val x82 = (x69[13]._super * Val(8192));
  Val x83 = (x69[14]._super * Val(16384));
  Val x84 = (x69[15]._super * Val(32768));
  Val x85 = (x69[16]._super * Val(65536));
  Val x86 = (x69[17]._super * Val(131072));
  Val x87 = (x69[18]._super * Val(262144));
  Val x88 = (x69[19]._super * Val(524288));
  Val x89 = (x69[20]._super * Val(1048576));
  Val x90 = (x69[21]._super * Val(2097152));
  Val x91 = (x69[0]._super + x70);
  Val x92 = (((x91 + x71) + x72) + x73);
  Val x93 = (((x92 + x74) + x75) + x76);
  Val x94 = (((x93 + x77) + x78) + x79);
  Val x95 = (((x94 + x80) + x81) + x82);
  Val x96 = (((x95 + x83) + x84) + x85);
  Val x97 = (((x96 + x86) + x87) + x88);
  Val x98 = (((x97 + x89) + x90) - x67);
  EQZ(x98, "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x99 = arg0.arrC;
  Val x100 = x99[1]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_22_Struct x101 = exec_ToBits_22_(ctx, x100, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct22Array x102 = x101._super;
  Val x103 = x102[0]._super;
  Val x104 = x102[1]._super;
  Val x105 = x102[2]._super;
  Val x106 = x102[3]._super;
  Val x107 = x102[4]._super;
  Val x108 = x102[5]._super;
  Val x109 = x102[6]._super;
  Val x110 = x102[7]._super;
  Val x111 = x102[8]._super;
  Val x112 = x102[9]._super;
  Val x113 = x102[10]._super;
  Val x114 = x102[11]._super;
  Val x115 = x102[12]._super;
  Val x116 = x102[13]._super;
  Val x117 = x102[14]._super;
  Val x118 = x102[15]._super;
  Val x119 = x102[16]._super;
  Val x120 = x102[17]._super;
  Val x121 = x102[18]._super;
  Val x122 = x102[19]._super;
  Val x123 = x102[20]._super;
  Val x124 = x102[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x125 = (((x103 + (x104 * Val(2))) + (x105 * Val(4))) + (x106 * Val(8)));
  Val x126 = (((x125 + (x107 * Val(16))) + (x108 * Val(32))) + (x109 * Val(64)));
  Val x127 = (((x126 + (x110 * Val(128))) + (x111 * Val(256))) + (x112 * Val(512)));
  Val x128 = (((x127 + (x113 * Val(1024))) + (x114 * Val(2048))) + (x115 * Val(4096)));
  Val x129 = (((x128 + (x116 * Val(8192))) + (x117 * Val(16384))) + (x118 * Val(32768)));
  Val x130 = (((x129 + (x119 * Val(65536))) + (x120 * Val(131072))) + (x121 * Val(262144)));
  Val x131 = (((x130 + (x122 * Val(524288))) + (x123 * Val(1048576))) + (x124 * Val(2097152)));
  EQZ((x131 - x100), "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x132 = x99[16]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_22_Struct x133 = exec_ToBits_22_(ctx, x132, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x134 = x133._super;
  Val x135 = x134[0]._super;
  Val x136 = x134[1]._super;
  Val x137 = x134[2]._super;
  Val x138 = x134[3]._super;
  Val x139 = x134[4]._super;
  Val x140 = x134[5]._super;
  Val x141 = x134[6]._super;
  Val x142 = x134[7]._super;
  Val x143 = x134[8]._super;
  Val x144 = x134[9]._super;
  Val x145 = x134[10]._super;
  Val x146 = x134[11]._super;
  Val x147 = x134[12]._super;
  Val x148 = x134[13]._super;
  Val x149 = x134[14]._super;
  Val x150 = x134[15]._super;
  Val x151 = x134[16]._super;
  Val x152 = x134[17]._super;
  Val x153 = x134[18]._super;
  Val x154 = x134[19]._super;
  Val x155 = x134[20]._super;
  Val x156 = x134[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x157 = (((x135 + (x136 * Val(2))) + (x137 * Val(4))) + (x138 * Val(8)));
  Val x158 = (((x157 + (x139 * Val(16))) + (x140 * Val(32))) + (x141 * Val(64)));
  Val x159 = (((x158 + (x142 * Val(128))) + (x143 * Val(256))) + (x144 * Val(512)));
  Val x160 = (((x159 + (x145 * Val(1024))) + (x146 * Val(2048))) + (x147 * Val(4096)));
  Val x161 = (((x160 + (x148 * Val(8192))) + (x149 * Val(16384))) + (x150 * Val(32768)));
  Val x162 = (((x161 + (x151 * Val(65536))) + (x152 * Val(131072))) + (x153 * Val(262144)));
  Val x163 = (((x162 + (x154 * Val(524288))) + (x155 * Val(1048576))) + (x156 * Val(2097152)));
  EQZ((x163 - x132), "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct22Array x164 =
      map(Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                     Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                     Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val22Array::value_type x165,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x166) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x167 = x5[to_size_t(x165)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x168 = x37[to_size_t(x165)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x169 = x69[to_size_t(x165)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x170 = ((Val(1) - x167) * (Val(1) - x168));
            Val x171 = ((x167 * x168) + x170);
            Val x172 = ((Val(1) - x171) * (Val(1) - x169));
            NondetRegStruct x173 = exec_Reg(ctx, ((x171 * x169) + x172), x166);
            return x173;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x174 = x164[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x175 = ((Val(1) - x174) * (Val(1) - x103));
  Val x176 = ((x174 * x103) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x178 = x164[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x179 = ((Val(1) - x178) * (Val(1) - x104));
  Val x180 = ((x178 * x104) + x179);
  Val x181 = ((Val(1) - x180) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x182 = x164[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x183 = ((Val(1) - x182) * (Val(1) - x105));
  Val x184 = ((x182 * x105) + x183);
  Val x185 = ((Val(1) - x184) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x186 = x164[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x187 = ((Val(1) - x186) * (Val(1) - x106));
  Val x188 = ((x186 * x106) + x187);
  Val x189 = ((Val(1) - x188) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x190 = x164[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x191 = ((Val(1) - x190) * (Val(1) - x107));
  Val x192 = ((x190 * x107) + x191);
  Val x193 = ((Val(1) - x192) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x194 = x164[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x195 = ((Val(1) - x194) * (Val(1) - x108));
  Val x196 = ((x194 * x108) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x198 = x164[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x199 = ((Val(1) - x198) * (Val(1) - x109));
  Val x200 = ((x198 * x109) + x199);
  Val x201 = ((Val(1) - x200) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x202 = x164[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x203 = ((Val(1) - x202) * (Val(1) - x110));
  Val x204 = ((x202 * x110) + x203);
  Val x205 = ((Val(1) - x204) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x206 = x164[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x207 = ((Val(1) - x206) * (Val(1) - x111));
  Val x208 = ((x206 * x111) + x207);
  Val x209 = ((Val(1) - x208) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x210 = x164[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x211 = ((Val(1) - x210) * (Val(1) - x112));
  Val x212 = ((x210 * x112) + x211);
  Val x213 = ((Val(1) - x212) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x214 = x164[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x215 = ((Val(1) - x214) * (Val(1) - x113));
  Val x216 = ((x214 * x113) + x215);
  Val x217 = ((Val(1) - x216) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x218 = x164[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x219 = ((Val(1) - x218) * (Val(1) - x114));
  Val x220 = ((x218 * x114) + x219);
  Val x221 = ((Val(1) - x220) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x222 = x164[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x223 = ((Val(1) - x222) * (Val(1) - x115));
  Val x224 = ((x222 * x115) + x223);
  Val x225 = ((Val(1) - x224) * (Val(1) - x147));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x226 = x164[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x227 = ((Val(1) - x226) * (Val(1) - x116));
  Val x228 = ((x226 * x116) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x148));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x230 = x164[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x231 = ((Val(1) - x230) * (Val(1) - x117));
  Val x232 = ((x230 * x117) + x231);
  Val x233 = ((Val(1) - x232) * (Val(1) - x149));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x234 = x164[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x235 = ((Val(1) - x234) * (Val(1) - x118));
  Val x236 = ((x234 * x118) + x235);
  Val x237 = ((Val(1) - x236) * (Val(1) - x150));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x238 = x164[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x239 = ((Val(1) - x238) * (Val(1) - x119));
  Val x240 = ((x238 * x119) + x239);
  Val x241 = ((Val(1) - x240) * (Val(1) - x151));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x242 = x164[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x243 = ((Val(1) - x242) * (Val(1) - x120));
  Val x244 = ((x242 * x120) + x243);
  Val x245 = ((Val(1) - x244) * (Val(1) - x152));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x246 = x164[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x247 = ((Val(1) - x246) * (Val(1) - x121));
  Val x248 = ((x246 * x121) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x153));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x250 = x164[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x251 = ((Val(1) - x250) * (Val(1) - x122));
  Val x252 = ((x250 * x122) + x251);
  Val x253 = ((Val(1) - x252) * (Val(1) - x154));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x254 = x164[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x255 = ((Val(1) - x254) * (Val(1) - x123));
  Val x256 = ((x254 * x123) + x255);
  Val x257 = ((Val(1) - x256) * (Val(1) - x155));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x258 = x164[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x259 = ((Val(1) - x258) * (Val(1) - x124));
  Val x260 = ((x258 * x124) + x259);
  Val x261 = ((Val(1) - x260) * (Val(1) - x156));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x262 = (((x180 * x136) + x181) * Val(2));
  Val x263 = (((x184 * x137) + x185) * Val(4));
  Val x264 = (((x188 * x138) + x189) * Val(8));
  Val x265 = (((x192 * x139) + x193) * Val(16));
  Val x266 = (((x196 * x140) + x197) * Val(32));
  Val x267 = (((x200 * x141) + x201) * Val(64));
  Val x268 = (((x204 * x142) + x205) * Val(128));
  Val x269 = (((x208 * x143) + x209) * Val(256));
  Val x270 = (((x212 * x144) + x213) * Val(512));
  Val x271 = (((x216 * x145) + x217) * Val(1024));
  Val x272 = (((x220 * x146) + x221) * Val(2048));
  Val x273 = (((x224 * x147) + x225) * Val(4096));
  Val x274 = (((x228 * x148) + x229) * Val(8192));
  Val x275 = (((x232 * x149) + x233) * Val(16384));
  Val x276 = (((x236 * x150) + x237) * Val(32768));
  Val x277 = (((x240 * x151) + x241) * Val(65536));
  Val x278 = (((x244 * x152) + x245) * Val(131072));
  Val x279 = (((x248 * x153) + x249) * Val(262144));
  Val x280 = (((x252 * x154) + x253) * Val(524288));
  Val x281 = (((x256 * x155) + x257) * Val(1048576));
  Val x282 = (((x260 * x156) + x261) * Val(2097152));
  Val x283 = (((x176 * x135) + x177) + x262);
  Val x284 = (((x283 + x263) + x264) + x265);
  Val x285 = (((x284 + x266) + x267) + x268);
  Val x286 = (((x285 + x269) + x270) + x271);
  Val x287 = (((x286 + x272) + x273) + x274);
  Val x288 = (((x287 + x275) + x276) + x277);
  Val x289 = (((x288 + x278) + x279) + x280);
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:82)
  FromBits_22_Struct x290 = FromBits_22_Struct{._super = ((x289 + x281) + x282)};
  return x290;
}
RetTupleStruct execXor5wordsMinor0_0_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<Xor5wordsMinor0_0_Layout> layout1) {
  // xor5words_minor0(zirgen/circuit/keccak/keccak.zir:200)
  FromBits_22_Struct x2 = execXor5wordsResult_0__0_(ctx, arg0, LAYOUT_LOOKUP(layout1, _0));
  NondetRegStruct x3 = exec_Reg(ctx, x2._super, LAYOUT_LOOKUP(layout1, result));
  // xor5words_minor0(zirgen/circuit/keccak/keccak.zir:202)
  Val22Array x4 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x5 =
      exec_RetTuple(ctx,
                    x4,
                    x4,
                    x4,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),    Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),    Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x3._super, Val(0)},
                    x4,
                    x4,
                    Val(1),
                    Val(0),
                    arg0.rnd._super,
                    arg0.blk._super,
                    arg0.midx._super,
                    LAYOUT_LOOKUP(layout1, _super));
  return x5;
}
FromBits_21_Struct execXor5wordsResult_0__1_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_0__1_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x2 = arg0.arrA;
  Val x3 = x2[1]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_21_Struct x4 = exec_ToBits_21_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct21Array x5 = x4._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x6 = (x5[1]._super * Val(2));
  Val x7 = (x5[2]._super * Val(4));
  Val x8 = (x5[3]._super * Val(8));
  Val x9 = (x5[4]._super * Val(16));
  Val x10 = (x5[5]._super * Val(32));
  Val x11 = (x5[6]._super * Val(64));
  Val x12 = (x5[7]._super * Val(128));
  Val x13 = (x5[8]._super * Val(256));
  Val x14 = (x5[9]._super * Val(512));
  Val x15 = (x5[10]._super * Val(1024));
  Val x16 = (x5[11]._super * Val(2048));
  Val x17 = (x5[12]._super * Val(4096));
  Val x18 = (x5[13]._super * Val(8192));
  Val x19 = (x5[14]._super * Val(16384));
  Val x20 = (x5[15]._super * Val(32768));
  Val x21 = (x5[16]._super * Val(65536));
  Val x22 = (x5[17]._super * Val(131072));
  Val x23 = (x5[18]._super * Val(262144));
  Val x24 = (x5[19]._super * Val(524288));
  Val x25 = (x5[20]._super * Val(1048576));
  Val x26 = (x5[0]._super + x6);
  Val x27 = (((x26 + x7) + x8) + x9);
  Val x28 = (((x27 + x10) + x11) + x12);
  Val x29 = (((x28 + x13) + x14) + x15);
  Val x30 = (((x29 + x16) + x17) + x18);
  Val x31 = (((x30 + x19) + x20) + x21);
  Val x32 = (((x31 + x22) + x23) + x24);
  EQZ(((x32 + x25) - x3), "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x33 = x2[16]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_21_Struct x34 = exec_ToBits_21_(ctx, x33, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct21Array x35 = x34._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x36 = (x35[1]._super * Val(2));
  Val x37 = (x35[2]._super * Val(4));
  Val x38 = (x35[3]._super * Val(8));
  Val x39 = (x35[4]._super * Val(16));
  Val x40 = (x35[5]._super * Val(32));
  Val x41 = (x35[6]._super * Val(64));
  Val x42 = (x35[7]._super * Val(128));
  Val x43 = (x35[8]._super * Val(256));
  Val x44 = (x35[9]._super * Val(512));
  Val x45 = (x35[10]._super * Val(1024));
  Val x46 = (x35[11]._super * Val(2048));
  Val x47 = (x35[12]._super * Val(4096));
  Val x48 = (x35[13]._super * Val(8192));
  Val x49 = (x35[14]._super * Val(16384));
  Val x50 = (x35[15]._super * Val(32768));
  Val x51 = (x35[16]._super * Val(65536));
  Val x52 = (x35[17]._super * Val(131072));
  Val x53 = (x35[18]._super * Val(262144));
  Val x54 = (x35[19]._super * Val(524288));
  Val x55 = (x35[20]._super * Val(1048576));
  Val x56 = (x35[0]._super + x36);
  Val x57 = (((x56 + x37) + x38) + x39);
  Val x58 = (((x57 + x40) + x41) + x42);
  Val x59 = (((x58 + x43) + x44) + x45);
  Val x60 = (((x59 + x46) + x47) + x48);
  Val x61 = (((x60 + x49) + x50) + x51);
  Val x62 = (((x61 + x52) + x53) + x54);
  EQZ(((x62 + x55) - x33), "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x63 = arg0.arrB[9]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_21_Struct x64 = exec_ToBits_21_(ctx, x63, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct21Array x65 = x64._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x66 = (x65[1]._super * Val(2));
  Val x67 = (x65[2]._super * Val(4));
  Val x68 = (x65[3]._super * Val(8));
  Val x69 = (x65[4]._super * Val(16));
  Val x70 = (x65[5]._super * Val(32));
  Val x71 = (x65[6]._super * Val(64));
  Val x72 = (x65[7]._super * Val(128));
  Val x73 = (x65[8]._super * Val(256));
  Val x74 = (x65[9]._super * Val(512));
  Val x75 = (x65[10]._super * Val(1024));
  Val x76 = (x65[11]._super * Val(2048));
  Val x77 = (x65[12]._super * Val(4096));
  Val x78 = (x65[13]._super * Val(8192));
  Val x79 = (x65[14]._super * Val(16384));
  Val x80 = (x65[15]._super * Val(32768));
  Val x81 = (x65[16]._super * Val(65536));
  Val x82 = (x65[17]._super * Val(131072));
  Val x83 = (x65[18]._super * Val(262144));
  Val x84 = (x65[19]._super * Val(524288));
  Val x85 = (x65[20]._super * Val(1048576));
  Val x86 = (x65[0]._super + x66);
  Val x87 = (((x86 + x67) + x68) + x69);
  Val x88 = (((x87 + x70) + x71) + x72);
  Val x89 = (((x88 + x73) + x74) + x75);
  Val x90 = (((x89 + x76) + x77) + x78);
  Val x91 = (((x90 + x79) + x80) + x81);
  Val x92 = (((x91 + x82) + x83) + x84);
  EQZ(((x92 + x85) - x63), "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x93 = arg0.arrC;
  Val x94 = x93[2]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_21_Struct x95 = exec_ToBits_21_(ctx, x94, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct21Array x96 = x95._super;
  Val x97 = x96[0]._super;
  Val x98 = x96[1]._super;
  Val x99 = x96[2]._super;
  Val x100 = x96[3]._super;
  Val x101 = x96[4]._super;
  Val x102 = x96[5]._super;
  Val x103 = x96[6]._super;
  Val x104 = x96[7]._super;
  Val x105 = x96[8]._super;
  Val x106 = x96[9]._super;
  Val x107 = x96[10]._super;
  Val x108 = x96[11]._super;
  Val x109 = x96[12]._super;
  Val x110 = x96[13]._super;
  Val x111 = x96[14]._super;
  Val x112 = x96[15]._super;
  Val x113 = x96[16]._super;
  Val x114 = x96[17]._super;
  Val x115 = x96[18]._super;
  Val x116 = x96[19]._super;
  Val x117 = x96[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x118 = (((x97 + (x98 * Val(2))) + (x99 * Val(4))) + (x100 * Val(8)));
  Val x119 = (((x118 + (x101 * Val(16))) + (x102 * Val(32))) + (x103 * Val(64)));
  Val x120 = (((x119 + (x104 * Val(128))) + (x105 * Val(256))) + (x106 * Val(512)));
  Val x121 = (((x120 + (x107 * Val(1024))) + (x108 * Val(2048))) + (x109 * Val(4096)));
  Val x122 = (((x121 + (x110 * Val(8192))) + (x111 * Val(16384))) + (x112 * Val(32768)));
  Val x123 = (((x122 + (x113 * Val(65536))) + (x114 * Val(131072))) + (x115 * Val(262144)));
  Val x124 = (((x123 + (x116 * Val(524288))) + (x117 * Val(1048576))) - x94);
  EQZ(x124, "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x125 = x93[17]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_21_Struct x126 = exec_ToBits_21_(ctx, x125, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x127 = x126._super;
  Val x128 = x127[0]._super;
  Val x129 = x127[1]._super;
  Val x130 = x127[2]._super;
  Val x131 = x127[3]._super;
  Val x132 = x127[4]._super;
  Val x133 = x127[5]._super;
  Val x134 = x127[6]._super;
  Val x135 = x127[7]._super;
  Val x136 = x127[8]._super;
  Val x137 = x127[9]._super;
  Val x138 = x127[10]._super;
  Val x139 = x127[11]._super;
  Val x140 = x127[12]._super;
  Val x141 = x127[13]._super;
  Val x142 = x127[14]._super;
  Val x143 = x127[15]._super;
  Val x144 = x127[16]._super;
  Val x145 = x127[17]._super;
  Val x146 = x127[18]._super;
  Val x147 = x127[19]._super;
  Val x148 = x127[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x149 = (((x128 + (x129 * Val(2))) + (x130 * Val(4))) + (x131 * Val(8)));
  Val x150 = (((x149 + (x132 * Val(16))) + (x133 * Val(32))) + (x134 * Val(64)));
  Val x151 = (((x150 + (x135 * Val(128))) + (x136 * Val(256))) + (x137 * Val(512)));
  Val x152 = (((x151 + (x138 * Val(1024))) + (x139 * Val(2048))) + (x140 * Val(4096)));
  Val x153 = (((x152 + (x141 * Val(8192))) + (x142 * Val(16384))) + (x143 * Val(32768)));
  Val x154 = (((x153 + (x144 * Val(65536))) + (x145 * Val(131072))) + (x146 * Val(262144)));
  Val x155 = (((x154 + (x147 * Val(524288))) + (x148 * Val(1048576))) - x125);
  EQZ(x155, "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct21Array x156 =
      map(Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                     Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                     Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val21Array::value_type x157,
                            BoundLayout<NondetRegLayout21LayoutArray::value_type> x158) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x159 = x5[to_size_t(x157)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x160 = x35[to_size_t(x157)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x161 = x65[to_size_t(x157)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x162 = ((Val(1) - x159) * (Val(1) - x160));
            Val x163 = ((x159 * x160) + x162);
            Val x164 = ((Val(1) - x163) * (Val(1) - x161));
            NondetRegStruct x165 = exec_Reg(ctx, ((x163 * x161) + x164), x158);
            return x165;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x166 = x156[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x167 = ((Val(1) - x166) * (Val(1) - x97));
  Val x168 = ((x166 * x97) + x167);
  Val x169 = ((Val(1) - x168) * (Val(1) - x128));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x170 = x156[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x171 = ((Val(1) - x170) * (Val(1) - x98));
  Val x172 = ((x170 * x98) + x171);
  Val x173 = ((Val(1) - x172) * (Val(1) - x129));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x174 = x156[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x175 = ((Val(1) - x174) * (Val(1) - x99));
  Val x176 = ((x174 * x99) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x130));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x178 = x156[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x179 = ((Val(1) - x178) * (Val(1) - x100));
  Val x180 = ((x178 * x100) + x179);
  Val x181 = ((Val(1) - x180) * (Val(1) - x131));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x182 = x156[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x183 = ((Val(1) - x182) * (Val(1) - x101));
  Val x184 = ((x182 * x101) + x183);
  Val x185 = ((Val(1) - x184) * (Val(1) - x132));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x186 = x156[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x187 = ((Val(1) - x186) * (Val(1) - x102));
  Val x188 = ((x186 * x102) + x187);
  Val x189 = ((Val(1) - x188) * (Val(1) - x133));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x190 = x156[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x191 = ((Val(1) - x190) * (Val(1) - x103));
  Val x192 = ((x190 * x103) + x191);
  Val x193 = ((Val(1) - x192) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x194 = x156[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x195 = ((Val(1) - x194) * (Val(1) - x104));
  Val x196 = ((x194 * x104) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x198 = x156[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x199 = ((Val(1) - x198) * (Val(1) - x105));
  Val x200 = ((x198 * x105) + x199);
  Val x201 = ((Val(1) - x200) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x202 = x156[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x203 = ((Val(1) - x202) * (Val(1) - x106));
  Val x204 = ((x202 * x106) + x203);
  Val x205 = ((Val(1) - x204) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x206 = x156[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x207 = ((Val(1) - x206) * (Val(1) - x107));
  Val x208 = ((x206 * x107) + x207);
  Val x209 = ((Val(1) - x208) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x210 = x156[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x211 = ((Val(1) - x210) * (Val(1) - x108));
  Val x212 = ((x210 * x108) + x211);
  Val x213 = ((Val(1) - x212) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x214 = x156[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x215 = ((Val(1) - x214) * (Val(1) - x109));
  Val x216 = ((x214 * x109) + x215);
  Val x217 = ((Val(1) - x216) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x218 = x156[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x219 = ((Val(1) - x218) * (Val(1) - x110));
  Val x220 = ((x218 * x110) + x219);
  Val x221 = ((Val(1) - x220) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x222 = x156[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x223 = ((Val(1) - x222) * (Val(1) - x111));
  Val x224 = ((x222 * x111) + x223);
  Val x225 = ((Val(1) - x224) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x226 = x156[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x227 = ((Val(1) - x226) * (Val(1) - x112));
  Val x228 = ((x226 * x112) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x230 = x156[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x231 = ((Val(1) - x230) * (Val(1) - x113));
  Val x232 = ((x230 * x113) + x231);
  Val x233 = ((Val(1) - x232) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x234 = x156[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x235 = ((Val(1) - x234) * (Val(1) - x114));
  Val x236 = ((x234 * x114) + x235);
  Val x237 = ((Val(1) - x236) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x238 = x156[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x239 = ((Val(1) - x238) * (Val(1) - x115));
  Val x240 = ((x238 * x115) + x239);
  Val x241 = ((Val(1) - x240) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x242 = x156[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x243 = ((Val(1) - x242) * (Val(1) - x116));
  Val x244 = ((x242 * x116) + x243);
  Val x245 = ((Val(1) - x244) * (Val(1) - x147));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x246 = x156[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x247 = ((Val(1) - x246) * (Val(1) - x117));
  Val x248 = ((x246 * x117) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x148));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x250 = (((x172 * x129) + x173) * Val(2));
  Val x251 = (((x176 * x130) + x177) * Val(4));
  Val x252 = (((x180 * x131) + x181) * Val(8));
  Val x253 = (((x184 * x132) + x185) * Val(16));
  Val x254 = (((x188 * x133) + x189) * Val(32));
  Val x255 = (((x192 * x134) + x193) * Val(64));
  Val x256 = (((x196 * x135) + x197) * Val(128));
  Val x257 = (((x200 * x136) + x201) * Val(256));
  Val x258 = (((x204 * x137) + x205) * Val(512));
  Val x259 = (((x208 * x138) + x209) * Val(1024));
  Val x260 = (((x212 * x139) + x213) * Val(2048));
  Val x261 = (((x216 * x140) + x217) * Val(4096));
  Val x262 = (((x220 * x141) + x221) * Val(8192));
  Val x263 = (((x224 * x142) + x225) * Val(16384));
  Val x264 = (((x228 * x143) + x229) * Val(32768));
  Val x265 = (((x232 * x144) + x233) * Val(65536));
  Val x266 = (((x236 * x145) + x237) * Val(131072));
  Val x267 = (((x240 * x146) + x241) * Val(262144));
  Val x268 = (((x244 * x147) + x245) * Val(524288));
  Val x269 = (((x248 * x148) + x249) * Val(1048576));
  Val x270 = (((x168 * x128) + x169) + x250);
  Val x271 = (((x270 + x251) + x252) + x253);
  Val x272 = (((x271 + x254) + x255) + x256);
  Val x273 = (((x272 + x257) + x258) + x259);
  Val x274 = (((x273 + x260) + x261) + x262);
  Val x275 = (((x274 + x263) + x264) + x265);
  Val x276 = (((x275 + x266) + x267) + x268);
  return FromBits_21_Struct{._super = (x276 + x269)};
}
RetTupleStruct execXor5wordsMinor1_0_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor1_0_Layout> layout2) {
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:207)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:208)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:209)
  FromBits_21_Struct x5 = execXor5wordsResult_0__1_(ctx, x4, LAYOUT_LOOKUP(layout2, _0));
  NondetRegStruct x6 = exec_Reg(ctx, x5._super, LAYOUT_LOOKUP(layout2, result));
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:207)
  Val x7 = x3.arrD[22]._super;
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:212)
  Val22Array x8 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x9 =
      exec_RetTuple(ctx,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x7},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x6._super},
                    x8,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x8,
                    x8,
                    Val(2),
                    Val(0),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x9;
}
FromBits_21_Struct execXor5wordsResult_0__2_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_0__2_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x2 = arg0.arrA;
  Val x3 = x2[2]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_21_Struct x4 = exec_ToBits_21_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct21Array x5 = x4._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x6 = (x5[1]._super * Val(2));
  Val x7 = (x5[2]._super * Val(4));
  Val x8 = (x5[3]._super * Val(8));
  Val x9 = (x5[4]._super * Val(16));
  Val x10 = (x5[5]._super * Val(32));
  Val x11 = (x5[6]._super * Val(64));
  Val x12 = (x5[7]._super * Val(128));
  Val x13 = (x5[8]._super * Val(256));
  Val x14 = (x5[9]._super * Val(512));
  Val x15 = (x5[10]._super * Val(1024));
  Val x16 = (x5[11]._super * Val(2048));
  Val x17 = (x5[12]._super * Val(4096));
  Val x18 = (x5[13]._super * Val(8192));
  Val x19 = (x5[14]._super * Val(16384));
  Val x20 = (x5[15]._super * Val(32768));
  Val x21 = (x5[16]._super * Val(65536));
  Val x22 = (x5[17]._super * Val(131072));
  Val x23 = (x5[18]._super * Val(262144));
  Val x24 = (x5[19]._super * Val(524288));
  Val x25 = (x5[20]._super * Val(1048576));
  Val x26 = (x5[0]._super + x6);
  Val x27 = (((x26 + x7) + x8) + x9);
  Val x28 = (((x27 + x10) + x11) + x12);
  Val x29 = (((x28 + x13) + x14) + x15);
  Val x30 = (((x29 + x16) + x17) + x18);
  Val x31 = (((x30 + x19) + x20) + x21);
  Val x32 = (((x31 + x22) + x23) + x24);
  EQZ(((x32 + x25) - x3), "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x33 = x2[17]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_21_Struct x34 = exec_ToBits_21_(ctx, x33, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct21Array x35 = x34._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x36 = (x35[1]._super * Val(2));
  Val x37 = (x35[2]._super * Val(4));
  Val x38 = (x35[3]._super * Val(8));
  Val x39 = (x35[4]._super * Val(16));
  Val x40 = (x35[5]._super * Val(32));
  Val x41 = (x35[6]._super * Val(64));
  Val x42 = (x35[7]._super * Val(128));
  Val x43 = (x35[8]._super * Val(256));
  Val x44 = (x35[9]._super * Val(512));
  Val x45 = (x35[10]._super * Val(1024));
  Val x46 = (x35[11]._super * Val(2048));
  Val x47 = (x35[12]._super * Val(4096));
  Val x48 = (x35[13]._super * Val(8192));
  Val x49 = (x35[14]._super * Val(16384));
  Val x50 = (x35[15]._super * Val(32768));
  Val x51 = (x35[16]._super * Val(65536));
  Val x52 = (x35[17]._super * Val(131072));
  Val x53 = (x35[18]._super * Val(262144));
  Val x54 = (x35[19]._super * Val(524288));
  Val x55 = (x35[20]._super * Val(1048576));
  Val x56 = (x35[0]._super + x36);
  Val x57 = (((x56 + x37) + x38) + x39);
  Val x58 = (((x57 + x40) + x41) + x42);
  Val x59 = (((x58 + x43) + x44) + x45);
  Val x60 = (((x59 + x46) + x47) + x48);
  Val x61 = (((x60 + x49) + x50) + x51);
  Val x62 = (((x61 + x52) + x53) + x54);
  EQZ(((x62 + x55) - x33), "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x63 = arg0.arrB[10]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_21_Struct x64 = exec_ToBits_21_(ctx, x63, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct21Array x65 = x64._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x66 = (x65[1]._super * Val(2));
  Val x67 = (x65[2]._super * Val(4));
  Val x68 = (x65[3]._super * Val(8));
  Val x69 = (x65[4]._super * Val(16));
  Val x70 = (x65[5]._super * Val(32));
  Val x71 = (x65[6]._super * Val(64));
  Val x72 = (x65[7]._super * Val(128));
  Val x73 = (x65[8]._super * Val(256));
  Val x74 = (x65[9]._super * Val(512));
  Val x75 = (x65[10]._super * Val(1024));
  Val x76 = (x65[11]._super * Val(2048));
  Val x77 = (x65[12]._super * Val(4096));
  Val x78 = (x65[13]._super * Val(8192));
  Val x79 = (x65[14]._super * Val(16384));
  Val x80 = (x65[15]._super * Val(32768));
  Val x81 = (x65[16]._super * Val(65536));
  Val x82 = (x65[17]._super * Val(131072));
  Val x83 = (x65[18]._super * Val(262144));
  Val x84 = (x65[19]._super * Val(524288));
  Val x85 = (x65[20]._super * Val(1048576));
  Val x86 = (x65[0]._super + x66);
  Val x87 = (((x86 + x67) + x68) + x69);
  Val x88 = (((x87 + x70) + x71) + x72);
  Val x89 = (((x88 + x73) + x74) + x75);
  Val x90 = (((x89 + x76) + x77) + x78);
  Val x91 = (((x90 + x79) + x80) + x81);
  Val x92 = (((x91 + x82) + x83) + x84);
  EQZ(((x92 + x85) - x63), "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x93 = arg0.arrC;
  Val x94 = x93[3]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_21_Struct x95 = exec_ToBits_21_(ctx, x94, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct21Array x96 = x95._super;
  Val x97 = x96[0]._super;
  Val x98 = x96[1]._super;
  Val x99 = x96[2]._super;
  Val x100 = x96[3]._super;
  Val x101 = x96[4]._super;
  Val x102 = x96[5]._super;
  Val x103 = x96[6]._super;
  Val x104 = x96[7]._super;
  Val x105 = x96[8]._super;
  Val x106 = x96[9]._super;
  Val x107 = x96[10]._super;
  Val x108 = x96[11]._super;
  Val x109 = x96[12]._super;
  Val x110 = x96[13]._super;
  Val x111 = x96[14]._super;
  Val x112 = x96[15]._super;
  Val x113 = x96[16]._super;
  Val x114 = x96[17]._super;
  Val x115 = x96[18]._super;
  Val x116 = x96[19]._super;
  Val x117 = x96[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x118 = (((x97 + (x98 * Val(2))) + (x99 * Val(4))) + (x100 * Val(8)));
  Val x119 = (((x118 + (x101 * Val(16))) + (x102 * Val(32))) + (x103 * Val(64)));
  Val x120 = (((x119 + (x104 * Val(128))) + (x105 * Val(256))) + (x106 * Val(512)));
  Val x121 = (((x120 + (x107 * Val(1024))) + (x108 * Val(2048))) + (x109 * Val(4096)));
  Val x122 = (((x121 + (x110 * Val(8192))) + (x111 * Val(16384))) + (x112 * Val(32768)));
  Val x123 = (((x122 + (x113 * Val(65536))) + (x114 * Val(131072))) + (x115 * Val(262144)));
  Val x124 = (((x123 + (x116 * Val(524288))) + (x117 * Val(1048576))) - x94);
  EQZ(x124, "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x125 = x93[18]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_21_Struct x126 = exec_ToBits_21_(ctx, x125, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x127 = x126._super;
  Val x128 = x127[0]._super;
  Val x129 = x127[1]._super;
  Val x130 = x127[2]._super;
  Val x131 = x127[3]._super;
  Val x132 = x127[4]._super;
  Val x133 = x127[5]._super;
  Val x134 = x127[6]._super;
  Val x135 = x127[7]._super;
  Val x136 = x127[8]._super;
  Val x137 = x127[9]._super;
  Val x138 = x127[10]._super;
  Val x139 = x127[11]._super;
  Val x140 = x127[12]._super;
  Val x141 = x127[13]._super;
  Val x142 = x127[14]._super;
  Val x143 = x127[15]._super;
  Val x144 = x127[16]._super;
  Val x145 = x127[17]._super;
  Val x146 = x127[18]._super;
  Val x147 = x127[19]._super;
  Val x148 = x127[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x149 = (((x128 + (x129 * Val(2))) + (x130 * Val(4))) + (x131 * Val(8)));
  Val x150 = (((x149 + (x132 * Val(16))) + (x133 * Val(32))) + (x134 * Val(64)));
  Val x151 = (((x150 + (x135 * Val(128))) + (x136 * Val(256))) + (x137 * Val(512)));
  Val x152 = (((x151 + (x138 * Val(1024))) + (x139 * Val(2048))) + (x140 * Val(4096)));
  Val x153 = (((x152 + (x141 * Val(8192))) + (x142 * Val(16384))) + (x143 * Val(32768)));
  Val x154 = (((x153 + (x144 * Val(65536))) + (x145 * Val(131072))) + (x146 * Val(262144)));
  Val x155 = (((x154 + (x147 * Val(524288))) + (x148 * Val(1048576))) - x125);
  EQZ(x155, "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct21Array x156 =
      map(Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                     Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                     Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val21Array::value_type x157,
                            BoundLayout<NondetRegLayout21LayoutArray::value_type> x158) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x159 = x5[to_size_t(x157)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x160 = x35[to_size_t(x157)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x161 = x65[to_size_t(x157)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x162 = ((Val(1) - x159) * (Val(1) - x160));
            Val x163 = ((x159 * x160) + x162);
            Val x164 = ((Val(1) - x163) * (Val(1) - x161));
            NondetRegStruct x165 = exec_Reg(ctx, ((x163 * x161) + x164), x158);
            return x165;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x166 = x156[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x167 = ((Val(1) - x166) * (Val(1) - x97));
  Val x168 = ((x166 * x97) + x167);
  Val x169 = ((Val(1) - x168) * (Val(1) - x128));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x170 = x156[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x171 = ((Val(1) - x170) * (Val(1) - x98));
  Val x172 = ((x170 * x98) + x171);
  Val x173 = ((Val(1) - x172) * (Val(1) - x129));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x174 = x156[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x175 = ((Val(1) - x174) * (Val(1) - x99));
  Val x176 = ((x174 * x99) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x130));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x178 = x156[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x179 = ((Val(1) - x178) * (Val(1) - x100));
  Val x180 = ((x178 * x100) + x179);
  Val x181 = ((Val(1) - x180) * (Val(1) - x131));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x182 = x156[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x183 = ((Val(1) - x182) * (Val(1) - x101));
  Val x184 = ((x182 * x101) + x183);
  Val x185 = ((Val(1) - x184) * (Val(1) - x132));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x186 = x156[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x187 = ((Val(1) - x186) * (Val(1) - x102));
  Val x188 = ((x186 * x102) + x187);
  Val x189 = ((Val(1) - x188) * (Val(1) - x133));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x190 = x156[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x191 = ((Val(1) - x190) * (Val(1) - x103));
  Val x192 = ((x190 * x103) + x191);
  Val x193 = ((Val(1) - x192) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x194 = x156[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x195 = ((Val(1) - x194) * (Val(1) - x104));
  Val x196 = ((x194 * x104) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x198 = x156[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x199 = ((Val(1) - x198) * (Val(1) - x105));
  Val x200 = ((x198 * x105) + x199);
  Val x201 = ((Val(1) - x200) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x202 = x156[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x203 = ((Val(1) - x202) * (Val(1) - x106));
  Val x204 = ((x202 * x106) + x203);
  Val x205 = ((Val(1) - x204) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x206 = x156[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x207 = ((Val(1) - x206) * (Val(1) - x107));
  Val x208 = ((x206 * x107) + x207);
  Val x209 = ((Val(1) - x208) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x210 = x156[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x211 = ((Val(1) - x210) * (Val(1) - x108));
  Val x212 = ((x210 * x108) + x211);
  Val x213 = ((Val(1) - x212) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x214 = x156[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x215 = ((Val(1) - x214) * (Val(1) - x109));
  Val x216 = ((x214 * x109) + x215);
  Val x217 = ((Val(1) - x216) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x218 = x156[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x219 = ((Val(1) - x218) * (Val(1) - x110));
  Val x220 = ((x218 * x110) + x219);
  Val x221 = ((Val(1) - x220) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x222 = x156[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x223 = ((Val(1) - x222) * (Val(1) - x111));
  Val x224 = ((x222 * x111) + x223);
  Val x225 = ((Val(1) - x224) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x226 = x156[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x227 = ((Val(1) - x226) * (Val(1) - x112));
  Val x228 = ((x226 * x112) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x230 = x156[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x231 = ((Val(1) - x230) * (Val(1) - x113));
  Val x232 = ((x230 * x113) + x231);
  Val x233 = ((Val(1) - x232) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x234 = x156[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x235 = ((Val(1) - x234) * (Val(1) - x114));
  Val x236 = ((x234 * x114) + x235);
  Val x237 = ((Val(1) - x236) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x238 = x156[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x239 = ((Val(1) - x238) * (Val(1) - x115));
  Val x240 = ((x238 * x115) + x239);
  Val x241 = ((Val(1) - x240) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x242 = x156[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x243 = ((Val(1) - x242) * (Val(1) - x116));
  Val x244 = ((x242 * x116) + x243);
  Val x245 = ((Val(1) - x244) * (Val(1) - x147));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x246 = x156[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x247 = ((Val(1) - x246) * (Val(1) - x117));
  Val x248 = ((x246 * x117) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x148));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x250 = (((x172 * x129) + x173) * Val(2));
  Val x251 = (((x176 * x130) + x177) * Val(4));
  Val x252 = (((x180 * x131) + x181) * Val(8));
  Val x253 = (((x184 * x132) + x185) * Val(16));
  Val x254 = (((x188 * x133) + x189) * Val(32));
  Val x255 = (((x192 * x134) + x193) * Val(64));
  Val x256 = (((x196 * x135) + x197) * Val(128));
  Val x257 = (((x200 * x136) + x201) * Val(256));
  Val x258 = (((x204 * x137) + x205) * Val(512));
  Val x259 = (((x208 * x138) + x209) * Val(1024));
  Val x260 = (((x212 * x139) + x213) * Val(2048));
  Val x261 = (((x216 * x140) + x217) * Val(4096));
  Val x262 = (((x220 * x141) + x221) * Val(8192));
  Val x263 = (((x224 * x142) + x225) * Val(16384));
  Val x264 = (((x228 * x143) + x229) * Val(32768));
  Val x265 = (((x232 * x144) + x233) * Val(65536));
  Val x266 = (((x236 * x145) + x237) * Val(131072));
  Val x267 = (((x240 * x146) + x241) * Val(262144));
  Val x268 = (((x244 * x147) + x245) * Val(524288));
  Val x269 = (((x248 * x148) + x249) * Val(1048576));
  Val x270 = (((x168 * x128) + x169) + x250);
  Val x271 = (((x270 + x251) + x252) + x253);
  Val x272 = (((x271 + x254) + x255) + x256);
  Val x273 = (((x272 + x257) + x258) + x259);
  Val x274 = (((x273 + x260) + x261) + x262);
  Val x275 = (((x274 + x263) + x264) + x265);
  Val x276 = (((x275 + x266) + x267) + x268);
  return FromBits_21_Struct{._super = (x276 + x269)};
}
RetTupleStruct execXor5wordsMinor2_0_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor2_0_Layout> layout2) {
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:217)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:218)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:219)
  FromBits_21_Struct x5 = execXor5wordsResult_0__2_(ctx, x4, LAYOUT_LOOKUP(layout2, _0));
  NondetRegStruct x6 = exec_Reg(ctx, x5._super, LAYOUT_LOOKUP(layout2, result));
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:217)
  Val x7 = x3.arrA[21]._super;
  Val x8 = x3.arrB[21]._super;
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:223)
  Val22Array x9 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x10 =
      exec_RetTuple(ctx,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x7},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x8},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x6._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x9,
                    x9,
                    Val(3),
                    Val(0),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x10;
}
RetTupleStruct execXor5wordsMinor3_0_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor3_0_Layout> layout2) {
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
  RetTupleStruct x4 = back_RetTuple(ctx, 4, arg1);
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
  Val22Array x5 = Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                             Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                             Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)};
  NondetRegStruct22Array x6 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpA),
          std::function([&](Val22Array::value_type x7,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x8) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x9 = x4.arrA[to_size_t(x7)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
            NondetRegStruct x10 = exec_Reg(ctx, x9, x8);
            return x10;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
  NondetRegStruct22Array x11 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpB),
          std::function([&](Val22Array::value_type x12,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x13) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x14 = x4.arrB[to_size_t(x12)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
            NondetRegStruct x15 = exec_Reg(ctx, x14, x13);
            return x15;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
  NondetRegStruct22Array x16 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpC),
          std::function([&](Val22Array::value_type x17,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x18) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x19 = x4.arrC[to_size_t(x17)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
            NondetRegStruct x20 = exec_Reg(ctx, x19, x18);
            return x20;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:233)
  NondetRegStruct9Array x21 =
      map(Val9Array{Val(0), Val(1), Val(2), Val(3), Val(4), Val(5), Val(6), Val(7), Val(8)},
          LAYOUT_LOOKUP(layout2, tmp_1),
          std::function([&](Val9Array::value_type x22,
                            BoundLayout<NondetRegLayout9LayoutArray::value_type> x23) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x24 = x4.arrD[to_size_t(x22)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:233)
            NondetRegStruct x25 = exec_Reg(ctx, x24, x23);
            return x25;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x26 = x3.arrA[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:234)
  NondetRegStruct x27 = exec_Reg(ctx, x26, LAYOUT_LOOKUP(layout2, _0));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x28 = x3.arrB[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:235)
  NondetRegStruct x29 = exec_Reg(ctx, x28, LAYOUT_LOOKUP(layout2, _1));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x30 = x3.arrC[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:236)
  NondetRegStruct x31 = exec_Reg(ctx, x30, LAYOUT_LOOKUP(layout2, _2));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
  Val22Array x32 = Val22Array{
      x6[0]._super,  x6[1]._super,  x6[2]._super,  x6[3]._super,  x6[4]._super,  x6[5]._super,
      x6[6]._super,  x6[7]._super,  x6[8]._super,  x6[9]._super,  x6[10]._super, x6[11]._super,
      x6[12]._super, x6[13]._super, x6[14]._super, x6[15]._super, x6[16]._super, x6[17]._super,
      x6[18]._super, x6[19]._super, x6[20]._super, x6[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
  Val22Array x33 =
      Val22Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
  Val22Array x34 =
      Val22Array{x16[0]._super,  x16[1]._super,  x16[2]._super,  x16[3]._super,  x16[4]._super,
                 x16[5]._super,  x16[6]._super,  x16[7]._super,  x16[8]._super,  x16[9]._super,
                 x16[10]._super, x16[11]._super, x16[12]._super, x16[13]._super, x16[14]._super,
                 x16[15]._super, x16[16]._super, x16[17]._super, x16[18]._super, x16[19]._super,
                 x16[20]._super, x16[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:237)
  Val24Array x35 = Val24Array{
      x21[0]._super, x21[1]._super, x21[2]._super, x21[3]._super, x21[4]._super, x21[5]._super,
      x21[6]._super, x21[7]._super, x21[8]._super, x27._super,    x29._super,    x31._super,
      Val(0),        Val(0),        Val(0),        Val(0),        Val(0),        Val(0),
      Val(0),        Val(0),        Val(0),        Val(0),        Val(0),        Val(0)};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:238)
  Val22Array x36 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x37 = exec_RetTuple(ctx,
                                     x32,
                                     x33,
                                     x34,
                                     x35,
                                     x36,
                                     x36,
                                     Val(0),
                                     Val(1),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(layout2, _super));
  return x37;
}
RetTupleStruct execXor5wordsMajor_0_(ExecContext& ctx,
                                     RetTupleStruct arg0,
                                     BoundLayout<RetTupleLayout> arg1,
                                     BoundLayout<Xor5wordsMajor_0_Layout> layout2) {
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:244)
  BoundLayout<Xor5wordsMajor_0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:243)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_4_Struct x5 = exec_OneHot_4_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct4Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:245)
    RetTupleStruct x8 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x9 = execXor5wordsMinor0_0_(ctx, x8, LAYOUT_LOOKUP(x3, arm0));
    x7 = x9;
  } else if (to_size_t(x6[1]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:246)
    RetTupleStruct x10 = execXor5wordsMinor1_0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x10;
  } else if (to_size_t(x6[2]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:247)
    RetTupleStruct x11 = execXor5wordsMinor2_0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x11;
  } else if (to_size_t(x6[3]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:248)
    RetTupleStruct x12 = execXor5wordsMinor3_0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x12;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:244)
  RetTupleStruct x13 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x13;
}
FromBits_22_Struct execXor5wordsResult_1__0_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_1__0_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x2 = arg0.arrA;
  Val x3 = x2[3]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x6 = (x5[1]._super * Val(2));
  Val x7 = (x5[2]._super * Val(4));
  Val x8 = (x5[3]._super * Val(8));
  Val x9 = (x5[4]._super * Val(16));
  Val x10 = (x5[5]._super * Val(32));
  Val x11 = (x5[6]._super * Val(64));
  Val x12 = (x5[7]._super * Val(128));
  Val x13 = (x5[8]._super * Val(256));
  Val x14 = (x5[9]._super * Val(512));
  Val x15 = (x5[10]._super * Val(1024));
  Val x16 = (x5[11]._super * Val(2048));
  Val x17 = (x5[12]._super * Val(4096));
  Val x18 = (x5[13]._super * Val(8192));
  Val x19 = (x5[14]._super * Val(16384));
  Val x20 = (x5[15]._super * Val(32768));
  Val x21 = (x5[16]._super * Val(65536));
  Val x22 = (x5[17]._super * Val(131072));
  Val x23 = (x5[18]._super * Val(262144));
  Val x24 = (x5[19]._super * Val(524288));
  Val x25 = (x5[20]._super * Val(1048576));
  Val x26 = (x5[21]._super * Val(2097152));
  Val x27 = (x5[0]._super + x6);
  Val x28 = (((x27 + x7) + x8) + x9);
  Val x29 = (((x28 + x10) + x11) + x12);
  Val x30 = (((x29 + x13) + x14) + x15);
  Val x31 = (((x30 + x16) + x17) + x18);
  Val x32 = (((x31 + x19) + x20) + x21);
  Val x33 = (((x32 + x22) + x23) + x24);
  Val x34 = (((x33 + x25) + x26) - x3);
  EQZ(x34, "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x35 = x2[18]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_22_Struct x36 = exec_ToBits_22_(ctx, x35, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct22Array x37 = x36._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x38 = (x37[1]._super * Val(2));
  Val x39 = (x37[2]._super * Val(4));
  Val x40 = (x37[3]._super * Val(8));
  Val x41 = (x37[4]._super * Val(16));
  Val x42 = (x37[5]._super * Val(32));
  Val x43 = (x37[6]._super * Val(64));
  Val x44 = (x37[7]._super * Val(128));
  Val x45 = (x37[8]._super * Val(256));
  Val x46 = (x37[9]._super * Val(512));
  Val x47 = (x37[10]._super * Val(1024));
  Val x48 = (x37[11]._super * Val(2048));
  Val x49 = (x37[12]._super * Val(4096));
  Val x50 = (x37[13]._super * Val(8192));
  Val x51 = (x37[14]._super * Val(16384));
  Val x52 = (x37[15]._super * Val(32768));
  Val x53 = (x37[16]._super * Val(65536));
  Val x54 = (x37[17]._super * Val(131072));
  Val x55 = (x37[18]._super * Val(262144));
  Val x56 = (x37[19]._super * Val(524288));
  Val x57 = (x37[20]._super * Val(1048576));
  Val x58 = (x37[21]._super * Val(2097152));
  Val x59 = (x37[0]._super + x38);
  Val x60 = (((x59 + x39) + x40) + x41);
  Val x61 = (((x60 + x42) + x43) + x44);
  Val x62 = (((x61 + x45) + x46) + x47);
  Val x63 = (((x62 + x48) + x49) + x50);
  Val x64 = (((x63 + x51) + x52) + x53);
  Val x65 = (((x64 + x54) + x55) + x56);
  Val x66 = (((x65 + x57) + x58) - x35);
  EQZ(x66, "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x67 = arg0.arrB[11]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_22_Struct x68 = exec_ToBits_22_(ctx, x67, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct22Array x69 = x68._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x70 = (x69[1]._super * Val(2));
  Val x71 = (x69[2]._super * Val(4));
  Val x72 = (x69[3]._super * Val(8));
  Val x73 = (x69[4]._super * Val(16));
  Val x74 = (x69[5]._super * Val(32));
  Val x75 = (x69[6]._super * Val(64));
  Val x76 = (x69[7]._super * Val(128));
  Val x77 = (x69[8]._super * Val(256));
  Val x78 = (x69[9]._super * Val(512));
  Val x79 = (x69[10]._super * Val(1024));
  Val x80 = (x69[11]._super * Val(2048));
  Val x81 = (x69[12]._super * Val(4096));
  Val x82 = (x69[13]._super * Val(8192));
  Val x83 = (x69[14]._super * Val(16384));
  Val x84 = (x69[15]._super * Val(32768));
  Val x85 = (x69[16]._super * Val(65536));
  Val x86 = (x69[17]._super * Val(131072));
  Val x87 = (x69[18]._super * Val(262144));
  Val x88 = (x69[19]._super * Val(524288));
  Val x89 = (x69[20]._super * Val(1048576));
  Val x90 = (x69[21]._super * Val(2097152));
  Val x91 = (x69[0]._super + x70);
  Val x92 = (((x91 + x71) + x72) + x73);
  Val x93 = (((x92 + x74) + x75) + x76);
  Val x94 = (((x93 + x77) + x78) + x79);
  Val x95 = (((x94 + x80) + x81) + x82);
  Val x96 = (((x95 + x83) + x84) + x85);
  Val x97 = (((x96 + x86) + x87) + x88);
  Val x98 = (((x97 + x89) + x90) - x67);
  EQZ(x98, "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x99 = arg0.arrC;
  Val x100 = x99[4]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_22_Struct x101 = exec_ToBits_22_(ctx, x100, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct22Array x102 = x101._super;
  Val x103 = x102[0]._super;
  Val x104 = x102[1]._super;
  Val x105 = x102[2]._super;
  Val x106 = x102[3]._super;
  Val x107 = x102[4]._super;
  Val x108 = x102[5]._super;
  Val x109 = x102[6]._super;
  Val x110 = x102[7]._super;
  Val x111 = x102[8]._super;
  Val x112 = x102[9]._super;
  Val x113 = x102[10]._super;
  Val x114 = x102[11]._super;
  Val x115 = x102[12]._super;
  Val x116 = x102[13]._super;
  Val x117 = x102[14]._super;
  Val x118 = x102[15]._super;
  Val x119 = x102[16]._super;
  Val x120 = x102[17]._super;
  Val x121 = x102[18]._super;
  Val x122 = x102[19]._super;
  Val x123 = x102[20]._super;
  Val x124 = x102[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x125 = (((x103 + (x104 * Val(2))) + (x105 * Val(4))) + (x106 * Val(8)));
  Val x126 = (((x125 + (x107 * Val(16))) + (x108 * Val(32))) + (x109 * Val(64)));
  Val x127 = (((x126 + (x110 * Val(128))) + (x111 * Val(256))) + (x112 * Val(512)));
  Val x128 = (((x127 + (x113 * Val(1024))) + (x114 * Val(2048))) + (x115 * Val(4096)));
  Val x129 = (((x128 + (x116 * Val(8192))) + (x117 * Val(16384))) + (x118 * Val(32768)));
  Val x130 = (((x129 + (x119 * Val(65536))) + (x120 * Val(131072))) + (x121 * Val(262144)));
  Val x131 = (((x130 + (x122 * Val(524288))) + (x123 * Val(1048576))) + (x124 * Val(2097152)));
  EQZ((x131 - x100), "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x132 = x99[19]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_22_Struct x133 = exec_ToBits_22_(ctx, x132, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x134 = x133._super;
  Val x135 = x134[0]._super;
  Val x136 = x134[1]._super;
  Val x137 = x134[2]._super;
  Val x138 = x134[3]._super;
  Val x139 = x134[4]._super;
  Val x140 = x134[5]._super;
  Val x141 = x134[6]._super;
  Val x142 = x134[7]._super;
  Val x143 = x134[8]._super;
  Val x144 = x134[9]._super;
  Val x145 = x134[10]._super;
  Val x146 = x134[11]._super;
  Val x147 = x134[12]._super;
  Val x148 = x134[13]._super;
  Val x149 = x134[14]._super;
  Val x150 = x134[15]._super;
  Val x151 = x134[16]._super;
  Val x152 = x134[17]._super;
  Val x153 = x134[18]._super;
  Val x154 = x134[19]._super;
  Val x155 = x134[20]._super;
  Val x156 = x134[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x157 = (((x135 + (x136 * Val(2))) + (x137 * Val(4))) + (x138 * Val(8)));
  Val x158 = (((x157 + (x139 * Val(16))) + (x140 * Val(32))) + (x141 * Val(64)));
  Val x159 = (((x158 + (x142 * Val(128))) + (x143 * Val(256))) + (x144 * Val(512)));
  Val x160 = (((x159 + (x145 * Val(1024))) + (x146 * Val(2048))) + (x147 * Val(4096)));
  Val x161 = (((x160 + (x148 * Val(8192))) + (x149 * Val(16384))) + (x150 * Val(32768)));
  Val x162 = (((x161 + (x151 * Val(65536))) + (x152 * Val(131072))) + (x153 * Val(262144)));
  Val x163 = (((x162 + (x154 * Val(524288))) + (x155 * Val(1048576))) + (x156 * Val(2097152)));
  EQZ((x163 - x132), "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct22Array x164 =
      map(Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                     Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                     Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val22Array::value_type x165,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x166) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x167 = x5[to_size_t(x165)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x168 = x37[to_size_t(x165)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x169 = x69[to_size_t(x165)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x170 = ((Val(1) - x167) * (Val(1) - x168));
            Val x171 = ((x167 * x168) + x170);
            Val x172 = ((Val(1) - x171) * (Val(1) - x169));
            NondetRegStruct x173 = exec_Reg(ctx, ((x171 * x169) + x172), x166);
            return x173;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x174 = x164[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x175 = ((Val(1) - x174) * (Val(1) - x103));
  Val x176 = ((x174 * x103) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x178 = x164[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x179 = ((Val(1) - x178) * (Val(1) - x104));
  Val x180 = ((x178 * x104) + x179);
  Val x181 = ((Val(1) - x180) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x182 = x164[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x183 = ((Val(1) - x182) * (Val(1) - x105));
  Val x184 = ((x182 * x105) + x183);
  Val x185 = ((Val(1) - x184) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x186 = x164[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x187 = ((Val(1) - x186) * (Val(1) - x106));
  Val x188 = ((x186 * x106) + x187);
  Val x189 = ((Val(1) - x188) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x190 = x164[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x191 = ((Val(1) - x190) * (Val(1) - x107));
  Val x192 = ((x190 * x107) + x191);
  Val x193 = ((Val(1) - x192) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x194 = x164[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x195 = ((Val(1) - x194) * (Val(1) - x108));
  Val x196 = ((x194 * x108) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x198 = x164[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x199 = ((Val(1) - x198) * (Val(1) - x109));
  Val x200 = ((x198 * x109) + x199);
  Val x201 = ((Val(1) - x200) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x202 = x164[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x203 = ((Val(1) - x202) * (Val(1) - x110));
  Val x204 = ((x202 * x110) + x203);
  Val x205 = ((Val(1) - x204) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x206 = x164[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x207 = ((Val(1) - x206) * (Val(1) - x111));
  Val x208 = ((x206 * x111) + x207);
  Val x209 = ((Val(1) - x208) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x210 = x164[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x211 = ((Val(1) - x210) * (Val(1) - x112));
  Val x212 = ((x210 * x112) + x211);
  Val x213 = ((Val(1) - x212) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x214 = x164[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x215 = ((Val(1) - x214) * (Val(1) - x113));
  Val x216 = ((x214 * x113) + x215);
  Val x217 = ((Val(1) - x216) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x218 = x164[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x219 = ((Val(1) - x218) * (Val(1) - x114));
  Val x220 = ((x218 * x114) + x219);
  Val x221 = ((Val(1) - x220) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x222 = x164[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x223 = ((Val(1) - x222) * (Val(1) - x115));
  Val x224 = ((x222 * x115) + x223);
  Val x225 = ((Val(1) - x224) * (Val(1) - x147));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x226 = x164[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x227 = ((Val(1) - x226) * (Val(1) - x116));
  Val x228 = ((x226 * x116) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x148));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x230 = x164[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x231 = ((Val(1) - x230) * (Val(1) - x117));
  Val x232 = ((x230 * x117) + x231);
  Val x233 = ((Val(1) - x232) * (Val(1) - x149));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x234 = x164[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x235 = ((Val(1) - x234) * (Val(1) - x118));
  Val x236 = ((x234 * x118) + x235);
  Val x237 = ((Val(1) - x236) * (Val(1) - x150));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x238 = x164[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x239 = ((Val(1) - x238) * (Val(1) - x119));
  Val x240 = ((x238 * x119) + x239);
  Val x241 = ((Val(1) - x240) * (Val(1) - x151));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x242 = x164[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x243 = ((Val(1) - x242) * (Val(1) - x120));
  Val x244 = ((x242 * x120) + x243);
  Val x245 = ((Val(1) - x244) * (Val(1) - x152));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x246 = x164[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x247 = ((Val(1) - x246) * (Val(1) - x121));
  Val x248 = ((x246 * x121) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x153));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x250 = x164[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x251 = ((Val(1) - x250) * (Val(1) - x122));
  Val x252 = ((x250 * x122) + x251);
  Val x253 = ((Val(1) - x252) * (Val(1) - x154));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x254 = x164[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x255 = ((Val(1) - x254) * (Val(1) - x123));
  Val x256 = ((x254 * x123) + x255);
  Val x257 = ((Val(1) - x256) * (Val(1) - x155));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x258 = x164[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x259 = ((Val(1) - x258) * (Val(1) - x124));
  Val x260 = ((x258 * x124) + x259);
  Val x261 = ((Val(1) - x260) * (Val(1) - x156));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x262 = (((x180 * x136) + x181) * Val(2));
  Val x263 = (((x184 * x137) + x185) * Val(4));
  Val x264 = (((x188 * x138) + x189) * Val(8));
  Val x265 = (((x192 * x139) + x193) * Val(16));
  Val x266 = (((x196 * x140) + x197) * Val(32));
  Val x267 = (((x200 * x141) + x201) * Val(64));
  Val x268 = (((x204 * x142) + x205) * Val(128));
  Val x269 = (((x208 * x143) + x209) * Val(256));
  Val x270 = (((x212 * x144) + x213) * Val(512));
  Val x271 = (((x216 * x145) + x217) * Val(1024));
  Val x272 = (((x220 * x146) + x221) * Val(2048));
  Val x273 = (((x224 * x147) + x225) * Val(4096));
  Val x274 = (((x228 * x148) + x229) * Val(8192));
  Val x275 = (((x232 * x149) + x233) * Val(16384));
  Val x276 = (((x236 * x150) + x237) * Val(32768));
  Val x277 = (((x240 * x151) + x241) * Val(65536));
  Val x278 = (((x244 * x152) + x245) * Val(131072));
  Val x279 = (((x248 * x153) + x249) * Val(262144));
  Val x280 = (((x252 * x154) + x253) * Val(524288));
  Val x281 = (((x256 * x155) + x257) * Val(1048576));
  Val x282 = (((x260 * x156) + x261) * Val(2097152));
  Val x283 = (((x176 * x135) + x177) + x262);
  Val x284 = (((x283 + x263) + x264) + x265);
  Val x285 = (((x284 + x266) + x267) + x268);
  Val x286 = (((x285 + x269) + x270) + x271);
  Val x287 = (((x286 + x272) + x273) + x274);
  Val x288 = (((x287 + x275) + x276) + x277);
  Val x289 = (((x288 + x278) + x279) + x280);
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:82)
  FromBits_22_Struct x290 = FromBits_22_Struct{._super = ((x289 + x281) + x282)};
  return x290;
}
RetTupleStruct execXor5wordsMinor0_1_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<Xor5wordsMinor0_1_Layout> layout1) {
  // xor5words_minor0(zirgen/circuit/keccak/keccak.zir:200)
  FromBits_22_Struct x2 = execXor5wordsResult_1__0_(ctx, arg0, LAYOUT_LOOKUP(layout1, _0));
  NondetRegStruct x3 = exec_Reg(ctx, x2._super, LAYOUT_LOOKUP(layout1, result));
  // xor5words_minor0(zirgen/circuit/keccak/keccak.zir:202)
  Val22Array x4 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x5 =
      exec_RetTuple(ctx,
                    x4,
                    x4,
                    x4,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),    Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),    Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x3._super, Val(0)},
                    x4,
                    x4,
                    Val(1),
                    Val(1),
                    arg0.rnd._super,
                    arg0.blk._super,
                    arg0.midx._super,
                    LAYOUT_LOOKUP(layout1, _super));
  return x5;
}
FromBits_21_Struct execXor5wordsResult_1__1_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_1__1_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x2 = arg0.arrA;
  Val x3 = x2[4]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_21_Struct x4 = exec_ToBits_21_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct21Array x5 = x4._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x6 = (x5[1]._super * Val(2));
  Val x7 = (x5[2]._super * Val(4));
  Val x8 = (x5[3]._super * Val(8));
  Val x9 = (x5[4]._super * Val(16));
  Val x10 = (x5[5]._super * Val(32));
  Val x11 = (x5[6]._super * Val(64));
  Val x12 = (x5[7]._super * Val(128));
  Val x13 = (x5[8]._super * Val(256));
  Val x14 = (x5[9]._super * Val(512));
  Val x15 = (x5[10]._super * Val(1024));
  Val x16 = (x5[11]._super * Val(2048));
  Val x17 = (x5[12]._super * Val(4096));
  Val x18 = (x5[13]._super * Val(8192));
  Val x19 = (x5[14]._super * Val(16384));
  Val x20 = (x5[15]._super * Val(32768));
  Val x21 = (x5[16]._super * Val(65536));
  Val x22 = (x5[17]._super * Val(131072));
  Val x23 = (x5[18]._super * Val(262144));
  Val x24 = (x5[19]._super * Val(524288));
  Val x25 = (x5[20]._super * Val(1048576));
  Val x26 = (x5[0]._super + x6);
  Val x27 = (((x26 + x7) + x8) + x9);
  Val x28 = (((x27 + x10) + x11) + x12);
  Val x29 = (((x28 + x13) + x14) + x15);
  Val x30 = (((x29 + x16) + x17) + x18);
  Val x31 = (((x30 + x19) + x20) + x21);
  Val x32 = (((x31 + x22) + x23) + x24);
  EQZ(((x32 + x25) - x3), "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x33 = x2[19]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_21_Struct x34 = exec_ToBits_21_(ctx, x33, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct21Array x35 = x34._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x36 = (x35[1]._super * Val(2));
  Val x37 = (x35[2]._super * Val(4));
  Val x38 = (x35[3]._super * Val(8));
  Val x39 = (x35[4]._super * Val(16));
  Val x40 = (x35[5]._super * Val(32));
  Val x41 = (x35[6]._super * Val(64));
  Val x42 = (x35[7]._super * Val(128));
  Val x43 = (x35[8]._super * Val(256));
  Val x44 = (x35[9]._super * Val(512));
  Val x45 = (x35[10]._super * Val(1024));
  Val x46 = (x35[11]._super * Val(2048));
  Val x47 = (x35[12]._super * Val(4096));
  Val x48 = (x35[13]._super * Val(8192));
  Val x49 = (x35[14]._super * Val(16384));
  Val x50 = (x35[15]._super * Val(32768));
  Val x51 = (x35[16]._super * Val(65536));
  Val x52 = (x35[17]._super * Val(131072));
  Val x53 = (x35[18]._super * Val(262144));
  Val x54 = (x35[19]._super * Val(524288));
  Val x55 = (x35[20]._super * Val(1048576));
  Val x56 = (x35[0]._super + x36);
  Val x57 = (((x56 + x37) + x38) + x39);
  Val x58 = (((x57 + x40) + x41) + x42);
  Val x59 = (((x58 + x43) + x44) + x45);
  Val x60 = (((x59 + x46) + x47) + x48);
  Val x61 = (((x60 + x49) + x50) + x51);
  Val x62 = (((x61 + x52) + x53) + x54);
  EQZ(((x62 + x55) - x33), "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x63 = arg0.arrB[12]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_21_Struct x64 = exec_ToBits_21_(ctx, x63, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct21Array x65 = x64._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x66 = (x65[1]._super * Val(2));
  Val x67 = (x65[2]._super * Val(4));
  Val x68 = (x65[3]._super * Val(8));
  Val x69 = (x65[4]._super * Val(16));
  Val x70 = (x65[5]._super * Val(32));
  Val x71 = (x65[6]._super * Val(64));
  Val x72 = (x65[7]._super * Val(128));
  Val x73 = (x65[8]._super * Val(256));
  Val x74 = (x65[9]._super * Val(512));
  Val x75 = (x65[10]._super * Val(1024));
  Val x76 = (x65[11]._super * Val(2048));
  Val x77 = (x65[12]._super * Val(4096));
  Val x78 = (x65[13]._super * Val(8192));
  Val x79 = (x65[14]._super * Val(16384));
  Val x80 = (x65[15]._super * Val(32768));
  Val x81 = (x65[16]._super * Val(65536));
  Val x82 = (x65[17]._super * Val(131072));
  Val x83 = (x65[18]._super * Val(262144));
  Val x84 = (x65[19]._super * Val(524288));
  Val x85 = (x65[20]._super * Val(1048576));
  Val x86 = (x65[0]._super + x66);
  Val x87 = (((x86 + x67) + x68) + x69);
  Val x88 = (((x87 + x70) + x71) + x72);
  Val x89 = (((x88 + x73) + x74) + x75);
  Val x90 = (((x89 + x76) + x77) + x78);
  Val x91 = (((x90 + x79) + x80) + x81);
  Val x92 = (((x91 + x82) + x83) + x84);
  EQZ(((x92 + x85) - x63), "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x93 = arg0.arrC;
  Val x94 = x93[5]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_21_Struct x95 = exec_ToBits_21_(ctx, x94, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct21Array x96 = x95._super;
  Val x97 = x96[0]._super;
  Val x98 = x96[1]._super;
  Val x99 = x96[2]._super;
  Val x100 = x96[3]._super;
  Val x101 = x96[4]._super;
  Val x102 = x96[5]._super;
  Val x103 = x96[6]._super;
  Val x104 = x96[7]._super;
  Val x105 = x96[8]._super;
  Val x106 = x96[9]._super;
  Val x107 = x96[10]._super;
  Val x108 = x96[11]._super;
  Val x109 = x96[12]._super;
  Val x110 = x96[13]._super;
  Val x111 = x96[14]._super;
  Val x112 = x96[15]._super;
  Val x113 = x96[16]._super;
  Val x114 = x96[17]._super;
  Val x115 = x96[18]._super;
  Val x116 = x96[19]._super;
  Val x117 = x96[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x118 = (((x97 + (x98 * Val(2))) + (x99 * Val(4))) + (x100 * Val(8)));
  Val x119 = (((x118 + (x101 * Val(16))) + (x102 * Val(32))) + (x103 * Val(64)));
  Val x120 = (((x119 + (x104 * Val(128))) + (x105 * Val(256))) + (x106 * Val(512)));
  Val x121 = (((x120 + (x107 * Val(1024))) + (x108 * Val(2048))) + (x109 * Val(4096)));
  Val x122 = (((x121 + (x110 * Val(8192))) + (x111 * Val(16384))) + (x112 * Val(32768)));
  Val x123 = (((x122 + (x113 * Val(65536))) + (x114 * Val(131072))) + (x115 * Val(262144)));
  Val x124 = (((x123 + (x116 * Val(524288))) + (x117 * Val(1048576))) - x94);
  EQZ(x124, "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x125 = x93[20]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_21_Struct x126 = exec_ToBits_21_(ctx, x125, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x127 = x126._super;
  Val x128 = x127[0]._super;
  Val x129 = x127[1]._super;
  Val x130 = x127[2]._super;
  Val x131 = x127[3]._super;
  Val x132 = x127[4]._super;
  Val x133 = x127[5]._super;
  Val x134 = x127[6]._super;
  Val x135 = x127[7]._super;
  Val x136 = x127[8]._super;
  Val x137 = x127[9]._super;
  Val x138 = x127[10]._super;
  Val x139 = x127[11]._super;
  Val x140 = x127[12]._super;
  Val x141 = x127[13]._super;
  Val x142 = x127[14]._super;
  Val x143 = x127[15]._super;
  Val x144 = x127[16]._super;
  Val x145 = x127[17]._super;
  Val x146 = x127[18]._super;
  Val x147 = x127[19]._super;
  Val x148 = x127[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x149 = (((x128 + (x129 * Val(2))) + (x130 * Val(4))) + (x131 * Val(8)));
  Val x150 = (((x149 + (x132 * Val(16))) + (x133 * Val(32))) + (x134 * Val(64)));
  Val x151 = (((x150 + (x135 * Val(128))) + (x136 * Val(256))) + (x137 * Val(512)));
  Val x152 = (((x151 + (x138 * Val(1024))) + (x139 * Val(2048))) + (x140 * Val(4096)));
  Val x153 = (((x152 + (x141 * Val(8192))) + (x142 * Val(16384))) + (x143 * Val(32768)));
  Val x154 = (((x153 + (x144 * Val(65536))) + (x145 * Val(131072))) + (x146 * Val(262144)));
  Val x155 = (((x154 + (x147 * Val(524288))) + (x148 * Val(1048576))) - x125);
  EQZ(x155, "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct21Array x156 =
      map(Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                     Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                     Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val21Array::value_type x157,
                            BoundLayout<NondetRegLayout21LayoutArray::value_type> x158) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x159 = x5[to_size_t(x157)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x160 = x35[to_size_t(x157)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x161 = x65[to_size_t(x157)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x162 = ((Val(1) - x159) * (Val(1) - x160));
            Val x163 = ((x159 * x160) + x162);
            Val x164 = ((Val(1) - x163) * (Val(1) - x161));
            NondetRegStruct x165 = exec_Reg(ctx, ((x163 * x161) + x164), x158);
            return x165;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x166 = x156[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x167 = ((Val(1) - x166) * (Val(1) - x97));
  Val x168 = ((x166 * x97) + x167);
  Val x169 = ((Val(1) - x168) * (Val(1) - x128));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x170 = x156[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x171 = ((Val(1) - x170) * (Val(1) - x98));
  Val x172 = ((x170 * x98) + x171);
  Val x173 = ((Val(1) - x172) * (Val(1) - x129));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x174 = x156[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x175 = ((Val(1) - x174) * (Val(1) - x99));
  Val x176 = ((x174 * x99) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x130));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x178 = x156[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x179 = ((Val(1) - x178) * (Val(1) - x100));
  Val x180 = ((x178 * x100) + x179);
  Val x181 = ((Val(1) - x180) * (Val(1) - x131));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x182 = x156[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x183 = ((Val(1) - x182) * (Val(1) - x101));
  Val x184 = ((x182 * x101) + x183);
  Val x185 = ((Val(1) - x184) * (Val(1) - x132));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x186 = x156[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x187 = ((Val(1) - x186) * (Val(1) - x102));
  Val x188 = ((x186 * x102) + x187);
  Val x189 = ((Val(1) - x188) * (Val(1) - x133));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x190 = x156[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x191 = ((Val(1) - x190) * (Val(1) - x103));
  Val x192 = ((x190 * x103) + x191);
  Val x193 = ((Val(1) - x192) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x194 = x156[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x195 = ((Val(1) - x194) * (Val(1) - x104));
  Val x196 = ((x194 * x104) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x198 = x156[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x199 = ((Val(1) - x198) * (Val(1) - x105));
  Val x200 = ((x198 * x105) + x199);
  Val x201 = ((Val(1) - x200) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x202 = x156[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x203 = ((Val(1) - x202) * (Val(1) - x106));
  Val x204 = ((x202 * x106) + x203);
  Val x205 = ((Val(1) - x204) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x206 = x156[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x207 = ((Val(1) - x206) * (Val(1) - x107));
  Val x208 = ((x206 * x107) + x207);
  Val x209 = ((Val(1) - x208) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x210 = x156[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x211 = ((Val(1) - x210) * (Val(1) - x108));
  Val x212 = ((x210 * x108) + x211);
  Val x213 = ((Val(1) - x212) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x214 = x156[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x215 = ((Val(1) - x214) * (Val(1) - x109));
  Val x216 = ((x214 * x109) + x215);
  Val x217 = ((Val(1) - x216) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x218 = x156[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x219 = ((Val(1) - x218) * (Val(1) - x110));
  Val x220 = ((x218 * x110) + x219);
  Val x221 = ((Val(1) - x220) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x222 = x156[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x223 = ((Val(1) - x222) * (Val(1) - x111));
  Val x224 = ((x222 * x111) + x223);
  Val x225 = ((Val(1) - x224) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x226 = x156[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x227 = ((Val(1) - x226) * (Val(1) - x112));
  Val x228 = ((x226 * x112) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x230 = x156[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x231 = ((Val(1) - x230) * (Val(1) - x113));
  Val x232 = ((x230 * x113) + x231);
  Val x233 = ((Val(1) - x232) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x234 = x156[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x235 = ((Val(1) - x234) * (Val(1) - x114));
  Val x236 = ((x234 * x114) + x235);
  Val x237 = ((Val(1) - x236) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x238 = x156[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x239 = ((Val(1) - x238) * (Val(1) - x115));
  Val x240 = ((x238 * x115) + x239);
  Val x241 = ((Val(1) - x240) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x242 = x156[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x243 = ((Val(1) - x242) * (Val(1) - x116));
  Val x244 = ((x242 * x116) + x243);
  Val x245 = ((Val(1) - x244) * (Val(1) - x147));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x246 = x156[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x247 = ((Val(1) - x246) * (Val(1) - x117));
  Val x248 = ((x246 * x117) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x148));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x250 = (((x172 * x129) + x173) * Val(2));
  Val x251 = (((x176 * x130) + x177) * Val(4));
  Val x252 = (((x180 * x131) + x181) * Val(8));
  Val x253 = (((x184 * x132) + x185) * Val(16));
  Val x254 = (((x188 * x133) + x189) * Val(32));
  Val x255 = (((x192 * x134) + x193) * Val(64));
  Val x256 = (((x196 * x135) + x197) * Val(128));
  Val x257 = (((x200 * x136) + x201) * Val(256));
  Val x258 = (((x204 * x137) + x205) * Val(512));
  Val x259 = (((x208 * x138) + x209) * Val(1024));
  Val x260 = (((x212 * x139) + x213) * Val(2048));
  Val x261 = (((x216 * x140) + x217) * Val(4096));
  Val x262 = (((x220 * x141) + x221) * Val(8192));
  Val x263 = (((x224 * x142) + x225) * Val(16384));
  Val x264 = (((x228 * x143) + x229) * Val(32768));
  Val x265 = (((x232 * x144) + x233) * Val(65536));
  Val x266 = (((x236 * x145) + x237) * Val(131072));
  Val x267 = (((x240 * x146) + x241) * Val(262144));
  Val x268 = (((x244 * x147) + x245) * Val(524288));
  Val x269 = (((x248 * x148) + x249) * Val(1048576));
  Val x270 = (((x168 * x128) + x169) + x250);
  Val x271 = (((x270 + x251) + x252) + x253);
  Val x272 = (((x271 + x254) + x255) + x256);
  Val x273 = (((x272 + x257) + x258) + x259);
  Val x274 = (((x273 + x260) + x261) + x262);
  Val x275 = (((x274 + x263) + x264) + x265);
  Val x276 = (((x275 + x266) + x267) + x268);
  return FromBits_21_Struct{._super = (x276 + x269)};
}
RetTupleStruct execXor5wordsMinor1_1_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor1_1_Layout> layout2) {
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:207)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:208)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:209)
  FromBits_21_Struct x5 = execXor5wordsResult_1__1_(ctx, x4, LAYOUT_LOOKUP(layout2, _0));
  NondetRegStruct x6 = exec_Reg(ctx, x5._super, LAYOUT_LOOKUP(layout2, result));
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:207)
  Val x7 = x3.arrD[22]._super;
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:212)
  Val22Array x8 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x9 =
      exec_RetTuple(ctx,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x7},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x6._super},
                    x8,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x8,
                    x8,
                    Val(2),
                    Val(1),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x9;
}
FromBits_21_Struct execXor5wordsResult_1__2_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_1__2_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x2 = arg0.arrA;
  Val x3 = x2[5]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_21_Struct x4 = exec_ToBits_21_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct21Array x5 = x4._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x6 = (x5[1]._super * Val(2));
  Val x7 = (x5[2]._super * Val(4));
  Val x8 = (x5[3]._super * Val(8));
  Val x9 = (x5[4]._super * Val(16));
  Val x10 = (x5[5]._super * Val(32));
  Val x11 = (x5[6]._super * Val(64));
  Val x12 = (x5[7]._super * Val(128));
  Val x13 = (x5[8]._super * Val(256));
  Val x14 = (x5[9]._super * Val(512));
  Val x15 = (x5[10]._super * Val(1024));
  Val x16 = (x5[11]._super * Val(2048));
  Val x17 = (x5[12]._super * Val(4096));
  Val x18 = (x5[13]._super * Val(8192));
  Val x19 = (x5[14]._super * Val(16384));
  Val x20 = (x5[15]._super * Val(32768));
  Val x21 = (x5[16]._super * Val(65536));
  Val x22 = (x5[17]._super * Val(131072));
  Val x23 = (x5[18]._super * Val(262144));
  Val x24 = (x5[19]._super * Val(524288));
  Val x25 = (x5[20]._super * Val(1048576));
  Val x26 = (x5[0]._super + x6);
  Val x27 = (((x26 + x7) + x8) + x9);
  Val x28 = (((x27 + x10) + x11) + x12);
  Val x29 = (((x28 + x13) + x14) + x15);
  Val x30 = (((x29 + x16) + x17) + x18);
  Val x31 = (((x30 + x19) + x20) + x21);
  Val x32 = (((x31 + x22) + x23) + x24);
  EQZ(((x32 + x25) - x3), "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x33 = x2[20]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_21_Struct x34 = exec_ToBits_21_(ctx, x33, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct21Array x35 = x34._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x36 = (x35[1]._super * Val(2));
  Val x37 = (x35[2]._super * Val(4));
  Val x38 = (x35[3]._super * Val(8));
  Val x39 = (x35[4]._super * Val(16));
  Val x40 = (x35[5]._super * Val(32));
  Val x41 = (x35[6]._super * Val(64));
  Val x42 = (x35[7]._super * Val(128));
  Val x43 = (x35[8]._super * Val(256));
  Val x44 = (x35[9]._super * Val(512));
  Val x45 = (x35[10]._super * Val(1024));
  Val x46 = (x35[11]._super * Val(2048));
  Val x47 = (x35[12]._super * Val(4096));
  Val x48 = (x35[13]._super * Val(8192));
  Val x49 = (x35[14]._super * Val(16384));
  Val x50 = (x35[15]._super * Val(32768));
  Val x51 = (x35[16]._super * Val(65536));
  Val x52 = (x35[17]._super * Val(131072));
  Val x53 = (x35[18]._super * Val(262144));
  Val x54 = (x35[19]._super * Val(524288));
  Val x55 = (x35[20]._super * Val(1048576));
  Val x56 = (x35[0]._super + x36);
  Val x57 = (((x56 + x37) + x38) + x39);
  Val x58 = (((x57 + x40) + x41) + x42);
  Val x59 = (((x58 + x43) + x44) + x45);
  Val x60 = (((x59 + x46) + x47) + x48);
  Val x61 = (((x60 + x49) + x50) + x51);
  Val x62 = (((x61 + x52) + x53) + x54);
  EQZ(((x62 + x55) - x33), "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x63 = arg0.arrB[13]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_21_Struct x64 = exec_ToBits_21_(ctx, x63, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct21Array x65 = x64._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x66 = (x65[1]._super * Val(2));
  Val x67 = (x65[2]._super * Val(4));
  Val x68 = (x65[3]._super * Val(8));
  Val x69 = (x65[4]._super * Val(16));
  Val x70 = (x65[5]._super * Val(32));
  Val x71 = (x65[6]._super * Val(64));
  Val x72 = (x65[7]._super * Val(128));
  Val x73 = (x65[8]._super * Val(256));
  Val x74 = (x65[9]._super * Val(512));
  Val x75 = (x65[10]._super * Val(1024));
  Val x76 = (x65[11]._super * Val(2048));
  Val x77 = (x65[12]._super * Val(4096));
  Val x78 = (x65[13]._super * Val(8192));
  Val x79 = (x65[14]._super * Val(16384));
  Val x80 = (x65[15]._super * Val(32768));
  Val x81 = (x65[16]._super * Val(65536));
  Val x82 = (x65[17]._super * Val(131072));
  Val x83 = (x65[18]._super * Val(262144));
  Val x84 = (x65[19]._super * Val(524288));
  Val x85 = (x65[20]._super * Val(1048576));
  Val x86 = (x65[0]._super + x66);
  Val x87 = (((x86 + x67) + x68) + x69);
  Val x88 = (((x87 + x70) + x71) + x72);
  Val x89 = (((x88 + x73) + x74) + x75);
  Val x90 = (((x89 + x76) + x77) + x78);
  Val x91 = (((x90 + x79) + x80) + x81);
  Val x92 = (((x91 + x82) + x83) + x84);
  EQZ(((x92 + x85) - x63), "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x93 = arg0.arrC;
  Val x94 = x93[6]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_21_Struct x95 = exec_ToBits_21_(ctx, x94, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct21Array x96 = x95._super;
  Val x97 = x96[0]._super;
  Val x98 = x96[1]._super;
  Val x99 = x96[2]._super;
  Val x100 = x96[3]._super;
  Val x101 = x96[4]._super;
  Val x102 = x96[5]._super;
  Val x103 = x96[6]._super;
  Val x104 = x96[7]._super;
  Val x105 = x96[8]._super;
  Val x106 = x96[9]._super;
  Val x107 = x96[10]._super;
  Val x108 = x96[11]._super;
  Val x109 = x96[12]._super;
  Val x110 = x96[13]._super;
  Val x111 = x96[14]._super;
  Val x112 = x96[15]._super;
  Val x113 = x96[16]._super;
  Val x114 = x96[17]._super;
  Val x115 = x96[18]._super;
  Val x116 = x96[19]._super;
  Val x117 = x96[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x118 = (((x97 + (x98 * Val(2))) + (x99 * Val(4))) + (x100 * Val(8)));
  Val x119 = (((x118 + (x101 * Val(16))) + (x102 * Val(32))) + (x103 * Val(64)));
  Val x120 = (((x119 + (x104 * Val(128))) + (x105 * Val(256))) + (x106 * Val(512)));
  Val x121 = (((x120 + (x107 * Val(1024))) + (x108 * Val(2048))) + (x109 * Val(4096)));
  Val x122 = (((x121 + (x110 * Val(8192))) + (x111 * Val(16384))) + (x112 * Val(32768)));
  Val x123 = (((x122 + (x113 * Val(65536))) + (x114 * Val(131072))) + (x115 * Val(262144)));
  Val x124 = (((x123 + (x116 * Val(524288))) + (x117 * Val(1048576))) - x94);
  EQZ(x124, "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x125 = x93[21]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_21_Struct x126 = exec_ToBits_21_(ctx, x125, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x127 = x126._super;
  Val x128 = x127[0]._super;
  Val x129 = x127[1]._super;
  Val x130 = x127[2]._super;
  Val x131 = x127[3]._super;
  Val x132 = x127[4]._super;
  Val x133 = x127[5]._super;
  Val x134 = x127[6]._super;
  Val x135 = x127[7]._super;
  Val x136 = x127[8]._super;
  Val x137 = x127[9]._super;
  Val x138 = x127[10]._super;
  Val x139 = x127[11]._super;
  Val x140 = x127[12]._super;
  Val x141 = x127[13]._super;
  Val x142 = x127[14]._super;
  Val x143 = x127[15]._super;
  Val x144 = x127[16]._super;
  Val x145 = x127[17]._super;
  Val x146 = x127[18]._super;
  Val x147 = x127[19]._super;
  Val x148 = x127[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x149 = (((x128 + (x129 * Val(2))) + (x130 * Val(4))) + (x131 * Val(8)));
  Val x150 = (((x149 + (x132 * Val(16))) + (x133 * Val(32))) + (x134 * Val(64)));
  Val x151 = (((x150 + (x135 * Val(128))) + (x136 * Val(256))) + (x137 * Val(512)));
  Val x152 = (((x151 + (x138 * Val(1024))) + (x139 * Val(2048))) + (x140 * Val(4096)));
  Val x153 = (((x152 + (x141 * Val(8192))) + (x142 * Val(16384))) + (x143 * Val(32768)));
  Val x154 = (((x153 + (x144 * Val(65536))) + (x145 * Val(131072))) + (x146 * Val(262144)));
  Val x155 = (((x154 + (x147 * Val(524288))) + (x148 * Val(1048576))) - x125);
  EQZ(x155, "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct21Array x156 =
      map(Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                     Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                     Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val21Array::value_type x157,
                            BoundLayout<NondetRegLayout21LayoutArray::value_type> x158) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x159 = x5[to_size_t(x157)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x160 = x35[to_size_t(x157)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x161 = x65[to_size_t(x157)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x162 = ((Val(1) - x159) * (Val(1) - x160));
            Val x163 = ((x159 * x160) + x162);
            Val x164 = ((Val(1) - x163) * (Val(1) - x161));
            NondetRegStruct x165 = exec_Reg(ctx, ((x163 * x161) + x164), x158);
            return x165;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x166 = x156[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x167 = ((Val(1) - x166) * (Val(1) - x97));
  Val x168 = ((x166 * x97) + x167);
  Val x169 = ((Val(1) - x168) * (Val(1) - x128));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x170 = x156[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x171 = ((Val(1) - x170) * (Val(1) - x98));
  Val x172 = ((x170 * x98) + x171);
  Val x173 = ((Val(1) - x172) * (Val(1) - x129));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x174 = x156[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x175 = ((Val(1) - x174) * (Val(1) - x99));
  Val x176 = ((x174 * x99) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x130));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x178 = x156[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x179 = ((Val(1) - x178) * (Val(1) - x100));
  Val x180 = ((x178 * x100) + x179);
  Val x181 = ((Val(1) - x180) * (Val(1) - x131));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x182 = x156[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x183 = ((Val(1) - x182) * (Val(1) - x101));
  Val x184 = ((x182 * x101) + x183);
  Val x185 = ((Val(1) - x184) * (Val(1) - x132));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x186 = x156[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x187 = ((Val(1) - x186) * (Val(1) - x102));
  Val x188 = ((x186 * x102) + x187);
  Val x189 = ((Val(1) - x188) * (Val(1) - x133));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x190 = x156[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x191 = ((Val(1) - x190) * (Val(1) - x103));
  Val x192 = ((x190 * x103) + x191);
  Val x193 = ((Val(1) - x192) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x194 = x156[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x195 = ((Val(1) - x194) * (Val(1) - x104));
  Val x196 = ((x194 * x104) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x198 = x156[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x199 = ((Val(1) - x198) * (Val(1) - x105));
  Val x200 = ((x198 * x105) + x199);
  Val x201 = ((Val(1) - x200) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x202 = x156[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x203 = ((Val(1) - x202) * (Val(1) - x106));
  Val x204 = ((x202 * x106) + x203);
  Val x205 = ((Val(1) - x204) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x206 = x156[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x207 = ((Val(1) - x206) * (Val(1) - x107));
  Val x208 = ((x206 * x107) + x207);
  Val x209 = ((Val(1) - x208) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x210 = x156[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x211 = ((Val(1) - x210) * (Val(1) - x108));
  Val x212 = ((x210 * x108) + x211);
  Val x213 = ((Val(1) - x212) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x214 = x156[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x215 = ((Val(1) - x214) * (Val(1) - x109));
  Val x216 = ((x214 * x109) + x215);
  Val x217 = ((Val(1) - x216) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x218 = x156[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x219 = ((Val(1) - x218) * (Val(1) - x110));
  Val x220 = ((x218 * x110) + x219);
  Val x221 = ((Val(1) - x220) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x222 = x156[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x223 = ((Val(1) - x222) * (Val(1) - x111));
  Val x224 = ((x222 * x111) + x223);
  Val x225 = ((Val(1) - x224) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x226 = x156[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x227 = ((Val(1) - x226) * (Val(1) - x112));
  Val x228 = ((x226 * x112) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x230 = x156[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x231 = ((Val(1) - x230) * (Val(1) - x113));
  Val x232 = ((x230 * x113) + x231);
  Val x233 = ((Val(1) - x232) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x234 = x156[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x235 = ((Val(1) - x234) * (Val(1) - x114));
  Val x236 = ((x234 * x114) + x235);
  Val x237 = ((Val(1) - x236) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x238 = x156[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x239 = ((Val(1) - x238) * (Val(1) - x115));
  Val x240 = ((x238 * x115) + x239);
  Val x241 = ((Val(1) - x240) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x242 = x156[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x243 = ((Val(1) - x242) * (Val(1) - x116));
  Val x244 = ((x242 * x116) + x243);
  Val x245 = ((Val(1) - x244) * (Val(1) - x147));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x246 = x156[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x247 = ((Val(1) - x246) * (Val(1) - x117));
  Val x248 = ((x246 * x117) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x148));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x250 = (((x172 * x129) + x173) * Val(2));
  Val x251 = (((x176 * x130) + x177) * Val(4));
  Val x252 = (((x180 * x131) + x181) * Val(8));
  Val x253 = (((x184 * x132) + x185) * Val(16));
  Val x254 = (((x188 * x133) + x189) * Val(32));
  Val x255 = (((x192 * x134) + x193) * Val(64));
  Val x256 = (((x196 * x135) + x197) * Val(128));
  Val x257 = (((x200 * x136) + x201) * Val(256));
  Val x258 = (((x204 * x137) + x205) * Val(512));
  Val x259 = (((x208 * x138) + x209) * Val(1024));
  Val x260 = (((x212 * x139) + x213) * Val(2048));
  Val x261 = (((x216 * x140) + x217) * Val(4096));
  Val x262 = (((x220 * x141) + x221) * Val(8192));
  Val x263 = (((x224 * x142) + x225) * Val(16384));
  Val x264 = (((x228 * x143) + x229) * Val(32768));
  Val x265 = (((x232 * x144) + x233) * Val(65536));
  Val x266 = (((x236 * x145) + x237) * Val(131072));
  Val x267 = (((x240 * x146) + x241) * Val(262144));
  Val x268 = (((x244 * x147) + x245) * Val(524288));
  Val x269 = (((x248 * x148) + x249) * Val(1048576));
  Val x270 = (((x168 * x128) + x169) + x250);
  Val x271 = (((x270 + x251) + x252) + x253);
  Val x272 = (((x271 + x254) + x255) + x256);
  Val x273 = (((x272 + x257) + x258) + x259);
  Val x274 = (((x273 + x260) + x261) + x262);
  Val x275 = (((x274 + x263) + x264) + x265);
  Val x276 = (((x275 + x266) + x267) + x268);
  return FromBits_21_Struct{._super = (x276 + x269)};
}
RetTupleStruct execXor5wordsMinor2_1_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor2_1_Layout> layout2) {
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:217)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:218)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:219)
  FromBits_21_Struct x5 = execXor5wordsResult_1__2_(ctx, x4, LAYOUT_LOOKUP(layout2, _0));
  NondetRegStruct x6 = exec_Reg(ctx, x5._super, LAYOUT_LOOKUP(layout2, result));
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:217)
  Val x7 = x3.arrA[21]._super;
  Val x8 = x3.arrB[21]._super;
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:223)
  Val22Array x9 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x10 =
      exec_RetTuple(ctx,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x7},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x8},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x6._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x9,
                    x9,
                    Val(3),
                    Val(1),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x10;
}
RetTupleStruct execXor5wordsMinor3_1_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor3_1_Layout> layout2) {
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
  RetTupleStruct x4 = back_RetTuple(ctx, 4, arg1);
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
  Val22Array x5 = Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                             Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                             Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)};
  NondetRegStruct22Array x6 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpA),
          std::function([&](Val22Array::value_type x7,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x8) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x9 = x4.arrA[to_size_t(x7)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
            NondetRegStruct x10 = exec_Reg(ctx, x9, x8);
            return x10;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
  NondetRegStruct22Array x11 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpB),
          std::function([&](Val22Array::value_type x12,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x13) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x14 = x4.arrB[to_size_t(x12)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
            NondetRegStruct x15 = exec_Reg(ctx, x14, x13);
            return x15;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
  NondetRegStruct22Array x16 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpC),
          std::function([&](Val22Array::value_type x17,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x18) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x19 = x4.arrC[to_size_t(x17)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
            NondetRegStruct x20 = exec_Reg(ctx, x19, x18);
            return x20;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:233)
  NondetRegStruct12Array x21 =
      map(Val12Array{Val(0),
                     Val(1),
                     Val(2),
                     Val(3),
                     Val(4),
                     Val(5),
                     Val(6),
                     Val(7),
                     Val(8),
                     Val(9),
                     Val(10),
                     Val(11)},
          LAYOUT_LOOKUP(layout2, tmp_1),
          std::function([&](Val12Array::value_type x22,
                            BoundLayout<NondetRegLayout12LayoutArray::value_type> x23) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x24 = x4.arrD[to_size_t(x22)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:233)
            NondetRegStruct x25 = exec_Reg(ctx, x24, x23);
            return x25;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x26 = x3.arrA[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:234)
  NondetRegStruct x27 = exec_Reg(ctx, x26, LAYOUT_LOOKUP(layout2, _0));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x28 = x3.arrB[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:235)
  NondetRegStruct x29 = exec_Reg(ctx, x28, LAYOUT_LOOKUP(layout2, _1));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x30 = x3.arrC[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:236)
  NondetRegStruct x31 = exec_Reg(ctx, x30, LAYOUT_LOOKUP(layout2, _2));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
  Val22Array x32 = Val22Array{
      x6[0]._super,  x6[1]._super,  x6[2]._super,  x6[3]._super,  x6[4]._super,  x6[5]._super,
      x6[6]._super,  x6[7]._super,  x6[8]._super,  x6[9]._super,  x6[10]._super, x6[11]._super,
      x6[12]._super, x6[13]._super, x6[14]._super, x6[15]._super, x6[16]._super, x6[17]._super,
      x6[18]._super, x6[19]._super, x6[20]._super, x6[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
  Val22Array x33 =
      Val22Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
  Val22Array x34 =
      Val22Array{x16[0]._super,  x16[1]._super,  x16[2]._super,  x16[3]._super,  x16[4]._super,
                 x16[5]._super,  x16[6]._super,  x16[7]._super,  x16[8]._super,  x16[9]._super,
                 x16[10]._super, x16[11]._super, x16[12]._super, x16[13]._super, x16[14]._super,
                 x16[15]._super, x16[16]._super, x16[17]._super, x16[18]._super, x16[19]._super,
                 x16[20]._super, x16[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:237)
  Val24Array x35 = Val24Array{
      x21[0]._super, x21[1]._super, x21[2]._super, x21[3]._super, x21[4]._super,  x21[5]._super,
      x21[6]._super, x21[7]._super, x21[8]._super, x21[9]._super, x21[10]._super, x21[11]._super,
      x27._super,    x29._super,    x31._super,    Val(0),        Val(0),         Val(0),
      Val(0),        Val(0),        Val(0),        Val(0),        Val(0),         Val(0)};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:238)
  Val22Array x36 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x37 = exec_RetTuple(ctx,
                                     x32,
                                     x33,
                                     x34,
                                     x35,
                                     x36,
                                     x36,
                                     Val(0),
                                     Val(2),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(layout2, _super));
  return x37;
}
RetTupleStruct execXor5wordsMajor_1_(ExecContext& ctx,
                                     RetTupleStruct arg0,
                                     BoundLayout<RetTupleLayout> arg1,
                                     BoundLayout<Xor5wordsMajor_1_Layout> layout2) {
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:244)
  BoundLayout<Xor5wordsMajor_1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:243)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_4_Struct x5 = exec_OneHot_4_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct4Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:245)
    RetTupleStruct x8 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x9 = execXor5wordsMinor0_1_(ctx, x8, LAYOUT_LOOKUP(x3, arm0));
    x7 = x9;
  } else if (to_size_t(x6[1]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:246)
    RetTupleStruct x10 = execXor5wordsMinor1_1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x10;
  } else if (to_size_t(x6[2]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:247)
    RetTupleStruct x11 = execXor5wordsMinor2_1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x11;
  } else if (to_size_t(x6[3]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:248)
    RetTupleStruct x12 = execXor5wordsMinor3_1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x12;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:244)
  RetTupleStruct x13 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x13;
}
FromBits_22_Struct execXor5wordsResult_2__0_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_2__0_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x2 = arg0.arrA;
  Val x3 = x2[6]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x5 = x4._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x6 = (x5[1]._super * Val(2));
  Val x7 = (x5[2]._super * Val(4));
  Val x8 = (x5[3]._super * Val(8));
  Val x9 = (x5[4]._super * Val(16));
  Val x10 = (x5[5]._super * Val(32));
  Val x11 = (x5[6]._super * Val(64));
  Val x12 = (x5[7]._super * Val(128));
  Val x13 = (x5[8]._super * Val(256));
  Val x14 = (x5[9]._super * Val(512));
  Val x15 = (x5[10]._super * Val(1024));
  Val x16 = (x5[11]._super * Val(2048));
  Val x17 = (x5[12]._super * Val(4096));
  Val x18 = (x5[13]._super * Val(8192));
  Val x19 = (x5[14]._super * Val(16384));
  Val x20 = (x5[15]._super * Val(32768));
  Val x21 = (x5[16]._super * Val(65536));
  Val x22 = (x5[17]._super * Val(131072));
  Val x23 = (x5[18]._super * Val(262144));
  Val x24 = (x5[19]._super * Val(524288));
  Val x25 = (x5[20]._super * Val(1048576));
  Val x26 = (x5[21]._super * Val(2097152));
  Val x27 = (x5[0]._super + x6);
  Val x28 = (((x27 + x7) + x8) + x9);
  Val x29 = (((x28 + x10) + x11) + x12);
  Val x30 = (((x29 + x13) + x14) + x15);
  Val x31 = (((x30 + x16) + x17) + x18);
  Val x32 = (((x31 + x19) + x20) + x21);
  Val x33 = (((x32 + x22) + x23) + x24);
  Val x34 = (((x33 + x25) + x26) - x3);
  EQZ(x34, "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x35 = x2[21]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_22_Struct x36 = exec_ToBits_22_(ctx, x35, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct22Array x37 = x36._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x38 = (x37[1]._super * Val(2));
  Val x39 = (x37[2]._super * Val(4));
  Val x40 = (x37[3]._super * Val(8));
  Val x41 = (x37[4]._super * Val(16));
  Val x42 = (x37[5]._super * Val(32));
  Val x43 = (x37[6]._super * Val(64));
  Val x44 = (x37[7]._super * Val(128));
  Val x45 = (x37[8]._super * Val(256));
  Val x46 = (x37[9]._super * Val(512));
  Val x47 = (x37[10]._super * Val(1024));
  Val x48 = (x37[11]._super * Val(2048));
  Val x49 = (x37[12]._super * Val(4096));
  Val x50 = (x37[13]._super * Val(8192));
  Val x51 = (x37[14]._super * Val(16384));
  Val x52 = (x37[15]._super * Val(32768));
  Val x53 = (x37[16]._super * Val(65536));
  Val x54 = (x37[17]._super * Val(131072));
  Val x55 = (x37[18]._super * Val(262144));
  Val x56 = (x37[19]._super * Val(524288));
  Val x57 = (x37[20]._super * Val(1048576));
  Val x58 = (x37[21]._super * Val(2097152));
  Val x59 = (x37[0]._super + x38);
  Val x60 = (((x59 + x39) + x40) + x41);
  Val x61 = (((x60 + x42) + x43) + x44);
  Val x62 = (((x61 + x45) + x46) + x47);
  Val x63 = (((x62 + x48) + x49) + x50);
  Val x64 = (((x63 + x51) + x52) + x53);
  Val x65 = (((x64 + x54) + x55) + x56);
  Val x66 = (((x65 + x57) + x58) - x35);
  EQZ(x66, "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x67 = arg0.arrB[14]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_22_Struct x68 = exec_ToBits_22_(ctx, x67, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct22Array x69 = x68._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x70 = (x69[1]._super * Val(2));
  Val x71 = (x69[2]._super * Val(4));
  Val x72 = (x69[3]._super * Val(8));
  Val x73 = (x69[4]._super * Val(16));
  Val x74 = (x69[5]._super * Val(32));
  Val x75 = (x69[6]._super * Val(64));
  Val x76 = (x69[7]._super * Val(128));
  Val x77 = (x69[8]._super * Val(256));
  Val x78 = (x69[9]._super * Val(512));
  Val x79 = (x69[10]._super * Val(1024));
  Val x80 = (x69[11]._super * Val(2048));
  Val x81 = (x69[12]._super * Val(4096));
  Val x82 = (x69[13]._super * Val(8192));
  Val x83 = (x69[14]._super * Val(16384));
  Val x84 = (x69[15]._super * Val(32768));
  Val x85 = (x69[16]._super * Val(65536));
  Val x86 = (x69[17]._super * Val(131072));
  Val x87 = (x69[18]._super * Val(262144));
  Val x88 = (x69[19]._super * Val(524288));
  Val x89 = (x69[20]._super * Val(1048576));
  Val x90 = (x69[21]._super * Val(2097152));
  Val x91 = (x69[0]._super + x70);
  Val x92 = (((x91 + x71) + x72) + x73);
  Val x93 = (((x92 + x74) + x75) + x76);
  Val x94 = (((x93 + x77) + x78) + x79);
  Val x95 = (((x94 + x80) + x81) + x82);
  Val x96 = (((x95 + x83) + x84) + x85);
  Val x97 = (((x96 + x86) + x87) + x88);
  Val x98 = (((x97 + x89) + x90) - x67);
  EQZ(x98, "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x99 = arg0.arrC[7]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x131 = arg0.arrD[0]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_22_Struct x132 = exec_ToBits_22_(ctx, x131, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  Val x155 = x133[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x156 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x157 = (((x156 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x158 = (((x157 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x159 = (((x158 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x160 = (((x159 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x161 = (((x160 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x162 = (((x161 + (x153 * Val(524288))) + (x154 * Val(1048576))) + (x155 * Val(2097152)));
  EQZ((x162 - x131), "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct22Array x163 =
      map(Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                     Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                     Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val22Array::value_type x164,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x165) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x166 = x5[to_size_t(x164)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x167 = x37[to_size_t(x164)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x168 = x69[to_size_t(x164)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x169 = ((Val(1) - x166) * (Val(1) - x167));
            Val x170 = ((x166 * x167) + x169);
            Val x171 = ((Val(1) - x170) * (Val(1) - x168));
            NondetRegStruct x172 = exec_Reg(ctx, ((x170 * x168) + x171), x165);
            return x172;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x173 = x163[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x174 = ((Val(1) - x173) * (Val(1) - x102));
  Val x175 = ((x173 * x102) + x174);
  Val x176 = ((Val(1) - x175) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x177 = x163[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x178 = ((Val(1) - x177) * (Val(1) - x103));
  Val x179 = ((x177 * x103) + x178);
  Val x180 = ((Val(1) - x179) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x181 = x163[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x182 = ((Val(1) - x181) * (Val(1) - x104));
  Val x183 = ((x181 * x104) + x182);
  Val x184 = ((Val(1) - x183) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x185 = x163[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x186 = ((Val(1) - x185) * (Val(1) - x105));
  Val x187 = ((x185 * x105) + x186);
  Val x188 = ((Val(1) - x187) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x189 = x163[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x190 = ((Val(1) - x189) * (Val(1) - x106));
  Val x191 = ((x189 * x106) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x193 = x163[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x194 = ((Val(1) - x193) * (Val(1) - x107));
  Val x195 = ((x193 * x107) + x194);
  Val x196 = ((Val(1) - x195) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x197 = x163[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x198 = ((Val(1) - x197) * (Val(1) - x108));
  Val x199 = ((x197 * x108) + x198);
  Val x200 = ((Val(1) - x199) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x201 = x163[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x202 = ((Val(1) - x201) * (Val(1) - x109));
  Val x203 = ((x201 * x109) + x202);
  Val x204 = ((Val(1) - x203) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x205 = x163[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x206 = ((Val(1) - x205) * (Val(1) - x110));
  Val x207 = ((x205 * x110) + x206);
  Val x208 = ((Val(1) - x207) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x209 = x163[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x210 = ((Val(1) - x209) * (Val(1) - x111));
  Val x211 = ((x209 * x111) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x213 = x163[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x214 = ((Val(1) - x213) * (Val(1) - x112));
  Val x215 = ((x213 * x112) + x214);
  Val x216 = ((Val(1) - x215) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x217 = x163[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x218 = ((Val(1) - x217) * (Val(1) - x113));
  Val x219 = ((x217 * x113) + x218);
  Val x220 = ((Val(1) - x219) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x221 = x163[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x222 = ((Val(1) - x221) * (Val(1) - x114));
  Val x223 = ((x221 * x114) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x225 = x163[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x226 = ((Val(1) - x225) * (Val(1) - x115));
  Val x227 = ((x225 * x115) + x226);
  Val x228 = ((Val(1) - x227) * (Val(1) - x147));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x229 = x163[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x230 = ((Val(1) - x229) * (Val(1) - x116));
  Val x231 = ((x229 * x116) + x230);
  Val x232 = ((Val(1) - x231) * (Val(1) - x148));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x233 = x163[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x234 = ((Val(1) - x233) * (Val(1) - x117));
  Val x235 = ((x233 * x117) + x234);
  Val x236 = ((Val(1) - x235) * (Val(1) - x149));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x237 = x163[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x238 = ((Val(1) - x237) * (Val(1) - x118));
  Val x239 = ((x237 * x118) + x238);
  Val x240 = ((Val(1) - x239) * (Val(1) - x150));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x241 = x163[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x242 = ((Val(1) - x241) * (Val(1) - x119));
  Val x243 = ((x241 * x119) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x151));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x245 = x163[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x246 = ((Val(1) - x245) * (Val(1) - x120));
  Val x247 = ((x245 * x120) + x246);
  Val x248 = ((Val(1) - x247) * (Val(1) - x152));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x249 = x163[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x250 = ((Val(1) - x249) * (Val(1) - x121));
  Val x251 = ((x249 * x121) + x250);
  Val x252 = ((Val(1) - x251) * (Val(1) - x153));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x253 = x163[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x254 = ((Val(1) - x253) * (Val(1) - x122));
  Val x255 = ((x253 * x122) + x254);
  Val x256 = ((Val(1) - x255) * (Val(1) - x154));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x257 = x163[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x258 = ((Val(1) - x257) * (Val(1) - x123));
  Val x259 = ((x257 * x123) + x258);
  Val x260 = ((Val(1) - x259) * (Val(1) - x155));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x261 = (((x179 * x135) + x180) * Val(2));
  Val x262 = (((x183 * x136) + x184) * Val(4));
  Val x263 = (((x187 * x137) + x188) * Val(8));
  Val x264 = (((x191 * x138) + x192) * Val(16));
  Val x265 = (((x195 * x139) + x196) * Val(32));
  Val x266 = (((x199 * x140) + x200) * Val(64));
  Val x267 = (((x203 * x141) + x204) * Val(128));
  Val x268 = (((x207 * x142) + x208) * Val(256));
  Val x269 = (((x211 * x143) + x212) * Val(512));
  Val x270 = (((x215 * x144) + x216) * Val(1024));
  Val x271 = (((x219 * x145) + x220) * Val(2048));
  Val x272 = (((x223 * x146) + x224) * Val(4096));
  Val x273 = (((x227 * x147) + x228) * Val(8192));
  Val x274 = (((x231 * x148) + x232) * Val(16384));
  Val x275 = (((x235 * x149) + x236) * Val(32768));
  Val x276 = (((x239 * x150) + x240) * Val(65536));
  Val x277 = (((x243 * x151) + x244) * Val(131072));
  Val x278 = (((x247 * x152) + x248) * Val(262144));
  Val x279 = (((x251 * x153) + x252) * Val(524288));
  Val x280 = (((x255 * x154) + x256) * Val(1048576));
  Val x281 = (((x259 * x155) + x260) * Val(2097152));
  Val x282 = (((x175 * x134) + x176) + x261);
  Val x283 = (((x282 + x262) + x263) + x264);
  Val x284 = (((x283 + x265) + x266) + x267);
  Val x285 = (((x284 + x268) + x269) + x270);
  Val x286 = (((x285 + x271) + x272) + x273);
  Val x287 = (((x286 + x274) + x275) + x276);
  Val x288 = (((x287 + x277) + x278) + x279);
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:82)
  FromBits_22_Struct x289 = FromBits_22_Struct{._super = ((x288 + x280) + x281)};
  return x289;
}
RetTupleStruct execXor5wordsMinor0_2_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<Xor5wordsMinor0_2_Layout> layout1) {
  // xor5words_minor0(zirgen/circuit/keccak/keccak.zir:200)
  FromBits_22_Struct x2 = execXor5wordsResult_2__0_(ctx, arg0, LAYOUT_LOOKUP(layout1, _0));
  NondetRegStruct x3 = exec_Reg(ctx, x2._super, LAYOUT_LOOKUP(layout1, result));
  // xor5words_minor0(zirgen/circuit/keccak/keccak.zir:202)
  Val22Array x4 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x5 =
      exec_RetTuple(ctx,
                    x4,
                    x4,
                    x4,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),    Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),    Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x3._super, Val(0)},
                    x4,
                    x4,
                    Val(1),
                    Val(2),
                    arg0.rnd._super,
                    arg0.blk._super,
                    arg0.midx._super,
                    LAYOUT_LOOKUP(layout1, _super));
  return x5;
}
FromBits_21_Struct execXor5wordsResult_2__1_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_2__1_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x2 = arg0.arrA[7]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_21_Struct x3 = exec_ToBits_21_(ctx, x2, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct21Array x4 = x3._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x5 = (x4[1]._super * Val(2));
  Val x6 = (x4[2]._super * Val(4));
  Val x7 = (x4[3]._super * Val(8));
  Val x8 = (x4[4]._super * Val(16));
  Val x9 = (x4[5]._super * Val(32));
  Val x10 = (x4[6]._super * Val(64));
  Val x11 = (x4[7]._super * Val(128));
  Val x12 = (x4[8]._super * Val(256));
  Val x13 = (x4[9]._super * Val(512));
  Val x14 = (x4[10]._super * Val(1024));
  Val x15 = (x4[11]._super * Val(2048));
  Val x16 = (x4[12]._super * Val(4096));
  Val x17 = (x4[13]._super * Val(8192));
  Val x18 = (x4[14]._super * Val(16384));
  Val x19 = (x4[15]._super * Val(32768));
  Val x20 = (x4[16]._super * Val(65536));
  Val x21 = (x4[17]._super * Val(131072));
  Val x22 = (x4[18]._super * Val(262144));
  Val x23 = (x4[19]._super * Val(524288));
  Val x24 = (x4[20]._super * Val(1048576));
  Val x25 = (x4[0]._super + x5);
  Val x26 = (((x25 + x6) + x7) + x8);
  Val x27 = (((x26 + x9) + x10) + x11);
  Val x28 = (((x27 + x12) + x13) + x14);
  Val x29 = (((x28 + x15) + x16) + x17);
  Val x30 = (((x29 + x18) + x19) + x20);
  Val x31 = (((x30 + x21) + x22) + x23);
  EQZ(((x31 + x24) - x2), "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x32 = arg0.arrB;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x33 = x32[0]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_21_Struct x34 = exec_ToBits_21_(ctx, x33, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct21Array x35 = x34._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x36 = (x35[1]._super * Val(2));
  Val x37 = (x35[2]._super * Val(4));
  Val x38 = (x35[3]._super * Val(8));
  Val x39 = (x35[4]._super * Val(16));
  Val x40 = (x35[5]._super * Val(32));
  Val x41 = (x35[6]._super * Val(64));
  Val x42 = (x35[7]._super * Val(128));
  Val x43 = (x35[8]._super * Val(256));
  Val x44 = (x35[9]._super * Val(512));
  Val x45 = (x35[10]._super * Val(1024));
  Val x46 = (x35[11]._super * Val(2048));
  Val x47 = (x35[12]._super * Val(4096));
  Val x48 = (x35[13]._super * Val(8192));
  Val x49 = (x35[14]._super * Val(16384));
  Val x50 = (x35[15]._super * Val(32768));
  Val x51 = (x35[16]._super * Val(65536));
  Val x52 = (x35[17]._super * Val(131072));
  Val x53 = (x35[18]._super * Val(262144));
  Val x54 = (x35[19]._super * Val(524288));
  Val x55 = (x35[20]._super * Val(1048576));
  Val x56 = (x35[0]._super + x36);
  Val x57 = (((x56 + x37) + x38) + x39);
  Val x58 = (((x57 + x40) + x41) + x42);
  Val x59 = (((x58 + x43) + x44) + x45);
  Val x60 = (((x59 + x46) + x47) + x48);
  Val x61 = (((x60 + x49) + x50) + x51);
  Val x62 = (((x61 + x52) + x53) + x54);
  EQZ(((x62 + x55) - x33), "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x63 = x32[15]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_21_Struct x64 = exec_ToBits_21_(ctx, x63, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct21Array x65 = x64._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x66 = (x65[1]._super * Val(2));
  Val x67 = (x65[2]._super * Val(4));
  Val x68 = (x65[3]._super * Val(8));
  Val x69 = (x65[4]._super * Val(16));
  Val x70 = (x65[5]._super * Val(32));
  Val x71 = (x65[6]._super * Val(64));
  Val x72 = (x65[7]._super * Val(128));
  Val x73 = (x65[8]._super * Val(256));
  Val x74 = (x65[9]._super * Val(512));
  Val x75 = (x65[10]._super * Val(1024));
  Val x76 = (x65[11]._super * Val(2048));
  Val x77 = (x65[12]._super * Val(4096));
  Val x78 = (x65[13]._super * Val(8192));
  Val x79 = (x65[14]._super * Val(16384));
  Val x80 = (x65[15]._super * Val(32768));
  Val x81 = (x65[16]._super * Val(65536));
  Val x82 = (x65[17]._super * Val(131072));
  Val x83 = (x65[18]._super * Val(262144));
  Val x84 = (x65[19]._super * Val(524288));
  Val x85 = (x65[20]._super * Val(1048576));
  Val x86 = (x65[0]._super + x66);
  Val x87 = (((x86 + x67) + x68) + x69);
  Val x88 = (((x87 + x70) + x71) + x72);
  Val x89 = (((x88 + x73) + x74) + x75);
  Val x90 = (((x89 + x76) + x77) + x78);
  Val x91 = (((x90 + x79) + x80) + x81);
  Val x92 = (((x91 + x82) + x83) + x84);
  EQZ(((x92 + x85) - x63), "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x93 = arg0.arrC[8]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_21_Struct x94 = exec_ToBits_21_(ctx, x93, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct21Array x95 = x94._super;
  Val x96 = x95[0]._super;
  Val x97 = x95[1]._super;
  Val x98 = x95[2]._super;
  Val x99 = x95[3]._super;
  Val x100 = x95[4]._super;
  Val x101 = x95[5]._super;
  Val x102 = x95[6]._super;
  Val x103 = x95[7]._super;
  Val x104 = x95[8]._super;
  Val x105 = x95[9]._super;
  Val x106 = x95[10]._super;
  Val x107 = x95[11]._super;
  Val x108 = x95[12]._super;
  Val x109 = x95[13]._super;
  Val x110 = x95[14]._super;
  Val x111 = x95[15]._super;
  Val x112 = x95[16]._super;
  Val x113 = x95[17]._super;
  Val x114 = x95[18]._super;
  Val x115 = x95[19]._super;
  Val x116 = x95[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x117 = (((x96 + (x97 * Val(2))) + (x98 * Val(4))) + (x99 * Val(8)));
  Val x118 = (((x117 + (x100 * Val(16))) + (x101 * Val(32))) + (x102 * Val(64)));
  Val x119 = (((x118 + (x103 * Val(128))) + (x104 * Val(256))) + (x105 * Val(512)));
  Val x120 = (((x119 + (x106 * Val(1024))) + (x107 * Val(2048))) + (x108 * Val(4096)));
  Val x121 = (((x120 + (x109 * Val(8192))) + (x110 * Val(16384))) + (x111 * Val(32768)));
  Val x122 = (((x121 + (x112 * Val(65536))) + (x113 * Val(131072))) + (x114 * Val(262144)));
  Val x123 = (((x122 + (x115 * Val(524288))) + (x116 * Val(1048576))) - x93);
  EQZ(x123, "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x124 = arg0.arrD[1]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_21_Struct x125 = exec_ToBits_21_(ctx, x124, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x126 = x125._super;
  Val x127 = x126[0]._super;
  Val x128 = x126[1]._super;
  Val x129 = x126[2]._super;
  Val x130 = x126[3]._super;
  Val x131 = x126[4]._super;
  Val x132 = x126[5]._super;
  Val x133 = x126[6]._super;
  Val x134 = x126[7]._super;
  Val x135 = x126[8]._super;
  Val x136 = x126[9]._super;
  Val x137 = x126[10]._super;
  Val x138 = x126[11]._super;
  Val x139 = x126[12]._super;
  Val x140 = x126[13]._super;
  Val x141 = x126[14]._super;
  Val x142 = x126[15]._super;
  Val x143 = x126[16]._super;
  Val x144 = x126[17]._super;
  Val x145 = x126[18]._super;
  Val x146 = x126[19]._super;
  Val x147 = x126[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x148 = (((x127 + (x128 * Val(2))) + (x129 * Val(4))) + (x130 * Val(8)));
  Val x149 = (((x148 + (x131 * Val(16))) + (x132 * Val(32))) + (x133 * Val(64)));
  Val x150 = (((x149 + (x134 * Val(128))) + (x135 * Val(256))) + (x136 * Val(512)));
  Val x151 = (((x150 + (x137 * Val(1024))) + (x138 * Val(2048))) + (x139 * Val(4096)));
  Val x152 = (((x151 + (x140 * Val(8192))) + (x141 * Val(16384))) + (x142 * Val(32768)));
  Val x153 = (((x152 + (x143 * Val(65536))) + (x144 * Val(131072))) + (x145 * Val(262144)));
  Val x154 = (((x153 + (x146 * Val(524288))) + (x147 * Val(1048576))) - x124);
  EQZ(x154, "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct21Array x155 =
      map(Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                     Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                     Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val21Array::value_type x156,
                            BoundLayout<NondetRegLayout21LayoutArray::value_type> x157) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x158 = x4[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x159 = x35[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x160 = x65[to_size_t(x156)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x161 = ((Val(1) - x158) * (Val(1) - x159));
            Val x162 = ((x158 * x159) + x161);
            Val x163 = ((Val(1) - x162) * (Val(1) - x160));
            NondetRegStruct x164 = exec_Reg(ctx, ((x162 * x160) + x163), x157);
            return x164;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x165 = x155[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x166 = ((Val(1) - x165) * (Val(1) - x96));
  Val x167 = ((x165 * x96) + x166);
  Val x168 = ((Val(1) - x167) * (Val(1) - x127));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x169 = x155[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x170 = ((Val(1) - x169) * (Val(1) - x97));
  Val x171 = ((x169 * x97) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x128));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x173 = x155[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x174 = ((Val(1) - x173) * (Val(1) - x98));
  Val x175 = ((x173 * x98) + x174);
  Val x176 = ((Val(1) - x175) * (Val(1) - x129));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x177 = x155[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x178 = ((Val(1) - x177) * (Val(1) - x99));
  Val x179 = ((x177 * x99) + x178);
  Val x180 = ((Val(1) - x179) * (Val(1) - x130));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x181 = x155[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x182 = ((Val(1) - x181) * (Val(1) - x100));
  Val x183 = ((x181 * x100) + x182);
  Val x184 = ((Val(1) - x183) * (Val(1) - x131));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x185 = x155[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x186 = ((Val(1) - x185) * (Val(1) - x101));
  Val x187 = ((x185 * x101) + x186);
  Val x188 = ((Val(1) - x187) * (Val(1) - x132));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x189 = x155[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x190 = ((Val(1) - x189) * (Val(1) - x102));
  Val x191 = ((x189 * x102) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x133));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x193 = x155[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x194 = ((Val(1) - x193) * (Val(1) - x103));
  Val x195 = ((x193 * x103) + x194);
  Val x196 = ((Val(1) - x195) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x197 = x155[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x198 = ((Val(1) - x197) * (Val(1) - x104));
  Val x199 = ((x197 * x104) + x198);
  Val x200 = ((Val(1) - x199) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x201 = x155[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x202 = ((Val(1) - x201) * (Val(1) - x105));
  Val x203 = ((x201 * x105) + x202);
  Val x204 = ((Val(1) - x203) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x205 = x155[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x206 = ((Val(1) - x205) * (Val(1) - x106));
  Val x207 = ((x205 * x106) + x206);
  Val x208 = ((Val(1) - x207) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x209 = x155[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x210 = ((Val(1) - x209) * (Val(1) - x107));
  Val x211 = ((x209 * x107) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x213 = x155[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x214 = ((Val(1) - x213) * (Val(1) - x108));
  Val x215 = ((x213 * x108) + x214);
  Val x216 = ((Val(1) - x215) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x217 = x155[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x218 = ((Val(1) - x217) * (Val(1) - x109));
  Val x219 = ((x217 * x109) + x218);
  Val x220 = ((Val(1) - x219) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x221 = x155[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x222 = ((Val(1) - x221) * (Val(1) - x110));
  Val x223 = ((x221 * x110) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x225 = x155[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x226 = ((Val(1) - x225) * (Val(1) - x111));
  Val x227 = ((x225 * x111) + x226);
  Val x228 = ((Val(1) - x227) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x229 = x155[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x230 = ((Val(1) - x229) * (Val(1) - x112));
  Val x231 = ((x229 * x112) + x230);
  Val x232 = ((Val(1) - x231) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x233 = x155[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x234 = ((Val(1) - x233) * (Val(1) - x113));
  Val x235 = ((x233 * x113) + x234);
  Val x236 = ((Val(1) - x235) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x237 = x155[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x238 = ((Val(1) - x237) * (Val(1) - x114));
  Val x239 = ((x237 * x114) + x238);
  Val x240 = ((Val(1) - x239) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x241 = x155[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x242 = ((Val(1) - x241) * (Val(1) - x115));
  Val x243 = ((x241 * x115) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x245 = x155[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x246 = ((Val(1) - x245) * (Val(1) - x116));
  Val x247 = ((x245 * x116) + x246);
  Val x248 = ((Val(1) - x247) * (Val(1) - x147));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x249 = (((x171 * x128) + x172) * Val(2));
  Val x250 = (((x175 * x129) + x176) * Val(4));
  Val x251 = (((x179 * x130) + x180) * Val(8));
  Val x252 = (((x183 * x131) + x184) * Val(16));
  Val x253 = (((x187 * x132) + x188) * Val(32));
  Val x254 = (((x191 * x133) + x192) * Val(64));
  Val x255 = (((x195 * x134) + x196) * Val(128));
  Val x256 = (((x199 * x135) + x200) * Val(256));
  Val x257 = (((x203 * x136) + x204) * Val(512));
  Val x258 = (((x207 * x137) + x208) * Val(1024));
  Val x259 = (((x211 * x138) + x212) * Val(2048));
  Val x260 = (((x215 * x139) + x216) * Val(4096));
  Val x261 = (((x219 * x140) + x220) * Val(8192));
  Val x262 = (((x223 * x141) + x224) * Val(16384));
  Val x263 = (((x227 * x142) + x228) * Val(32768));
  Val x264 = (((x231 * x143) + x232) * Val(65536));
  Val x265 = (((x235 * x144) + x236) * Val(131072));
  Val x266 = (((x239 * x145) + x240) * Val(262144));
  Val x267 = (((x243 * x146) + x244) * Val(524288));
  Val x268 = (((x247 * x147) + x248) * Val(1048576));
  Val x269 = (((x167 * x127) + x168) + x249);
  Val x270 = (((x269 + x250) + x251) + x252);
  Val x271 = (((x270 + x253) + x254) + x255);
  Val x272 = (((x271 + x256) + x257) + x258);
  Val x273 = (((x272 + x259) + x260) + x261);
  Val x274 = (((x273 + x262) + x263) + x264);
  Val x275 = (((x274 + x265) + x266) + x267);
  return FromBits_21_Struct{._super = (x275 + x268)};
}
RetTupleStruct execXor5wordsMinor1_2_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor1_2_Layout> layout2) {
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:207)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:208)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:209)
  FromBits_21_Struct x5 = execXor5wordsResult_2__1_(ctx, x4, LAYOUT_LOOKUP(layout2, _0));
  NondetRegStruct x6 = exec_Reg(ctx, x5._super, LAYOUT_LOOKUP(layout2, result));
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:207)
  Val x7 = x3.arrD[22]._super;
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:212)
  Val22Array x8 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x9 =
      exec_RetTuple(ctx,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x7},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x6._super},
                    x8,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x8,
                    x8,
                    Val(2),
                    Val(2),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x9;
}
FromBits_21_Struct execXor5wordsResult_2__2_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_2__2_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x2 = arg0.arrA[8]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_21_Struct x3 = exec_ToBits_21_(ctx, x2, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct21Array x4 = x3._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x5 = (x4[1]._super * Val(2));
  Val x6 = (x4[2]._super * Val(4));
  Val x7 = (x4[3]._super * Val(8));
  Val x8 = (x4[4]._super * Val(16));
  Val x9 = (x4[5]._super * Val(32));
  Val x10 = (x4[6]._super * Val(64));
  Val x11 = (x4[7]._super * Val(128));
  Val x12 = (x4[8]._super * Val(256));
  Val x13 = (x4[9]._super * Val(512));
  Val x14 = (x4[10]._super * Val(1024));
  Val x15 = (x4[11]._super * Val(2048));
  Val x16 = (x4[12]._super * Val(4096));
  Val x17 = (x4[13]._super * Val(8192));
  Val x18 = (x4[14]._super * Val(16384));
  Val x19 = (x4[15]._super * Val(32768));
  Val x20 = (x4[16]._super * Val(65536));
  Val x21 = (x4[17]._super * Val(131072));
  Val x22 = (x4[18]._super * Val(262144));
  Val x23 = (x4[19]._super * Val(524288));
  Val x24 = (x4[20]._super * Val(1048576));
  Val x25 = (x4[0]._super + x5);
  Val x26 = (((x25 + x6) + x7) + x8);
  Val x27 = (((x26 + x9) + x10) + x11);
  Val x28 = (((x27 + x12) + x13) + x14);
  Val x29 = (((x28 + x15) + x16) + x17);
  Val x30 = (((x29 + x18) + x19) + x20);
  Val x31 = (((x30 + x21) + x22) + x23);
  EQZ(((x31 + x24) - x2), "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x32 = arg0.arrB;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x33 = x32[1]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_21_Struct x34 = exec_ToBits_21_(ctx, x33, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct21Array x35 = x34._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x36 = (x35[1]._super * Val(2));
  Val x37 = (x35[2]._super * Val(4));
  Val x38 = (x35[3]._super * Val(8));
  Val x39 = (x35[4]._super * Val(16));
  Val x40 = (x35[5]._super * Val(32));
  Val x41 = (x35[6]._super * Val(64));
  Val x42 = (x35[7]._super * Val(128));
  Val x43 = (x35[8]._super * Val(256));
  Val x44 = (x35[9]._super * Val(512));
  Val x45 = (x35[10]._super * Val(1024));
  Val x46 = (x35[11]._super * Val(2048));
  Val x47 = (x35[12]._super * Val(4096));
  Val x48 = (x35[13]._super * Val(8192));
  Val x49 = (x35[14]._super * Val(16384));
  Val x50 = (x35[15]._super * Val(32768));
  Val x51 = (x35[16]._super * Val(65536));
  Val x52 = (x35[17]._super * Val(131072));
  Val x53 = (x35[18]._super * Val(262144));
  Val x54 = (x35[19]._super * Val(524288));
  Val x55 = (x35[20]._super * Val(1048576));
  Val x56 = (x35[0]._super + x36);
  Val x57 = (((x56 + x37) + x38) + x39);
  Val x58 = (((x57 + x40) + x41) + x42);
  Val x59 = (((x58 + x43) + x44) + x45);
  Val x60 = (((x59 + x46) + x47) + x48);
  Val x61 = (((x60 + x49) + x50) + x51);
  Val x62 = (((x61 + x52) + x53) + x54);
  EQZ(((x62 + x55) - x33), "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x63 = x32[16]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_21_Struct x64 = exec_ToBits_21_(ctx, x63, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct21Array x65 = x64._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x66 = (x65[1]._super * Val(2));
  Val x67 = (x65[2]._super * Val(4));
  Val x68 = (x65[3]._super * Val(8));
  Val x69 = (x65[4]._super * Val(16));
  Val x70 = (x65[5]._super * Val(32));
  Val x71 = (x65[6]._super * Val(64));
  Val x72 = (x65[7]._super * Val(128));
  Val x73 = (x65[8]._super * Val(256));
  Val x74 = (x65[9]._super * Val(512));
  Val x75 = (x65[10]._super * Val(1024));
  Val x76 = (x65[11]._super * Val(2048));
  Val x77 = (x65[12]._super * Val(4096));
  Val x78 = (x65[13]._super * Val(8192));
  Val x79 = (x65[14]._super * Val(16384));
  Val x80 = (x65[15]._super * Val(32768));
  Val x81 = (x65[16]._super * Val(65536));
  Val x82 = (x65[17]._super * Val(131072));
  Val x83 = (x65[18]._super * Val(262144));
  Val x84 = (x65[19]._super * Val(524288));
  Val x85 = (x65[20]._super * Val(1048576));
  Val x86 = (x65[0]._super + x66);
  Val x87 = (((x86 + x67) + x68) + x69);
  Val x88 = (((x87 + x70) + x71) + x72);
  Val x89 = (((x88 + x73) + x74) + x75);
  Val x90 = (((x89 + x76) + x77) + x78);
  Val x91 = (((x90 + x79) + x80) + x81);
  Val x92 = (((x91 + x82) + x83) + x84);
  EQZ(((x92 + x85) - x63), "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x93 = arg0.arrC[9]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_21_Struct x94 = exec_ToBits_21_(ctx, x93, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct21Array x95 = x94._super;
  Val x96 = x95[0]._super;
  Val x97 = x95[1]._super;
  Val x98 = x95[2]._super;
  Val x99 = x95[3]._super;
  Val x100 = x95[4]._super;
  Val x101 = x95[5]._super;
  Val x102 = x95[6]._super;
  Val x103 = x95[7]._super;
  Val x104 = x95[8]._super;
  Val x105 = x95[9]._super;
  Val x106 = x95[10]._super;
  Val x107 = x95[11]._super;
  Val x108 = x95[12]._super;
  Val x109 = x95[13]._super;
  Val x110 = x95[14]._super;
  Val x111 = x95[15]._super;
  Val x112 = x95[16]._super;
  Val x113 = x95[17]._super;
  Val x114 = x95[18]._super;
  Val x115 = x95[19]._super;
  Val x116 = x95[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x117 = (((x96 + (x97 * Val(2))) + (x98 * Val(4))) + (x99 * Val(8)));
  Val x118 = (((x117 + (x100 * Val(16))) + (x101 * Val(32))) + (x102 * Val(64)));
  Val x119 = (((x118 + (x103 * Val(128))) + (x104 * Val(256))) + (x105 * Val(512)));
  Val x120 = (((x119 + (x106 * Val(1024))) + (x107 * Val(2048))) + (x108 * Val(4096)));
  Val x121 = (((x120 + (x109 * Val(8192))) + (x110 * Val(16384))) + (x111 * Val(32768)));
  Val x122 = (((x121 + (x112 * Val(65536))) + (x113 * Val(131072))) + (x114 * Val(262144)));
  Val x123 = (((x122 + (x115 * Val(524288))) + (x116 * Val(1048576))) - x93);
  EQZ(x123, "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x124 = arg0.arrD[2]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_21_Struct x125 = exec_ToBits_21_(ctx, x124, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x126 = x125._super;
  Val x127 = x126[0]._super;
  Val x128 = x126[1]._super;
  Val x129 = x126[2]._super;
  Val x130 = x126[3]._super;
  Val x131 = x126[4]._super;
  Val x132 = x126[5]._super;
  Val x133 = x126[6]._super;
  Val x134 = x126[7]._super;
  Val x135 = x126[8]._super;
  Val x136 = x126[9]._super;
  Val x137 = x126[10]._super;
  Val x138 = x126[11]._super;
  Val x139 = x126[12]._super;
  Val x140 = x126[13]._super;
  Val x141 = x126[14]._super;
  Val x142 = x126[15]._super;
  Val x143 = x126[16]._super;
  Val x144 = x126[17]._super;
  Val x145 = x126[18]._super;
  Val x146 = x126[19]._super;
  Val x147 = x126[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x148 = (((x127 + (x128 * Val(2))) + (x129 * Val(4))) + (x130 * Val(8)));
  Val x149 = (((x148 + (x131 * Val(16))) + (x132 * Val(32))) + (x133 * Val(64)));
  Val x150 = (((x149 + (x134 * Val(128))) + (x135 * Val(256))) + (x136 * Val(512)));
  Val x151 = (((x150 + (x137 * Val(1024))) + (x138 * Val(2048))) + (x139 * Val(4096)));
  Val x152 = (((x151 + (x140 * Val(8192))) + (x141 * Val(16384))) + (x142 * Val(32768)));
  Val x153 = (((x152 + (x143 * Val(65536))) + (x144 * Val(131072))) + (x145 * Val(262144)));
  Val x154 = (((x153 + (x146 * Val(524288))) + (x147 * Val(1048576))) - x124);
  EQZ(x154, "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct21Array x155 =
      map(Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                     Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                     Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val21Array::value_type x156,
                            BoundLayout<NondetRegLayout21LayoutArray::value_type> x157) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x158 = x4[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x159 = x35[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x160 = x65[to_size_t(x156)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x161 = ((Val(1) - x158) * (Val(1) - x159));
            Val x162 = ((x158 * x159) + x161);
            Val x163 = ((Val(1) - x162) * (Val(1) - x160));
            NondetRegStruct x164 = exec_Reg(ctx, ((x162 * x160) + x163), x157);
            return x164;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x165 = x155[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x166 = ((Val(1) - x165) * (Val(1) - x96));
  Val x167 = ((x165 * x96) + x166);
  Val x168 = ((Val(1) - x167) * (Val(1) - x127));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x169 = x155[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x170 = ((Val(1) - x169) * (Val(1) - x97));
  Val x171 = ((x169 * x97) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x128));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x173 = x155[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x174 = ((Val(1) - x173) * (Val(1) - x98));
  Val x175 = ((x173 * x98) + x174);
  Val x176 = ((Val(1) - x175) * (Val(1) - x129));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x177 = x155[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x178 = ((Val(1) - x177) * (Val(1) - x99));
  Val x179 = ((x177 * x99) + x178);
  Val x180 = ((Val(1) - x179) * (Val(1) - x130));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x181 = x155[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x182 = ((Val(1) - x181) * (Val(1) - x100));
  Val x183 = ((x181 * x100) + x182);
  Val x184 = ((Val(1) - x183) * (Val(1) - x131));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x185 = x155[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x186 = ((Val(1) - x185) * (Val(1) - x101));
  Val x187 = ((x185 * x101) + x186);
  Val x188 = ((Val(1) - x187) * (Val(1) - x132));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x189 = x155[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x190 = ((Val(1) - x189) * (Val(1) - x102));
  Val x191 = ((x189 * x102) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x133));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x193 = x155[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x194 = ((Val(1) - x193) * (Val(1) - x103));
  Val x195 = ((x193 * x103) + x194);
  Val x196 = ((Val(1) - x195) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x197 = x155[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x198 = ((Val(1) - x197) * (Val(1) - x104));
  Val x199 = ((x197 * x104) + x198);
  Val x200 = ((Val(1) - x199) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x201 = x155[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x202 = ((Val(1) - x201) * (Val(1) - x105));
  Val x203 = ((x201 * x105) + x202);
  Val x204 = ((Val(1) - x203) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x205 = x155[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x206 = ((Val(1) - x205) * (Val(1) - x106));
  Val x207 = ((x205 * x106) + x206);
  Val x208 = ((Val(1) - x207) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x209 = x155[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x210 = ((Val(1) - x209) * (Val(1) - x107));
  Val x211 = ((x209 * x107) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x213 = x155[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x214 = ((Val(1) - x213) * (Val(1) - x108));
  Val x215 = ((x213 * x108) + x214);
  Val x216 = ((Val(1) - x215) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x217 = x155[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x218 = ((Val(1) - x217) * (Val(1) - x109));
  Val x219 = ((x217 * x109) + x218);
  Val x220 = ((Val(1) - x219) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x221 = x155[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x222 = ((Val(1) - x221) * (Val(1) - x110));
  Val x223 = ((x221 * x110) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x225 = x155[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x226 = ((Val(1) - x225) * (Val(1) - x111));
  Val x227 = ((x225 * x111) + x226);
  Val x228 = ((Val(1) - x227) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x229 = x155[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x230 = ((Val(1) - x229) * (Val(1) - x112));
  Val x231 = ((x229 * x112) + x230);
  Val x232 = ((Val(1) - x231) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x233 = x155[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x234 = ((Val(1) - x233) * (Val(1) - x113));
  Val x235 = ((x233 * x113) + x234);
  Val x236 = ((Val(1) - x235) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x237 = x155[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x238 = ((Val(1) - x237) * (Val(1) - x114));
  Val x239 = ((x237 * x114) + x238);
  Val x240 = ((Val(1) - x239) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x241 = x155[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x242 = ((Val(1) - x241) * (Val(1) - x115));
  Val x243 = ((x241 * x115) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x245 = x155[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x246 = ((Val(1) - x245) * (Val(1) - x116));
  Val x247 = ((x245 * x116) + x246);
  Val x248 = ((Val(1) - x247) * (Val(1) - x147));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x249 = (((x171 * x128) + x172) * Val(2));
  Val x250 = (((x175 * x129) + x176) * Val(4));
  Val x251 = (((x179 * x130) + x180) * Val(8));
  Val x252 = (((x183 * x131) + x184) * Val(16));
  Val x253 = (((x187 * x132) + x188) * Val(32));
  Val x254 = (((x191 * x133) + x192) * Val(64));
  Val x255 = (((x195 * x134) + x196) * Val(128));
  Val x256 = (((x199 * x135) + x200) * Val(256));
  Val x257 = (((x203 * x136) + x204) * Val(512));
  Val x258 = (((x207 * x137) + x208) * Val(1024));
  Val x259 = (((x211 * x138) + x212) * Val(2048));
  Val x260 = (((x215 * x139) + x216) * Val(4096));
  Val x261 = (((x219 * x140) + x220) * Val(8192));
  Val x262 = (((x223 * x141) + x224) * Val(16384));
  Val x263 = (((x227 * x142) + x228) * Val(32768));
  Val x264 = (((x231 * x143) + x232) * Val(65536));
  Val x265 = (((x235 * x144) + x236) * Val(131072));
  Val x266 = (((x239 * x145) + x240) * Val(262144));
  Val x267 = (((x243 * x146) + x244) * Val(524288));
  Val x268 = (((x247 * x147) + x248) * Val(1048576));
  Val x269 = (((x167 * x127) + x168) + x249);
  Val x270 = (((x269 + x250) + x251) + x252);
  Val x271 = (((x270 + x253) + x254) + x255);
  Val x272 = (((x271 + x256) + x257) + x258);
  Val x273 = (((x272 + x259) + x260) + x261);
  Val x274 = (((x273 + x262) + x263) + x264);
  Val x275 = (((x274 + x265) + x266) + x267);
  return FromBits_21_Struct{._super = (x275 + x268)};
}
RetTupleStruct execXor5wordsMinor2_2_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor2_2_Layout> layout2) {
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:217)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:218)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:219)
  FromBits_21_Struct x5 = execXor5wordsResult_2__2_(ctx, x4, LAYOUT_LOOKUP(layout2, _0));
  NondetRegStruct x6 = exec_Reg(ctx, x5._super, LAYOUT_LOOKUP(layout2, result));
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:217)
  Val x7 = x3.arrA[21]._super;
  Val x8 = x3.arrB[21]._super;
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:223)
  Val22Array x9 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x10 =
      exec_RetTuple(ctx,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x7},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x8},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x6._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x9,
                    x9,
                    Val(3),
                    Val(2),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x10;
}
RetTupleStruct execXor5wordsMinor3_2_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor3_2_Layout> layout2) {
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
  RetTupleStruct x4 = back_RetTuple(ctx, 4, arg1);
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
  Val22Array x5 = Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                             Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                             Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)};
  NondetRegStruct22Array x6 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpA),
          std::function([&](Val22Array::value_type x7,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x8) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x9 = x4.arrA[to_size_t(x7)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
            NondetRegStruct x10 = exec_Reg(ctx, x9, x8);
            return x10;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
  NondetRegStruct22Array x11 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpB),
          std::function([&](Val22Array::value_type x12,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x13) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x14 = x4.arrB[to_size_t(x12)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
            NondetRegStruct x15 = exec_Reg(ctx, x14, x13);
            return x15;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
  NondetRegStruct22Array x16 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpC),
          std::function([&](Val22Array::value_type x17,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x18) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x19 = x4.arrC[to_size_t(x17)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
            NondetRegStruct x20 = exec_Reg(ctx, x19, x18);
            return x20;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:233)
  NondetRegStruct15Array x21 =
      map(Val15Array{Val(0),
                     Val(1),
                     Val(2),
                     Val(3),
                     Val(4),
                     Val(5),
                     Val(6),
                     Val(7),
                     Val(8),
                     Val(9),
                     Val(10),
                     Val(11),
                     Val(12),
                     Val(13),
                     Val(14)},
          LAYOUT_LOOKUP(layout2, tmp_1),
          std::function([&](Val15Array::value_type x22,
                            BoundLayout<NondetRegLayout15LayoutArray::value_type> x23) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x24 = x4.arrD[to_size_t(x22)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:233)
            NondetRegStruct x25 = exec_Reg(ctx, x24, x23);
            return x25;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x26 = x3.arrA[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:234)
  NondetRegStruct x27 = exec_Reg(ctx, x26, LAYOUT_LOOKUP(layout2, _0));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x28 = x3.arrB[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:235)
  NondetRegStruct x29 = exec_Reg(ctx, x28, LAYOUT_LOOKUP(layout2, _1));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x30 = x3.arrC[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:236)
  NondetRegStruct x31 = exec_Reg(ctx, x30, LAYOUT_LOOKUP(layout2, _2));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
  Val22Array x32 = Val22Array{
      x6[0]._super,  x6[1]._super,  x6[2]._super,  x6[3]._super,  x6[4]._super,  x6[5]._super,
      x6[6]._super,  x6[7]._super,  x6[8]._super,  x6[9]._super,  x6[10]._super, x6[11]._super,
      x6[12]._super, x6[13]._super, x6[14]._super, x6[15]._super, x6[16]._super, x6[17]._super,
      x6[18]._super, x6[19]._super, x6[20]._super, x6[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
  Val22Array x33 =
      Val22Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
  Val22Array x34 =
      Val22Array{x16[0]._super,  x16[1]._super,  x16[2]._super,  x16[3]._super,  x16[4]._super,
                 x16[5]._super,  x16[6]._super,  x16[7]._super,  x16[8]._super,  x16[9]._super,
                 x16[10]._super, x16[11]._super, x16[12]._super, x16[13]._super, x16[14]._super,
                 x16[15]._super, x16[16]._super, x16[17]._super, x16[18]._super, x16[19]._super,
                 x16[20]._super, x16[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:237)
  Val24Array x35 = Val24Array{
      x21[0]._super,  x21[1]._super,  x21[2]._super,  x21[3]._super, x21[4]._super,  x21[5]._super,
      x21[6]._super,  x21[7]._super,  x21[8]._super,  x21[9]._super, x21[10]._super, x21[11]._super,
      x21[12]._super, x21[13]._super, x21[14]._super, x27._super,    x29._super,     x31._super,
      Val(0),         Val(0),         Val(0),         Val(0),        Val(0),         Val(0)};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:238)
  Val22Array x36 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x37 = exec_RetTuple(ctx,
                                     x32,
                                     x33,
                                     x34,
                                     x35,
                                     x36,
                                     x36,
                                     Val(0),
                                     Val(3),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(layout2, _super));
  return x37;
}
RetTupleStruct execXor5wordsMajor_2_(ExecContext& ctx,
                                     RetTupleStruct arg0,
                                     BoundLayout<RetTupleLayout> arg1,
                                     BoundLayout<Xor5wordsMajor_2_Layout> layout2) {
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:244)
  BoundLayout<Xor5wordsMajor_2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:243)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_4_Struct x5 = exec_OneHot_4_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct4Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:245)
    RetTupleStruct x8 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x9 = execXor5wordsMinor0_2_(ctx, x8, LAYOUT_LOOKUP(x3, arm0));
    x7 = x9;
  } else if (to_size_t(x6[1]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:246)
    RetTupleStruct x10 = execXor5wordsMinor1_2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x10;
  } else if (to_size_t(x6[2]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:247)
    RetTupleStruct x11 = execXor5wordsMinor2_2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x11;
  } else if (to_size_t(x6[3]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:248)
    RetTupleStruct x12 = execXor5wordsMinor3_2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x12;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:244)
  RetTupleStruct x13 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x13;
}
FromBits_22_Struct execXor5wordsResult_3__0_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_3__0_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x2 = arg0.arrA[9]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_22_Struct x3 = exec_ToBits_22_(ctx, x2, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x4 = x3._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x5 = (x4[1]._super * Val(2));
  Val x6 = (x4[2]._super * Val(4));
  Val x7 = (x4[3]._super * Val(8));
  Val x8 = (x4[4]._super * Val(16));
  Val x9 = (x4[5]._super * Val(32));
  Val x10 = (x4[6]._super * Val(64));
  Val x11 = (x4[7]._super * Val(128));
  Val x12 = (x4[8]._super * Val(256));
  Val x13 = (x4[9]._super * Val(512));
  Val x14 = (x4[10]._super * Val(1024));
  Val x15 = (x4[11]._super * Val(2048));
  Val x16 = (x4[12]._super * Val(4096));
  Val x17 = (x4[13]._super * Val(8192));
  Val x18 = (x4[14]._super * Val(16384));
  Val x19 = (x4[15]._super * Val(32768));
  Val x20 = (x4[16]._super * Val(65536));
  Val x21 = (x4[17]._super * Val(131072));
  Val x22 = (x4[18]._super * Val(262144));
  Val x23 = (x4[19]._super * Val(524288));
  Val x24 = (x4[20]._super * Val(1048576));
  Val x25 = (x4[21]._super * Val(2097152));
  Val x26 = (x4[0]._super + x5);
  Val x27 = (((x26 + x6) + x7) + x8);
  Val x28 = (((x27 + x9) + x10) + x11);
  Val x29 = (((x28 + x12) + x13) + x14);
  Val x30 = (((x29 + x15) + x16) + x17);
  Val x31 = (((x30 + x18) + x19) + x20);
  Val x32 = (((x31 + x21) + x22) + x23);
  Val x33 = (((x32 + x24) + x25) - x2);
  EQZ(x33, "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x34 = arg0.arrB;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x35 = x34[2]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_22_Struct x36 = exec_ToBits_22_(ctx, x35, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct22Array x37 = x36._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x38 = (x37[1]._super * Val(2));
  Val x39 = (x37[2]._super * Val(4));
  Val x40 = (x37[3]._super * Val(8));
  Val x41 = (x37[4]._super * Val(16));
  Val x42 = (x37[5]._super * Val(32));
  Val x43 = (x37[6]._super * Val(64));
  Val x44 = (x37[7]._super * Val(128));
  Val x45 = (x37[8]._super * Val(256));
  Val x46 = (x37[9]._super * Val(512));
  Val x47 = (x37[10]._super * Val(1024));
  Val x48 = (x37[11]._super * Val(2048));
  Val x49 = (x37[12]._super * Val(4096));
  Val x50 = (x37[13]._super * Val(8192));
  Val x51 = (x37[14]._super * Val(16384));
  Val x52 = (x37[15]._super * Val(32768));
  Val x53 = (x37[16]._super * Val(65536));
  Val x54 = (x37[17]._super * Val(131072));
  Val x55 = (x37[18]._super * Val(262144));
  Val x56 = (x37[19]._super * Val(524288));
  Val x57 = (x37[20]._super * Val(1048576));
  Val x58 = (x37[21]._super * Val(2097152));
  Val x59 = (x37[0]._super + x38);
  Val x60 = (((x59 + x39) + x40) + x41);
  Val x61 = (((x60 + x42) + x43) + x44);
  Val x62 = (((x61 + x45) + x46) + x47);
  Val x63 = (((x62 + x48) + x49) + x50);
  Val x64 = (((x63 + x51) + x52) + x53);
  Val x65 = (((x64 + x54) + x55) + x56);
  Val x66 = (((x65 + x57) + x58) - x35);
  EQZ(x66, "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x67 = x34[17]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_22_Struct x68 = exec_ToBits_22_(ctx, x67, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct22Array x69 = x68._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x70 = (x69[1]._super * Val(2));
  Val x71 = (x69[2]._super * Val(4));
  Val x72 = (x69[3]._super * Val(8));
  Val x73 = (x69[4]._super * Val(16));
  Val x74 = (x69[5]._super * Val(32));
  Val x75 = (x69[6]._super * Val(64));
  Val x76 = (x69[7]._super * Val(128));
  Val x77 = (x69[8]._super * Val(256));
  Val x78 = (x69[9]._super * Val(512));
  Val x79 = (x69[10]._super * Val(1024));
  Val x80 = (x69[11]._super * Val(2048));
  Val x81 = (x69[12]._super * Val(4096));
  Val x82 = (x69[13]._super * Val(8192));
  Val x83 = (x69[14]._super * Val(16384));
  Val x84 = (x69[15]._super * Val(32768));
  Val x85 = (x69[16]._super * Val(65536));
  Val x86 = (x69[17]._super * Val(131072));
  Val x87 = (x69[18]._super * Val(262144));
  Val x88 = (x69[19]._super * Val(524288));
  Val x89 = (x69[20]._super * Val(1048576));
  Val x90 = (x69[21]._super * Val(2097152));
  Val x91 = (x69[0]._super + x70);
  Val x92 = (((x91 + x71) + x72) + x73);
  Val x93 = (((x92 + x74) + x75) + x76);
  Val x94 = (((x93 + x77) + x78) + x79);
  Val x95 = (((x94 + x80) + x81) + x82);
  Val x96 = (((x95 + x83) + x84) + x85);
  Val x97 = (((x96 + x86) + x87) + x88);
  Val x98 = (((x97 + x89) + x90) - x67);
  EQZ(x98, "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x99 = arg0.arrC[10]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x131 = arg0.arrD[3]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_22_Struct x132 = exec_ToBits_22_(ctx, x131, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  Val x155 = x133[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x156 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x157 = (((x156 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x158 = (((x157 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x159 = (((x158 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x160 = (((x159 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x161 = (((x160 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x162 = (((x161 + (x153 * Val(524288))) + (x154 * Val(1048576))) + (x155 * Val(2097152)));
  EQZ((x162 - x131), "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct22Array x163 =
      map(Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                     Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                     Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val22Array::value_type x164,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x165) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x166 = x4[to_size_t(x164)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x167 = x37[to_size_t(x164)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x168 = x69[to_size_t(x164)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x169 = ((Val(1) - x166) * (Val(1) - x167));
            Val x170 = ((x166 * x167) + x169);
            Val x171 = ((Val(1) - x170) * (Val(1) - x168));
            NondetRegStruct x172 = exec_Reg(ctx, ((x170 * x168) + x171), x165);
            return x172;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x173 = x163[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x174 = ((Val(1) - x173) * (Val(1) - x102));
  Val x175 = ((x173 * x102) + x174);
  Val x176 = ((Val(1) - x175) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x177 = x163[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x178 = ((Val(1) - x177) * (Val(1) - x103));
  Val x179 = ((x177 * x103) + x178);
  Val x180 = ((Val(1) - x179) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x181 = x163[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x182 = ((Val(1) - x181) * (Val(1) - x104));
  Val x183 = ((x181 * x104) + x182);
  Val x184 = ((Val(1) - x183) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x185 = x163[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x186 = ((Val(1) - x185) * (Val(1) - x105));
  Val x187 = ((x185 * x105) + x186);
  Val x188 = ((Val(1) - x187) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x189 = x163[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x190 = ((Val(1) - x189) * (Val(1) - x106));
  Val x191 = ((x189 * x106) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x193 = x163[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x194 = ((Val(1) - x193) * (Val(1) - x107));
  Val x195 = ((x193 * x107) + x194);
  Val x196 = ((Val(1) - x195) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x197 = x163[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x198 = ((Val(1) - x197) * (Val(1) - x108));
  Val x199 = ((x197 * x108) + x198);
  Val x200 = ((Val(1) - x199) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x201 = x163[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x202 = ((Val(1) - x201) * (Val(1) - x109));
  Val x203 = ((x201 * x109) + x202);
  Val x204 = ((Val(1) - x203) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x205 = x163[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x206 = ((Val(1) - x205) * (Val(1) - x110));
  Val x207 = ((x205 * x110) + x206);
  Val x208 = ((Val(1) - x207) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x209 = x163[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x210 = ((Val(1) - x209) * (Val(1) - x111));
  Val x211 = ((x209 * x111) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x213 = x163[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x214 = ((Val(1) - x213) * (Val(1) - x112));
  Val x215 = ((x213 * x112) + x214);
  Val x216 = ((Val(1) - x215) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x217 = x163[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x218 = ((Val(1) - x217) * (Val(1) - x113));
  Val x219 = ((x217 * x113) + x218);
  Val x220 = ((Val(1) - x219) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x221 = x163[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x222 = ((Val(1) - x221) * (Val(1) - x114));
  Val x223 = ((x221 * x114) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x225 = x163[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x226 = ((Val(1) - x225) * (Val(1) - x115));
  Val x227 = ((x225 * x115) + x226);
  Val x228 = ((Val(1) - x227) * (Val(1) - x147));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x229 = x163[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x230 = ((Val(1) - x229) * (Val(1) - x116));
  Val x231 = ((x229 * x116) + x230);
  Val x232 = ((Val(1) - x231) * (Val(1) - x148));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x233 = x163[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x234 = ((Val(1) - x233) * (Val(1) - x117));
  Val x235 = ((x233 * x117) + x234);
  Val x236 = ((Val(1) - x235) * (Val(1) - x149));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x237 = x163[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x238 = ((Val(1) - x237) * (Val(1) - x118));
  Val x239 = ((x237 * x118) + x238);
  Val x240 = ((Val(1) - x239) * (Val(1) - x150));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x241 = x163[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x242 = ((Val(1) - x241) * (Val(1) - x119));
  Val x243 = ((x241 * x119) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x151));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x245 = x163[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x246 = ((Val(1) - x245) * (Val(1) - x120));
  Val x247 = ((x245 * x120) + x246);
  Val x248 = ((Val(1) - x247) * (Val(1) - x152));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x249 = x163[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x250 = ((Val(1) - x249) * (Val(1) - x121));
  Val x251 = ((x249 * x121) + x250);
  Val x252 = ((Val(1) - x251) * (Val(1) - x153));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x253 = x163[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x254 = ((Val(1) - x253) * (Val(1) - x122));
  Val x255 = ((x253 * x122) + x254);
  Val x256 = ((Val(1) - x255) * (Val(1) - x154));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x257 = x163[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x258 = ((Val(1) - x257) * (Val(1) - x123));
  Val x259 = ((x257 * x123) + x258);
  Val x260 = ((Val(1) - x259) * (Val(1) - x155));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x261 = (((x179 * x135) + x180) * Val(2));
  Val x262 = (((x183 * x136) + x184) * Val(4));
  Val x263 = (((x187 * x137) + x188) * Val(8));
  Val x264 = (((x191 * x138) + x192) * Val(16));
  Val x265 = (((x195 * x139) + x196) * Val(32));
  Val x266 = (((x199 * x140) + x200) * Val(64));
  Val x267 = (((x203 * x141) + x204) * Val(128));
  Val x268 = (((x207 * x142) + x208) * Val(256));
  Val x269 = (((x211 * x143) + x212) * Val(512));
  Val x270 = (((x215 * x144) + x216) * Val(1024));
  Val x271 = (((x219 * x145) + x220) * Val(2048));
  Val x272 = (((x223 * x146) + x224) * Val(4096));
  Val x273 = (((x227 * x147) + x228) * Val(8192));
  Val x274 = (((x231 * x148) + x232) * Val(16384));
  Val x275 = (((x235 * x149) + x236) * Val(32768));
  Val x276 = (((x239 * x150) + x240) * Val(65536));
  Val x277 = (((x243 * x151) + x244) * Val(131072));
  Val x278 = (((x247 * x152) + x248) * Val(262144));
  Val x279 = (((x251 * x153) + x252) * Val(524288));
  Val x280 = (((x255 * x154) + x256) * Val(1048576));
  Val x281 = (((x259 * x155) + x260) * Val(2097152));
  Val x282 = (((x175 * x134) + x176) + x261);
  Val x283 = (((x282 + x262) + x263) + x264);
  Val x284 = (((x283 + x265) + x266) + x267);
  Val x285 = (((x284 + x268) + x269) + x270);
  Val x286 = (((x285 + x271) + x272) + x273);
  Val x287 = (((x286 + x274) + x275) + x276);
  Val x288 = (((x287 + x277) + x278) + x279);
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:82)
  FromBits_22_Struct x289 = FromBits_22_Struct{._super = ((x288 + x280) + x281)};
  return x289;
}
RetTupleStruct execXor5wordsMinor0_3_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<Xor5wordsMinor0_3_Layout> layout1) {
  // xor5words_minor0(zirgen/circuit/keccak/keccak.zir:200)
  FromBits_22_Struct x2 = execXor5wordsResult_3__0_(ctx, arg0, LAYOUT_LOOKUP(layout1, _0));
  NondetRegStruct x3 = exec_Reg(ctx, x2._super, LAYOUT_LOOKUP(layout1, result));
  // xor5words_minor0(zirgen/circuit/keccak/keccak.zir:202)
  Val22Array x4 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x5 =
      exec_RetTuple(ctx,
                    x4,
                    x4,
                    x4,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),    Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),    Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x3._super, Val(0)},
                    x4,
                    x4,
                    Val(1),
                    Val(3),
                    arg0.rnd._super,
                    arg0.blk._super,
                    arg0.midx._super,
                    LAYOUT_LOOKUP(layout1, _super));
  return x5;
}
FromBits_21_Struct execXor5wordsResult_3__1_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_3__1_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x2 = arg0.arrA[10]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_21_Struct x3 = exec_ToBits_21_(ctx, x2, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct21Array x4 = x3._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x5 = (x4[1]._super * Val(2));
  Val x6 = (x4[2]._super * Val(4));
  Val x7 = (x4[3]._super * Val(8));
  Val x8 = (x4[4]._super * Val(16));
  Val x9 = (x4[5]._super * Val(32));
  Val x10 = (x4[6]._super * Val(64));
  Val x11 = (x4[7]._super * Val(128));
  Val x12 = (x4[8]._super * Val(256));
  Val x13 = (x4[9]._super * Val(512));
  Val x14 = (x4[10]._super * Val(1024));
  Val x15 = (x4[11]._super * Val(2048));
  Val x16 = (x4[12]._super * Val(4096));
  Val x17 = (x4[13]._super * Val(8192));
  Val x18 = (x4[14]._super * Val(16384));
  Val x19 = (x4[15]._super * Val(32768));
  Val x20 = (x4[16]._super * Val(65536));
  Val x21 = (x4[17]._super * Val(131072));
  Val x22 = (x4[18]._super * Val(262144));
  Val x23 = (x4[19]._super * Val(524288));
  Val x24 = (x4[20]._super * Val(1048576));
  Val x25 = (x4[0]._super + x5);
  Val x26 = (((x25 + x6) + x7) + x8);
  Val x27 = (((x26 + x9) + x10) + x11);
  Val x28 = (((x27 + x12) + x13) + x14);
  Val x29 = (((x28 + x15) + x16) + x17);
  Val x30 = (((x29 + x18) + x19) + x20);
  Val x31 = (((x30 + x21) + x22) + x23);
  EQZ(((x31 + x24) - x2), "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x32 = arg0.arrB;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x33 = x32[3]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_21_Struct x34 = exec_ToBits_21_(ctx, x33, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct21Array x35 = x34._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x36 = (x35[1]._super * Val(2));
  Val x37 = (x35[2]._super * Val(4));
  Val x38 = (x35[3]._super * Val(8));
  Val x39 = (x35[4]._super * Val(16));
  Val x40 = (x35[5]._super * Val(32));
  Val x41 = (x35[6]._super * Val(64));
  Val x42 = (x35[7]._super * Val(128));
  Val x43 = (x35[8]._super * Val(256));
  Val x44 = (x35[9]._super * Val(512));
  Val x45 = (x35[10]._super * Val(1024));
  Val x46 = (x35[11]._super * Val(2048));
  Val x47 = (x35[12]._super * Val(4096));
  Val x48 = (x35[13]._super * Val(8192));
  Val x49 = (x35[14]._super * Val(16384));
  Val x50 = (x35[15]._super * Val(32768));
  Val x51 = (x35[16]._super * Val(65536));
  Val x52 = (x35[17]._super * Val(131072));
  Val x53 = (x35[18]._super * Val(262144));
  Val x54 = (x35[19]._super * Val(524288));
  Val x55 = (x35[20]._super * Val(1048576));
  Val x56 = (x35[0]._super + x36);
  Val x57 = (((x56 + x37) + x38) + x39);
  Val x58 = (((x57 + x40) + x41) + x42);
  Val x59 = (((x58 + x43) + x44) + x45);
  Val x60 = (((x59 + x46) + x47) + x48);
  Val x61 = (((x60 + x49) + x50) + x51);
  Val x62 = (((x61 + x52) + x53) + x54);
  EQZ(((x62 + x55) - x33), "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x63 = x32[18]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_21_Struct x64 = exec_ToBits_21_(ctx, x63, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct21Array x65 = x64._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x66 = (x65[1]._super * Val(2));
  Val x67 = (x65[2]._super * Val(4));
  Val x68 = (x65[3]._super * Val(8));
  Val x69 = (x65[4]._super * Val(16));
  Val x70 = (x65[5]._super * Val(32));
  Val x71 = (x65[6]._super * Val(64));
  Val x72 = (x65[7]._super * Val(128));
  Val x73 = (x65[8]._super * Val(256));
  Val x74 = (x65[9]._super * Val(512));
  Val x75 = (x65[10]._super * Val(1024));
  Val x76 = (x65[11]._super * Val(2048));
  Val x77 = (x65[12]._super * Val(4096));
  Val x78 = (x65[13]._super * Val(8192));
  Val x79 = (x65[14]._super * Val(16384));
  Val x80 = (x65[15]._super * Val(32768));
  Val x81 = (x65[16]._super * Val(65536));
  Val x82 = (x65[17]._super * Val(131072));
  Val x83 = (x65[18]._super * Val(262144));
  Val x84 = (x65[19]._super * Val(524288));
  Val x85 = (x65[20]._super * Val(1048576));
  Val x86 = (x65[0]._super + x66);
  Val x87 = (((x86 + x67) + x68) + x69);
  Val x88 = (((x87 + x70) + x71) + x72);
  Val x89 = (((x88 + x73) + x74) + x75);
  Val x90 = (((x89 + x76) + x77) + x78);
  Val x91 = (((x90 + x79) + x80) + x81);
  Val x92 = (((x91 + x82) + x83) + x84);
  EQZ(((x92 + x85) - x63), "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x93 = arg0.arrC[11]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_21_Struct x94 = exec_ToBits_21_(ctx, x93, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct21Array x95 = x94._super;
  Val x96 = x95[0]._super;
  Val x97 = x95[1]._super;
  Val x98 = x95[2]._super;
  Val x99 = x95[3]._super;
  Val x100 = x95[4]._super;
  Val x101 = x95[5]._super;
  Val x102 = x95[6]._super;
  Val x103 = x95[7]._super;
  Val x104 = x95[8]._super;
  Val x105 = x95[9]._super;
  Val x106 = x95[10]._super;
  Val x107 = x95[11]._super;
  Val x108 = x95[12]._super;
  Val x109 = x95[13]._super;
  Val x110 = x95[14]._super;
  Val x111 = x95[15]._super;
  Val x112 = x95[16]._super;
  Val x113 = x95[17]._super;
  Val x114 = x95[18]._super;
  Val x115 = x95[19]._super;
  Val x116 = x95[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x117 = (((x96 + (x97 * Val(2))) + (x98 * Val(4))) + (x99 * Val(8)));
  Val x118 = (((x117 + (x100 * Val(16))) + (x101 * Val(32))) + (x102 * Val(64)));
  Val x119 = (((x118 + (x103 * Val(128))) + (x104 * Val(256))) + (x105 * Val(512)));
  Val x120 = (((x119 + (x106 * Val(1024))) + (x107 * Val(2048))) + (x108 * Val(4096)));
  Val x121 = (((x120 + (x109 * Val(8192))) + (x110 * Val(16384))) + (x111 * Val(32768)));
  Val x122 = (((x121 + (x112 * Val(65536))) + (x113 * Val(131072))) + (x114 * Val(262144)));
  Val x123 = (((x122 + (x115 * Val(524288))) + (x116 * Val(1048576))) - x93);
  EQZ(x123, "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x124 = arg0.arrD[4]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_21_Struct x125 = exec_ToBits_21_(ctx, x124, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x126 = x125._super;
  Val x127 = x126[0]._super;
  Val x128 = x126[1]._super;
  Val x129 = x126[2]._super;
  Val x130 = x126[3]._super;
  Val x131 = x126[4]._super;
  Val x132 = x126[5]._super;
  Val x133 = x126[6]._super;
  Val x134 = x126[7]._super;
  Val x135 = x126[8]._super;
  Val x136 = x126[9]._super;
  Val x137 = x126[10]._super;
  Val x138 = x126[11]._super;
  Val x139 = x126[12]._super;
  Val x140 = x126[13]._super;
  Val x141 = x126[14]._super;
  Val x142 = x126[15]._super;
  Val x143 = x126[16]._super;
  Val x144 = x126[17]._super;
  Val x145 = x126[18]._super;
  Val x146 = x126[19]._super;
  Val x147 = x126[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x148 = (((x127 + (x128 * Val(2))) + (x129 * Val(4))) + (x130 * Val(8)));
  Val x149 = (((x148 + (x131 * Val(16))) + (x132 * Val(32))) + (x133 * Val(64)));
  Val x150 = (((x149 + (x134 * Val(128))) + (x135 * Val(256))) + (x136 * Val(512)));
  Val x151 = (((x150 + (x137 * Val(1024))) + (x138 * Val(2048))) + (x139 * Val(4096)));
  Val x152 = (((x151 + (x140 * Val(8192))) + (x141 * Val(16384))) + (x142 * Val(32768)));
  Val x153 = (((x152 + (x143 * Val(65536))) + (x144 * Val(131072))) + (x145 * Val(262144)));
  Val x154 = (((x153 + (x146 * Val(524288))) + (x147 * Val(1048576))) - x124);
  EQZ(x154, "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct21Array x155 =
      map(Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                     Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                     Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val21Array::value_type x156,
                            BoundLayout<NondetRegLayout21LayoutArray::value_type> x157) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x158 = x4[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x159 = x35[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x160 = x65[to_size_t(x156)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x161 = ((Val(1) - x158) * (Val(1) - x159));
            Val x162 = ((x158 * x159) + x161);
            Val x163 = ((Val(1) - x162) * (Val(1) - x160));
            NondetRegStruct x164 = exec_Reg(ctx, ((x162 * x160) + x163), x157);
            return x164;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x165 = x155[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x166 = ((Val(1) - x165) * (Val(1) - x96));
  Val x167 = ((x165 * x96) + x166);
  Val x168 = ((Val(1) - x167) * (Val(1) - x127));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x169 = x155[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x170 = ((Val(1) - x169) * (Val(1) - x97));
  Val x171 = ((x169 * x97) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x128));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x173 = x155[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x174 = ((Val(1) - x173) * (Val(1) - x98));
  Val x175 = ((x173 * x98) + x174);
  Val x176 = ((Val(1) - x175) * (Val(1) - x129));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x177 = x155[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x178 = ((Val(1) - x177) * (Val(1) - x99));
  Val x179 = ((x177 * x99) + x178);
  Val x180 = ((Val(1) - x179) * (Val(1) - x130));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x181 = x155[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x182 = ((Val(1) - x181) * (Val(1) - x100));
  Val x183 = ((x181 * x100) + x182);
  Val x184 = ((Val(1) - x183) * (Val(1) - x131));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x185 = x155[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x186 = ((Val(1) - x185) * (Val(1) - x101));
  Val x187 = ((x185 * x101) + x186);
  Val x188 = ((Val(1) - x187) * (Val(1) - x132));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x189 = x155[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x190 = ((Val(1) - x189) * (Val(1) - x102));
  Val x191 = ((x189 * x102) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x133));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x193 = x155[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x194 = ((Val(1) - x193) * (Val(1) - x103));
  Val x195 = ((x193 * x103) + x194);
  Val x196 = ((Val(1) - x195) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x197 = x155[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x198 = ((Val(1) - x197) * (Val(1) - x104));
  Val x199 = ((x197 * x104) + x198);
  Val x200 = ((Val(1) - x199) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x201 = x155[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x202 = ((Val(1) - x201) * (Val(1) - x105));
  Val x203 = ((x201 * x105) + x202);
  Val x204 = ((Val(1) - x203) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x205 = x155[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x206 = ((Val(1) - x205) * (Val(1) - x106));
  Val x207 = ((x205 * x106) + x206);
  Val x208 = ((Val(1) - x207) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x209 = x155[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x210 = ((Val(1) - x209) * (Val(1) - x107));
  Val x211 = ((x209 * x107) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x213 = x155[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x214 = ((Val(1) - x213) * (Val(1) - x108));
  Val x215 = ((x213 * x108) + x214);
  Val x216 = ((Val(1) - x215) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x217 = x155[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x218 = ((Val(1) - x217) * (Val(1) - x109));
  Val x219 = ((x217 * x109) + x218);
  Val x220 = ((Val(1) - x219) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x221 = x155[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x222 = ((Val(1) - x221) * (Val(1) - x110));
  Val x223 = ((x221 * x110) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x225 = x155[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x226 = ((Val(1) - x225) * (Val(1) - x111));
  Val x227 = ((x225 * x111) + x226);
  Val x228 = ((Val(1) - x227) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x229 = x155[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x230 = ((Val(1) - x229) * (Val(1) - x112));
  Val x231 = ((x229 * x112) + x230);
  Val x232 = ((Val(1) - x231) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x233 = x155[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x234 = ((Val(1) - x233) * (Val(1) - x113));
  Val x235 = ((x233 * x113) + x234);
  Val x236 = ((Val(1) - x235) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x237 = x155[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x238 = ((Val(1) - x237) * (Val(1) - x114));
  Val x239 = ((x237 * x114) + x238);
  Val x240 = ((Val(1) - x239) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x241 = x155[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x242 = ((Val(1) - x241) * (Val(1) - x115));
  Val x243 = ((x241 * x115) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x245 = x155[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x246 = ((Val(1) - x245) * (Val(1) - x116));
  Val x247 = ((x245 * x116) + x246);
  Val x248 = ((Val(1) - x247) * (Val(1) - x147));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x249 = (((x171 * x128) + x172) * Val(2));
  Val x250 = (((x175 * x129) + x176) * Val(4));
  Val x251 = (((x179 * x130) + x180) * Val(8));
  Val x252 = (((x183 * x131) + x184) * Val(16));
  Val x253 = (((x187 * x132) + x188) * Val(32));
  Val x254 = (((x191 * x133) + x192) * Val(64));
  Val x255 = (((x195 * x134) + x196) * Val(128));
  Val x256 = (((x199 * x135) + x200) * Val(256));
  Val x257 = (((x203 * x136) + x204) * Val(512));
  Val x258 = (((x207 * x137) + x208) * Val(1024));
  Val x259 = (((x211 * x138) + x212) * Val(2048));
  Val x260 = (((x215 * x139) + x216) * Val(4096));
  Val x261 = (((x219 * x140) + x220) * Val(8192));
  Val x262 = (((x223 * x141) + x224) * Val(16384));
  Val x263 = (((x227 * x142) + x228) * Val(32768));
  Val x264 = (((x231 * x143) + x232) * Val(65536));
  Val x265 = (((x235 * x144) + x236) * Val(131072));
  Val x266 = (((x239 * x145) + x240) * Val(262144));
  Val x267 = (((x243 * x146) + x244) * Val(524288));
  Val x268 = (((x247 * x147) + x248) * Val(1048576));
  Val x269 = (((x167 * x127) + x168) + x249);
  Val x270 = (((x269 + x250) + x251) + x252);
  Val x271 = (((x270 + x253) + x254) + x255);
  Val x272 = (((x271 + x256) + x257) + x258);
  Val x273 = (((x272 + x259) + x260) + x261);
  Val x274 = (((x273 + x262) + x263) + x264);
  Val x275 = (((x274 + x265) + x266) + x267);
  return FromBits_21_Struct{._super = (x275 + x268)};
}
RetTupleStruct execXor5wordsMinor1_3_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor1_3_Layout> layout2) {
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:207)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:208)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:209)
  FromBits_21_Struct x5 = execXor5wordsResult_3__1_(ctx, x4, LAYOUT_LOOKUP(layout2, _0));
  NondetRegStruct x6 = exec_Reg(ctx, x5._super, LAYOUT_LOOKUP(layout2, result));
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:207)
  Val x7 = x3.arrD[22]._super;
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:212)
  Val22Array x8 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x9 =
      exec_RetTuple(ctx,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x7},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x6._super},
                    x8,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x8,
                    x8,
                    Val(2),
                    Val(3),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x9;
}
FromBits_21_Struct execXor5wordsResult_3__2_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_3__2_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x2 = arg0.arrA[11]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_21_Struct x3 = exec_ToBits_21_(ctx, x2, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct21Array x4 = x3._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x5 = (x4[1]._super * Val(2));
  Val x6 = (x4[2]._super * Val(4));
  Val x7 = (x4[3]._super * Val(8));
  Val x8 = (x4[4]._super * Val(16));
  Val x9 = (x4[5]._super * Val(32));
  Val x10 = (x4[6]._super * Val(64));
  Val x11 = (x4[7]._super * Val(128));
  Val x12 = (x4[8]._super * Val(256));
  Val x13 = (x4[9]._super * Val(512));
  Val x14 = (x4[10]._super * Val(1024));
  Val x15 = (x4[11]._super * Val(2048));
  Val x16 = (x4[12]._super * Val(4096));
  Val x17 = (x4[13]._super * Val(8192));
  Val x18 = (x4[14]._super * Val(16384));
  Val x19 = (x4[15]._super * Val(32768));
  Val x20 = (x4[16]._super * Val(65536));
  Val x21 = (x4[17]._super * Val(131072));
  Val x22 = (x4[18]._super * Val(262144));
  Val x23 = (x4[19]._super * Val(524288));
  Val x24 = (x4[20]._super * Val(1048576));
  Val x25 = (x4[0]._super + x5);
  Val x26 = (((x25 + x6) + x7) + x8);
  Val x27 = (((x26 + x9) + x10) + x11);
  Val x28 = (((x27 + x12) + x13) + x14);
  Val x29 = (((x28 + x15) + x16) + x17);
  Val x30 = (((x29 + x18) + x19) + x20);
  Val x31 = (((x30 + x21) + x22) + x23);
  EQZ(((x31 + x24) - x2), "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x32 = arg0.arrB;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x33 = x32[4]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_21_Struct x34 = exec_ToBits_21_(ctx, x33, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct21Array x35 = x34._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x36 = (x35[1]._super * Val(2));
  Val x37 = (x35[2]._super * Val(4));
  Val x38 = (x35[3]._super * Val(8));
  Val x39 = (x35[4]._super * Val(16));
  Val x40 = (x35[5]._super * Val(32));
  Val x41 = (x35[6]._super * Val(64));
  Val x42 = (x35[7]._super * Val(128));
  Val x43 = (x35[8]._super * Val(256));
  Val x44 = (x35[9]._super * Val(512));
  Val x45 = (x35[10]._super * Val(1024));
  Val x46 = (x35[11]._super * Val(2048));
  Val x47 = (x35[12]._super * Val(4096));
  Val x48 = (x35[13]._super * Val(8192));
  Val x49 = (x35[14]._super * Val(16384));
  Val x50 = (x35[15]._super * Val(32768));
  Val x51 = (x35[16]._super * Val(65536));
  Val x52 = (x35[17]._super * Val(131072));
  Val x53 = (x35[18]._super * Val(262144));
  Val x54 = (x35[19]._super * Val(524288));
  Val x55 = (x35[20]._super * Val(1048576));
  Val x56 = (x35[0]._super + x36);
  Val x57 = (((x56 + x37) + x38) + x39);
  Val x58 = (((x57 + x40) + x41) + x42);
  Val x59 = (((x58 + x43) + x44) + x45);
  Val x60 = (((x59 + x46) + x47) + x48);
  Val x61 = (((x60 + x49) + x50) + x51);
  Val x62 = (((x61 + x52) + x53) + x54);
  EQZ(((x62 + x55) - x33), "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x63 = x32[19]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_21_Struct x64 = exec_ToBits_21_(ctx, x63, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct21Array x65 = x64._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x66 = (x65[1]._super * Val(2));
  Val x67 = (x65[2]._super * Val(4));
  Val x68 = (x65[3]._super * Val(8));
  Val x69 = (x65[4]._super * Val(16));
  Val x70 = (x65[5]._super * Val(32));
  Val x71 = (x65[6]._super * Val(64));
  Val x72 = (x65[7]._super * Val(128));
  Val x73 = (x65[8]._super * Val(256));
  Val x74 = (x65[9]._super * Val(512));
  Val x75 = (x65[10]._super * Val(1024));
  Val x76 = (x65[11]._super * Val(2048));
  Val x77 = (x65[12]._super * Val(4096));
  Val x78 = (x65[13]._super * Val(8192));
  Val x79 = (x65[14]._super * Val(16384));
  Val x80 = (x65[15]._super * Val(32768));
  Val x81 = (x65[16]._super * Val(65536));
  Val x82 = (x65[17]._super * Val(131072));
  Val x83 = (x65[18]._super * Val(262144));
  Val x84 = (x65[19]._super * Val(524288));
  Val x85 = (x65[20]._super * Val(1048576));
  Val x86 = (x65[0]._super + x66);
  Val x87 = (((x86 + x67) + x68) + x69);
  Val x88 = (((x87 + x70) + x71) + x72);
  Val x89 = (((x88 + x73) + x74) + x75);
  Val x90 = (((x89 + x76) + x77) + x78);
  Val x91 = (((x90 + x79) + x80) + x81);
  Val x92 = (((x91 + x82) + x83) + x84);
  EQZ(((x92 + x85) - x63), "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x93 = arg0.arrC[12]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_21_Struct x94 = exec_ToBits_21_(ctx, x93, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct21Array x95 = x94._super;
  Val x96 = x95[0]._super;
  Val x97 = x95[1]._super;
  Val x98 = x95[2]._super;
  Val x99 = x95[3]._super;
  Val x100 = x95[4]._super;
  Val x101 = x95[5]._super;
  Val x102 = x95[6]._super;
  Val x103 = x95[7]._super;
  Val x104 = x95[8]._super;
  Val x105 = x95[9]._super;
  Val x106 = x95[10]._super;
  Val x107 = x95[11]._super;
  Val x108 = x95[12]._super;
  Val x109 = x95[13]._super;
  Val x110 = x95[14]._super;
  Val x111 = x95[15]._super;
  Val x112 = x95[16]._super;
  Val x113 = x95[17]._super;
  Val x114 = x95[18]._super;
  Val x115 = x95[19]._super;
  Val x116 = x95[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x117 = (((x96 + (x97 * Val(2))) + (x98 * Val(4))) + (x99 * Val(8)));
  Val x118 = (((x117 + (x100 * Val(16))) + (x101 * Val(32))) + (x102 * Val(64)));
  Val x119 = (((x118 + (x103 * Val(128))) + (x104 * Val(256))) + (x105 * Val(512)));
  Val x120 = (((x119 + (x106 * Val(1024))) + (x107 * Val(2048))) + (x108 * Val(4096)));
  Val x121 = (((x120 + (x109 * Val(8192))) + (x110 * Val(16384))) + (x111 * Val(32768)));
  Val x122 = (((x121 + (x112 * Val(65536))) + (x113 * Val(131072))) + (x114 * Val(262144)));
  Val x123 = (((x122 + (x115 * Val(524288))) + (x116 * Val(1048576))) - x93);
  EQZ(x123, "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x124 = arg0.arrD[5]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_21_Struct x125 = exec_ToBits_21_(ctx, x124, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x126 = x125._super;
  Val x127 = x126[0]._super;
  Val x128 = x126[1]._super;
  Val x129 = x126[2]._super;
  Val x130 = x126[3]._super;
  Val x131 = x126[4]._super;
  Val x132 = x126[5]._super;
  Val x133 = x126[6]._super;
  Val x134 = x126[7]._super;
  Val x135 = x126[8]._super;
  Val x136 = x126[9]._super;
  Val x137 = x126[10]._super;
  Val x138 = x126[11]._super;
  Val x139 = x126[12]._super;
  Val x140 = x126[13]._super;
  Val x141 = x126[14]._super;
  Val x142 = x126[15]._super;
  Val x143 = x126[16]._super;
  Val x144 = x126[17]._super;
  Val x145 = x126[18]._super;
  Val x146 = x126[19]._super;
  Val x147 = x126[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x148 = (((x127 + (x128 * Val(2))) + (x129 * Val(4))) + (x130 * Val(8)));
  Val x149 = (((x148 + (x131 * Val(16))) + (x132 * Val(32))) + (x133 * Val(64)));
  Val x150 = (((x149 + (x134 * Val(128))) + (x135 * Val(256))) + (x136 * Val(512)));
  Val x151 = (((x150 + (x137 * Val(1024))) + (x138 * Val(2048))) + (x139 * Val(4096)));
  Val x152 = (((x151 + (x140 * Val(8192))) + (x141 * Val(16384))) + (x142 * Val(32768)));
  Val x153 = (((x152 + (x143 * Val(65536))) + (x144 * Val(131072))) + (x145 * Val(262144)));
  Val x154 = (((x153 + (x146 * Val(524288))) + (x147 * Val(1048576))) - x124);
  EQZ(x154, "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct21Array x155 =
      map(Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                     Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                     Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val21Array::value_type x156,
                            BoundLayout<NondetRegLayout21LayoutArray::value_type> x157) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x158 = x4[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x159 = x35[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x160 = x65[to_size_t(x156)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x161 = ((Val(1) - x158) * (Val(1) - x159));
            Val x162 = ((x158 * x159) + x161);
            Val x163 = ((Val(1) - x162) * (Val(1) - x160));
            NondetRegStruct x164 = exec_Reg(ctx, ((x162 * x160) + x163), x157);
            return x164;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x165 = x155[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x166 = ((Val(1) - x165) * (Val(1) - x96));
  Val x167 = ((x165 * x96) + x166);
  Val x168 = ((Val(1) - x167) * (Val(1) - x127));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x169 = x155[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x170 = ((Val(1) - x169) * (Val(1) - x97));
  Val x171 = ((x169 * x97) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x128));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x173 = x155[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x174 = ((Val(1) - x173) * (Val(1) - x98));
  Val x175 = ((x173 * x98) + x174);
  Val x176 = ((Val(1) - x175) * (Val(1) - x129));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x177 = x155[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x178 = ((Val(1) - x177) * (Val(1) - x99));
  Val x179 = ((x177 * x99) + x178);
  Val x180 = ((Val(1) - x179) * (Val(1) - x130));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x181 = x155[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x182 = ((Val(1) - x181) * (Val(1) - x100));
  Val x183 = ((x181 * x100) + x182);
  Val x184 = ((Val(1) - x183) * (Val(1) - x131));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x185 = x155[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x186 = ((Val(1) - x185) * (Val(1) - x101));
  Val x187 = ((x185 * x101) + x186);
  Val x188 = ((Val(1) - x187) * (Val(1) - x132));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x189 = x155[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x190 = ((Val(1) - x189) * (Val(1) - x102));
  Val x191 = ((x189 * x102) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x133));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x193 = x155[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x194 = ((Val(1) - x193) * (Val(1) - x103));
  Val x195 = ((x193 * x103) + x194);
  Val x196 = ((Val(1) - x195) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x197 = x155[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x198 = ((Val(1) - x197) * (Val(1) - x104));
  Val x199 = ((x197 * x104) + x198);
  Val x200 = ((Val(1) - x199) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x201 = x155[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x202 = ((Val(1) - x201) * (Val(1) - x105));
  Val x203 = ((x201 * x105) + x202);
  Val x204 = ((Val(1) - x203) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x205 = x155[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x206 = ((Val(1) - x205) * (Val(1) - x106));
  Val x207 = ((x205 * x106) + x206);
  Val x208 = ((Val(1) - x207) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x209 = x155[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x210 = ((Val(1) - x209) * (Val(1) - x107));
  Val x211 = ((x209 * x107) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x213 = x155[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x214 = ((Val(1) - x213) * (Val(1) - x108));
  Val x215 = ((x213 * x108) + x214);
  Val x216 = ((Val(1) - x215) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x217 = x155[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x218 = ((Val(1) - x217) * (Val(1) - x109));
  Val x219 = ((x217 * x109) + x218);
  Val x220 = ((Val(1) - x219) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x221 = x155[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x222 = ((Val(1) - x221) * (Val(1) - x110));
  Val x223 = ((x221 * x110) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x225 = x155[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x226 = ((Val(1) - x225) * (Val(1) - x111));
  Val x227 = ((x225 * x111) + x226);
  Val x228 = ((Val(1) - x227) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x229 = x155[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x230 = ((Val(1) - x229) * (Val(1) - x112));
  Val x231 = ((x229 * x112) + x230);
  Val x232 = ((Val(1) - x231) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x233 = x155[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x234 = ((Val(1) - x233) * (Val(1) - x113));
  Val x235 = ((x233 * x113) + x234);
  Val x236 = ((Val(1) - x235) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x237 = x155[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x238 = ((Val(1) - x237) * (Val(1) - x114));
  Val x239 = ((x237 * x114) + x238);
  Val x240 = ((Val(1) - x239) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x241 = x155[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x242 = ((Val(1) - x241) * (Val(1) - x115));
  Val x243 = ((x241 * x115) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x245 = x155[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x246 = ((Val(1) - x245) * (Val(1) - x116));
  Val x247 = ((x245 * x116) + x246);
  Val x248 = ((Val(1) - x247) * (Val(1) - x147));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x249 = (((x171 * x128) + x172) * Val(2));
  Val x250 = (((x175 * x129) + x176) * Val(4));
  Val x251 = (((x179 * x130) + x180) * Val(8));
  Val x252 = (((x183 * x131) + x184) * Val(16));
  Val x253 = (((x187 * x132) + x188) * Val(32));
  Val x254 = (((x191 * x133) + x192) * Val(64));
  Val x255 = (((x195 * x134) + x196) * Val(128));
  Val x256 = (((x199 * x135) + x200) * Val(256));
  Val x257 = (((x203 * x136) + x204) * Val(512));
  Val x258 = (((x207 * x137) + x208) * Val(1024));
  Val x259 = (((x211 * x138) + x212) * Val(2048));
  Val x260 = (((x215 * x139) + x216) * Val(4096));
  Val x261 = (((x219 * x140) + x220) * Val(8192));
  Val x262 = (((x223 * x141) + x224) * Val(16384));
  Val x263 = (((x227 * x142) + x228) * Val(32768));
  Val x264 = (((x231 * x143) + x232) * Val(65536));
  Val x265 = (((x235 * x144) + x236) * Val(131072));
  Val x266 = (((x239 * x145) + x240) * Val(262144));
  Val x267 = (((x243 * x146) + x244) * Val(524288));
  Val x268 = (((x247 * x147) + x248) * Val(1048576));
  Val x269 = (((x167 * x127) + x168) + x249);
  Val x270 = (((x269 + x250) + x251) + x252);
  Val x271 = (((x270 + x253) + x254) + x255);
  Val x272 = (((x271 + x256) + x257) + x258);
  Val x273 = (((x272 + x259) + x260) + x261);
  Val x274 = (((x273 + x262) + x263) + x264);
  Val x275 = (((x274 + x265) + x266) + x267);
  return FromBits_21_Struct{._super = (x275 + x268)};
}
RetTupleStruct execXor5wordsMinor2_3_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor2_3_Layout> layout2) {
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:217)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:218)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:219)
  FromBits_21_Struct x5 = execXor5wordsResult_3__2_(ctx, x4, LAYOUT_LOOKUP(layout2, _0));
  NondetRegStruct x6 = exec_Reg(ctx, x5._super, LAYOUT_LOOKUP(layout2, result));
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:217)
  Val x7 = x3.arrA[21]._super;
  Val x8 = x3.arrB[21]._super;
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:223)
  Val22Array x9 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x10 =
      exec_RetTuple(ctx,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x7},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x8},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x6._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x9,
                    x9,
                    Val(3),
                    Val(3),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x10;
}
RetTupleStruct execXor5wordsMinor3_3_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor3_3_Layout> layout2) {
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
  RetTupleStruct x4 = back_RetTuple(ctx, 4, arg1);
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
  Val22Array x5 = Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                             Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                             Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)};
  NondetRegStruct22Array x6 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpA),
          std::function([&](Val22Array::value_type x7,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x8) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x9 = x4.arrA[to_size_t(x7)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
            NondetRegStruct x10 = exec_Reg(ctx, x9, x8);
            return x10;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
  NondetRegStruct22Array x11 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpB),
          std::function([&](Val22Array::value_type x12,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x13) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x14 = x4.arrB[to_size_t(x12)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
            NondetRegStruct x15 = exec_Reg(ctx, x14, x13);
            return x15;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
  NondetRegStruct22Array x16 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpC),
          std::function([&](Val22Array::value_type x17,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x18) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x19 = x4.arrC[to_size_t(x17)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
            NondetRegStruct x20 = exec_Reg(ctx, x19, x18);
            return x20;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:233)
  NondetRegStruct18Array x21 =
      map(Val18Array{Val(0),
                     Val(1),
                     Val(2),
                     Val(3),
                     Val(4),
                     Val(5),
                     Val(6),
                     Val(7),
                     Val(8),
                     Val(9),
                     Val(10),
                     Val(11),
                     Val(12),
                     Val(13),
                     Val(14),
                     Val(15),
                     Val(16),
                     Val(17)},
          LAYOUT_LOOKUP(layout2, tmp_1),
          std::function([&](Val18Array::value_type x22,
                            BoundLayout<NondetRegLayout18LayoutArray::value_type> x23) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x24 = x4.arrD[to_size_t(x22)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:233)
            NondetRegStruct x25 = exec_Reg(ctx, x24, x23);
            return x25;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x26 = x3.arrA[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:234)
  NondetRegStruct x27 = exec_Reg(ctx, x26, LAYOUT_LOOKUP(layout2, _0));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x28 = x3.arrB[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:235)
  NondetRegStruct x29 = exec_Reg(ctx, x28, LAYOUT_LOOKUP(layout2, _1));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x30 = x3.arrC[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:236)
  NondetRegStruct x31 = exec_Reg(ctx, x30, LAYOUT_LOOKUP(layout2, _2));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
  Val22Array x32 = Val22Array{
      x6[0]._super,  x6[1]._super,  x6[2]._super,  x6[3]._super,  x6[4]._super,  x6[5]._super,
      x6[6]._super,  x6[7]._super,  x6[8]._super,  x6[9]._super,  x6[10]._super, x6[11]._super,
      x6[12]._super, x6[13]._super, x6[14]._super, x6[15]._super, x6[16]._super, x6[17]._super,
      x6[18]._super, x6[19]._super, x6[20]._super, x6[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
  Val22Array x33 =
      Val22Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
  Val22Array x34 =
      Val22Array{x16[0]._super,  x16[1]._super,  x16[2]._super,  x16[3]._super,  x16[4]._super,
                 x16[5]._super,  x16[6]._super,  x16[7]._super,  x16[8]._super,  x16[9]._super,
                 x16[10]._super, x16[11]._super, x16[12]._super, x16[13]._super, x16[14]._super,
                 x16[15]._super, x16[16]._super, x16[17]._super, x16[18]._super, x16[19]._super,
                 x16[20]._super, x16[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:237)
  Val24Array x35 =
      Val24Array{x21[0]._super,  x21[1]._super,  x21[2]._super,  x21[3]._super,  x21[4]._super,
                 x21[5]._super,  x21[6]._super,  x21[7]._super,  x21[8]._super,  x21[9]._super,
                 x21[10]._super, x21[11]._super, x21[12]._super, x21[13]._super, x21[14]._super,
                 x21[15]._super, x21[16]._super, x21[17]._super, x27._super,     x29._super,
                 x31._super,     Val(0),         Val(0),         Val(0)};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:238)
  Val22Array x36 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x37 = exec_RetTuple(ctx,
                                     x32,
                                     x33,
                                     x34,
                                     x35,
                                     x36,
                                     x36,
                                     Val(0),
                                     Val(4),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(layout2, _super));
  return x37;
}
RetTupleStruct execXor5wordsMajor_3_(ExecContext& ctx,
                                     RetTupleStruct arg0,
                                     BoundLayout<RetTupleLayout> arg1,
                                     BoundLayout<Xor5wordsMajor_3_Layout> layout2) {
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:244)
  BoundLayout<Xor5wordsMajor_3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:243)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_4_Struct x5 = exec_OneHot_4_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct4Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:245)
    RetTupleStruct x8 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x9 = execXor5wordsMinor0_3_(ctx, x8, LAYOUT_LOOKUP(x3, arm0));
    x7 = x9;
  } else if (to_size_t(x6[1]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:246)
    RetTupleStruct x10 = execXor5wordsMinor1_3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x10;
  } else if (to_size_t(x6[2]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:247)
    RetTupleStruct x11 = execXor5wordsMinor2_3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x11;
  } else if (to_size_t(x6[3]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:248)
    RetTupleStruct x12 = execXor5wordsMinor3_3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x12;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:244)
  RetTupleStruct x13 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x13;
}
FromBits_22_Struct execXor5wordsResult_4__0_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_4__0_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x2 = arg0.arrA[12]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_22_Struct x3 = exec_ToBits_22_(ctx, x2, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct22Array x4 = x3._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x5 = (x4[1]._super * Val(2));
  Val x6 = (x4[2]._super * Val(4));
  Val x7 = (x4[3]._super * Val(8));
  Val x8 = (x4[4]._super * Val(16));
  Val x9 = (x4[5]._super * Val(32));
  Val x10 = (x4[6]._super * Val(64));
  Val x11 = (x4[7]._super * Val(128));
  Val x12 = (x4[8]._super * Val(256));
  Val x13 = (x4[9]._super * Val(512));
  Val x14 = (x4[10]._super * Val(1024));
  Val x15 = (x4[11]._super * Val(2048));
  Val x16 = (x4[12]._super * Val(4096));
  Val x17 = (x4[13]._super * Val(8192));
  Val x18 = (x4[14]._super * Val(16384));
  Val x19 = (x4[15]._super * Val(32768));
  Val x20 = (x4[16]._super * Val(65536));
  Val x21 = (x4[17]._super * Val(131072));
  Val x22 = (x4[18]._super * Val(262144));
  Val x23 = (x4[19]._super * Val(524288));
  Val x24 = (x4[20]._super * Val(1048576));
  Val x25 = (x4[21]._super * Val(2097152));
  Val x26 = (x4[0]._super + x5);
  Val x27 = (((x26 + x6) + x7) + x8);
  Val x28 = (((x27 + x9) + x10) + x11);
  Val x29 = (((x28 + x12) + x13) + x14);
  Val x30 = (((x29 + x15) + x16) + x17);
  Val x31 = (((x30 + x18) + x19) + x20);
  Val x32 = (((x31 + x21) + x22) + x23);
  Val x33 = (((x32 + x24) + x25) - x2);
  EQZ(x33, "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x34 = arg0.arrB;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x35 = x34[5]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_22_Struct x36 = exec_ToBits_22_(ctx, x35, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct22Array x37 = x36._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x38 = (x37[1]._super * Val(2));
  Val x39 = (x37[2]._super * Val(4));
  Val x40 = (x37[3]._super * Val(8));
  Val x41 = (x37[4]._super * Val(16));
  Val x42 = (x37[5]._super * Val(32));
  Val x43 = (x37[6]._super * Val(64));
  Val x44 = (x37[7]._super * Val(128));
  Val x45 = (x37[8]._super * Val(256));
  Val x46 = (x37[9]._super * Val(512));
  Val x47 = (x37[10]._super * Val(1024));
  Val x48 = (x37[11]._super * Val(2048));
  Val x49 = (x37[12]._super * Val(4096));
  Val x50 = (x37[13]._super * Val(8192));
  Val x51 = (x37[14]._super * Val(16384));
  Val x52 = (x37[15]._super * Val(32768));
  Val x53 = (x37[16]._super * Val(65536));
  Val x54 = (x37[17]._super * Val(131072));
  Val x55 = (x37[18]._super * Val(262144));
  Val x56 = (x37[19]._super * Val(524288));
  Val x57 = (x37[20]._super * Val(1048576));
  Val x58 = (x37[21]._super * Val(2097152));
  Val x59 = (x37[0]._super + x38);
  Val x60 = (((x59 + x39) + x40) + x41);
  Val x61 = (((x60 + x42) + x43) + x44);
  Val x62 = (((x61 + x45) + x46) + x47);
  Val x63 = (((x62 + x48) + x49) + x50);
  Val x64 = (((x63 + x51) + x52) + x53);
  Val x65 = (((x64 + x54) + x55) + x56);
  Val x66 = (((x65 + x57) + x58) - x35);
  EQZ(x66, "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x67 = x34[20]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_22_Struct x68 = exec_ToBits_22_(ctx, x67, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct22Array x69 = x68._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x70 = (x69[1]._super * Val(2));
  Val x71 = (x69[2]._super * Val(4));
  Val x72 = (x69[3]._super * Val(8));
  Val x73 = (x69[4]._super * Val(16));
  Val x74 = (x69[5]._super * Val(32));
  Val x75 = (x69[6]._super * Val(64));
  Val x76 = (x69[7]._super * Val(128));
  Val x77 = (x69[8]._super * Val(256));
  Val x78 = (x69[9]._super * Val(512));
  Val x79 = (x69[10]._super * Val(1024));
  Val x80 = (x69[11]._super * Val(2048));
  Val x81 = (x69[12]._super * Val(4096));
  Val x82 = (x69[13]._super * Val(8192));
  Val x83 = (x69[14]._super * Val(16384));
  Val x84 = (x69[15]._super * Val(32768));
  Val x85 = (x69[16]._super * Val(65536));
  Val x86 = (x69[17]._super * Val(131072));
  Val x87 = (x69[18]._super * Val(262144));
  Val x88 = (x69[19]._super * Val(524288));
  Val x89 = (x69[20]._super * Val(1048576));
  Val x90 = (x69[21]._super * Val(2097152));
  Val x91 = (x69[0]._super + x70);
  Val x92 = (((x91 + x71) + x72) + x73);
  Val x93 = (((x92 + x74) + x75) + x76);
  Val x94 = (((x93 + x77) + x78) + x79);
  Val x95 = (((x94 + x80) + x81) + x82);
  Val x96 = (((x95 + x83) + x84) + x85);
  Val x97 = (((x96 + x86) + x87) + x88);
  Val x98 = (((x97 + x89) + x90) - x67);
  EQZ(x98, "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x99 = arg0.arrC[13]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x131 = arg0.arrD[6]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_22_Struct x132 = exec_ToBits_22_(ctx, x131, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct22Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  Val x155 = x133[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x156 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x157 = (((x156 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x158 = (((x157 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x159 = (((x158 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x160 = (((x159 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x161 = (((x160 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x162 = (((x161 + (x153 * Val(524288))) + (x154 * Val(1048576))) + (x155 * Val(2097152)));
  EQZ((x162 - x131), "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct22Array x163 =
      map(Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                     Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                     Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val22Array::value_type x164,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x165) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x166 = x4[to_size_t(x164)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x167 = x37[to_size_t(x164)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x168 = x69[to_size_t(x164)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x169 = ((Val(1) - x166) * (Val(1) - x167));
            Val x170 = ((x166 * x167) + x169);
            Val x171 = ((Val(1) - x170) * (Val(1) - x168));
            NondetRegStruct x172 = exec_Reg(ctx, ((x170 * x168) + x171), x165);
            return x172;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x173 = x163[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x174 = ((Val(1) - x173) * (Val(1) - x102));
  Val x175 = ((x173 * x102) + x174);
  Val x176 = ((Val(1) - x175) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x177 = x163[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x178 = ((Val(1) - x177) * (Val(1) - x103));
  Val x179 = ((x177 * x103) + x178);
  Val x180 = ((Val(1) - x179) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x181 = x163[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x182 = ((Val(1) - x181) * (Val(1) - x104));
  Val x183 = ((x181 * x104) + x182);
  Val x184 = ((Val(1) - x183) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x185 = x163[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x186 = ((Val(1) - x185) * (Val(1) - x105));
  Val x187 = ((x185 * x105) + x186);
  Val x188 = ((Val(1) - x187) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x189 = x163[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x190 = ((Val(1) - x189) * (Val(1) - x106));
  Val x191 = ((x189 * x106) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x193 = x163[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x194 = ((Val(1) - x193) * (Val(1) - x107));
  Val x195 = ((x193 * x107) + x194);
  Val x196 = ((Val(1) - x195) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x197 = x163[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x198 = ((Val(1) - x197) * (Val(1) - x108));
  Val x199 = ((x197 * x108) + x198);
  Val x200 = ((Val(1) - x199) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x201 = x163[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x202 = ((Val(1) - x201) * (Val(1) - x109));
  Val x203 = ((x201 * x109) + x202);
  Val x204 = ((Val(1) - x203) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x205 = x163[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x206 = ((Val(1) - x205) * (Val(1) - x110));
  Val x207 = ((x205 * x110) + x206);
  Val x208 = ((Val(1) - x207) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x209 = x163[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x210 = ((Val(1) - x209) * (Val(1) - x111));
  Val x211 = ((x209 * x111) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x213 = x163[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x214 = ((Val(1) - x213) * (Val(1) - x112));
  Val x215 = ((x213 * x112) + x214);
  Val x216 = ((Val(1) - x215) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x217 = x163[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x218 = ((Val(1) - x217) * (Val(1) - x113));
  Val x219 = ((x217 * x113) + x218);
  Val x220 = ((Val(1) - x219) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x221 = x163[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x222 = ((Val(1) - x221) * (Val(1) - x114));
  Val x223 = ((x221 * x114) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x225 = x163[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x226 = ((Val(1) - x225) * (Val(1) - x115));
  Val x227 = ((x225 * x115) + x226);
  Val x228 = ((Val(1) - x227) * (Val(1) - x147));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x229 = x163[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x230 = ((Val(1) - x229) * (Val(1) - x116));
  Val x231 = ((x229 * x116) + x230);
  Val x232 = ((Val(1) - x231) * (Val(1) - x148));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x233 = x163[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x234 = ((Val(1) - x233) * (Val(1) - x117));
  Val x235 = ((x233 * x117) + x234);
  Val x236 = ((Val(1) - x235) * (Val(1) - x149));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x237 = x163[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x238 = ((Val(1) - x237) * (Val(1) - x118));
  Val x239 = ((x237 * x118) + x238);
  Val x240 = ((Val(1) - x239) * (Val(1) - x150));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x241 = x163[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x242 = ((Val(1) - x241) * (Val(1) - x119));
  Val x243 = ((x241 * x119) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x151));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x245 = x163[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x246 = ((Val(1) - x245) * (Val(1) - x120));
  Val x247 = ((x245 * x120) + x246);
  Val x248 = ((Val(1) - x247) * (Val(1) - x152));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x249 = x163[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x250 = ((Val(1) - x249) * (Val(1) - x121));
  Val x251 = ((x249 * x121) + x250);
  Val x252 = ((Val(1) - x251) * (Val(1) - x153));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x253 = x163[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x254 = ((Val(1) - x253) * (Val(1) - x122));
  Val x255 = ((x253 * x122) + x254);
  Val x256 = ((Val(1) - x255) * (Val(1) - x154));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x257 = x163[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x258 = ((Val(1) - x257) * (Val(1) - x123));
  Val x259 = ((x257 * x123) + x258);
  Val x260 = ((Val(1) - x259) * (Val(1) - x155));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x261 = (((x179 * x135) + x180) * Val(2));
  Val x262 = (((x183 * x136) + x184) * Val(4));
  Val x263 = (((x187 * x137) + x188) * Val(8));
  Val x264 = (((x191 * x138) + x192) * Val(16));
  Val x265 = (((x195 * x139) + x196) * Val(32));
  Val x266 = (((x199 * x140) + x200) * Val(64));
  Val x267 = (((x203 * x141) + x204) * Val(128));
  Val x268 = (((x207 * x142) + x208) * Val(256));
  Val x269 = (((x211 * x143) + x212) * Val(512));
  Val x270 = (((x215 * x144) + x216) * Val(1024));
  Val x271 = (((x219 * x145) + x220) * Val(2048));
  Val x272 = (((x223 * x146) + x224) * Val(4096));
  Val x273 = (((x227 * x147) + x228) * Val(8192));
  Val x274 = (((x231 * x148) + x232) * Val(16384));
  Val x275 = (((x235 * x149) + x236) * Val(32768));
  Val x276 = (((x239 * x150) + x240) * Val(65536));
  Val x277 = (((x243 * x151) + x244) * Val(131072));
  Val x278 = (((x247 * x152) + x248) * Val(262144));
  Val x279 = (((x251 * x153) + x252) * Val(524288));
  Val x280 = (((x255 * x154) + x256) * Val(1048576));
  Val x281 = (((x259 * x155) + x260) * Val(2097152));
  Val x282 = (((x175 * x134) + x176) + x261);
  Val x283 = (((x282 + x262) + x263) + x264);
  Val x284 = (((x283 + x265) + x266) + x267);
  Val x285 = (((x284 + x268) + x269) + x270);
  Val x286 = (((x285 + x271) + x272) + x273);
  Val x287 = (((x286 + x274) + x275) + x276);
  Val x288 = (((x287 + x277) + x278) + x279);
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:82)
  FromBits_22_Struct x289 = FromBits_22_Struct{._super = ((x288 + x280) + x281)};
  return x289;
}
RetTupleStruct execXor5wordsMinor0_4_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<Xor5wordsMinor0_4_Layout> layout1) {
  // xor5words_minor0(zirgen/circuit/keccak/keccak.zir:200)
  FromBits_22_Struct x2 = execXor5wordsResult_4__0_(ctx, arg0, LAYOUT_LOOKUP(layout1, _0));
  NondetRegStruct x3 = exec_Reg(ctx, x2._super, LAYOUT_LOOKUP(layout1, result));
  // xor5words_minor0(zirgen/circuit/keccak/keccak.zir:202)
  Val22Array x4 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x5 =
      exec_RetTuple(ctx,
                    x4,
                    x4,
                    x4,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),    Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),    Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x3._super, Val(0)},
                    x4,
                    x4,
                    Val(1),
                    Val(4),
                    arg0.rnd._super,
                    arg0.blk._super,
                    arg0.midx._super,
                    LAYOUT_LOOKUP(layout1, _super));
  return x5;
}
FromBits_21_Struct execXor5wordsResult_4__1_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_4__1_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x2 = arg0.arrA[13]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_21_Struct x3 = exec_ToBits_21_(ctx, x2, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct21Array x4 = x3._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x5 = (x4[1]._super * Val(2));
  Val x6 = (x4[2]._super * Val(4));
  Val x7 = (x4[3]._super * Val(8));
  Val x8 = (x4[4]._super * Val(16));
  Val x9 = (x4[5]._super * Val(32));
  Val x10 = (x4[6]._super * Val(64));
  Val x11 = (x4[7]._super * Val(128));
  Val x12 = (x4[8]._super * Val(256));
  Val x13 = (x4[9]._super * Val(512));
  Val x14 = (x4[10]._super * Val(1024));
  Val x15 = (x4[11]._super * Val(2048));
  Val x16 = (x4[12]._super * Val(4096));
  Val x17 = (x4[13]._super * Val(8192));
  Val x18 = (x4[14]._super * Val(16384));
  Val x19 = (x4[15]._super * Val(32768));
  Val x20 = (x4[16]._super * Val(65536));
  Val x21 = (x4[17]._super * Val(131072));
  Val x22 = (x4[18]._super * Val(262144));
  Val x23 = (x4[19]._super * Val(524288));
  Val x24 = (x4[20]._super * Val(1048576));
  Val x25 = (x4[0]._super + x5);
  Val x26 = (((x25 + x6) + x7) + x8);
  Val x27 = (((x26 + x9) + x10) + x11);
  Val x28 = (((x27 + x12) + x13) + x14);
  Val x29 = (((x28 + x15) + x16) + x17);
  Val x30 = (((x29 + x18) + x19) + x20);
  Val x31 = (((x30 + x21) + x22) + x23);
  EQZ(((x31 + x24) - x2), "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x32 = arg0.arrB;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x33 = x32[6]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_21_Struct x34 = exec_ToBits_21_(ctx, x33, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct21Array x35 = x34._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x36 = (x35[1]._super * Val(2));
  Val x37 = (x35[2]._super * Val(4));
  Val x38 = (x35[3]._super * Val(8));
  Val x39 = (x35[4]._super * Val(16));
  Val x40 = (x35[5]._super * Val(32));
  Val x41 = (x35[6]._super * Val(64));
  Val x42 = (x35[7]._super * Val(128));
  Val x43 = (x35[8]._super * Val(256));
  Val x44 = (x35[9]._super * Val(512));
  Val x45 = (x35[10]._super * Val(1024));
  Val x46 = (x35[11]._super * Val(2048));
  Val x47 = (x35[12]._super * Val(4096));
  Val x48 = (x35[13]._super * Val(8192));
  Val x49 = (x35[14]._super * Val(16384));
  Val x50 = (x35[15]._super * Val(32768));
  Val x51 = (x35[16]._super * Val(65536));
  Val x52 = (x35[17]._super * Val(131072));
  Val x53 = (x35[18]._super * Val(262144));
  Val x54 = (x35[19]._super * Val(524288));
  Val x55 = (x35[20]._super * Val(1048576));
  Val x56 = (x35[0]._super + x36);
  Val x57 = (((x56 + x37) + x38) + x39);
  Val x58 = (((x57 + x40) + x41) + x42);
  Val x59 = (((x58 + x43) + x44) + x45);
  Val x60 = (((x59 + x46) + x47) + x48);
  Val x61 = (((x60 + x49) + x50) + x51);
  Val x62 = (((x61 + x52) + x53) + x54);
  EQZ(((x62 + x55) - x33), "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x63 = x32[21]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_21_Struct x64 = exec_ToBits_21_(ctx, x63, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct21Array x65 = x64._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x66 = (x65[1]._super * Val(2));
  Val x67 = (x65[2]._super * Val(4));
  Val x68 = (x65[3]._super * Val(8));
  Val x69 = (x65[4]._super * Val(16));
  Val x70 = (x65[5]._super * Val(32));
  Val x71 = (x65[6]._super * Val(64));
  Val x72 = (x65[7]._super * Val(128));
  Val x73 = (x65[8]._super * Val(256));
  Val x74 = (x65[9]._super * Val(512));
  Val x75 = (x65[10]._super * Val(1024));
  Val x76 = (x65[11]._super * Val(2048));
  Val x77 = (x65[12]._super * Val(4096));
  Val x78 = (x65[13]._super * Val(8192));
  Val x79 = (x65[14]._super * Val(16384));
  Val x80 = (x65[15]._super * Val(32768));
  Val x81 = (x65[16]._super * Val(65536));
  Val x82 = (x65[17]._super * Val(131072));
  Val x83 = (x65[18]._super * Val(262144));
  Val x84 = (x65[19]._super * Val(524288));
  Val x85 = (x65[20]._super * Val(1048576));
  Val x86 = (x65[0]._super + x66);
  Val x87 = (((x86 + x67) + x68) + x69);
  Val x88 = (((x87 + x70) + x71) + x72);
  Val x89 = (((x88 + x73) + x74) + x75);
  Val x90 = (((x89 + x76) + x77) + x78);
  Val x91 = (((x90 + x79) + x80) + x81);
  Val x92 = (((x91 + x82) + x83) + x84);
  EQZ(((x92 + x85) - x63), "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x93 = arg0.arrC[14]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_21_Struct x94 = exec_ToBits_21_(ctx, x93, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct21Array x95 = x94._super;
  Val x96 = x95[0]._super;
  Val x97 = x95[1]._super;
  Val x98 = x95[2]._super;
  Val x99 = x95[3]._super;
  Val x100 = x95[4]._super;
  Val x101 = x95[5]._super;
  Val x102 = x95[6]._super;
  Val x103 = x95[7]._super;
  Val x104 = x95[8]._super;
  Val x105 = x95[9]._super;
  Val x106 = x95[10]._super;
  Val x107 = x95[11]._super;
  Val x108 = x95[12]._super;
  Val x109 = x95[13]._super;
  Val x110 = x95[14]._super;
  Val x111 = x95[15]._super;
  Val x112 = x95[16]._super;
  Val x113 = x95[17]._super;
  Val x114 = x95[18]._super;
  Val x115 = x95[19]._super;
  Val x116 = x95[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x117 = (((x96 + (x97 * Val(2))) + (x98 * Val(4))) + (x99 * Val(8)));
  Val x118 = (((x117 + (x100 * Val(16))) + (x101 * Val(32))) + (x102 * Val(64)));
  Val x119 = (((x118 + (x103 * Val(128))) + (x104 * Val(256))) + (x105 * Val(512)));
  Val x120 = (((x119 + (x106 * Val(1024))) + (x107 * Val(2048))) + (x108 * Val(4096)));
  Val x121 = (((x120 + (x109 * Val(8192))) + (x110 * Val(16384))) + (x111 * Val(32768)));
  Val x122 = (((x121 + (x112 * Val(65536))) + (x113 * Val(131072))) + (x114 * Val(262144)));
  Val x123 = (((x122 + (x115 * Val(524288))) + (x116 * Val(1048576))) - x93);
  EQZ(x123, "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x124 = arg0.arrD[7]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_21_Struct x125 = exec_ToBits_21_(ctx, x124, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x126 = x125._super;
  Val x127 = x126[0]._super;
  Val x128 = x126[1]._super;
  Val x129 = x126[2]._super;
  Val x130 = x126[3]._super;
  Val x131 = x126[4]._super;
  Val x132 = x126[5]._super;
  Val x133 = x126[6]._super;
  Val x134 = x126[7]._super;
  Val x135 = x126[8]._super;
  Val x136 = x126[9]._super;
  Val x137 = x126[10]._super;
  Val x138 = x126[11]._super;
  Val x139 = x126[12]._super;
  Val x140 = x126[13]._super;
  Val x141 = x126[14]._super;
  Val x142 = x126[15]._super;
  Val x143 = x126[16]._super;
  Val x144 = x126[17]._super;
  Val x145 = x126[18]._super;
  Val x146 = x126[19]._super;
  Val x147 = x126[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x148 = (((x127 + (x128 * Val(2))) + (x129 * Val(4))) + (x130 * Val(8)));
  Val x149 = (((x148 + (x131 * Val(16))) + (x132 * Val(32))) + (x133 * Val(64)));
  Val x150 = (((x149 + (x134 * Val(128))) + (x135 * Val(256))) + (x136 * Val(512)));
  Val x151 = (((x150 + (x137 * Val(1024))) + (x138 * Val(2048))) + (x139 * Val(4096)));
  Val x152 = (((x151 + (x140 * Val(8192))) + (x141 * Val(16384))) + (x142 * Val(32768)));
  Val x153 = (((x152 + (x143 * Val(65536))) + (x144 * Val(131072))) + (x145 * Val(262144)));
  Val x154 = (((x153 + (x146 * Val(524288))) + (x147 * Val(1048576))) - x124);
  EQZ(x154, "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct21Array x155 =
      map(Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                     Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                     Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val21Array::value_type x156,
                            BoundLayout<NondetRegLayout21LayoutArray::value_type> x157) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x158 = x4[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x159 = x35[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x160 = x65[to_size_t(x156)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x161 = ((Val(1) - x158) * (Val(1) - x159));
            Val x162 = ((x158 * x159) + x161);
            Val x163 = ((Val(1) - x162) * (Val(1) - x160));
            NondetRegStruct x164 = exec_Reg(ctx, ((x162 * x160) + x163), x157);
            return x164;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x165 = x155[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x166 = ((Val(1) - x165) * (Val(1) - x96));
  Val x167 = ((x165 * x96) + x166);
  Val x168 = ((Val(1) - x167) * (Val(1) - x127));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x169 = x155[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x170 = ((Val(1) - x169) * (Val(1) - x97));
  Val x171 = ((x169 * x97) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x128));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x173 = x155[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x174 = ((Val(1) - x173) * (Val(1) - x98));
  Val x175 = ((x173 * x98) + x174);
  Val x176 = ((Val(1) - x175) * (Val(1) - x129));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x177 = x155[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x178 = ((Val(1) - x177) * (Val(1) - x99));
  Val x179 = ((x177 * x99) + x178);
  Val x180 = ((Val(1) - x179) * (Val(1) - x130));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x181 = x155[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x182 = ((Val(1) - x181) * (Val(1) - x100));
  Val x183 = ((x181 * x100) + x182);
  Val x184 = ((Val(1) - x183) * (Val(1) - x131));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x185 = x155[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x186 = ((Val(1) - x185) * (Val(1) - x101));
  Val x187 = ((x185 * x101) + x186);
  Val x188 = ((Val(1) - x187) * (Val(1) - x132));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x189 = x155[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x190 = ((Val(1) - x189) * (Val(1) - x102));
  Val x191 = ((x189 * x102) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x133));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x193 = x155[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x194 = ((Val(1) - x193) * (Val(1) - x103));
  Val x195 = ((x193 * x103) + x194);
  Val x196 = ((Val(1) - x195) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x197 = x155[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x198 = ((Val(1) - x197) * (Val(1) - x104));
  Val x199 = ((x197 * x104) + x198);
  Val x200 = ((Val(1) - x199) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x201 = x155[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x202 = ((Val(1) - x201) * (Val(1) - x105));
  Val x203 = ((x201 * x105) + x202);
  Val x204 = ((Val(1) - x203) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x205 = x155[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x206 = ((Val(1) - x205) * (Val(1) - x106));
  Val x207 = ((x205 * x106) + x206);
  Val x208 = ((Val(1) - x207) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x209 = x155[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x210 = ((Val(1) - x209) * (Val(1) - x107));
  Val x211 = ((x209 * x107) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x213 = x155[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x214 = ((Val(1) - x213) * (Val(1) - x108));
  Val x215 = ((x213 * x108) + x214);
  Val x216 = ((Val(1) - x215) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x217 = x155[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x218 = ((Val(1) - x217) * (Val(1) - x109));
  Val x219 = ((x217 * x109) + x218);
  Val x220 = ((Val(1) - x219) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x221 = x155[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x222 = ((Val(1) - x221) * (Val(1) - x110));
  Val x223 = ((x221 * x110) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x225 = x155[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x226 = ((Val(1) - x225) * (Val(1) - x111));
  Val x227 = ((x225 * x111) + x226);
  Val x228 = ((Val(1) - x227) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x229 = x155[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x230 = ((Val(1) - x229) * (Val(1) - x112));
  Val x231 = ((x229 * x112) + x230);
  Val x232 = ((Val(1) - x231) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x233 = x155[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x234 = ((Val(1) - x233) * (Val(1) - x113));
  Val x235 = ((x233 * x113) + x234);
  Val x236 = ((Val(1) - x235) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x237 = x155[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x238 = ((Val(1) - x237) * (Val(1) - x114));
  Val x239 = ((x237 * x114) + x238);
  Val x240 = ((Val(1) - x239) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x241 = x155[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x242 = ((Val(1) - x241) * (Val(1) - x115));
  Val x243 = ((x241 * x115) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x245 = x155[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x246 = ((Val(1) - x245) * (Val(1) - x116));
  Val x247 = ((x245 * x116) + x246);
  Val x248 = ((Val(1) - x247) * (Val(1) - x147));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x249 = (((x171 * x128) + x172) * Val(2));
  Val x250 = (((x175 * x129) + x176) * Val(4));
  Val x251 = (((x179 * x130) + x180) * Val(8));
  Val x252 = (((x183 * x131) + x184) * Val(16));
  Val x253 = (((x187 * x132) + x188) * Val(32));
  Val x254 = (((x191 * x133) + x192) * Val(64));
  Val x255 = (((x195 * x134) + x196) * Val(128));
  Val x256 = (((x199 * x135) + x200) * Val(256));
  Val x257 = (((x203 * x136) + x204) * Val(512));
  Val x258 = (((x207 * x137) + x208) * Val(1024));
  Val x259 = (((x211 * x138) + x212) * Val(2048));
  Val x260 = (((x215 * x139) + x216) * Val(4096));
  Val x261 = (((x219 * x140) + x220) * Val(8192));
  Val x262 = (((x223 * x141) + x224) * Val(16384));
  Val x263 = (((x227 * x142) + x228) * Val(32768));
  Val x264 = (((x231 * x143) + x232) * Val(65536));
  Val x265 = (((x235 * x144) + x236) * Val(131072));
  Val x266 = (((x239 * x145) + x240) * Val(262144));
  Val x267 = (((x243 * x146) + x244) * Val(524288));
  Val x268 = (((x247 * x147) + x248) * Val(1048576));
  Val x269 = (((x167 * x127) + x168) + x249);
  Val x270 = (((x269 + x250) + x251) + x252);
  Val x271 = (((x270 + x253) + x254) + x255);
  Val x272 = (((x271 + x256) + x257) + x258);
  Val x273 = (((x272 + x259) + x260) + x261);
  Val x274 = (((x273 + x262) + x263) + x264);
  Val x275 = (((x274 + x265) + x266) + x267);
  return FromBits_21_Struct{._super = (x275 + x268)};
}
RetTupleStruct execXor5wordsMinor1_4_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor1_4_Layout> layout2) {
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:207)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:208)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:209)
  FromBits_21_Struct x5 = execXor5wordsResult_4__1_(ctx, x4, LAYOUT_LOOKUP(layout2, _0));
  NondetRegStruct x6 = exec_Reg(ctx, x5._super, LAYOUT_LOOKUP(layout2, result));
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:207)
  Val x7 = x3.arrD[22]._super;
  // xor5words_minor1(zirgen/circuit/keccak/keccak.zir:212)
  Val22Array x8 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x9 =
      exec_RetTuple(ctx,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x7},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x6._super},
                    x8,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x8,
                    x8,
                    Val(2),
                    Val(4),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x9;
}
FromBits_21_Struct execXor5wordsResult_4__2_(ExecContext& ctx,
                                             RetTupleStruct arg0,
                                             BoundLayout<Xor5wordsResult_4__2_Layout> layout1) {
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x2 = arg0.arrA[14]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
  ToBits_21_Struct x3 = exec_ToBits_21_(ctx, x2, LAYOUT_LOOKUP(layout1, unpackA));
  NondetRegStruct21Array x4 = x3._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:166)
  Val x5 = (x4[1]._super * Val(2));
  Val x6 = (x4[2]._super * Val(4));
  Val x7 = (x4[3]._super * Val(8));
  Val x8 = (x4[4]._super * Val(16));
  Val x9 = (x4[5]._super * Val(32));
  Val x10 = (x4[6]._super * Val(64));
  Val x11 = (x4[7]._super * Val(128));
  Val x12 = (x4[8]._super * Val(256));
  Val x13 = (x4[9]._super * Val(512));
  Val x14 = (x4[10]._super * Val(1024));
  Val x15 = (x4[11]._super * Val(2048));
  Val x16 = (x4[12]._super * Val(4096));
  Val x17 = (x4[13]._super * Val(8192));
  Val x18 = (x4[14]._super * Val(16384));
  Val x19 = (x4[15]._super * Val(32768));
  Val x20 = (x4[16]._super * Val(65536));
  Val x21 = (x4[17]._super * Val(131072));
  Val x22 = (x4[18]._super * Val(262144));
  Val x23 = (x4[19]._super * Val(524288));
  Val x24 = (x4[20]._super * Val(1048576));
  Val x25 = (x4[0]._super + x5);
  Val x26 = (((x25 + x6) + x7) + x8);
  Val x27 = (((x26 + x9) + x10) + x11);
  Val x28 = (((x27 + x12) + x13) + x14);
  Val x29 = (((x28 + x15) + x16) + x17);
  Val x30 = (((x29 + x18) + x19) + x20);
  Val x31 = (((x30 + x21) + x22) + x23);
  EQZ(((x31 + x24) - x2), "xor5words_result(zirgen/circuit/keccak/keccak.zir:166)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:169)
  Val x32 = arg0.arrB[7]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
  ToBits_21_Struct x33 = exec_ToBits_21_(ctx, x32, LAYOUT_LOOKUP(layout1, unpackB));
  NondetRegStruct21Array x34 = x33._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:172)
  Val x35 = (x34[1]._super * Val(2));
  Val x36 = (x34[2]._super * Val(4));
  Val x37 = (x34[3]._super * Val(8));
  Val x38 = (x34[4]._super * Val(16));
  Val x39 = (x34[5]._super * Val(32));
  Val x40 = (x34[6]._super * Val(64));
  Val x41 = (x34[7]._super * Val(128));
  Val x42 = (x34[8]._super * Val(256));
  Val x43 = (x34[9]._super * Val(512));
  Val x44 = (x34[10]._super * Val(1024));
  Val x45 = (x34[11]._super * Val(2048));
  Val x46 = (x34[12]._super * Val(4096));
  Val x47 = (x34[13]._super * Val(8192));
  Val x48 = (x34[14]._super * Val(16384));
  Val x49 = (x34[15]._super * Val(32768));
  Val x50 = (x34[16]._super * Val(65536));
  Val x51 = (x34[17]._super * Val(131072));
  Val x52 = (x34[18]._super * Val(262144));
  Val x53 = (x34[19]._super * Val(524288));
  Val x54 = (x34[20]._super * Val(1048576));
  Val x55 = (x34[0]._super + x35);
  Val x56 = (((x55 + x36) + x37) + x38);
  Val x57 = (((x56 + x39) + x40) + x41);
  Val x58 = (((x57 + x42) + x43) + x44);
  Val x59 = (((x58 + x45) + x46) + x47);
  Val x60 = (((x59 + x48) + x49) + x50);
  Val x61 = (((x60 + x51) + x52) + x53);
  EQZ(((x61 + x54) - x32), "xor5words_result(zirgen/circuit/keccak/keccak.zir:172)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  NondetRegStruct22Array x62 = arg0.arrC;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:175)
  Val x63 = x62[0]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
  ToBits_21_Struct x64 = exec_ToBits_21_(ctx, x63, LAYOUT_LOOKUP(layout1, unpackC));
  NondetRegStruct21Array x65 = x64._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:178)
  Val x66 = (x65[1]._super * Val(2));
  Val x67 = (x65[2]._super * Val(4));
  Val x68 = (x65[3]._super * Val(8));
  Val x69 = (x65[4]._super * Val(16));
  Val x70 = (x65[5]._super * Val(32));
  Val x71 = (x65[6]._super * Val(64));
  Val x72 = (x65[7]._super * Val(128));
  Val x73 = (x65[8]._super * Val(256));
  Val x74 = (x65[9]._super * Val(512));
  Val x75 = (x65[10]._super * Val(1024));
  Val x76 = (x65[11]._super * Val(2048));
  Val x77 = (x65[12]._super * Val(4096));
  Val x78 = (x65[13]._super * Val(8192));
  Val x79 = (x65[14]._super * Val(16384));
  Val x80 = (x65[15]._super * Val(32768));
  Val x81 = (x65[16]._super * Val(65536));
  Val x82 = (x65[17]._super * Val(131072));
  Val x83 = (x65[18]._super * Val(262144));
  Val x84 = (x65[19]._super * Val(524288));
  Val x85 = (x65[20]._super * Val(1048576));
  Val x86 = (x65[0]._super + x66);
  Val x87 = (((x86 + x67) + x68) + x69);
  Val x88 = (((x87 + x70) + x71) + x72);
  Val x89 = (((x88 + x73) + x74) + x75);
  Val x90 = (((x89 + x76) + x77) + x78);
  Val x91 = (((x90 + x79) + x80) + x81);
  Val x92 = (((x91 + x82) + x83) + x84);
  EQZ(((x92 + x85) - x63), "xor5words_result(zirgen/circuit/keccak/keccak.zir:178)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:161)
  Val x93 = x62[15]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:181)
  ToBits_21_Struct x94 = exec_ToBits_21_(ctx, x93, LAYOUT_LOOKUP(layout1, unpackD));
  NondetRegStruct21Array x95 = x94._super;
  Val x96 = x95[0]._super;
  Val x97 = x95[1]._super;
  Val x98 = x95[2]._super;
  Val x99 = x95[3]._super;
  Val x100 = x95[4]._super;
  Val x101 = x95[5]._super;
  Val x102 = x95[6]._super;
  Val x103 = x95[7]._super;
  Val x104 = x95[8]._super;
  Val x105 = x95[9]._super;
  Val x106 = x95[10]._super;
  Val x107 = x95[11]._super;
  Val x108 = x95[12]._super;
  Val x109 = x95[13]._super;
  Val x110 = x95[14]._super;
  Val x111 = x95[15]._super;
  Val x112 = x95[16]._super;
  Val x113 = x95[17]._super;
  Val x114 = x95[18]._super;
  Val x115 = x95[19]._super;
  Val x116 = x95[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:182)
  Val x117 = (((x96 + (x97 * Val(2))) + (x98 * Val(4))) + (x99 * Val(8)));
  Val x118 = (((x117 + (x100 * Val(16))) + (x101 * Val(32))) + (x102 * Val(64)));
  Val x119 = (((x118 + (x103 * Val(128))) + (x104 * Val(256))) + (x105 * Val(512)));
  Val x120 = (((x119 + (x106 * Val(1024))) + (x107 * Val(2048))) + (x108 * Val(4096)));
  Val x121 = (((x120 + (x109 * Val(8192))) + (x110 * Val(16384))) + (x111 * Val(32768)));
  Val x122 = (((x121 + (x112 * Val(65536))) + (x113 * Val(131072))) + (x114 * Val(262144)));
  Val x123 = (((x122 + (x115 * Val(524288))) + (x116 * Val(1048576))) - x93);
  EQZ(x123, "xor5words_result(zirgen/circuit/keccak/keccak.zir:182)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:185)
  Val x124 = arg0.arrD[8]._super;
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:187)
  ToBits_21_Struct x125 = exec_ToBits_21_(ctx, x124, LAYOUT_LOOKUP(layout1, unpackE));
  NondetRegStruct21Array x126 = x125._super;
  Val x127 = x126[0]._super;
  Val x128 = x126[1]._super;
  Val x129 = x126[2]._super;
  Val x130 = x126[3]._super;
  Val x131 = x126[4]._super;
  Val x132 = x126[5]._super;
  Val x133 = x126[6]._super;
  Val x134 = x126[7]._super;
  Val x135 = x126[8]._super;
  Val x136 = x126[9]._super;
  Val x137 = x126[10]._super;
  Val x138 = x126[11]._super;
  Val x139 = x126[12]._super;
  Val x140 = x126[13]._super;
  Val x141 = x126[14]._super;
  Val x142 = x126[15]._super;
  Val x143 = x126[16]._super;
  Val x144 = x126[17]._super;
  Val x145 = x126[18]._super;
  Val x146 = x126[19]._super;
  Val x147 = x126[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:188)
  Val x148 = (((x127 + (x128 * Val(2))) + (x129 * Val(4))) + (x130 * Val(8)));
  Val x149 = (((x148 + (x131 * Val(16))) + (x132 * Val(32))) + (x133 * Val(64)));
  Val x150 = (((x149 + (x134 * Val(128))) + (x135 * Val(256))) + (x136 * Val(512)));
  Val x151 = (((x150 + (x137 * Val(1024))) + (x138 * Val(2048))) + (x139 * Val(4096)));
  Val x152 = (((x151 + (x140 * Val(8192))) + (x141 * Val(16384))) + (x142 * Val(32768)));
  Val x153 = (((x152 + (x143 * Val(65536))) + (x144 * Val(131072))) + (x145 * Val(262144)));
  Val x154 = (((x153 + (x146 * Val(524288))) + (x147 * Val(1048576))) - x124);
  EQZ(x154, "xor5words_result(zirgen/circuit/keccak/keccak.zir:188)");
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  NondetRegStruct21Array x155 =
      map(Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                     Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                     Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
          LAYOUT_LOOKUP(layout1, xorAbc),
          std::function([&](Val21Array::value_type x156,
                            BoundLayout<NondetRegLayout21LayoutArray::value_type> x157) {
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:165)
            Val x158 = x4[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:171)
            Val x159 = x34[to_size_t(x156)]._super;
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:177)
            Val x160 = x65[to_size_t(x156)]._super;
            // xor3(zirgen/circuit/keccak/keccak.zir:110)
            // xor5words_result(zirgen/circuit/keccak/keccak.zir:191)
            Val x161 = ((Val(1) - x158) * (Val(1) - x159));
            Val x162 = ((x158 * x159) + x161);
            Val x163 = ((Val(1) - x162) * (Val(1) - x160));
            NondetRegStruct x164 = exec_Reg(ctx, ((x162 * x160) + x163), x157);
            return x164;
          }));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x165 = x155[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x166 = ((Val(1) - x165) * (Val(1) - x96));
  Val x167 = ((x165 * x96) + x166);
  Val x168 = ((Val(1) - x167) * (Val(1) - x127));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x169 = x155[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x170 = ((Val(1) - x169) * (Val(1) - x97));
  Val x171 = ((x169 * x97) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x128));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x173 = x155[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x174 = ((Val(1) - x173) * (Val(1) - x98));
  Val x175 = ((x173 * x98) + x174);
  Val x176 = ((Val(1) - x175) * (Val(1) - x129));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x177 = x155[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x178 = ((Val(1) - x177) * (Val(1) - x99));
  Val x179 = ((x177 * x99) + x178);
  Val x180 = ((Val(1) - x179) * (Val(1) - x130));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x181 = x155[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x182 = ((Val(1) - x181) * (Val(1) - x100));
  Val x183 = ((x181 * x100) + x182);
  Val x184 = ((Val(1) - x183) * (Val(1) - x131));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x185 = x155[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x186 = ((Val(1) - x185) * (Val(1) - x101));
  Val x187 = ((x185 * x101) + x186);
  Val x188 = ((Val(1) - x187) * (Val(1) - x132));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x189 = x155[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x190 = ((Val(1) - x189) * (Val(1) - x102));
  Val x191 = ((x189 * x102) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x133));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x193 = x155[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x194 = ((Val(1) - x193) * (Val(1) - x103));
  Val x195 = ((x193 * x103) + x194);
  Val x196 = ((Val(1) - x195) * (Val(1) - x134));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x197 = x155[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x198 = ((Val(1) - x197) * (Val(1) - x104));
  Val x199 = ((x197 * x104) + x198);
  Val x200 = ((Val(1) - x199) * (Val(1) - x135));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x201 = x155[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x202 = ((Val(1) - x201) * (Val(1) - x105));
  Val x203 = ((x201 * x105) + x202);
  Val x204 = ((Val(1) - x203) * (Val(1) - x136));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x205 = x155[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x206 = ((Val(1) - x205) * (Val(1) - x106));
  Val x207 = ((x205 * x106) + x206);
  Val x208 = ((Val(1) - x207) * (Val(1) - x137));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x209 = x155[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x210 = ((Val(1) - x209) * (Val(1) - x107));
  Val x211 = ((x209 * x107) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x138));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x213 = x155[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x214 = ((Val(1) - x213) * (Val(1) - x108));
  Val x215 = ((x213 * x108) + x214);
  Val x216 = ((Val(1) - x215) * (Val(1) - x139));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x217 = x155[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x218 = ((Val(1) - x217) * (Val(1) - x109));
  Val x219 = ((x217 * x109) + x218);
  Val x220 = ((Val(1) - x219) * (Val(1) - x140));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x221 = x155[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x222 = ((Val(1) - x221) * (Val(1) - x110));
  Val x223 = ((x221 * x110) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x141));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x225 = x155[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x226 = ((Val(1) - x225) * (Val(1) - x111));
  Val x227 = ((x225 * x111) + x226);
  Val x228 = ((Val(1) - x227) * (Val(1) - x142));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x229 = x155[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x230 = ((Val(1) - x229) * (Val(1) - x112));
  Val x231 = ((x229 * x112) + x230);
  Val x232 = ((Val(1) - x231) * (Val(1) - x143));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x233 = x155[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x234 = ((Val(1) - x233) * (Val(1) - x113));
  Val x235 = ((x233 * x113) + x234);
  Val x236 = ((Val(1) - x235) * (Val(1) - x144));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x237 = x155[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x238 = ((Val(1) - x237) * (Val(1) - x114));
  Val x239 = ((x237 * x114) + x238);
  Val x240 = ((Val(1) - x239) * (Val(1) - x145));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x241 = x155[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x242 = ((Val(1) - x241) * (Val(1) - x115));
  Val x243 = ((x241 * x115) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x146));
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:190)
  Val x245 = x155[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:194)
  Val x246 = ((Val(1) - x245) * (Val(1) - x116));
  Val x247 = ((x245 * x116) + x246);
  Val x248 = ((Val(1) - x247) * (Val(1) - x147));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // xor5words_result(zirgen/circuit/keccak/keccak.zir:196)
  Val x249 = (((x171 * x128) + x172) * Val(2));
  Val x250 = (((x175 * x129) + x176) * Val(4));
  Val x251 = (((x179 * x130) + x180) * Val(8));
  Val x252 = (((x183 * x131) + x184) * Val(16));
  Val x253 = (((x187 * x132) + x188) * Val(32));
  Val x254 = (((x191 * x133) + x192) * Val(64));
  Val x255 = (((x195 * x134) + x196) * Val(128));
  Val x256 = (((x199 * x135) + x200) * Val(256));
  Val x257 = (((x203 * x136) + x204) * Val(512));
  Val x258 = (((x207 * x137) + x208) * Val(1024));
  Val x259 = (((x211 * x138) + x212) * Val(2048));
  Val x260 = (((x215 * x139) + x216) * Val(4096));
  Val x261 = (((x219 * x140) + x220) * Val(8192));
  Val x262 = (((x223 * x141) + x224) * Val(16384));
  Val x263 = (((x227 * x142) + x228) * Val(32768));
  Val x264 = (((x231 * x143) + x232) * Val(65536));
  Val x265 = (((x235 * x144) + x236) * Val(131072));
  Val x266 = (((x239 * x145) + x240) * Val(262144));
  Val x267 = (((x243 * x146) + x244) * Val(524288));
  Val x268 = (((x247 * x147) + x248) * Val(1048576));
  Val x269 = (((x167 * x127) + x168) + x249);
  Val x270 = (((x269 + x250) + x251) + x252);
  Val x271 = (((x270 + x253) + x254) + x255);
  Val x272 = (((x271 + x256) + x257) + x258);
  Val x273 = (((x272 + x259) + x260) + x261);
  Val x274 = (((x273 + x262) + x263) + x264);
  Val x275 = (((x274 + x265) + x266) + x267);
  return FromBits_21_Struct{._super = (x275 + x268)};
}
RetTupleStruct execXor5wordsMinor2_4_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor2_4_Layout> layout2) {
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:217)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:218)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:219)
  FromBits_21_Struct x5 = execXor5wordsResult_4__2_(ctx, x4, LAYOUT_LOOKUP(layout2, _0));
  NondetRegStruct x6 = exec_Reg(ctx, x5._super, LAYOUT_LOOKUP(layout2, result));
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:217)
  Val x7 = x3.arrA[21]._super;
  Val x8 = x3.arrB[21]._super;
  // xor5words_minor2(zirgen/circuit/keccak/keccak.zir:223)
  Val22Array x9 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                             Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x10 =
      exec_RetTuple(ctx,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x7},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x8},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),   Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x6._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x9,
                    x9,
                    Val(3),
                    Val(4),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x10;
}
RetTupleStruct execXor5wordsMinor3_4_(ExecContext& ctx,
                                      RetTupleStruct arg0,
                                      BoundLayout<RetTupleLayout> arg1,
                                      BoundLayout<Xor5wordsMinor3_4_Layout> layout2) {
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
  RetTupleStruct x4 = back_RetTuple(ctx, 4, arg1);
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
  Val22Array x5 = Val22Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                             Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                             Val(16), Val(17), Val(18), Val(19), Val(20), Val(21)};
  NondetRegStruct22Array x6 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpA),
          std::function([&](Val22Array::value_type x7,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x8) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x9 = x4.arrA[to_size_t(x7)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
            NondetRegStruct x10 = exec_Reg(ctx, x9, x8);
            return x10;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
  NondetRegStruct22Array x11 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpB),
          std::function([&](Val22Array::value_type x12,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x13) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x14 = x4.arrB[to_size_t(x12)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
            NondetRegStruct x15 = exec_Reg(ctx, x14, x13);
            return x15;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
  NondetRegStruct22Array x16 =
      map(x5,
          LAYOUT_LOOKUP(layout2, inpC),
          std::function([&](Val22Array::value_type x17,
                            BoundLayout<NondetRegLayout22LayoutArray::value_type> x18) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x19 = x4.arrC[to_size_t(x17)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
            NondetRegStruct x20 = exec_Reg(ctx, x19, x18);
            return x20;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:233)
  NondetRegStruct21Array x21 =
      map(Val21Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),
                     Val(7),  Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13),
                     Val(14), Val(15), Val(16), Val(17), Val(18), Val(19), Val(20)},
          LAYOUT_LOOKUP(layout2, tmp_1),
          std::function([&](Val21Array::value_type x22,
                            BoundLayout<NondetRegLayout21LayoutArray::value_type> x23) {
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:229)
            Val x24 = x4.arrD[to_size_t(x22)]._super;
            // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:233)
            NondetRegStruct x25 = exec_Reg(ctx, x24, x23);
            return x25;
          }));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x26 = x3.arrA[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:234)
  NondetRegStruct x27 = exec_Reg(ctx, x26, LAYOUT_LOOKUP(layout2, _0));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x28 = x3.arrB[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:235)
  NondetRegStruct x29 = exec_Reg(ctx, x28, LAYOUT_LOOKUP(layout2, _1));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:228)
  Val x30 = x3.arrC[21]._super;
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:236)
  NondetRegStruct x31 = exec_Reg(ctx, x30, LAYOUT_LOOKUP(layout2, _2));
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:230)
  Val22Array x32 = Val22Array{
      x6[0]._super,  x6[1]._super,  x6[2]._super,  x6[3]._super,  x6[4]._super,  x6[5]._super,
      x6[6]._super,  x6[7]._super,  x6[8]._super,  x6[9]._super,  x6[10]._super, x6[11]._super,
      x6[12]._super, x6[13]._super, x6[14]._super, x6[15]._super, x6[16]._super, x6[17]._super,
      x6[18]._super, x6[19]._super, x6[20]._super, x6[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:231)
  Val22Array x33 =
      Val22Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:232)
  Val22Array x34 =
      Val22Array{x16[0]._super,  x16[1]._super,  x16[2]._super,  x16[3]._super,  x16[4]._super,
                 x16[5]._super,  x16[6]._super,  x16[7]._super,  x16[8]._super,  x16[9]._super,
                 x16[10]._super, x16[11]._super, x16[12]._super, x16[13]._super, x16[14]._super,
                 x16[15]._super, x16[16]._super, x16[17]._super, x16[18]._super, x16[19]._super,
                 x16[20]._super, x16[21]._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:237)
  Val24Array x35 =
      Val24Array{x21[0]._super,  x21[1]._super,  x21[2]._super,  x21[3]._super,  x21[4]._super,
                 x21[5]._super,  x21[6]._super,  x21[7]._super,  x21[8]._super,  x21[9]._super,
                 x21[10]._super, x21[11]._super, x21[12]._super, x21[13]._super, x21[14]._super,
                 x21[15]._super, x21[16]._super, x21[17]._super, x21[18]._super, x21[19]._super,
                 x21[20]._super, x27._super,     x29._super,     x31._super};
  // xor5words_minor3(zirgen/circuit/keccak/keccak.zir:238)
  Val22Array x36 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x37 = exec_RetTuple(ctx,
                                     x32,
                                     x33,
                                     x34,
                                     x35,
                                     x36,
                                     x36,
                                     Val(0),
                                     Val(5),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(layout2, _super));
  return x37;
}
RetTupleStruct execXor5wordsMajor_4_(ExecContext& ctx,
                                     RetTupleStruct arg0,
                                     BoundLayout<RetTupleLayout> arg1,
                                     BoundLayout<Xor5wordsMajor_4_Layout> layout2) {
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:244)
  BoundLayout<Xor5wordsMajor_4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:243)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_4_Struct x5 = exec_OneHot_4_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct4Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:245)
    RetTupleStruct x8 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x9 = execXor5wordsMinor0_4_(ctx, x8, LAYOUT_LOOKUP(x3, arm0));
    x7 = x9;
  } else if (to_size_t(x6[1]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:246)
    RetTupleStruct x10 = execXor5wordsMinor1_4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x10;
  } else if (to_size_t(x6[2]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:247)
    RetTupleStruct x11 = execXor5wordsMinor2_4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x11;
  } else if (to_size_t(x6[3]._super)) {
    // xor5words_major(zirgen/circuit/keccak/keccak.zir:248)
    RetTupleStruct x12 = execXor5wordsMinor3_4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x12;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // xor5words_major(zirgen/circuit/keccak/keccak.zir:244)
  RetTupleStruct x13 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x13;
}
RetTupleStruct execRhoMinor0_0__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_0__0_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[21]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[22]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[23]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[12]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[13]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[14]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(1),
                    Val(5),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_0__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_0__0_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_0__0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrA;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[0]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[1]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[2]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x111 * x109) + x112) * Val(2));
  Val x428 = (((x116 * x114) + x117) * Val(4));
  Val x429 = (((x121 * x119) + x122) * Val(8));
  Val x430 = (((x126 * x124) + x127) * Val(16));
  Val x431 = (((x131 * x129) + x132) * Val(32));
  Val x432 = (((x136 * x134) + x137) * Val(64));
  Val x433 = (((x141 * x139) + x142) * Val(128));
  Val x434 = (((x146 * x144) + x147) * Val(256));
  Val x435 = (((x151 * x149) + x152) * Val(512));
  Val x436 = (((x156 * x154) + x157) * Val(1024));
  Val x437 = (((x161 * x159) + x162) * Val(2048));
  Val x438 = (((x166 * x164) + x167) * Val(4096));
  Val x439 = (((x171 * x169) + x172) * Val(8192));
  Val x440 = (((x176 * x174) + x177) * Val(16384));
  Val x441 = (((x181 * x179) + x182) * Val(32768));
  Val x442 = (((x186 * x184) + x187) * Val(65536));
  Val x443 = (((x191 * x189) + x192) * Val(131072));
  Val x444 = (((x196 * x194) + x197) * Val(262144));
  Val x445 = (((x201 * x199) + x202) * Val(524288));
  Val x446 = (((x206 * x204) + x207) * Val(1048576));
  Val x447 = (((x211 * x209) + x212) * Val(2097152));
  Val x448 = (((x106 * x104) + x107) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x223 * x221) + x224) * Val(2));
  Val x457 = (((x228 * x226) + x229) * Val(4));
  Val x458 = (((x233 * x231) + x234) * Val(8));
  Val x459 = (((x238 * x236) + x239) * Val(16));
  Val x460 = (((x243 * x241) + x244) * Val(32));
  Val x461 = (((x248 * x246) + x249) * Val(64));
  Val x462 = (((x253 * x251) + x254) * Val(128));
  Val x463 = (((x258 * x256) + x259) * Val(256));
  Val x464 = (((x263 * x261) + x264) * Val(512));
  Val x465 = (((x268 * x266) + x269) * Val(1024));
  Val x466 = (((x273 * x271) + x274) * Val(2048));
  Val x467 = (((x278 * x276) + x279) * Val(4096));
  Val x468 = (((x283 * x281) + x284) * Val(8192));
  Val x469 = (((x288 * x286) + x289) * Val(16384));
  Val x470 = (((x293 * x291) + x294) * Val(32768));
  Val x471 = (((x298 * x296) + x299) * Val(65536));
  Val x472 = (((x303 * x301) + x304) * Val(131072));
  Val x473 = (((x308 * x306) + x309) * Val(262144));
  Val x474 = (((x313 * x311) + x314) * Val(524288));
  Val x475 = (((x318 * x316) + x319) * Val(1048576));
  Val x476 = (((x218 * x216) + x219) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x330 * x328) + x331) * Val(2));
  Val x485 = (((x335 * x333) + x336) * Val(4));
  Val x486 = (((x340 * x338) + x341) * Val(8));
  Val x487 = (((x345 * x343) + x346) * Val(16));
  Val x488 = (((x350 * x348) + x351) * Val(32));
  Val x489 = (((x355 * x353) + x356) * Val(64));
  Val x490 = (((x360 * x358) + x361) * Val(128));
  Val x491 = (((x365 * x363) + x366) * Val(256));
  Val x492 = (((x370 * x368) + x371) * Val(512));
  Val x493 = (((x375 * x373) + x376) * Val(1024));
  Val x494 = (((x380 * x378) + x381) * Val(2048));
  Val x495 = (((x385 * x383) + x386) * Val(4096));
  Val x496 = (((x390 * x388) + x391) * Val(8192));
  Val x497 = (((x395 * x393) + x396) * Val(16384));
  Val x498 = (((x400 * x398) + x401) * Val(32768));
  Val x499 = (((x405 * x403) + x406) * Val(65536));
  Val x500 = (((x410 * x408) + x411) * Val(131072));
  Val x501 = (((x415 * x413) + x416) * Val(262144));
  Val x502 = (((x420 * x418) + x421) * Val(524288));
  Val x503 = (((x425 * x423) + x426) * Val(1048576));
  Val x504 = (((x325 * x323) + x326) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_0__0_Arm1_SuperLayout> x512 = LAYOUT_LOOKUP(x3, arm1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct24Array x513 = x4.arrD;
  Val x514 = x513[9]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:345)
  ToBits_22_Struct x515 = exec_ToBits_22_(ctx, x514, LAYOUT_LOOKUP(x512, unpackM1));
  NondetRegStruct22Array x516 = x515._super;
  Val x517 = x516[0]._super;
  Val x518 = x516[1]._super;
  Val x519 = x516[2]._super;
  Val x520 = x516[3]._super;
  Val x521 = x516[4]._super;
  Val x522 = x516[5]._super;
  Val x523 = x516[6]._super;
  Val x524 = x516[7]._super;
  Val x525 = x516[8]._super;
  Val x526 = x516[9]._super;
  Val x527 = x516[10]._super;
  Val x528 = x516[11]._super;
  Val x529 = x516[12]._super;
  Val x530 = x516[13]._super;
  Val x531 = x516[14]._super;
  Val x532 = x516[15]._super;
  Val x533 = x516[16]._super;
  Val x534 = x516[17]._super;
  Val x535 = x516[18]._super;
  Val x536 = x516[19]._super;
  Val x537 = x516[20]._super;
  Val x538 = x516[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:346)
  Val x539 = (((x517 + (x518 * Val(2))) + (x519 * Val(4))) + (x520 * Val(8)));
  Val x540 = (((x539 + (x521 * Val(16))) + (x522 * Val(32))) + (x523 * Val(64)));
  Val x541 = (((x540 + (x524 * Val(128))) + (x525 * Val(256))) + (x526 * Val(512)));
  Val x542 = (((x541 + (x527 * Val(1024))) + (x528 * Val(2048))) + (x529 * Val(4096)));
  Val x543 = (((x542 + (x530 * Val(8192))) + (x531 * Val(16384))) + (x532 * Val(32768)));
  Val x544 = (((x543 + (x533 * Val(65536))) + (x534 * Val(131072))) + (x535 * Val(262144)));
  Val x545 = (((x544 + (x536 * Val(524288))) + (x537 * Val(1048576))) + (x538 * Val(2097152)));
  EQZ((x545 - x514), "rho_minor1(zirgen/circuit/keccak/keccak.zir:346)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x546 = x513[10]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:349)
  ToBits_21_Struct x547 = exec_ToBits_21_(ctx, x546, LAYOUT_LOOKUP(x512, unpackM2));
  NondetRegStruct21Array x548 = x547._super;
  Val x549 = x548[0]._super;
  Val x550 = x548[1]._super;
  Val x551 = x548[2]._super;
  Val x552 = x548[3]._super;
  Val x553 = x548[4]._super;
  Val x554 = x548[5]._super;
  Val x555 = x548[6]._super;
  Val x556 = x548[7]._super;
  Val x557 = x548[8]._super;
  Val x558 = x548[9]._super;
  Val x559 = x548[10]._super;
  Val x560 = x548[11]._super;
  Val x561 = x548[12]._super;
  Val x562 = x548[13]._super;
  Val x563 = x548[14]._super;
  Val x564 = x548[15]._super;
  Val x565 = x548[16]._super;
  Val x566 = x548[17]._super;
  Val x567 = x548[18]._super;
  Val x568 = x548[19]._super;
  Val x569 = x548[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:350)
  Val x570 = (((x549 + (x550 * Val(2))) + (x551 * Val(4))) + (x552 * Val(8)));
  Val x571 = (((x570 + (x553 * Val(16))) + (x554 * Val(32))) + (x555 * Val(64)));
  Val x572 = (((x571 + (x556 * Val(128))) + (x557 * Val(256))) + (x558 * Val(512)));
  Val x573 = (((x572 + (x559 * Val(1024))) + (x560 * Val(2048))) + (x561 * Val(4096)));
  Val x574 = (((x573 + (x562 * Val(8192))) + (x563 * Val(16384))) + (x564 * Val(32768)));
  Val x575 = (((x574 + (x565 * Val(65536))) + (x566 * Val(131072))) + (x567 * Val(262144)));
  Val x576 = (((x575 + (x568 * Val(524288))) + (x569 * Val(1048576))) - x546);
  EQZ(x576, "rho_minor1(zirgen/circuit/keccak/keccak.zir:350)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x577 = x513[11]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:354)
  ToBits_21_Struct x578 = exec_ToBits_21_(ctx, x577, LAYOUT_LOOKUP(x512, unpackM3));
  NondetRegStruct21Array x579 = x578._super;
  Val x580 = x579[0]._super;
  Val x581 = x579[1]._super;
  Val x582 = x579[2]._super;
  Val x583 = x579[3]._super;
  Val x584 = x579[4]._super;
  Val x585 = x579[5]._super;
  Val x586 = x579[6]._super;
  Val x587 = x579[7]._super;
  Val x588 = x579[8]._super;
  Val x589 = x579[9]._super;
  Val x590 = x579[10]._super;
  Val x591 = x579[11]._super;
  Val x592 = x579[12]._super;
  Val x593 = x579[13]._super;
  Val x594 = x579[14]._super;
  Val x595 = x579[15]._super;
  Val x596 = x579[16]._super;
  Val x597 = x579[17]._super;
  Val x598 = x579[18]._super;
  Val x599 = x579[19]._super;
  Val x600 = x579[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:355)
  Val x601 = (((x580 + (x581 * Val(2))) + (x582 * Val(4))) + (x583 * Val(8)));
  Val x602 = (((x601 + (x584 * Val(16))) + (x585 * Val(32))) + (x586 * Val(64)));
  Val x603 = (((x602 + (x587 * Val(128))) + (x588 * Val(256))) + (x589 * Val(512)));
  Val x604 = (((x603 + (x590 * Val(1024))) + (x591 * Val(2048))) + (x592 * Val(4096)));
  Val x605 = (((x604 + (x593 * Val(8192))) + (x594 * Val(16384))) + (x595 * Val(32768)));
  Val x606 = (((x605 + (x596 * Val(65536))) + (x597 * Val(131072))) + (x598 * Val(262144)));
  Val x607 = (((x606 + (x599 * Val(524288))) + (x600 * Val(1048576))) - x577);
  EQZ(x607, "rho_minor1(zirgen/circuit/keccak/keccak.zir:355)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:358)
  RetTupleStruct x608 = exec_RetTuple(
      ctx,
      Val22Array{x517, x518, x519, x520, x521, x522, x523, x524, x525, x526, x527,
                 x528, x529, x530, x531, x532, x533, x534, x535, x536, x537, x538},
      Val22Array{x549, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559,
                 x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, Val(0)},
      Val22Array{x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x590,
                 x591, x592, x593, x594, x595, x596, x597, x598, x599, x600, Val(0)},
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(2),
      Val(5),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x512, _super));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x609 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x609;
}
RetTupleStruct execRhoMinor2_0__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor2_0__0_Layout> layout2) {
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  RetTupleStruct x3 = back_RetTuple(ctx, 3, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct24Array x5 = x3.arrD;
  Val x6 = x5[15]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:368)
  ToBits_22_Struct x7 = exec_ToBits_22_(ctx, x6, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  Val x30 = x8[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:369)
  Val x31 = (((x9 + (x10 * Val(2))) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) + (x30 * Val(2097152)));
  EQZ((x37 - x6), "rho_minor2(zirgen/circuit/keccak/keccak.zir:369)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x38 = x5[16]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:372)
  ToBits_21_Struct x39 = exec_ToBits_21_(ctx, x38, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x40 = x39._super;
  Val x41 = x40[0]._super;
  Val x42 = x40[1]._super;
  Val x43 = x40[2]._super;
  Val x44 = x40[3]._super;
  Val x45 = x40[4]._super;
  Val x46 = x40[5]._super;
  Val x47 = x40[6]._super;
  Val x48 = x40[7]._super;
  Val x49 = x40[8]._super;
  Val x50 = x40[9]._super;
  Val x51 = x40[10]._super;
  Val x52 = x40[11]._super;
  Val x53 = x40[12]._super;
  Val x54 = x40[13]._super;
  Val x55 = x40[14]._super;
  Val x56 = x40[15]._super;
  Val x57 = x40[16]._super;
  Val x58 = x40[17]._super;
  Val x59 = x40[18]._super;
  Val x60 = x40[19]._super;
  Val x61 = x40[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:373)
  Val x62 = (((x41 + (x42 * Val(2))) + (x43 * Val(4))) + (x44 * Val(8)));
  Val x63 = (((x62 + (x45 * Val(16))) + (x46 * Val(32))) + (x47 * Val(64)));
  Val x64 = (((x63 + (x48 * Val(128))) + (x49 * Val(256))) + (x50 * Val(512)));
  Val x65 = (((x64 + (x51 * Val(1024))) + (x52 * Val(2048))) + (x53 * Val(4096)));
  Val x66 = (((x65 + (x54 * Val(8192))) + (x55 * Val(16384))) + (x56 * Val(32768)));
  Val x67 = (((x66 + (x57 * Val(65536))) + (x58 * Val(131072))) + (x59 * Val(262144)));
  Val x68 = (((x67 + (x60 * Val(524288))) + (x61 * Val(1048576))) - x38);
  EQZ(x68, "rho_minor2(zirgen/circuit/keccak/keccak.zir:373)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x69 = x5[17]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:376)
  ToBits_21_Struct x70 = exec_ToBits_21_(ctx, x69, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:377)
  Val x93 = (((x72 + (x73 * Val(2))) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x94 = (((x93 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x95 = (((x94 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x96 = (((x95 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x97 = (((x96 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x98 = (((x97 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x99 = (((x98 + (x91 * Val(524288))) + (x92 * Val(1048576))) - x69);
  EQZ(x99, "rho_minor2(zirgen/circuit/keccak/keccak.zir:377)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct22Array x100 = x3.arrA;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:383)
  Val x101 = x100[3]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:390)
  ToBits_22_Struct x102 = exec_ToBits_22_(ctx, x101, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x103 = x102._super;
  Val x104 = x103[0]._super;
  Val x105 = x103[1]._super;
  Val x106 = x103[2]._super;
  Val x107 = x103[3]._super;
  Val x108 = x103[4]._super;
  Val x109 = x103[5]._super;
  Val x110 = x103[6]._super;
  Val x111 = x103[7]._super;
  Val x112 = x103[8]._super;
  Val x113 = x103[9]._super;
  Val x114 = x103[10]._super;
  Val x115 = x103[11]._super;
  Val x116 = x103[12]._super;
  Val x117 = x103[13]._super;
  Val x118 = x103[14]._super;
  Val x119 = x103[15]._super;
  Val x120 = x103[16]._super;
  Val x121 = x103[17]._super;
  Val x122 = x103[18]._super;
  Val x123 = x103[19]._super;
  Val x124 = x103[20]._super;
  Val x125 = x103[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:391)
  Val x126 = (((x104 + (x105 * Val(2))) + (x106 * Val(4))) + (x107 * Val(8)));
  Val x127 = (((x126 + (x108 * Val(16))) + (x109 * Val(32))) + (x110 * Val(64)));
  Val x128 = (((x127 + (x111 * Val(128))) + (x112 * Val(256))) + (x113 * Val(512)));
  Val x129 = (((x128 + (x114 * Val(1024))) + (x115 * Val(2048))) + (x116 * Val(4096)));
  Val x130 = (((x129 + (x117 * Val(8192))) + (x118 * Val(16384))) + (x119 * Val(32768)));
  Val x131 = (((x130 + (x120 * Val(65536))) + (x121 * Val(131072))) + (x122 * Val(262144)));
  Val x132 = (((x131 + (x123 * Val(524288))) + (x124 * Val(1048576))) + (x125 * Val(2097152)));
  EQZ((x132 - x101), "rho_minor2(zirgen/circuit/keccak/keccak.zir:391)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:395)
  Val x133 = x100[4]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:402)
  ToBits_21_Struct x134 = exec_ToBits_21_(ctx, x133, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x135 = x134._super;
  Val x136 = x135[0]._super;
  Val x137 = x135[1]._super;
  Val x138 = x135[2]._super;
  Val x139 = x135[3]._super;
  Val x140 = x135[4]._super;
  Val x141 = x135[5]._super;
  Val x142 = x135[6]._super;
  Val x143 = x135[7]._super;
  Val x144 = x135[8]._super;
  Val x145 = x135[9]._super;
  Val x146 = x135[10]._super;
  Val x147 = x135[11]._super;
  Val x148 = x135[12]._super;
  Val x149 = x135[13]._super;
  Val x150 = x135[14]._super;
  Val x151 = x135[15]._super;
  Val x152 = x135[16]._super;
  Val x153 = x135[17]._super;
  Val x154 = x135[18]._super;
  Val x155 = x135[19]._super;
  Val x156 = x135[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:403)
  Val x157 = (((x136 + (x137 * Val(2))) + (x138 * Val(4))) + (x139 * Val(8)));
  Val x158 = (((x157 + (x140 * Val(16))) + (x141 * Val(32))) + (x142 * Val(64)));
  Val x159 = (((x158 + (x143 * Val(128))) + (x144 * Val(256))) + (x145 * Val(512)));
  Val x160 = (((x159 + (x146 * Val(1024))) + (x147 * Val(2048))) + (x148 * Val(4096)));
  Val x161 = (((x160 + (x149 * Val(8192))) + (x150 * Val(16384))) + (x151 * Val(32768)));
  Val x162 = (((x161 + (x152 * Val(65536))) + (x153 * Val(131072))) + (x154 * Val(262144)));
  Val x163 = (((x162 + (x155 * Val(524288))) + (x156 * Val(1048576))) - x133);
  EQZ(x163, "rho_minor2(zirgen/circuit/keccak/keccak.zir:403)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:407)
  Val x164 = x100[5]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:414)
  ToBits_21_Struct x165 = exec_ToBits_21_(ctx, x164, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x166 = x165._super;
  Val x167 = x166[0]._super;
  Val x168 = x166[1]._super;
  Val x169 = x166[2]._super;
  Val x170 = x166[3]._super;
  Val x171 = x166[4]._super;
  Val x172 = x166[5]._super;
  Val x173 = x166[6]._super;
  Val x174 = x166[7]._super;
  Val x175 = x166[8]._super;
  Val x176 = x166[9]._super;
  Val x177 = x166[10]._super;
  Val x178 = x166[11]._super;
  Val x179 = x166[12]._super;
  Val x180 = x166[13]._super;
  Val x181 = x166[14]._super;
  Val x182 = x166[15]._super;
  Val x183 = x166[16]._super;
  Val x184 = x166[17]._super;
  Val x185 = x166[18]._super;
  Val x186 = x166[19]._super;
  Val x187 = x166[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:415)
  Val x188 = (((x167 + (x168 * Val(2))) + (x169 * Val(4))) + (x170 * Val(8)));
  Val x189 = (((x188 + (x171 * Val(16))) + (x172 * Val(32))) + (x173 * Val(64)));
  Val x190 = (((x189 + (x174 * Val(128))) + (x175 * Val(256))) + (x176 * Val(512)));
  Val x191 = (((x190 + (x177 * Val(1024))) + (x178 * Val(2048))) + (x179 * Val(4096)));
  Val x192 = (((x191 + (x180 * Val(8192))) + (x181 * Val(16384))) + (x182 * Val(32768)));
  Val x193 = (((x192 + (x183 * Val(65536))) + (x184 * Val(131072))) + (x185 * Val(262144)));
  Val x194 = (((x193 + (x186 * Val(524288))) + (x187 * Val(1048576))) - x164);
  EQZ(x194, "rho_minor2(zirgen/circuit/keccak/keccak.zir:415)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x195 = x4.arrA;
  Val x196 = x195[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x197 = ((Val(1) - x104) * (Val(1) - x196));
  Val x198 = ((x104 * x196) + x197);
  Val x199 = ((Val(1) - x198) * (Val(1) - x92));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x200 = x195[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x201 = ((Val(1) - x105) * (Val(1) - x200));
  Val x202 = ((x105 * x200) + x201);
  Val x203 = ((Val(1) - x202) * (Val(1) - x9));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x204 = x195[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x205 = ((Val(1) - x106) * (Val(1) - x204));
  Val x206 = ((x106 * x204) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x10));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x208 = x195[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x209 = ((Val(1) - x107) * (Val(1) - x208));
  Val x210 = ((x107 * x208) + x209);
  Val x211 = ((Val(1) - x210) * (Val(1) - x11));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x212 = x195[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x213 = ((Val(1) - x108) * (Val(1) - x212));
  Val x214 = ((x108 * x212) + x213);
  Val x215 = ((Val(1) - x214) * (Val(1) - x12));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x216 = x195[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x217 = ((Val(1) - x109) * (Val(1) - x216));
  Val x218 = ((x109 * x216) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x13));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x220 = x195[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x221 = ((Val(1) - x110) * (Val(1) - x220));
  Val x222 = ((x110 * x220) + x221);
  Val x223 = ((Val(1) - x222) * (Val(1) - x14));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x224 = x195[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x225 = ((Val(1) - x111) * (Val(1) - x224));
  Val x226 = ((x111 * x224) + x225);
  Val x227 = ((Val(1) - x226) * (Val(1) - x15));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x228 = x195[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x229 = ((Val(1) - x112) * (Val(1) - x228));
  Val x230 = ((x112 * x228) + x229);
  Val x231 = ((Val(1) - x230) * (Val(1) - x16));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x232 = x195[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x233 = ((Val(1) - x113) * (Val(1) - x232));
  Val x234 = ((x113 * x232) + x233);
  Val x235 = ((Val(1) - x234) * (Val(1) - x17));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x236 = x195[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x237 = ((Val(1) - x114) * (Val(1) - x236));
  Val x238 = ((x114 * x236) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x18));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x240 = x195[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x241 = ((Val(1) - x115) * (Val(1) - x240));
  Val x242 = ((x115 * x240) + x241);
  Val x243 = ((Val(1) - x242) * (Val(1) - x19));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x244 = x195[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x245 = ((Val(1) - x116) * (Val(1) - x244));
  Val x246 = ((x116 * x244) + x245);
  Val x247 = ((Val(1) - x246) * (Val(1) - x20));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x248 = x195[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x249 = ((Val(1) - x117) * (Val(1) - x248));
  Val x250 = ((x117 * x248) + x249);
  Val x251 = ((Val(1) - x250) * (Val(1) - x21));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x252 = x195[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x253 = ((Val(1) - x118) * (Val(1) - x252));
  Val x254 = ((x118 * x252) + x253);
  Val x255 = ((Val(1) - x254) * (Val(1) - x22));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x256 = x195[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x257 = ((Val(1) - x119) * (Val(1) - x256));
  Val x258 = ((x119 * x256) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x23));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x260 = x195[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x261 = ((Val(1) - x120) * (Val(1) - x260));
  Val x262 = ((x120 * x260) + x261);
  Val x263 = ((Val(1) - x262) * (Val(1) - x24));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x264 = x195[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x265 = ((Val(1) - x121) * (Val(1) - x264));
  Val x266 = ((x121 * x264) + x265);
  Val x267 = ((Val(1) - x266) * (Val(1) - x25));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x268 = x195[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x269 = ((Val(1) - x122) * (Val(1) - x268));
  Val x270 = ((x122 * x268) + x269);
  Val x271 = ((Val(1) - x270) * (Val(1) - x26));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x272 = x195[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x273 = ((Val(1) - x123) * (Val(1) - x272));
  Val x274 = ((x123 * x272) + x273);
  Val x275 = ((Val(1) - x274) * (Val(1) - x27));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x276 = x195[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x277 = ((Val(1) - x124) * (Val(1) - x276));
  Val x278 = ((x124 * x276) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x28));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x280 = x195[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x281 = ((Val(1) - x125) * (Val(1) - x280));
  Val x282 = ((x125 * x280) + x281);
  Val x283 = ((Val(1) - x282) * (Val(1) - x29));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x284 = x4.arrB;
  Val x285 = x284[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x286 = ((Val(1) - x136) * (Val(1) - x285));
  Val x287 = ((x136 * x285) + x286);
  Val x288 = ((Val(1) - x287) * (Val(1) - x30));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x289 = x284[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x290 = ((Val(1) - x137) * (Val(1) - x289));
  Val x291 = ((x137 * x289) + x290);
  Val x292 = ((Val(1) - x291) * (Val(1) - x41));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x293 = x284[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x294 = ((Val(1) - x138) * (Val(1) - x293));
  Val x295 = ((x138 * x293) + x294);
  Val x296 = ((Val(1) - x295) * (Val(1) - x42));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x297 = x284[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x298 = ((Val(1) - x139) * (Val(1) - x297));
  Val x299 = ((x139 * x297) + x298);
  Val x300 = ((Val(1) - x299) * (Val(1) - x43));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x301 = x284[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x302 = ((Val(1) - x140) * (Val(1) - x301));
  Val x303 = ((x140 * x301) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x44));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x305 = x284[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x306 = ((Val(1) - x141) * (Val(1) - x305));
  Val x307 = ((x141 * x305) + x306);
  Val x308 = ((Val(1) - x307) * (Val(1) - x45));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x309 = x284[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x310 = ((Val(1) - x142) * (Val(1) - x309));
  Val x311 = ((x142 * x309) + x310);
  Val x312 = ((Val(1) - x311) * (Val(1) - x46));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x313 = x284[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x314 = ((Val(1) - x143) * (Val(1) - x313));
  Val x315 = ((x143 * x313) + x314);
  Val x316 = ((Val(1) - x315) * (Val(1) - x47));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x317 = x284[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x318 = ((Val(1) - x144) * (Val(1) - x317));
  Val x319 = ((x144 * x317) + x318);
  Val x320 = ((Val(1) - x319) * (Val(1) - x48));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x321 = x284[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x322 = ((Val(1) - x145) * (Val(1) - x321));
  Val x323 = ((x145 * x321) + x322);
  Val x324 = ((Val(1) - x323) * (Val(1) - x49));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x325 = x284[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x326 = ((Val(1) - x146) * (Val(1) - x325));
  Val x327 = ((x146 * x325) + x326);
  Val x328 = ((Val(1) - x327) * (Val(1) - x50));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x329 = x284[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x330 = ((Val(1) - x147) * (Val(1) - x329));
  Val x331 = ((x147 * x329) + x330);
  Val x332 = ((Val(1) - x331) * (Val(1) - x51));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x333 = x284[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x334 = ((Val(1) - x148) * (Val(1) - x333));
  Val x335 = ((x148 * x333) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x52));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x337 = x284[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x338 = ((Val(1) - x149) * (Val(1) - x337));
  Val x339 = ((x149 * x337) + x338);
  Val x340 = ((Val(1) - x339) * (Val(1) - x53));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x341 = x284[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x342 = ((Val(1) - x150) * (Val(1) - x341));
  Val x343 = ((x150 * x341) + x342);
  Val x344 = ((Val(1) - x343) * (Val(1) - x54));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x345 = x284[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x346 = ((Val(1) - x151) * (Val(1) - x345));
  Val x347 = ((x151 * x345) + x346);
  Val x348 = ((Val(1) - x347) * (Val(1) - x55));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x349 = x284[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x350 = ((Val(1) - x152) * (Val(1) - x349));
  Val x351 = ((x152 * x349) + x350);
  Val x352 = ((Val(1) - x351) * (Val(1) - x56));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x353 = x284[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x354 = ((Val(1) - x153) * (Val(1) - x353));
  Val x355 = ((x153 * x353) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x57));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x357 = x284[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x358 = ((Val(1) - x154) * (Val(1) - x357));
  Val x359 = ((x154 * x357) + x358);
  Val x360 = ((Val(1) - x359) * (Val(1) - x58));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x361 = x284[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x362 = ((Val(1) - x155) * (Val(1) - x361));
  Val x363 = ((x155 * x361) + x362);
  Val x364 = ((Val(1) - x363) * (Val(1) - x59));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x365 = x284[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x366 = ((Val(1) - x156) * (Val(1) - x365));
  Val x367 = ((x156 * x365) + x366);
  Val x368 = ((Val(1) - x367) * (Val(1) - x60));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x369 = x4.arrC;
  Val x370 = x369[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x371 = ((Val(1) - x167) * (Val(1) - x370));
  Val x372 = ((x167 * x370) + x371);
  Val x373 = ((Val(1) - x372) * (Val(1) - x61));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x374 = x369[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x375 = ((Val(1) - x168) * (Val(1) - x374));
  Val x376 = ((x168 * x374) + x375);
  Val x377 = ((Val(1) - x376) * (Val(1) - x72));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x378 = x369[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x379 = ((Val(1) - x169) * (Val(1) - x378));
  Val x380 = ((x169 * x378) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x73));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x382 = x369[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x383 = ((Val(1) - x170) * (Val(1) - x382));
  Val x384 = ((x170 * x382) + x383);
  Val x385 = ((Val(1) - x384) * (Val(1) - x74));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x386 = x369[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x387 = ((Val(1) - x171) * (Val(1) - x386));
  Val x388 = ((x171 * x386) + x387);
  Val x389 = ((Val(1) - x388) * (Val(1) - x75));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x390 = x369[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x391 = ((Val(1) - x172) * (Val(1) - x390));
  Val x392 = ((x172 * x390) + x391);
  Val x393 = ((Val(1) - x392) * (Val(1) - x76));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x394 = x369[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x395 = ((Val(1) - x173) * (Val(1) - x394));
  Val x396 = ((x173 * x394) + x395);
  Val x397 = ((Val(1) - x396) * (Val(1) - x77));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x398 = x369[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x399 = ((Val(1) - x174) * (Val(1) - x398));
  Val x400 = ((x174 * x398) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x78));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x402 = x369[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x403 = ((Val(1) - x175) * (Val(1) - x402));
  Val x404 = ((x175 * x402) + x403);
  Val x405 = ((Val(1) - x404) * (Val(1) - x79));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x406 = x369[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x407 = ((Val(1) - x176) * (Val(1) - x406));
  Val x408 = ((x176 * x406) + x407);
  Val x409 = ((Val(1) - x408) * (Val(1) - x80));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x410 = x369[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x411 = ((Val(1) - x177) * (Val(1) - x410));
  Val x412 = ((x177 * x410) + x411);
  Val x413 = ((Val(1) - x412) * (Val(1) - x81));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x414 = x369[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x415 = ((Val(1) - x178) * (Val(1) - x414));
  Val x416 = ((x178 * x414) + x415);
  Val x417 = ((Val(1) - x416) * (Val(1) - x82));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x418 = x369[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x419 = ((Val(1) - x179) * (Val(1) - x418));
  Val x420 = ((x179 * x418) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x83));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x422 = x369[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x423 = ((Val(1) - x180) * (Val(1) - x422));
  Val x424 = ((x180 * x422) + x423);
  Val x425 = ((Val(1) - x424) * (Val(1) - x84));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x426 = x369[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x427 = ((Val(1) - x181) * (Val(1) - x426));
  Val x428 = ((x181 * x426) + x427);
  Val x429 = ((Val(1) - x428) * (Val(1) - x85));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x430 = x369[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x431 = ((Val(1) - x182) * (Val(1) - x430));
  Val x432 = ((x182 * x430) + x431);
  Val x433 = ((Val(1) - x432) * (Val(1) - x86));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x434 = x369[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x435 = ((Val(1) - x183) * (Val(1) - x434));
  Val x436 = ((x183 * x434) + x435);
  Val x437 = ((Val(1) - x436) * (Val(1) - x87));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x438 = x369[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x439 = ((Val(1) - x184) * (Val(1) - x438));
  Val x440 = ((x184 * x438) + x439);
  Val x441 = ((Val(1) - x440) * (Val(1) - x88));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x442 = x369[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x443 = ((Val(1) - x185) * (Val(1) - x442));
  Val x444 = ((x185 * x442) + x443);
  Val x445 = ((Val(1) - x444) * (Val(1) - x89));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x446 = x369[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x447 = ((Val(1) - x186) * (Val(1) - x446));
  Val x448 = ((x186 * x446) + x447);
  Val x449 = ((Val(1) - x448) * (Val(1) - x90));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x450 = x369[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x451 = ((Val(1) - x187) * (Val(1) - x450));
  Val x452 = ((x187 * x450) + x451);
  Val x453 = ((Val(1) - x452) * (Val(1) - x91));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:422)
  Val x454 = (((x198 * x92) + x199) * Val(2));
  Val x455 = (((x202 * x9) + x203) * Val(4));
  Val x456 = (((x206 * x10) + x207) * Val(8));
  Val x457 = (((x210 * x11) + x211) * Val(16));
  Val x458 = (((x214 * x12) + x215) * Val(32));
  Val x459 = (((x218 * x13) + x219) * Val(64));
  Val x460 = (((x222 * x14) + x223) * Val(128));
  Val x461 = (((x226 * x15) + x227) * Val(256));
  Val x462 = (((x230 * x16) + x231) * Val(512));
  Val x463 = (((x234 * x17) + x235) * Val(1024));
  Val x464 = (((x238 * x18) + x239) * Val(2048));
  Val x465 = (((x242 * x19) + x243) * Val(4096));
  Val x466 = (((x246 * x20) + x247) * Val(8192));
  Val x467 = (((x250 * x21) + x251) * Val(16384));
  Val x468 = (((x254 * x22) + x255) * Val(32768));
  Val x469 = (((x258 * x23) + x259) * Val(65536));
  Val x470 = (((x262 * x24) + x263) * Val(131072));
  Val x471 = (((x266 * x25) + x267) * Val(262144));
  Val x472 = (((x270 * x26) + x271) * Val(524288));
  Val x473 = (((x274 * x27) + x275) * Val(1048576));
  Val x474 = (((x278 * x28) + x279) * Val(2097152));
  Val x475 = (((x452 * x91) + x453) + x454);
  Val x476 = (((x475 + x455) + x456) + x457);
  Val x477 = (((x476 + x458) + x459) + x460);
  Val x478 = (((x477 + x461) + x462) + x463);
  Val x479 = (((x478 + x464) + x465) + x466);
  Val x480 = (((x479 + x467) + x468) + x469);
  Val x481 = (((x480 + x470) + x471) + x472);
  NondetRegStruct x482 = exec_Reg(ctx, ((x481 + x473) + x474), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:423)
  Val x483 = (((x287 * x30) + x288) * Val(2));
  Val x484 = (((x291 * x41) + x292) * Val(4));
  Val x485 = (((x295 * x42) + x296) * Val(8));
  Val x486 = (((x299 * x43) + x300) * Val(16));
  Val x487 = (((x303 * x44) + x304) * Val(32));
  Val x488 = (((x307 * x45) + x308) * Val(64));
  Val x489 = (((x311 * x46) + x312) * Val(128));
  Val x490 = (((x315 * x47) + x316) * Val(256));
  Val x491 = (((x319 * x48) + x320) * Val(512));
  Val x492 = (((x323 * x49) + x324) * Val(1024));
  Val x493 = (((x327 * x50) + x328) * Val(2048));
  Val x494 = (((x331 * x51) + x332) * Val(4096));
  Val x495 = (((x335 * x52) + x336) * Val(8192));
  Val x496 = (((x339 * x53) + x340) * Val(16384));
  Val x497 = (((x343 * x54) + x344) * Val(32768));
  Val x498 = (((x347 * x55) + x348) * Val(65536));
  Val x499 = (((x351 * x56) + x352) * Val(131072));
  Val x500 = (((x355 * x57) + x356) * Val(262144));
  Val x501 = (((x359 * x58) + x360) * Val(524288));
  Val x502 = (((x363 * x59) + x364) * Val(1048576));
  Val x503 = (((x282 * x29) + x283) + x483);
  Val x504 = (((x503 + x484) + x485) + x486);
  Val x505 = (((x504 + x487) + x488) + x489);
  Val x506 = (((x505 + x490) + x491) + x492);
  Val x507 = (((x506 + x493) + x494) + x495);
  Val x508 = (((x507 + x496) + x497) + x498);
  Val x509 = (((x508 + x499) + x500) + x501);
  NondetRegStruct x510 = exec_Reg(ctx, (x509 + x502), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:424)
  Val x511 = (((x372 * x61) + x373) * Val(2));
  Val x512 = (((x376 * x72) + x377) * Val(4));
  Val x513 = (((x380 * x73) + x381) * Val(8));
  Val x514 = (((x384 * x74) + x385) * Val(16));
  Val x515 = (((x388 * x75) + x389) * Val(32));
  Val x516 = (((x392 * x76) + x393) * Val(64));
  Val x517 = (((x396 * x77) + x397) * Val(128));
  Val x518 = (((x400 * x78) + x401) * Val(256));
  Val x519 = (((x404 * x79) + x405) * Val(512));
  Val x520 = (((x408 * x80) + x409) * Val(1024));
  Val x521 = (((x412 * x81) + x413) * Val(2048));
  Val x522 = (((x416 * x82) + x417) * Val(4096));
  Val x523 = (((x420 * x83) + x421) * Val(8192));
  Val x524 = (((x424 * x84) + x425) * Val(16384));
  Val x525 = (((x428 * x85) + x429) * Val(32768));
  Val x526 = (((x432 * x86) + x433) * Val(65536));
  Val x527 = (((x436 * x87) + x437) * Val(131072));
  Val x528 = (((x440 * x88) + x441) * Val(262144));
  Val x529 = (((x444 * x89) + x445) * Val(524288));
  Val x530 = (((x448 * x90) + x449) * Val(1048576));
  Val x531 = (((x367 * x60) + x368) + x511);
  Val x532 = (((x531 + x512) + x513) + x514);
  Val x533 = (((x532 + x515) + x516) + x517);
  Val x534 = (((x533 + x518) + x519) + x520);
  Val x535 = (((x534 + x521) + x522) + x523);
  Val x536 = (((x535 + x524) + x525) + x526);
  Val x537 = (((x536 + x527) + x528) + x529);
  NondetRegStruct x538 = exec_Reg(ctx, (x537 + x530), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:427)
  Val22Array x539 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x540 = exec_RetTuple(
      ctx,
      x539,
      x539,
      x539,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x539,
      Val22Array{x482._super, x510._super, x538._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(3),
      Val(5),
      x4.rnd._super,
      x4.blk._super,
      x4.midx._super,
      LAYOUT_LOOKUP(layout2, _super));
  return x540;
}
RetTupleStruct execRhoMinor0_2__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_2__0_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 4, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[12]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[13]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[14]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[18]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[19]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[20]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(4),
                    Val(5),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_2__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_2__0_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_2__0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 5, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrA;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[6]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[7]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[8]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x121 * x119) + x122) * Val(2));
  Val x428 = (((x126 * x124) + x127) * Val(4));
  Val x429 = (((x131 * x129) + x132) * Val(8));
  Val x430 = (((x136 * x134) + x137) * Val(16));
  Val x431 = (((x141 * x139) + x142) * Val(32));
  Val x432 = (((x146 * x144) + x147) * Val(64));
  Val x433 = (((x151 * x149) + x152) * Val(128));
  Val x434 = (((x156 * x154) + x157) * Val(256));
  Val x435 = (((x161 * x159) + x162) * Val(512));
  Val x436 = (((x166 * x164) + x167) * Val(1024));
  Val x437 = (((x171 * x169) + x172) * Val(2048));
  Val x438 = (((x176 * x174) + x177) * Val(4096));
  Val x439 = (((x181 * x179) + x182) * Val(8192));
  Val x440 = (((x186 * x184) + x187) * Val(16384));
  Val x441 = (((x191 * x189) + x192) * Val(32768));
  Val x442 = (((x196 * x194) + x197) * Val(65536));
  Val x443 = (((x201 * x199) + x202) * Val(131072));
  Val x444 = (((x206 * x204) + x207) * Val(262144));
  Val x445 = (((x211 * x209) + x212) * Val(524288));
  Val x446 = (((x218 * x216) + x219) * Val(1048576));
  Val x447 = (((x223 * x221) + x224) * Val(2097152));
  Val x448 = (((x116 * x114) + x117) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x233 * x231) + x234) * Val(2));
  Val x457 = (((x238 * x236) + x239) * Val(4));
  Val x458 = (((x243 * x241) + x244) * Val(8));
  Val x459 = (((x248 * x246) + x249) * Val(16));
  Val x460 = (((x253 * x251) + x254) * Val(32));
  Val x461 = (((x258 * x256) + x259) * Val(64));
  Val x462 = (((x263 * x261) + x264) * Val(128));
  Val x463 = (((x268 * x266) + x269) * Val(256));
  Val x464 = (((x273 * x271) + x274) * Val(512));
  Val x465 = (((x278 * x276) + x279) * Val(1024));
  Val x466 = (((x283 * x281) + x284) * Val(2048));
  Val x467 = (((x288 * x286) + x289) * Val(4096));
  Val x468 = (((x293 * x291) + x294) * Val(8192));
  Val x469 = (((x298 * x296) + x299) * Val(16384));
  Val x470 = (((x303 * x301) + x304) * Val(32768));
  Val x471 = (((x308 * x306) + x309) * Val(65536));
  Val x472 = (((x313 * x311) + x314) * Val(131072));
  Val x473 = (((x318 * x316) + x319) * Val(262144));
  Val x474 = (((x325 * x323) + x326) * Val(524288));
  Val x475 = (((x330 * x328) + x331) * Val(1048576));
  Val x476 = (((x228 * x226) + x229) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x340 * x338) + x341) * Val(2));
  Val x485 = (((x345 * x343) + x346) * Val(4));
  Val x486 = (((x350 * x348) + x351) * Val(8));
  Val x487 = (((x355 * x353) + x356) * Val(16));
  Val x488 = (((x360 * x358) + x361) * Val(32));
  Val x489 = (((x365 * x363) + x366) * Val(64));
  Val x490 = (((x370 * x368) + x371) * Val(128));
  Val x491 = (((x375 * x373) + x376) * Val(256));
  Val x492 = (((x380 * x378) + x381) * Val(512));
  Val x493 = (((x385 * x383) + x386) * Val(1024));
  Val x494 = (((x390 * x388) + x391) * Val(2048));
  Val x495 = (((x395 * x393) + x396) * Val(4096));
  Val x496 = (((x400 * x398) + x401) * Val(8192));
  Val x497 = (((x405 * x403) + x406) * Val(16384));
  Val x498 = (((x410 * x408) + x411) * Val(32768));
  Val x499 = (((x415 * x413) + x416) * Val(65536));
  Val x500 = (((x420 * x418) + x421) * Val(131072));
  Val x501 = (((x425 * x423) + x426) * Val(262144));
  Val x502 = (((x106 * x104) + x107) * Val(524288));
  Val x503 = (((x111 * x109) + x112) * Val(1048576));
  Val x504 = (((x335 * x333) + x336) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_2__0_Arm1_SuperLayout> x512 = LAYOUT_LOOKUP(x3, arm1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct24Array x513 = x4.arrD;
  Val x514 = x513[15]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:345)
  ToBits_22_Struct x515 = exec_ToBits_22_(ctx, x514, LAYOUT_LOOKUP(x512, unpackM1));
  NondetRegStruct22Array x516 = x515._super;
  Val x517 = x516[0]._super;
  Val x518 = x516[1]._super;
  Val x519 = x516[2]._super;
  Val x520 = x516[3]._super;
  Val x521 = x516[4]._super;
  Val x522 = x516[5]._super;
  Val x523 = x516[6]._super;
  Val x524 = x516[7]._super;
  Val x525 = x516[8]._super;
  Val x526 = x516[9]._super;
  Val x527 = x516[10]._super;
  Val x528 = x516[11]._super;
  Val x529 = x516[12]._super;
  Val x530 = x516[13]._super;
  Val x531 = x516[14]._super;
  Val x532 = x516[15]._super;
  Val x533 = x516[16]._super;
  Val x534 = x516[17]._super;
  Val x535 = x516[18]._super;
  Val x536 = x516[19]._super;
  Val x537 = x516[20]._super;
  Val x538 = x516[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:346)
  Val x539 = (((x517 + (x518 * Val(2))) + (x519 * Val(4))) + (x520 * Val(8)));
  Val x540 = (((x539 + (x521 * Val(16))) + (x522 * Val(32))) + (x523 * Val(64)));
  Val x541 = (((x540 + (x524 * Val(128))) + (x525 * Val(256))) + (x526 * Val(512)));
  Val x542 = (((x541 + (x527 * Val(1024))) + (x528 * Val(2048))) + (x529 * Val(4096)));
  Val x543 = (((x542 + (x530 * Val(8192))) + (x531 * Val(16384))) + (x532 * Val(32768)));
  Val x544 = (((x543 + (x533 * Val(65536))) + (x534 * Val(131072))) + (x535 * Val(262144)));
  Val x545 = (((x544 + (x536 * Val(524288))) + (x537 * Val(1048576))) + (x538 * Val(2097152)));
  EQZ((x545 - x514), "rho_minor1(zirgen/circuit/keccak/keccak.zir:346)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x546 = x513[16]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:349)
  ToBits_21_Struct x547 = exec_ToBits_21_(ctx, x546, LAYOUT_LOOKUP(x512, unpackM2));
  NondetRegStruct21Array x548 = x547._super;
  Val x549 = x548[0]._super;
  Val x550 = x548[1]._super;
  Val x551 = x548[2]._super;
  Val x552 = x548[3]._super;
  Val x553 = x548[4]._super;
  Val x554 = x548[5]._super;
  Val x555 = x548[6]._super;
  Val x556 = x548[7]._super;
  Val x557 = x548[8]._super;
  Val x558 = x548[9]._super;
  Val x559 = x548[10]._super;
  Val x560 = x548[11]._super;
  Val x561 = x548[12]._super;
  Val x562 = x548[13]._super;
  Val x563 = x548[14]._super;
  Val x564 = x548[15]._super;
  Val x565 = x548[16]._super;
  Val x566 = x548[17]._super;
  Val x567 = x548[18]._super;
  Val x568 = x548[19]._super;
  Val x569 = x548[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:350)
  Val x570 = (((x549 + (x550 * Val(2))) + (x551 * Val(4))) + (x552 * Val(8)));
  Val x571 = (((x570 + (x553 * Val(16))) + (x554 * Val(32))) + (x555 * Val(64)));
  Val x572 = (((x571 + (x556 * Val(128))) + (x557 * Val(256))) + (x558 * Val(512)));
  Val x573 = (((x572 + (x559 * Val(1024))) + (x560 * Val(2048))) + (x561 * Val(4096)));
  Val x574 = (((x573 + (x562 * Val(8192))) + (x563 * Val(16384))) + (x564 * Val(32768)));
  Val x575 = (((x574 + (x565 * Val(65536))) + (x566 * Val(131072))) + (x567 * Val(262144)));
  Val x576 = (((x575 + (x568 * Val(524288))) + (x569 * Val(1048576))) - x546);
  EQZ(x576, "rho_minor1(zirgen/circuit/keccak/keccak.zir:350)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x577 = x513[17]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:354)
  ToBits_21_Struct x578 = exec_ToBits_21_(ctx, x577, LAYOUT_LOOKUP(x512, unpackM3));
  NondetRegStruct21Array x579 = x578._super;
  Val x580 = x579[0]._super;
  Val x581 = x579[1]._super;
  Val x582 = x579[2]._super;
  Val x583 = x579[3]._super;
  Val x584 = x579[4]._super;
  Val x585 = x579[5]._super;
  Val x586 = x579[6]._super;
  Val x587 = x579[7]._super;
  Val x588 = x579[8]._super;
  Val x589 = x579[9]._super;
  Val x590 = x579[10]._super;
  Val x591 = x579[11]._super;
  Val x592 = x579[12]._super;
  Val x593 = x579[13]._super;
  Val x594 = x579[14]._super;
  Val x595 = x579[15]._super;
  Val x596 = x579[16]._super;
  Val x597 = x579[17]._super;
  Val x598 = x579[18]._super;
  Val x599 = x579[19]._super;
  Val x600 = x579[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:355)
  Val x601 = (((x580 + (x581 * Val(2))) + (x582 * Val(4))) + (x583 * Val(8)));
  Val x602 = (((x601 + (x584 * Val(16))) + (x585 * Val(32))) + (x586 * Val(64)));
  Val x603 = (((x602 + (x587 * Val(128))) + (x588 * Val(256))) + (x589 * Val(512)));
  Val x604 = (((x603 + (x590 * Val(1024))) + (x591 * Val(2048))) + (x592 * Val(4096)));
  Val x605 = (((x604 + (x593 * Val(8192))) + (x594 * Val(16384))) + (x595 * Val(32768)));
  Val x606 = (((x605 + (x596 * Val(65536))) + (x597 * Val(131072))) + (x598 * Val(262144)));
  Val x607 = (((x606 + (x599 * Val(524288))) + (x600 * Val(1048576))) - x577);
  EQZ(x607, "rho_minor1(zirgen/circuit/keccak/keccak.zir:355)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:358)
  RetTupleStruct x608 = exec_RetTuple(
      ctx,
      Val22Array{x517, x518, x519, x520, x521, x522, x523, x524, x525, x526, x527,
                 x528, x529, x530, x531, x532, x533, x534, x535, x536, x537, x538},
      Val22Array{x549, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559,
                 x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, Val(0)},
      Val22Array{x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x590,
                 x591, x592, x593, x594, x595, x596, x597, x598, x599, x600, Val(0)},
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(5),
      Val(5),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x512, _super));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x609 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x609;
}
RetTupleStruct execRhoMinor2_2__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor2_2__0_Layout> layout2) {
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  RetTupleStruct x3 = back_RetTuple(ctx, 6, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct24Array x5 = x3.arrD;
  Val x6 = x5[21]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:368)
  ToBits_22_Struct x7 = exec_ToBits_22_(ctx, x6, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  Val x30 = x8[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:369)
  Val x31 = (((x9 + (x10 * Val(2))) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) + (x30 * Val(2097152)));
  EQZ((x37 - x6), "rho_minor2(zirgen/circuit/keccak/keccak.zir:369)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x38 = x5[22]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:372)
  ToBits_21_Struct x39 = exec_ToBits_21_(ctx, x38, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x40 = x39._super;
  Val x41 = x40[0]._super;
  Val x42 = x40[1]._super;
  Val x43 = x40[2]._super;
  Val x44 = x40[3]._super;
  Val x45 = x40[4]._super;
  Val x46 = x40[5]._super;
  Val x47 = x40[6]._super;
  Val x48 = x40[7]._super;
  Val x49 = x40[8]._super;
  Val x50 = x40[9]._super;
  Val x51 = x40[10]._super;
  Val x52 = x40[11]._super;
  Val x53 = x40[12]._super;
  Val x54 = x40[13]._super;
  Val x55 = x40[14]._super;
  Val x56 = x40[15]._super;
  Val x57 = x40[16]._super;
  Val x58 = x40[17]._super;
  Val x59 = x40[18]._super;
  Val x60 = x40[19]._super;
  Val x61 = x40[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:373)
  Val x62 = (((x41 + (x42 * Val(2))) + (x43 * Val(4))) + (x44 * Val(8)));
  Val x63 = (((x62 + (x45 * Val(16))) + (x46 * Val(32))) + (x47 * Val(64)));
  Val x64 = (((x63 + (x48 * Val(128))) + (x49 * Val(256))) + (x50 * Val(512)));
  Val x65 = (((x64 + (x51 * Val(1024))) + (x52 * Val(2048))) + (x53 * Val(4096)));
  Val x66 = (((x65 + (x54 * Val(8192))) + (x55 * Val(16384))) + (x56 * Val(32768)));
  Val x67 = (((x66 + (x57 * Val(65536))) + (x58 * Val(131072))) + (x59 * Val(262144)));
  Val x68 = (((x67 + (x60 * Val(524288))) + (x61 * Val(1048576))) - x38);
  EQZ(x68, "rho_minor2(zirgen/circuit/keccak/keccak.zir:373)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x69 = x5[23]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:376)
  ToBits_21_Struct x70 = exec_ToBits_21_(ctx, x69, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:377)
  Val x93 = (((x72 + (x73 * Val(2))) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x94 = (((x93 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x95 = (((x94 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x96 = (((x95 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x97 = (((x96 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x98 = (((x97 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x99 = (((x98 + (x91 * Val(524288))) + (x92 * Val(1048576))) - x69);
  EQZ(x99, "rho_minor2(zirgen/circuit/keccak/keccak.zir:377)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct22Array x100 = x3.arrA;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:383)
  Val x101 = x100[9]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:390)
  ToBits_22_Struct x102 = exec_ToBits_22_(ctx, x101, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x103 = x102._super;
  Val x104 = x103[0]._super;
  Val x105 = x103[1]._super;
  Val x106 = x103[2]._super;
  Val x107 = x103[3]._super;
  Val x108 = x103[4]._super;
  Val x109 = x103[5]._super;
  Val x110 = x103[6]._super;
  Val x111 = x103[7]._super;
  Val x112 = x103[8]._super;
  Val x113 = x103[9]._super;
  Val x114 = x103[10]._super;
  Val x115 = x103[11]._super;
  Val x116 = x103[12]._super;
  Val x117 = x103[13]._super;
  Val x118 = x103[14]._super;
  Val x119 = x103[15]._super;
  Val x120 = x103[16]._super;
  Val x121 = x103[17]._super;
  Val x122 = x103[18]._super;
  Val x123 = x103[19]._super;
  Val x124 = x103[20]._super;
  Val x125 = x103[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:391)
  Val x126 = (((x104 + (x105 * Val(2))) + (x106 * Val(4))) + (x107 * Val(8)));
  Val x127 = (((x126 + (x108 * Val(16))) + (x109 * Val(32))) + (x110 * Val(64)));
  Val x128 = (((x127 + (x111 * Val(128))) + (x112 * Val(256))) + (x113 * Val(512)));
  Val x129 = (((x128 + (x114 * Val(1024))) + (x115 * Val(2048))) + (x116 * Val(4096)));
  Val x130 = (((x129 + (x117 * Val(8192))) + (x118 * Val(16384))) + (x119 * Val(32768)));
  Val x131 = (((x130 + (x120 * Val(65536))) + (x121 * Val(131072))) + (x122 * Val(262144)));
  Val x132 = (((x131 + (x123 * Val(524288))) + (x124 * Val(1048576))) + (x125 * Val(2097152)));
  EQZ((x132 - x101), "rho_minor2(zirgen/circuit/keccak/keccak.zir:391)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:395)
  Val x133 = x100[10]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:402)
  ToBits_21_Struct x134 = exec_ToBits_21_(ctx, x133, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x135 = x134._super;
  Val x136 = x135[0]._super;
  Val x137 = x135[1]._super;
  Val x138 = x135[2]._super;
  Val x139 = x135[3]._super;
  Val x140 = x135[4]._super;
  Val x141 = x135[5]._super;
  Val x142 = x135[6]._super;
  Val x143 = x135[7]._super;
  Val x144 = x135[8]._super;
  Val x145 = x135[9]._super;
  Val x146 = x135[10]._super;
  Val x147 = x135[11]._super;
  Val x148 = x135[12]._super;
  Val x149 = x135[13]._super;
  Val x150 = x135[14]._super;
  Val x151 = x135[15]._super;
  Val x152 = x135[16]._super;
  Val x153 = x135[17]._super;
  Val x154 = x135[18]._super;
  Val x155 = x135[19]._super;
  Val x156 = x135[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:403)
  Val x157 = (((x136 + (x137 * Val(2))) + (x138 * Val(4))) + (x139 * Val(8)));
  Val x158 = (((x157 + (x140 * Val(16))) + (x141 * Val(32))) + (x142 * Val(64)));
  Val x159 = (((x158 + (x143 * Val(128))) + (x144 * Val(256))) + (x145 * Val(512)));
  Val x160 = (((x159 + (x146 * Val(1024))) + (x147 * Val(2048))) + (x148 * Val(4096)));
  Val x161 = (((x160 + (x149 * Val(8192))) + (x150 * Val(16384))) + (x151 * Val(32768)));
  Val x162 = (((x161 + (x152 * Val(65536))) + (x153 * Val(131072))) + (x154 * Val(262144)));
  Val x163 = (((x162 + (x155 * Val(524288))) + (x156 * Val(1048576))) - x133);
  EQZ(x163, "rho_minor2(zirgen/circuit/keccak/keccak.zir:403)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:407)
  Val x164 = x100[11]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:414)
  ToBits_21_Struct x165 = exec_ToBits_21_(ctx, x164, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x166 = x165._super;
  Val x167 = x166[0]._super;
  Val x168 = x166[1]._super;
  Val x169 = x166[2]._super;
  Val x170 = x166[3]._super;
  Val x171 = x166[4]._super;
  Val x172 = x166[5]._super;
  Val x173 = x166[6]._super;
  Val x174 = x166[7]._super;
  Val x175 = x166[8]._super;
  Val x176 = x166[9]._super;
  Val x177 = x166[10]._super;
  Val x178 = x166[11]._super;
  Val x179 = x166[12]._super;
  Val x180 = x166[13]._super;
  Val x181 = x166[14]._super;
  Val x182 = x166[15]._super;
  Val x183 = x166[16]._super;
  Val x184 = x166[17]._super;
  Val x185 = x166[18]._super;
  Val x186 = x166[19]._super;
  Val x187 = x166[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:415)
  Val x188 = (((x167 + (x168 * Val(2))) + (x169 * Val(4))) + (x170 * Val(8)));
  Val x189 = (((x188 + (x171 * Val(16))) + (x172 * Val(32))) + (x173 * Val(64)));
  Val x190 = (((x189 + (x174 * Val(128))) + (x175 * Val(256))) + (x176 * Val(512)));
  Val x191 = (((x190 + (x177 * Val(1024))) + (x178 * Val(2048))) + (x179 * Val(4096)));
  Val x192 = (((x191 + (x180 * Val(8192))) + (x181 * Val(16384))) + (x182 * Val(32768)));
  Val x193 = (((x192 + (x183 * Val(65536))) + (x184 * Val(131072))) + (x185 * Val(262144)));
  Val x194 = (((x193 + (x186 * Val(524288))) + (x187 * Val(1048576))) - x164);
  EQZ(x194, "rho_minor2(zirgen/circuit/keccak/keccak.zir:415)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x195 = x4.arrA;
  Val x196 = x195[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x197 = ((Val(1) - x104) * (Val(1) - x196));
  Val x198 = ((x104 * x196) + x197);
  Val x199 = ((Val(1) - x198) * (Val(1) - x92));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x200 = x195[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x201 = ((Val(1) - x105) * (Val(1) - x200));
  Val x202 = ((x105 * x200) + x201);
  Val x203 = ((Val(1) - x202) * (Val(1) - x9));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x204 = x195[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x205 = ((Val(1) - x106) * (Val(1) - x204));
  Val x206 = ((x106 * x204) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x10));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x208 = x195[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x209 = ((Val(1) - x107) * (Val(1) - x208));
  Val x210 = ((x107 * x208) + x209);
  Val x211 = ((Val(1) - x210) * (Val(1) - x11));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x212 = x195[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x213 = ((Val(1) - x108) * (Val(1) - x212));
  Val x214 = ((x108 * x212) + x213);
  Val x215 = ((Val(1) - x214) * (Val(1) - x12));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x216 = x195[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x217 = ((Val(1) - x109) * (Val(1) - x216));
  Val x218 = ((x109 * x216) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x13));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x220 = x195[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x221 = ((Val(1) - x110) * (Val(1) - x220));
  Val x222 = ((x110 * x220) + x221);
  Val x223 = ((Val(1) - x222) * (Val(1) - x14));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x224 = x195[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x225 = ((Val(1) - x111) * (Val(1) - x224));
  Val x226 = ((x111 * x224) + x225);
  Val x227 = ((Val(1) - x226) * (Val(1) - x15));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x228 = x195[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x229 = ((Val(1) - x112) * (Val(1) - x228));
  Val x230 = ((x112 * x228) + x229);
  Val x231 = ((Val(1) - x230) * (Val(1) - x16));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x232 = x195[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x233 = ((Val(1) - x113) * (Val(1) - x232));
  Val x234 = ((x113 * x232) + x233);
  Val x235 = ((Val(1) - x234) * (Val(1) - x17));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x236 = x195[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x237 = ((Val(1) - x114) * (Val(1) - x236));
  Val x238 = ((x114 * x236) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x18));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x240 = x195[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x241 = ((Val(1) - x115) * (Val(1) - x240));
  Val x242 = ((x115 * x240) + x241);
  Val x243 = ((Val(1) - x242) * (Val(1) - x19));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x244 = x195[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x245 = ((Val(1) - x116) * (Val(1) - x244));
  Val x246 = ((x116 * x244) + x245);
  Val x247 = ((Val(1) - x246) * (Val(1) - x20));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x248 = x195[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x249 = ((Val(1) - x117) * (Val(1) - x248));
  Val x250 = ((x117 * x248) + x249);
  Val x251 = ((Val(1) - x250) * (Val(1) - x21));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x252 = x195[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x253 = ((Val(1) - x118) * (Val(1) - x252));
  Val x254 = ((x118 * x252) + x253);
  Val x255 = ((Val(1) - x254) * (Val(1) - x22));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x256 = x195[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x257 = ((Val(1) - x119) * (Val(1) - x256));
  Val x258 = ((x119 * x256) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x23));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x260 = x195[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x261 = ((Val(1) - x120) * (Val(1) - x260));
  Val x262 = ((x120 * x260) + x261);
  Val x263 = ((Val(1) - x262) * (Val(1) - x24));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x264 = x195[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x265 = ((Val(1) - x121) * (Val(1) - x264));
  Val x266 = ((x121 * x264) + x265);
  Val x267 = ((Val(1) - x266) * (Val(1) - x25));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x268 = x195[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x269 = ((Val(1) - x122) * (Val(1) - x268));
  Val x270 = ((x122 * x268) + x269);
  Val x271 = ((Val(1) - x270) * (Val(1) - x26));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x272 = x195[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x273 = ((Val(1) - x123) * (Val(1) - x272));
  Val x274 = ((x123 * x272) + x273);
  Val x275 = ((Val(1) - x274) * (Val(1) - x27));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x276 = x195[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x277 = ((Val(1) - x124) * (Val(1) - x276));
  Val x278 = ((x124 * x276) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x28));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x280 = x195[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x281 = ((Val(1) - x125) * (Val(1) - x280));
  Val x282 = ((x125 * x280) + x281);
  Val x283 = ((Val(1) - x282) * (Val(1) - x29));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x284 = x4.arrB;
  Val x285 = x284[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x286 = ((Val(1) - x136) * (Val(1) - x285));
  Val x287 = ((x136 * x285) + x286);
  Val x288 = ((Val(1) - x287) * (Val(1) - x30));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x289 = x284[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x290 = ((Val(1) - x137) * (Val(1) - x289));
  Val x291 = ((x137 * x289) + x290);
  Val x292 = ((Val(1) - x291) * (Val(1) - x41));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x293 = x284[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x294 = ((Val(1) - x138) * (Val(1) - x293));
  Val x295 = ((x138 * x293) + x294);
  Val x296 = ((Val(1) - x295) * (Val(1) - x42));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x297 = x284[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x298 = ((Val(1) - x139) * (Val(1) - x297));
  Val x299 = ((x139 * x297) + x298);
  Val x300 = ((Val(1) - x299) * (Val(1) - x43));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x301 = x284[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x302 = ((Val(1) - x140) * (Val(1) - x301));
  Val x303 = ((x140 * x301) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x44));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x305 = x284[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x306 = ((Val(1) - x141) * (Val(1) - x305));
  Val x307 = ((x141 * x305) + x306);
  Val x308 = ((Val(1) - x307) * (Val(1) - x45));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x309 = x284[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x310 = ((Val(1) - x142) * (Val(1) - x309));
  Val x311 = ((x142 * x309) + x310);
  Val x312 = ((Val(1) - x311) * (Val(1) - x46));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x313 = x284[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x314 = ((Val(1) - x143) * (Val(1) - x313));
  Val x315 = ((x143 * x313) + x314);
  Val x316 = ((Val(1) - x315) * (Val(1) - x47));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x317 = x284[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x318 = ((Val(1) - x144) * (Val(1) - x317));
  Val x319 = ((x144 * x317) + x318);
  Val x320 = ((Val(1) - x319) * (Val(1) - x48));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x321 = x284[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x322 = ((Val(1) - x145) * (Val(1) - x321));
  Val x323 = ((x145 * x321) + x322);
  Val x324 = ((Val(1) - x323) * (Val(1) - x49));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x325 = x284[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x326 = ((Val(1) - x146) * (Val(1) - x325));
  Val x327 = ((x146 * x325) + x326);
  Val x328 = ((Val(1) - x327) * (Val(1) - x50));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x329 = x284[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x330 = ((Val(1) - x147) * (Val(1) - x329));
  Val x331 = ((x147 * x329) + x330);
  Val x332 = ((Val(1) - x331) * (Val(1) - x51));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x333 = x284[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x334 = ((Val(1) - x148) * (Val(1) - x333));
  Val x335 = ((x148 * x333) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x52));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x337 = x284[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x338 = ((Val(1) - x149) * (Val(1) - x337));
  Val x339 = ((x149 * x337) + x338);
  Val x340 = ((Val(1) - x339) * (Val(1) - x53));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x341 = x284[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x342 = ((Val(1) - x150) * (Val(1) - x341));
  Val x343 = ((x150 * x341) + x342);
  Val x344 = ((Val(1) - x343) * (Val(1) - x54));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x345 = x284[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x346 = ((Val(1) - x151) * (Val(1) - x345));
  Val x347 = ((x151 * x345) + x346);
  Val x348 = ((Val(1) - x347) * (Val(1) - x55));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x349 = x284[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x350 = ((Val(1) - x152) * (Val(1) - x349));
  Val x351 = ((x152 * x349) + x350);
  Val x352 = ((Val(1) - x351) * (Val(1) - x56));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x353 = x284[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x354 = ((Val(1) - x153) * (Val(1) - x353));
  Val x355 = ((x153 * x353) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x57));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x357 = x284[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x358 = ((Val(1) - x154) * (Val(1) - x357));
  Val x359 = ((x154 * x357) + x358);
  Val x360 = ((Val(1) - x359) * (Val(1) - x58));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x361 = x284[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x362 = ((Val(1) - x155) * (Val(1) - x361));
  Val x363 = ((x155 * x361) + x362);
  Val x364 = ((Val(1) - x363) * (Val(1) - x59));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x365 = x284[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x366 = ((Val(1) - x156) * (Val(1) - x365));
  Val x367 = ((x156 * x365) + x366);
  Val x368 = ((Val(1) - x367) * (Val(1) - x60));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x369 = x4.arrC;
  Val x370 = x369[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x371 = ((Val(1) - x167) * (Val(1) - x370));
  Val x372 = ((x167 * x370) + x371);
  Val x373 = ((Val(1) - x372) * (Val(1) - x61));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x374 = x369[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x375 = ((Val(1) - x168) * (Val(1) - x374));
  Val x376 = ((x168 * x374) + x375);
  Val x377 = ((Val(1) - x376) * (Val(1) - x72));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x378 = x369[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x379 = ((Val(1) - x169) * (Val(1) - x378));
  Val x380 = ((x169 * x378) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x73));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x382 = x369[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x383 = ((Val(1) - x170) * (Val(1) - x382));
  Val x384 = ((x170 * x382) + x383);
  Val x385 = ((Val(1) - x384) * (Val(1) - x74));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x386 = x369[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x387 = ((Val(1) - x171) * (Val(1) - x386));
  Val x388 = ((x171 * x386) + x387);
  Val x389 = ((Val(1) - x388) * (Val(1) - x75));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x390 = x369[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x391 = ((Val(1) - x172) * (Val(1) - x390));
  Val x392 = ((x172 * x390) + x391);
  Val x393 = ((Val(1) - x392) * (Val(1) - x76));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x394 = x369[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x395 = ((Val(1) - x173) * (Val(1) - x394));
  Val x396 = ((x173 * x394) + x395);
  Val x397 = ((Val(1) - x396) * (Val(1) - x77));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x398 = x369[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x399 = ((Val(1) - x174) * (Val(1) - x398));
  Val x400 = ((x174 * x398) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x78));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x402 = x369[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x403 = ((Val(1) - x175) * (Val(1) - x402));
  Val x404 = ((x175 * x402) + x403);
  Val x405 = ((Val(1) - x404) * (Val(1) - x79));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x406 = x369[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x407 = ((Val(1) - x176) * (Val(1) - x406));
  Val x408 = ((x176 * x406) + x407);
  Val x409 = ((Val(1) - x408) * (Val(1) - x80));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x410 = x369[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x411 = ((Val(1) - x177) * (Val(1) - x410));
  Val x412 = ((x177 * x410) + x411);
  Val x413 = ((Val(1) - x412) * (Val(1) - x81));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x414 = x369[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x415 = ((Val(1) - x178) * (Val(1) - x414));
  Val x416 = ((x178 * x414) + x415);
  Val x417 = ((Val(1) - x416) * (Val(1) - x82));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x418 = x369[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x419 = ((Val(1) - x179) * (Val(1) - x418));
  Val x420 = ((x179 * x418) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x83));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x422 = x369[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x423 = ((Val(1) - x180) * (Val(1) - x422));
  Val x424 = ((x180 * x422) + x423);
  Val x425 = ((Val(1) - x424) * (Val(1) - x84));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x426 = x369[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x427 = ((Val(1) - x181) * (Val(1) - x426));
  Val x428 = ((x181 * x426) + x427);
  Val x429 = ((Val(1) - x428) * (Val(1) - x85));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x430 = x369[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x431 = ((Val(1) - x182) * (Val(1) - x430));
  Val x432 = ((x182 * x430) + x431);
  Val x433 = ((Val(1) - x432) * (Val(1) - x86));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x434 = x369[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x435 = ((Val(1) - x183) * (Val(1) - x434));
  Val x436 = ((x183 * x434) + x435);
  Val x437 = ((Val(1) - x436) * (Val(1) - x87));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x438 = x369[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x439 = ((Val(1) - x184) * (Val(1) - x438));
  Val x440 = ((x184 * x438) + x439);
  Val x441 = ((Val(1) - x440) * (Val(1) - x88));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x442 = x369[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x443 = ((Val(1) - x185) * (Val(1) - x442));
  Val x444 = ((x185 * x442) + x443);
  Val x445 = ((Val(1) - x444) * (Val(1) - x89));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x446 = x369[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x447 = ((Val(1) - x186) * (Val(1) - x446));
  Val x448 = ((x186 * x446) + x447);
  Val x449 = ((Val(1) - x448) * (Val(1) - x90));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x450 = x369[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x451 = ((Val(1) - x187) * (Val(1) - x450));
  Val x452 = ((x187 * x450) + x451);
  Val x453 = ((Val(1) - x452) * (Val(1) - x91));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:422)
  Val x454 = (((x347 * x55) + x348) * Val(2));
  Val x455 = (((x351 * x56) + x352) * Val(4));
  Val x456 = (((x355 * x57) + x356) * Val(8));
  Val x457 = (((x359 * x58) + x360) * Val(16));
  Val x458 = (((x363 * x59) + x364) * Val(32));
  Val x459 = (((x367 * x60) + x368) * Val(64));
  Val x460 = (((x372 * x61) + x373) * Val(128));
  Val x461 = (((x376 * x72) + x377) * Val(256));
  Val x462 = (((x380 * x73) + x381) * Val(512));
  Val x463 = (((x384 * x74) + x385) * Val(1024));
  Val x464 = (((x388 * x75) + x389) * Val(2048));
  Val x465 = (((x392 * x76) + x393) * Val(4096));
  Val x466 = (((x396 * x77) + x397) * Val(8192));
  Val x467 = (((x400 * x78) + x401) * Val(16384));
  Val x468 = (((x404 * x79) + x405) * Val(32768));
  Val x469 = (((x408 * x80) + x409) * Val(65536));
  Val x470 = (((x412 * x81) + x413) * Val(131072));
  Val x471 = (((x416 * x82) + x417) * Val(262144));
  Val x472 = (((x420 * x83) + x421) * Val(524288));
  Val x473 = (((x424 * x84) + x425) * Val(1048576));
  Val x474 = (((x428 * x85) + x429) * Val(2097152));
  Val x475 = (((x343 * x54) + x344) + x454);
  Val x476 = (((x475 + x455) + x456) + x457);
  Val x477 = (((x476 + x458) + x459) + x460);
  Val x478 = (((x477 + x461) + x462) + x463);
  Val x479 = (((x478 + x464) + x465) + x466);
  Val x480 = (((x479 + x467) + x468) + x469);
  Val x481 = (((x480 + x470) + x471) + x472);
  NondetRegStruct x482 = exec_Reg(ctx, ((x481 + x473) + x474), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:423)
  Val x483 = (((x436 * x87) + x437) * Val(2));
  Val x484 = (((x440 * x88) + x441) * Val(4));
  Val x485 = (((x444 * x89) + x445) * Val(8));
  Val x486 = (((x448 * x90) + x449) * Val(16));
  Val x487 = (((x452 * x91) + x453) * Val(32));
  Val x488 = (((x198 * x92) + x199) * Val(64));
  Val x489 = (((x202 * x9) + x203) * Val(128));
  Val x490 = (((x206 * x10) + x207) * Val(256));
  Val x491 = (((x210 * x11) + x211) * Val(512));
  Val x492 = (((x214 * x12) + x215) * Val(1024));
  Val x493 = (((x218 * x13) + x219) * Val(2048));
  Val x494 = (((x222 * x14) + x223) * Val(4096));
  Val x495 = (((x226 * x15) + x227) * Val(8192));
  Val x496 = (((x230 * x16) + x231) * Val(16384));
  Val x497 = (((x234 * x17) + x235) * Val(32768));
  Val x498 = (((x238 * x18) + x239) * Val(65536));
  Val x499 = (((x242 * x19) + x243) * Val(131072));
  Val x500 = (((x246 * x20) + x247) * Val(262144));
  Val x501 = (((x250 * x21) + x251) * Val(524288));
  Val x502 = (((x254 * x22) + x255) * Val(1048576));
  Val x503 = (((x432 * x86) + x433) + x483);
  Val x504 = (((x503 + x484) + x485) + x486);
  Val x505 = (((x504 + x487) + x488) + x489);
  Val x506 = (((x505 + x490) + x491) + x492);
  Val x507 = (((x506 + x493) + x494) + x495);
  Val x508 = (((x507 + x496) + x497) + x498);
  Val x509 = (((x508 + x499) + x500) + x501);
  NondetRegStruct x510 = exec_Reg(ctx, (x509 + x502), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:424)
  Val x511 = (((x262 * x24) + x263) * Val(2));
  Val x512 = (((x266 * x25) + x267) * Val(4));
  Val x513 = (((x270 * x26) + x271) * Val(8));
  Val x514 = (((x274 * x27) + x275) * Val(16));
  Val x515 = (((x278 * x28) + x279) * Val(32));
  Val x516 = (((x282 * x29) + x283) * Val(64));
  Val x517 = (((x287 * x30) + x288) * Val(128));
  Val x518 = (((x291 * x41) + x292) * Val(256));
  Val x519 = (((x295 * x42) + x296) * Val(512));
  Val x520 = (((x299 * x43) + x300) * Val(1024));
  Val x521 = (((x303 * x44) + x304) * Val(2048));
  Val x522 = (((x307 * x45) + x308) * Val(4096));
  Val x523 = (((x311 * x46) + x312) * Val(8192));
  Val x524 = (((x315 * x47) + x316) * Val(16384));
  Val x525 = (((x319 * x48) + x320) * Val(32768));
  Val x526 = (((x323 * x49) + x324) * Val(65536));
  Val x527 = (((x327 * x50) + x328) * Val(131072));
  Val x528 = (((x331 * x51) + x332) * Val(262144));
  Val x529 = (((x335 * x52) + x336) * Val(524288));
  Val x530 = (((x339 * x53) + x340) * Val(1048576));
  Val x531 = (((x258 * x23) + x259) + x511);
  Val x532 = (((x531 + x512) + x513) + x514);
  Val x533 = (((x532 + x515) + x516) + x517);
  Val x534 = (((x533 + x518) + x519) + x520);
  Val x535 = (((x534 + x521) + x522) + x523);
  Val x536 = (((x535 + x524) + x525) + x526);
  Val x537 = (((x536 + x527) + x528) + x529);
  NondetRegStruct x538 = exec_Reg(ctx, (x537 + x530), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:427)
  Val22Array x539 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x540 = exec_RetTuple(
      ctx,
      x539,
      x539,
      x539,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x539,
      Val22Array{x482._super, x510._super, x538._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(6),
      Val(5),
      x4.rnd._super,
      x4.blk._super,
      x4.midx._super,
      LAYOUT_LOOKUP(layout2, _super));
  return x540;
}
RetTupleStruct execRhoMinor0_4__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_4__0_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 7, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[18]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[19]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[20]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[9]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[10]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[11]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(7),
                    Val(5),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_4__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_4__0_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_4__0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 8, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrA;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[12]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[13]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[14]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x298 * x296) + x299) * Val(2));
  Val x428 = (((x303 * x301) + x304) * Val(4));
  Val x429 = (((x308 * x306) + x309) * Val(8));
  Val x430 = (((x313 * x311) + x314) * Val(16));
  Val x431 = (((x318 * x316) + x319) * Val(32));
  Val x432 = (((x325 * x323) + x326) * Val(64));
  Val x433 = (((x330 * x328) + x331) * Val(128));
  Val x434 = (((x335 * x333) + x336) * Val(256));
  Val x435 = (((x340 * x338) + x341) * Val(512));
  Val x436 = (((x345 * x343) + x346) * Val(1024));
  Val x437 = (((x350 * x348) + x351) * Val(2048));
  Val x438 = (((x355 * x353) + x356) * Val(4096));
  Val x439 = (((x360 * x358) + x361) * Val(8192));
  Val x440 = (((x365 * x363) + x366) * Val(16384));
  Val x441 = (((x370 * x368) + x371) * Val(32768));
  Val x442 = (((x375 * x373) + x376) * Val(65536));
  Val x443 = (((x380 * x378) + x381) * Val(131072));
  Val x444 = (((x385 * x383) + x386) * Val(262144));
  Val x445 = (((x390 * x388) + x391) * Val(524288));
  Val x446 = (((x395 * x393) + x396) * Val(1048576));
  Val x447 = (((x400 * x398) + x401) * Val(2097152));
  Val x448 = (((x293 * x291) + x294) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x410 * x408) + x411) * Val(2));
  Val x457 = (((x415 * x413) + x416) * Val(4));
  Val x458 = (((x420 * x418) + x421) * Val(8));
  Val x459 = (((x425 * x423) + x426) * Val(16));
  Val x460 = (((x106 * x104) + x107) * Val(32));
  Val x461 = (((x111 * x109) + x112) * Val(64));
  Val x462 = (((x116 * x114) + x117) * Val(128));
  Val x463 = (((x121 * x119) + x122) * Val(256));
  Val x464 = (((x126 * x124) + x127) * Val(512));
  Val x465 = (((x131 * x129) + x132) * Val(1024));
  Val x466 = (((x136 * x134) + x137) * Val(2048));
  Val x467 = (((x141 * x139) + x142) * Val(4096));
  Val x468 = (((x146 * x144) + x147) * Val(8192));
  Val x469 = (((x151 * x149) + x152) * Val(16384));
  Val x470 = (((x156 * x154) + x157) * Val(32768));
  Val x471 = (((x161 * x159) + x162) * Val(65536));
  Val x472 = (((x166 * x164) + x167) * Val(131072));
  Val x473 = (((x171 * x169) + x172) * Val(262144));
  Val x474 = (((x176 * x174) + x177) * Val(524288));
  Val x475 = (((x181 * x179) + x182) * Val(1048576));
  Val x476 = (((x405 * x403) + x406) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x191 * x189) + x192) * Val(2));
  Val x485 = (((x196 * x194) + x197) * Val(4));
  Val x486 = (((x201 * x199) + x202) * Val(8));
  Val x487 = (((x206 * x204) + x207) * Val(16));
  Val x488 = (((x211 * x209) + x212) * Val(32));
  Val x489 = (((x218 * x216) + x219) * Val(64));
  Val x490 = (((x223 * x221) + x224) * Val(128));
  Val x491 = (((x228 * x226) + x229) * Val(256));
  Val x492 = (((x233 * x231) + x234) * Val(512));
  Val x493 = (((x238 * x236) + x239) * Val(1024));
  Val x494 = (((x243 * x241) + x244) * Val(2048));
  Val x495 = (((x248 * x246) + x249) * Val(4096));
  Val x496 = (((x253 * x251) + x254) * Val(8192));
  Val x497 = (((x258 * x256) + x259) * Val(16384));
  Val x498 = (((x263 * x261) + x264) * Val(32768));
  Val x499 = (((x268 * x266) + x269) * Val(65536));
  Val x500 = (((x273 * x271) + x274) * Val(131072));
  Val x501 = (((x278 * x276) + x279) * Val(262144));
  Val x502 = (((x283 * x281) + x284) * Val(524288));
  Val x503 = (((x288 * x286) + x289) * Val(1048576));
  Val x504 = (((x186 * x184) + x187) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:342)
  Val22Array x512 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x513 = exec_RetTuple(
      ctx,
      x512,
      x512,
      x512,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x512,
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(8),
      Val(5),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x3, arm0));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x514 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x514;
}
RetTupleStruct execRhoMinor3_0_(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<RhoMinor3_0__SuperLayout> layout2) {
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:432)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:433)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:434)
  RetTupleStruct x5 = back_RetTuple(ctx, 4, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:435)
  RetTupleStruct x6 = back_RetTuple(ctx, 6, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:436)
  RetTupleStruct x7 = back_RetTuple(ctx, 7, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  RetTupleStruct x8 = back_RetTuple(ctx, 9, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:436)
  NondetRegStruct22Array x9 = x7.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:435)
  NondetRegStruct22Array x10 = x6.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:434)
  NondetRegStruct22Array x11 = x5.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:433)
  NondetRegStruct22Array x12 = x4.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:432)
  NondetRegStruct22Array x13 = x3.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  NondetRegStruct22Array x14 = x8.arrA;
  NondetRegStruct22Array x15 = x8.arrB;
  NondetRegStruct22Array x16 = x8.arrC;
  NondetRegStruct24Array x17 = x8.arrD;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:449)
  Val22Array x18 =
      Val22Array{x9[0]._super,   x9[1]._super,   x9[2]._super,   x10[0]._super,  x10[1]._super,
                 x10[2]._super,  x11[0]._super,  x11[1]._super,  x11[2]._super,  x12[0]._super,
                 x12[1]._super,  x12[2]._super,  x13[0]._super,  x13[1]._super,  x13[2]._super,
                 x14[15]._super, x14[16]._super, x14[17]._super, x14[18]._super, x14[19]._super,
                 x14[20]._super, x14[21]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  Val22Array x19 =
      Val22Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super};
  Val22Array x20 =
      Val22Array{x16[0]._super,  x16[1]._super,  x16[2]._super,  x16[3]._super,  x16[4]._super,
                 x16[5]._super,  x16[6]._super,  x16[7]._super,  x16[8]._super,  x16[9]._super,
                 x16[10]._super, x16[11]._super, x16[12]._super, x16[13]._super, x16[14]._super,
                 x16[15]._super, x16[16]._super, x16[17]._super, x16[18]._super, x16[19]._super,
                 x16[20]._super, x16[21]._super};
  Val24Array x21 =
      Val24Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x17[22]._super, x17[23]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:451)
  Val22Array x22 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:450)
  RetTupleStruct x23 = exec_RetTuple(ctx,
                                     x18,
                                     x19,
                                     x20,
                                     x21,
                                     x22,
                                     x22,
                                     Val(0),
                                     Val(6),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(layout2, arm0));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:439)
  RetTupleStruct x24 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(layout2, _super));
  return x24;
}
RetTupleStruct execRhoMajor_0_(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<RhoMajor_0_Layout> layout2) {
  // rho_major(zirgen/circuit/keccak/keccak.zir:529)
  BoundLayout<RhoMajor_0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_major(zirgen/circuit/keccak/keccak.zir:528)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_9_Struct x5 = exec_OneHot_9_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct9Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:530)
    RetTupleStruct x8 = execRhoMinor0_0__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm0));
    x7 = x8;
  } else if (to_size_t(x6[1]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:531)
    RetTupleStruct x9 = execRhoMinor1_0__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x9;
  } else if (to_size_t(x6[2]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:532)
    RetTupleStruct x10 = execRhoMinor2_0__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x10;
  } else if (to_size_t(x6[3]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:533)
    RetTupleStruct x11 = execRhoMinor0_2__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x11;
  } else if (to_size_t(x6[4]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:534)
    RetTupleStruct x12 = execRhoMinor1_2__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x12;
  } else if (to_size_t(x6[5]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:535)
    RetTupleStruct x13 = execRhoMinor2_2__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm5));
    x7 = x13;
  } else if (to_size_t(x6[6]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:536)
    RetTupleStruct x14 = execRhoMinor0_4__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm6));
    x7 = x14;
  } else if (to_size_t(x6[7]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:537)
    RetTupleStruct x15 = execRhoMinor1_4__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x15;
  } else if (to_size_t(x6[8]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:538)
    RetTupleStruct x16 = execRhoMinor3_0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x16;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // rho_major(zirgen/circuit/keccak/keccak.zir:529)
  RetTupleStruct x17 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x17;
}
RetTupleStruct execRhoMinor0_0__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_0__1_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[21]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[22]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[23]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[12]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[13]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[14]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(1),
                    Val(6),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_0__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_0__1_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_0__1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrA;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[15]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[16]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[17]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x253 * x251) + x254) * Val(2));
  Val x428 = (((x258 * x256) + x259) * Val(4));
  Val x429 = (((x263 * x261) + x264) * Val(8));
  Val x430 = (((x268 * x266) + x269) * Val(16));
  Val x431 = (((x273 * x271) + x274) * Val(32));
  Val x432 = (((x278 * x276) + x279) * Val(64));
  Val x433 = (((x283 * x281) + x284) * Val(128));
  Val x434 = (((x288 * x286) + x289) * Val(256));
  Val x435 = (((x293 * x291) + x294) * Val(512));
  Val x436 = (((x298 * x296) + x299) * Val(1024));
  Val x437 = (((x303 * x301) + x304) * Val(2048));
  Val x438 = (((x308 * x306) + x309) * Val(4096));
  Val x439 = (((x313 * x311) + x314) * Val(8192));
  Val x440 = (((x318 * x316) + x319) * Val(16384));
  Val x441 = (((x325 * x323) + x326) * Val(32768));
  Val x442 = (((x330 * x328) + x331) * Val(65536));
  Val x443 = (((x335 * x333) + x336) * Val(131072));
  Val x444 = (((x340 * x338) + x341) * Val(262144));
  Val x445 = (((x345 * x343) + x346) * Val(524288));
  Val x446 = (((x350 * x348) + x351) * Val(1048576));
  Val x447 = (((x355 * x353) + x356) * Val(2097152));
  Val x448 = (((x248 * x246) + x249) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x365 * x363) + x366) * Val(2));
  Val x457 = (((x370 * x368) + x371) * Val(4));
  Val x458 = (((x375 * x373) + x376) * Val(8));
  Val x459 = (((x380 * x378) + x381) * Val(16));
  Val x460 = (((x385 * x383) + x386) * Val(32));
  Val x461 = (((x390 * x388) + x391) * Val(64));
  Val x462 = (((x395 * x393) + x396) * Val(128));
  Val x463 = (((x400 * x398) + x401) * Val(256));
  Val x464 = (((x405 * x403) + x406) * Val(512));
  Val x465 = (((x410 * x408) + x411) * Val(1024));
  Val x466 = (((x415 * x413) + x416) * Val(2048));
  Val x467 = (((x420 * x418) + x421) * Val(4096));
  Val x468 = (((x425 * x423) + x426) * Val(8192));
  Val x469 = (((x106 * x104) + x107) * Val(16384));
  Val x470 = (((x111 * x109) + x112) * Val(32768));
  Val x471 = (((x116 * x114) + x117) * Val(65536));
  Val x472 = (((x121 * x119) + x122) * Val(131072));
  Val x473 = (((x126 * x124) + x127) * Val(262144));
  Val x474 = (((x131 * x129) + x132) * Val(524288));
  Val x475 = (((x136 * x134) + x137) * Val(1048576));
  Val x476 = (((x360 * x358) + x361) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x146 * x144) + x147) * Val(2));
  Val x485 = (((x151 * x149) + x152) * Val(4));
  Val x486 = (((x156 * x154) + x157) * Val(8));
  Val x487 = (((x161 * x159) + x162) * Val(16));
  Val x488 = (((x166 * x164) + x167) * Val(32));
  Val x489 = (((x171 * x169) + x172) * Val(64));
  Val x490 = (((x176 * x174) + x177) * Val(128));
  Val x491 = (((x181 * x179) + x182) * Val(256));
  Val x492 = (((x186 * x184) + x187) * Val(512));
  Val x493 = (((x191 * x189) + x192) * Val(1024));
  Val x494 = (((x196 * x194) + x197) * Val(2048));
  Val x495 = (((x201 * x199) + x202) * Val(4096));
  Val x496 = (((x206 * x204) + x207) * Val(8192));
  Val x497 = (((x211 * x209) + x212) * Val(16384));
  Val x498 = (((x218 * x216) + x219) * Val(32768));
  Val x499 = (((x223 * x221) + x224) * Val(65536));
  Val x500 = (((x228 * x226) + x229) * Val(131072));
  Val x501 = (((x233 * x231) + x234) * Val(262144));
  Val x502 = (((x238 * x236) + x239) * Val(524288));
  Val x503 = (((x243 * x241) + x244) * Val(1048576));
  Val x504 = (((x141 * x139) + x142) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_0__1_Arm1_SuperLayout> x512 = LAYOUT_LOOKUP(x3, arm1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct24Array x513 = x4.arrD;
  Val x514 = x513[9]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:345)
  ToBits_22_Struct x515 = exec_ToBits_22_(ctx, x514, LAYOUT_LOOKUP(x512, unpackM1));
  NondetRegStruct22Array x516 = x515._super;
  Val x517 = x516[0]._super;
  Val x518 = x516[1]._super;
  Val x519 = x516[2]._super;
  Val x520 = x516[3]._super;
  Val x521 = x516[4]._super;
  Val x522 = x516[5]._super;
  Val x523 = x516[6]._super;
  Val x524 = x516[7]._super;
  Val x525 = x516[8]._super;
  Val x526 = x516[9]._super;
  Val x527 = x516[10]._super;
  Val x528 = x516[11]._super;
  Val x529 = x516[12]._super;
  Val x530 = x516[13]._super;
  Val x531 = x516[14]._super;
  Val x532 = x516[15]._super;
  Val x533 = x516[16]._super;
  Val x534 = x516[17]._super;
  Val x535 = x516[18]._super;
  Val x536 = x516[19]._super;
  Val x537 = x516[20]._super;
  Val x538 = x516[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:346)
  Val x539 = (((x517 + (x518 * Val(2))) + (x519 * Val(4))) + (x520 * Val(8)));
  Val x540 = (((x539 + (x521 * Val(16))) + (x522 * Val(32))) + (x523 * Val(64)));
  Val x541 = (((x540 + (x524 * Val(128))) + (x525 * Val(256))) + (x526 * Val(512)));
  Val x542 = (((x541 + (x527 * Val(1024))) + (x528 * Val(2048))) + (x529 * Val(4096)));
  Val x543 = (((x542 + (x530 * Val(8192))) + (x531 * Val(16384))) + (x532 * Val(32768)));
  Val x544 = (((x543 + (x533 * Val(65536))) + (x534 * Val(131072))) + (x535 * Val(262144)));
  Val x545 = (((x544 + (x536 * Val(524288))) + (x537 * Val(1048576))) + (x538 * Val(2097152)));
  EQZ((x545 - x514), "rho_minor1(zirgen/circuit/keccak/keccak.zir:346)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x546 = x513[10]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:349)
  ToBits_21_Struct x547 = exec_ToBits_21_(ctx, x546, LAYOUT_LOOKUP(x512, unpackM2));
  NondetRegStruct21Array x548 = x547._super;
  Val x549 = x548[0]._super;
  Val x550 = x548[1]._super;
  Val x551 = x548[2]._super;
  Val x552 = x548[3]._super;
  Val x553 = x548[4]._super;
  Val x554 = x548[5]._super;
  Val x555 = x548[6]._super;
  Val x556 = x548[7]._super;
  Val x557 = x548[8]._super;
  Val x558 = x548[9]._super;
  Val x559 = x548[10]._super;
  Val x560 = x548[11]._super;
  Val x561 = x548[12]._super;
  Val x562 = x548[13]._super;
  Val x563 = x548[14]._super;
  Val x564 = x548[15]._super;
  Val x565 = x548[16]._super;
  Val x566 = x548[17]._super;
  Val x567 = x548[18]._super;
  Val x568 = x548[19]._super;
  Val x569 = x548[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:350)
  Val x570 = (((x549 + (x550 * Val(2))) + (x551 * Val(4))) + (x552 * Val(8)));
  Val x571 = (((x570 + (x553 * Val(16))) + (x554 * Val(32))) + (x555 * Val(64)));
  Val x572 = (((x571 + (x556 * Val(128))) + (x557 * Val(256))) + (x558 * Val(512)));
  Val x573 = (((x572 + (x559 * Val(1024))) + (x560 * Val(2048))) + (x561 * Val(4096)));
  Val x574 = (((x573 + (x562 * Val(8192))) + (x563 * Val(16384))) + (x564 * Val(32768)));
  Val x575 = (((x574 + (x565 * Val(65536))) + (x566 * Val(131072))) + (x567 * Val(262144)));
  Val x576 = (((x575 + (x568 * Val(524288))) + (x569 * Val(1048576))) - x546);
  EQZ(x576, "rho_minor1(zirgen/circuit/keccak/keccak.zir:350)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x577 = x513[11]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:354)
  ToBits_21_Struct x578 = exec_ToBits_21_(ctx, x577, LAYOUT_LOOKUP(x512, unpackM3));
  NondetRegStruct21Array x579 = x578._super;
  Val x580 = x579[0]._super;
  Val x581 = x579[1]._super;
  Val x582 = x579[2]._super;
  Val x583 = x579[3]._super;
  Val x584 = x579[4]._super;
  Val x585 = x579[5]._super;
  Val x586 = x579[6]._super;
  Val x587 = x579[7]._super;
  Val x588 = x579[8]._super;
  Val x589 = x579[9]._super;
  Val x590 = x579[10]._super;
  Val x591 = x579[11]._super;
  Val x592 = x579[12]._super;
  Val x593 = x579[13]._super;
  Val x594 = x579[14]._super;
  Val x595 = x579[15]._super;
  Val x596 = x579[16]._super;
  Val x597 = x579[17]._super;
  Val x598 = x579[18]._super;
  Val x599 = x579[19]._super;
  Val x600 = x579[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:355)
  Val x601 = (((x580 + (x581 * Val(2))) + (x582 * Val(4))) + (x583 * Val(8)));
  Val x602 = (((x601 + (x584 * Val(16))) + (x585 * Val(32))) + (x586 * Val(64)));
  Val x603 = (((x602 + (x587 * Val(128))) + (x588 * Val(256))) + (x589 * Val(512)));
  Val x604 = (((x603 + (x590 * Val(1024))) + (x591 * Val(2048))) + (x592 * Val(4096)));
  Val x605 = (((x604 + (x593 * Val(8192))) + (x594 * Val(16384))) + (x595 * Val(32768)));
  Val x606 = (((x605 + (x596 * Val(65536))) + (x597 * Val(131072))) + (x598 * Val(262144)));
  Val x607 = (((x606 + (x599 * Val(524288))) + (x600 * Val(1048576))) - x577);
  EQZ(x607, "rho_minor1(zirgen/circuit/keccak/keccak.zir:355)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:358)
  RetTupleStruct x608 = exec_RetTuple(
      ctx,
      Val22Array{x517, x518, x519, x520, x521, x522, x523, x524, x525, x526, x527,
                 x528, x529, x530, x531, x532, x533, x534, x535, x536, x537, x538},
      Val22Array{x549, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559,
                 x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, Val(0)},
      Val22Array{x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x590,
                 x591, x592, x593, x594, x595, x596, x597, x598, x599, x600, Val(0)},
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(2),
      Val(6),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x512, _super));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x609 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x609;
}
RetTupleStruct execRhoMinor2_0__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor2_0__1_Layout> layout2) {
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  RetTupleStruct x3 = back_RetTuple(ctx, 3, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct24Array x5 = x3.arrD;
  Val x6 = x5[15]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:368)
  ToBits_22_Struct x7 = exec_ToBits_22_(ctx, x6, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  Val x30 = x8[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:369)
  Val x31 = (((x9 + (x10 * Val(2))) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) + (x30 * Val(2097152)));
  EQZ((x37 - x6), "rho_minor2(zirgen/circuit/keccak/keccak.zir:369)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x38 = x5[16]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:372)
  ToBits_21_Struct x39 = exec_ToBits_21_(ctx, x38, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x40 = x39._super;
  Val x41 = x40[0]._super;
  Val x42 = x40[1]._super;
  Val x43 = x40[2]._super;
  Val x44 = x40[3]._super;
  Val x45 = x40[4]._super;
  Val x46 = x40[5]._super;
  Val x47 = x40[6]._super;
  Val x48 = x40[7]._super;
  Val x49 = x40[8]._super;
  Val x50 = x40[9]._super;
  Val x51 = x40[10]._super;
  Val x52 = x40[11]._super;
  Val x53 = x40[12]._super;
  Val x54 = x40[13]._super;
  Val x55 = x40[14]._super;
  Val x56 = x40[15]._super;
  Val x57 = x40[16]._super;
  Val x58 = x40[17]._super;
  Val x59 = x40[18]._super;
  Val x60 = x40[19]._super;
  Val x61 = x40[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:373)
  Val x62 = (((x41 + (x42 * Val(2))) + (x43 * Val(4))) + (x44 * Val(8)));
  Val x63 = (((x62 + (x45 * Val(16))) + (x46 * Val(32))) + (x47 * Val(64)));
  Val x64 = (((x63 + (x48 * Val(128))) + (x49 * Val(256))) + (x50 * Val(512)));
  Val x65 = (((x64 + (x51 * Val(1024))) + (x52 * Val(2048))) + (x53 * Val(4096)));
  Val x66 = (((x65 + (x54 * Val(8192))) + (x55 * Val(16384))) + (x56 * Val(32768)));
  Val x67 = (((x66 + (x57 * Val(65536))) + (x58 * Val(131072))) + (x59 * Val(262144)));
  Val x68 = (((x67 + (x60 * Val(524288))) + (x61 * Val(1048576))) - x38);
  EQZ(x68, "rho_minor2(zirgen/circuit/keccak/keccak.zir:373)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x69 = x5[17]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:376)
  ToBits_21_Struct x70 = exec_ToBits_21_(ctx, x69, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:377)
  Val x93 = (((x72 + (x73 * Val(2))) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x94 = (((x93 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x95 = (((x94 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x96 = (((x95 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x97 = (((x96 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x98 = (((x97 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x99 = (((x98 + (x91 * Val(524288))) + (x92 * Val(1048576))) - x69);
  EQZ(x99, "rho_minor2(zirgen/circuit/keccak/keccak.zir:377)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct22Array x100 = x3.arrA;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:383)
  Val x101 = x100[18]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:390)
  ToBits_22_Struct x102 = exec_ToBits_22_(ctx, x101, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x103 = x102._super;
  Val x104 = x103[0]._super;
  Val x105 = x103[1]._super;
  Val x106 = x103[2]._super;
  Val x107 = x103[3]._super;
  Val x108 = x103[4]._super;
  Val x109 = x103[5]._super;
  Val x110 = x103[6]._super;
  Val x111 = x103[7]._super;
  Val x112 = x103[8]._super;
  Val x113 = x103[9]._super;
  Val x114 = x103[10]._super;
  Val x115 = x103[11]._super;
  Val x116 = x103[12]._super;
  Val x117 = x103[13]._super;
  Val x118 = x103[14]._super;
  Val x119 = x103[15]._super;
  Val x120 = x103[16]._super;
  Val x121 = x103[17]._super;
  Val x122 = x103[18]._super;
  Val x123 = x103[19]._super;
  Val x124 = x103[20]._super;
  Val x125 = x103[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:391)
  Val x126 = (((x104 + (x105 * Val(2))) + (x106 * Val(4))) + (x107 * Val(8)));
  Val x127 = (((x126 + (x108 * Val(16))) + (x109 * Val(32))) + (x110 * Val(64)));
  Val x128 = (((x127 + (x111 * Val(128))) + (x112 * Val(256))) + (x113 * Val(512)));
  Val x129 = (((x128 + (x114 * Val(1024))) + (x115 * Val(2048))) + (x116 * Val(4096)));
  Val x130 = (((x129 + (x117 * Val(8192))) + (x118 * Val(16384))) + (x119 * Val(32768)));
  Val x131 = (((x130 + (x120 * Val(65536))) + (x121 * Val(131072))) + (x122 * Val(262144)));
  Val x132 = (((x131 + (x123 * Val(524288))) + (x124 * Val(1048576))) + (x125 * Val(2097152)));
  EQZ((x132 - x101), "rho_minor2(zirgen/circuit/keccak/keccak.zir:391)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:395)
  Val x133 = x100[19]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:402)
  ToBits_21_Struct x134 = exec_ToBits_21_(ctx, x133, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x135 = x134._super;
  Val x136 = x135[0]._super;
  Val x137 = x135[1]._super;
  Val x138 = x135[2]._super;
  Val x139 = x135[3]._super;
  Val x140 = x135[4]._super;
  Val x141 = x135[5]._super;
  Val x142 = x135[6]._super;
  Val x143 = x135[7]._super;
  Val x144 = x135[8]._super;
  Val x145 = x135[9]._super;
  Val x146 = x135[10]._super;
  Val x147 = x135[11]._super;
  Val x148 = x135[12]._super;
  Val x149 = x135[13]._super;
  Val x150 = x135[14]._super;
  Val x151 = x135[15]._super;
  Val x152 = x135[16]._super;
  Val x153 = x135[17]._super;
  Val x154 = x135[18]._super;
  Val x155 = x135[19]._super;
  Val x156 = x135[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:403)
  Val x157 = (((x136 + (x137 * Val(2))) + (x138 * Val(4))) + (x139 * Val(8)));
  Val x158 = (((x157 + (x140 * Val(16))) + (x141 * Val(32))) + (x142 * Val(64)));
  Val x159 = (((x158 + (x143 * Val(128))) + (x144 * Val(256))) + (x145 * Val(512)));
  Val x160 = (((x159 + (x146 * Val(1024))) + (x147 * Val(2048))) + (x148 * Val(4096)));
  Val x161 = (((x160 + (x149 * Val(8192))) + (x150 * Val(16384))) + (x151 * Val(32768)));
  Val x162 = (((x161 + (x152 * Val(65536))) + (x153 * Val(131072))) + (x154 * Val(262144)));
  Val x163 = (((x162 + (x155 * Val(524288))) + (x156 * Val(1048576))) - x133);
  EQZ(x163, "rho_minor2(zirgen/circuit/keccak/keccak.zir:403)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:407)
  Val x164 = x100[20]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:414)
  ToBits_21_Struct x165 = exec_ToBits_21_(ctx, x164, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x166 = x165._super;
  Val x167 = x166[0]._super;
  Val x168 = x166[1]._super;
  Val x169 = x166[2]._super;
  Val x170 = x166[3]._super;
  Val x171 = x166[4]._super;
  Val x172 = x166[5]._super;
  Val x173 = x166[6]._super;
  Val x174 = x166[7]._super;
  Val x175 = x166[8]._super;
  Val x176 = x166[9]._super;
  Val x177 = x166[10]._super;
  Val x178 = x166[11]._super;
  Val x179 = x166[12]._super;
  Val x180 = x166[13]._super;
  Val x181 = x166[14]._super;
  Val x182 = x166[15]._super;
  Val x183 = x166[16]._super;
  Val x184 = x166[17]._super;
  Val x185 = x166[18]._super;
  Val x186 = x166[19]._super;
  Val x187 = x166[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:415)
  Val x188 = (((x167 + (x168 * Val(2))) + (x169 * Val(4))) + (x170 * Val(8)));
  Val x189 = (((x188 + (x171 * Val(16))) + (x172 * Val(32))) + (x173 * Val(64)));
  Val x190 = (((x189 + (x174 * Val(128))) + (x175 * Val(256))) + (x176 * Val(512)));
  Val x191 = (((x190 + (x177 * Val(1024))) + (x178 * Val(2048))) + (x179 * Val(4096)));
  Val x192 = (((x191 + (x180 * Val(8192))) + (x181 * Val(16384))) + (x182 * Val(32768)));
  Val x193 = (((x192 + (x183 * Val(65536))) + (x184 * Val(131072))) + (x185 * Val(262144)));
  Val x194 = (((x193 + (x186 * Val(524288))) + (x187 * Val(1048576))) - x164);
  EQZ(x194, "rho_minor2(zirgen/circuit/keccak/keccak.zir:415)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x195 = x4.arrA;
  Val x196 = x195[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x197 = ((Val(1) - x104) * (Val(1) - x196));
  Val x198 = ((x104 * x196) + x197);
  Val x199 = ((Val(1) - x198) * (Val(1) - x92));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x200 = x195[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x201 = ((Val(1) - x105) * (Val(1) - x200));
  Val x202 = ((x105 * x200) + x201);
  Val x203 = ((Val(1) - x202) * (Val(1) - x9));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x204 = x195[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x205 = ((Val(1) - x106) * (Val(1) - x204));
  Val x206 = ((x106 * x204) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x10));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x208 = x195[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x209 = ((Val(1) - x107) * (Val(1) - x208));
  Val x210 = ((x107 * x208) + x209);
  Val x211 = ((Val(1) - x210) * (Val(1) - x11));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x212 = x195[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x213 = ((Val(1) - x108) * (Val(1) - x212));
  Val x214 = ((x108 * x212) + x213);
  Val x215 = ((Val(1) - x214) * (Val(1) - x12));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x216 = x195[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x217 = ((Val(1) - x109) * (Val(1) - x216));
  Val x218 = ((x109 * x216) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x13));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x220 = x195[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x221 = ((Val(1) - x110) * (Val(1) - x220));
  Val x222 = ((x110 * x220) + x221);
  Val x223 = ((Val(1) - x222) * (Val(1) - x14));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x224 = x195[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x225 = ((Val(1) - x111) * (Val(1) - x224));
  Val x226 = ((x111 * x224) + x225);
  Val x227 = ((Val(1) - x226) * (Val(1) - x15));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x228 = x195[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x229 = ((Val(1) - x112) * (Val(1) - x228));
  Val x230 = ((x112 * x228) + x229);
  Val x231 = ((Val(1) - x230) * (Val(1) - x16));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x232 = x195[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x233 = ((Val(1) - x113) * (Val(1) - x232));
  Val x234 = ((x113 * x232) + x233);
  Val x235 = ((Val(1) - x234) * (Val(1) - x17));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x236 = x195[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x237 = ((Val(1) - x114) * (Val(1) - x236));
  Val x238 = ((x114 * x236) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x18));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x240 = x195[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x241 = ((Val(1) - x115) * (Val(1) - x240));
  Val x242 = ((x115 * x240) + x241);
  Val x243 = ((Val(1) - x242) * (Val(1) - x19));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x244 = x195[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x245 = ((Val(1) - x116) * (Val(1) - x244));
  Val x246 = ((x116 * x244) + x245);
  Val x247 = ((Val(1) - x246) * (Val(1) - x20));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x248 = x195[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x249 = ((Val(1) - x117) * (Val(1) - x248));
  Val x250 = ((x117 * x248) + x249);
  Val x251 = ((Val(1) - x250) * (Val(1) - x21));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x252 = x195[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x253 = ((Val(1) - x118) * (Val(1) - x252));
  Val x254 = ((x118 * x252) + x253);
  Val x255 = ((Val(1) - x254) * (Val(1) - x22));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x256 = x195[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x257 = ((Val(1) - x119) * (Val(1) - x256));
  Val x258 = ((x119 * x256) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x23));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x260 = x195[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x261 = ((Val(1) - x120) * (Val(1) - x260));
  Val x262 = ((x120 * x260) + x261);
  Val x263 = ((Val(1) - x262) * (Val(1) - x24));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x264 = x195[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x265 = ((Val(1) - x121) * (Val(1) - x264));
  Val x266 = ((x121 * x264) + x265);
  Val x267 = ((Val(1) - x266) * (Val(1) - x25));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x268 = x195[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x269 = ((Val(1) - x122) * (Val(1) - x268));
  Val x270 = ((x122 * x268) + x269);
  Val x271 = ((Val(1) - x270) * (Val(1) - x26));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x272 = x195[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x273 = ((Val(1) - x123) * (Val(1) - x272));
  Val x274 = ((x123 * x272) + x273);
  Val x275 = ((Val(1) - x274) * (Val(1) - x27));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x276 = x195[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x277 = ((Val(1) - x124) * (Val(1) - x276));
  Val x278 = ((x124 * x276) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x28));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x280 = x195[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x281 = ((Val(1) - x125) * (Val(1) - x280));
  Val x282 = ((x125 * x280) + x281);
  Val x283 = ((Val(1) - x282) * (Val(1) - x29));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x284 = x4.arrB;
  Val x285 = x284[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x286 = ((Val(1) - x136) * (Val(1) - x285));
  Val x287 = ((x136 * x285) + x286);
  Val x288 = ((Val(1) - x287) * (Val(1) - x30));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x289 = x284[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x290 = ((Val(1) - x137) * (Val(1) - x289));
  Val x291 = ((x137 * x289) + x290);
  Val x292 = ((Val(1) - x291) * (Val(1) - x41));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x293 = x284[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x294 = ((Val(1) - x138) * (Val(1) - x293));
  Val x295 = ((x138 * x293) + x294);
  Val x296 = ((Val(1) - x295) * (Val(1) - x42));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x297 = x284[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x298 = ((Val(1) - x139) * (Val(1) - x297));
  Val x299 = ((x139 * x297) + x298);
  Val x300 = ((Val(1) - x299) * (Val(1) - x43));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x301 = x284[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x302 = ((Val(1) - x140) * (Val(1) - x301));
  Val x303 = ((x140 * x301) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x44));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x305 = x284[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x306 = ((Val(1) - x141) * (Val(1) - x305));
  Val x307 = ((x141 * x305) + x306);
  Val x308 = ((Val(1) - x307) * (Val(1) - x45));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x309 = x284[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x310 = ((Val(1) - x142) * (Val(1) - x309));
  Val x311 = ((x142 * x309) + x310);
  Val x312 = ((Val(1) - x311) * (Val(1) - x46));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x313 = x284[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x314 = ((Val(1) - x143) * (Val(1) - x313));
  Val x315 = ((x143 * x313) + x314);
  Val x316 = ((Val(1) - x315) * (Val(1) - x47));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x317 = x284[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x318 = ((Val(1) - x144) * (Val(1) - x317));
  Val x319 = ((x144 * x317) + x318);
  Val x320 = ((Val(1) - x319) * (Val(1) - x48));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x321 = x284[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x322 = ((Val(1) - x145) * (Val(1) - x321));
  Val x323 = ((x145 * x321) + x322);
  Val x324 = ((Val(1) - x323) * (Val(1) - x49));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x325 = x284[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x326 = ((Val(1) - x146) * (Val(1) - x325));
  Val x327 = ((x146 * x325) + x326);
  Val x328 = ((Val(1) - x327) * (Val(1) - x50));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x329 = x284[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x330 = ((Val(1) - x147) * (Val(1) - x329));
  Val x331 = ((x147 * x329) + x330);
  Val x332 = ((Val(1) - x331) * (Val(1) - x51));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x333 = x284[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x334 = ((Val(1) - x148) * (Val(1) - x333));
  Val x335 = ((x148 * x333) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x52));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x337 = x284[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x338 = ((Val(1) - x149) * (Val(1) - x337));
  Val x339 = ((x149 * x337) + x338);
  Val x340 = ((Val(1) - x339) * (Val(1) - x53));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x341 = x284[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x342 = ((Val(1) - x150) * (Val(1) - x341));
  Val x343 = ((x150 * x341) + x342);
  Val x344 = ((Val(1) - x343) * (Val(1) - x54));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x345 = x284[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x346 = ((Val(1) - x151) * (Val(1) - x345));
  Val x347 = ((x151 * x345) + x346);
  Val x348 = ((Val(1) - x347) * (Val(1) - x55));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x349 = x284[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x350 = ((Val(1) - x152) * (Val(1) - x349));
  Val x351 = ((x152 * x349) + x350);
  Val x352 = ((Val(1) - x351) * (Val(1) - x56));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x353 = x284[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x354 = ((Val(1) - x153) * (Val(1) - x353));
  Val x355 = ((x153 * x353) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x57));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x357 = x284[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x358 = ((Val(1) - x154) * (Val(1) - x357));
  Val x359 = ((x154 * x357) + x358);
  Val x360 = ((Val(1) - x359) * (Val(1) - x58));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x361 = x284[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x362 = ((Val(1) - x155) * (Val(1) - x361));
  Val x363 = ((x155 * x361) + x362);
  Val x364 = ((Val(1) - x363) * (Val(1) - x59));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x365 = x284[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x366 = ((Val(1) - x156) * (Val(1) - x365));
  Val x367 = ((x156 * x365) + x366);
  Val x368 = ((Val(1) - x367) * (Val(1) - x60));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x369 = x4.arrC;
  Val x370 = x369[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x371 = ((Val(1) - x167) * (Val(1) - x370));
  Val x372 = ((x167 * x370) + x371);
  Val x373 = ((Val(1) - x372) * (Val(1) - x61));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x374 = x369[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x375 = ((Val(1) - x168) * (Val(1) - x374));
  Val x376 = ((x168 * x374) + x375);
  Val x377 = ((Val(1) - x376) * (Val(1) - x72));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x378 = x369[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x379 = ((Val(1) - x169) * (Val(1) - x378));
  Val x380 = ((x169 * x378) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x73));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x382 = x369[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x383 = ((Val(1) - x170) * (Val(1) - x382));
  Val x384 = ((x170 * x382) + x383);
  Val x385 = ((Val(1) - x384) * (Val(1) - x74));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x386 = x369[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x387 = ((Val(1) - x171) * (Val(1) - x386));
  Val x388 = ((x171 * x386) + x387);
  Val x389 = ((Val(1) - x388) * (Val(1) - x75));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x390 = x369[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x391 = ((Val(1) - x172) * (Val(1) - x390));
  Val x392 = ((x172 * x390) + x391);
  Val x393 = ((Val(1) - x392) * (Val(1) - x76));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x394 = x369[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x395 = ((Val(1) - x173) * (Val(1) - x394));
  Val x396 = ((x173 * x394) + x395);
  Val x397 = ((Val(1) - x396) * (Val(1) - x77));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x398 = x369[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x399 = ((Val(1) - x174) * (Val(1) - x398));
  Val x400 = ((x174 * x398) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x78));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x402 = x369[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x403 = ((Val(1) - x175) * (Val(1) - x402));
  Val x404 = ((x175 * x402) + x403);
  Val x405 = ((Val(1) - x404) * (Val(1) - x79));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x406 = x369[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x407 = ((Val(1) - x176) * (Val(1) - x406));
  Val x408 = ((x176 * x406) + x407);
  Val x409 = ((Val(1) - x408) * (Val(1) - x80));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x410 = x369[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x411 = ((Val(1) - x177) * (Val(1) - x410));
  Val x412 = ((x177 * x410) + x411);
  Val x413 = ((Val(1) - x412) * (Val(1) - x81));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x414 = x369[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x415 = ((Val(1) - x178) * (Val(1) - x414));
  Val x416 = ((x178 * x414) + x415);
  Val x417 = ((Val(1) - x416) * (Val(1) - x82));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x418 = x369[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x419 = ((Val(1) - x179) * (Val(1) - x418));
  Val x420 = ((x179 * x418) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x83));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x422 = x369[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x423 = ((Val(1) - x180) * (Val(1) - x422));
  Val x424 = ((x180 * x422) + x423);
  Val x425 = ((Val(1) - x424) * (Val(1) - x84));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x426 = x369[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x427 = ((Val(1) - x181) * (Val(1) - x426));
  Val x428 = ((x181 * x426) + x427);
  Val x429 = ((Val(1) - x428) * (Val(1) - x85));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x430 = x369[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x431 = ((Val(1) - x182) * (Val(1) - x430));
  Val x432 = ((x182 * x430) + x431);
  Val x433 = ((Val(1) - x432) * (Val(1) - x86));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x434 = x369[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x435 = ((Val(1) - x183) * (Val(1) - x434));
  Val x436 = ((x183 * x434) + x435);
  Val x437 = ((Val(1) - x436) * (Val(1) - x87));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x438 = x369[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x439 = ((Val(1) - x184) * (Val(1) - x438));
  Val x440 = ((x184 * x438) + x439);
  Val x441 = ((Val(1) - x440) * (Val(1) - x88));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x442 = x369[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x443 = ((Val(1) - x185) * (Val(1) - x442));
  Val x444 = ((x185 * x442) + x443);
  Val x445 = ((Val(1) - x444) * (Val(1) - x89));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x446 = x369[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x447 = ((Val(1) - x186) * (Val(1) - x446));
  Val x448 = ((x186 * x446) + x447);
  Val x449 = ((Val(1) - x448) * (Val(1) - x90));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x450 = x369[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x451 = ((Val(1) - x187) * (Val(1) - x450));
  Val x452 = ((x187 * x450) + x451);
  Val x453 = ((Val(1) - x452) * (Val(1) - x91));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:422)
  Val x454 = (((x282 * x29) + x283) * Val(2));
  Val x455 = (((x287 * x30) + x288) * Val(4));
  Val x456 = (((x291 * x41) + x292) * Val(8));
  Val x457 = (((x295 * x42) + x296) * Val(16));
  Val x458 = (((x299 * x43) + x300) * Val(32));
  Val x459 = (((x303 * x44) + x304) * Val(64));
  Val x460 = (((x307 * x45) + x308) * Val(128));
  Val x461 = (((x311 * x46) + x312) * Val(256));
  Val x462 = (((x315 * x47) + x316) * Val(512));
  Val x463 = (((x319 * x48) + x320) * Val(1024));
  Val x464 = (((x323 * x49) + x324) * Val(2048));
  Val x465 = (((x327 * x50) + x328) * Val(4096));
  Val x466 = (((x331 * x51) + x332) * Val(8192));
  Val x467 = (((x335 * x52) + x336) * Val(16384));
  Val x468 = (((x339 * x53) + x340) * Val(32768));
  Val x469 = (((x343 * x54) + x344) * Val(65536));
  Val x470 = (((x347 * x55) + x348) * Val(131072));
  Val x471 = (((x351 * x56) + x352) * Val(262144));
  Val x472 = (((x355 * x57) + x356) * Val(524288));
  Val x473 = (((x359 * x58) + x360) * Val(1048576));
  Val x474 = (((x363 * x59) + x364) * Val(2097152));
  Val x475 = (((x278 * x28) + x279) + x454);
  Val x476 = (((x475 + x455) + x456) + x457);
  Val x477 = (((x476 + x458) + x459) + x460);
  Val x478 = (((x477 + x461) + x462) + x463);
  Val x479 = (((x478 + x464) + x465) + x466);
  Val x480 = (((x479 + x467) + x468) + x469);
  Val x481 = (((x480 + x470) + x471) + x472);
  NondetRegStruct x482 = exec_Reg(ctx, ((x481 + x473) + x474), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:423)
  Val x483 = (((x372 * x61) + x373) * Val(2));
  Val x484 = (((x376 * x72) + x377) * Val(4));
  Val x485 = (((x380 * x73) + x381) * Val(8));
  Val x486 = (((x384 * x74) + x385) * Val(16));
  Val x487 = (((x388 * x75) + x389) * Val(32));
  Val x488 = (((x392 * x76) + x393) * Val(64));
  Val x489 = (((x396 * x77) + x397) * Val(128));
  Val x490 = (((x400 * x78) + x401) * Val(256));
  Val x491 = (((x404 * x79) + x405) * Val(512));
  Val x492 = (((x408 * x80) + x409) * Val(1024));
  Val x493 = (((x412 * x81) + x413) * Val(2048));
  Val x494 = (((x416 * x82) + x417) * Val(4096));
  Val x495 = (((x420 * x83) + x421) * Val(8192));
  Val x496 = (((x424 * x84) + x425) * Val(16384));
  Val x497 = (((x428 * x85) + x429) * Val(32768));
  Val x498 = (((x432 * x86) + x433) * Val(65536));
  Val x499 = (((x436 * x87) + x437) * Val(131072));
  Val x500 = (((x440 * x88) + x441) * Val(262144));
  Val x501 = (((x444 * x89) + x445) * Val(524288));
  Val x502 = (((x448 * x90) + x449) * Val(1048576));
  Val x503 = (((x367 * x60) + x368) + x483);
  Val x504 = (((x503 + x484) + x485) + x486);
  Val x505 = (((x504 + x487) + x488) + x489);
  Val x506 = (((x505 + x490) + x491) + x492);
  Val x507 = (((x506 + x493) + x494) + x495);
  Val x508 = (((x507 + x496) + x497) + x498);
  Val x509 = (((x508 + x499) + x500) + x501);
  NondetRegStruct x510 = exec_Reg(ctx, (x509 + x502), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:424)
  Val x511 = (((x198 * x92) + x199) * Val(2));
  Val x512 = (((x202 * x9) + x203) * Val(4));
  Val x513 = (((x206 * x10) + x207) * Val(8));
  Val x514 = (((x210 * x11) + x211) * Val(16));
  Val x515 = (((x214 * x12) + x215) * Val(32));
  Val x516 = (((x218 * x13) + x219) * Val(64));
  Val x517 = (((x222 * x14) + x223) * Val(128));
  Val x518 = (((x226 * x15) + x227) * Val(256));
  Val x519 = (((x230 * x16) + x231) * Val(512));
  Val x520 = (((x234 * x17) + x235) * Val(1024));
  Val x521 = (((x238 * x18) + x239) * Val(2048));
  Val x522 = (((x242 * x19) + x243) * Val(4096));
  Val x523 = (((x246 * x20) + x247) * Val(8192));
  Val x524 = (((x250 * x21) + x251) * Val(16384));
  Val x525 = (((x254 * x22) + x255) * Val(32768));
  Val x526 = (((x258 * x23) + x259) * Val(65536));
  Val x527 = (((x262 * x24) + x263) * Val(131072));
  Val x528 = (((x266 * x25) + x267) * Val(262144));
  Val x529 = (((x270 * x26) + x271) * Val(524288));
  Val x530 = (((x274 * x27) + x275) * Val(1048576));
  Val x531 = (((x452 * x91) + x453) + x511);
  Val x532 = (((x531 + x512) + x513) + x514);
  Val x533 = (((x532 + x515) + x516) + x517);
  Val x534 = (((x533 + x518) + x519) + x520);
  Val x535 = (((x534 + x521) + x522) + x523);
  Val x536 = (((x535 + x524) + x525) + x526);
  Val x537 = (((x536 + x527) + x528) + x529);
  NondetRegStruct x538 = exec_Reg(ctx, (x537 + x530), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:427)
  Val22Array x539 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x540 = exec_RetTuple(
      ctx,
      x539,
      x539,
      x539,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x539,
      Val22Array{x482._super, x510._super, x538._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(3),
      Val(6),
      x4.rnd._super,
      x4.blk._super,
      x4.midx._super,
      LAYOUT_LOOKUP(layout2, _super));
  return x540;
}
RetTupleStruct execRhoMinor0_2__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_2__1_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 4, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[12]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[13]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[14]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[18]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[19]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[20]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(4),
                    Val(6),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_2__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_2__1_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_2__1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 5, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x6 = x4.arrA[21]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x7 = exec_ToBits_22_(ctx, x6, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  Val x30 = x8[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x31 = (((x9 + (x10 * Val(2))) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) + (x30 * Val(2097152)));
  EQZ((x37 - x6), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x38 = x4.arrB;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x38[0]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x38[1]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x9) * (Val(1) - x103));
  Val x106 = ((x9 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x10) * (Val(1) - x108));
  Val x111 = ((x10 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x11) * (Val(1) - x113));
  Val x116 = ((x11 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x12) * (Val(1) - x118));
  Val x121 = ((x12 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x13) * (Val(1) - x123));
  Val x126 = ((x13 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x14) * (Val(1) - x128));
  Val x131 = ((x14 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x15) * (Val(1) - x133));
  Val x136 = ((x15 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x16) * (Val(1) - x138));
  Val x141 = ((x16 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x17) * (Val(1) - x143));
  Val x146 = ((x17 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x18) * (Val(1) - x148));
  Val x151 = ((x18 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x19) * (Val(1) - x153));
  Val x156 = ((x19 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x20) * (Val(1) - x158));
  Val x161 = ((x20 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x21) * (Val(1) - x163));
  Val x166 = ((x21 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x22) * (Val(1) - x168));
  Val x171 = ((x22 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x23) * (Val(1) - x173));
  Val x176 = ((x23 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x24) * (Val(1) - x178));
  Val x181 = ((x24 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x25) * (Val(1) - x183));
  Val x186 = ((x25 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x26) * (Val(1) - x188));
  Val x191 = ((x26 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x27) * (Val(1) - x193));
  Val x196 = ((x27 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x28) * (Val(1) - x198));
  Val x201 = ((x28 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x29) * (Val(1) - x203));
  Val x206 = ((x29 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x30) * (Val(1) - x208));
  Val x211 = ((x30 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x405 * x403) + x406) * Val(2));
  Val x428 = (((x410 * x408) + x411) * Val(4));
  Val x429 = (((x415 * x413) + x416) * Val(8));
  Val x430 = (((x420 * x418) + x421) * Val(16));
  Val x431 = (((x425 * x423) + x426) * Val(32));
  Val x432 = (((x106 * x104) + x107) * Val(64));
  Val x433 = (((x111 * x109) + x112) * Val(128));
  Val x434 = (((x116 * x114) + x117) * Val(256));
  Val x435 = (((x121 * x119) + x122) * Val(512));
  Val x436 = (((x126 * x124) + x127) * Val(1024));
  Val x437 = (((x131 * x129) + x132) * Val(2048));
  Val x438 = (((x136 * x134) + x137) * Val(4096));
  Val x439 = (((x141 * x139) + x142) * Val(8192));
  Val x440 = (((x146 * x144) + x147) * Val(16384));
  Val x441 = (((x151 * x149) + x152) * Val(32768));
  Val x442 = (((x156 * x154) + x157) * Val(65536));
  Val x443 = (((x161 * x159) + x162) * Val(131072));
  Val x444 = (((x166 * x164) + x167) * Val(262144));
  Val x445 = (((x171 * x169) + x172) * Val(524288));
  Val x446 = (((x176 * x174) + x177) * Val(1048576));
  Val x447 = (((x181 * x179) + x182) * Val(2097152));
  Val x448 = (((x400 * x398) + x401) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x191 * x189) + x192) * Val(2));
  Val x457 = (((x196 * x194) + x197) * Val(4));
  Val x458 = (((x201 * x199) + x202) * Val(8));
  Val x459 = (((x206 * x204) + x207) * Val(16));
  Val x460 = (((x211 * x209) + x212) * Val(32));
  Val x461 = (((x218 * x216) + x219) * Val(64));
  Val x462 = (((x223 * x221) + x224) * Val(128));
  Val x463 = (((x228 * x226) + x229) * Val(256));
  Val x464 = (((x233 * x231) + x234) * Val(512));
  Val x465 = (((x238 * x236) + x239) * Val(1024));
  Val x466 = (((x243 * x241) + x244) * Val(2048));
  Val x467 = (((x248 * x246) + x249) * Val(4096));
  Val x468 = (((x253 * x251) + x254) * Val(8192));
  Val x469 = (((x258 * x256) + x259) * Val(16384));
  Val x470 = (((x263 * x261) + x264) * Val(32768));
  Val x471 = (((x268 * x266) + x269) * Val(65536));
  Val x472 = (((x273 * x271) + x274) * Val(131072));
  Val x473 = (((x278 * x276) + x279) * Val(262144));
  Val x474 = (((x283 * x281) + x284) * Val(524288));
  Val x475 = (((x288 * x286) + x289) * Val(1048576));
  Val x476 = (((x186 * x184) + x187) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x298 * x296) + x299) * Val(2));
  Val x485 = (((x303 * x301) + x304) * Val(4));
  Val x486 = (((x308 * x306) + x309) * Val(8));
  Val x487 = (((x313 * x311) + x314) * Val(16));
  Val x488 = (((x318 * x316) + x319) * Val(32));
  Val x489 = (((x325 * x323) + x326) * Val(64));
  Val x490 = (((x330 * x328) + x331) * Val(128));
  Val x491 = (((x335 * x333) + x336) * Val(256));
  Val x492 = (((x340 * x338) + x341) * Val(512));
  Val x493 = (((x345 * x343) + x346) * Val(1024));
  Val x494 = (((x350 * x348) + x351) * Val(2048));
  Val x495 = (((x355 * x353) + x356) * Val(4096));
  Val x496 = (((x360 * x358) + x361) * Val(8192));
  Val x497 = (((x365 * x363) + x366) * Val(16384));
  Val x498 = (((x370 * x368) + x371) * Val(32768));
  Val x499 = (((x375 * x373) + x376) * Val(65536));
  Val x500 = (((x380 * x378) + x381) * Val(131072));
  Val x501 = (((x385 * x383) + x386) * Val(262144));
  Val x502 = (((x390 * x388) + x391) * Val(524288));
  Val x503 = (((x395 * x393) + x396) * Val(1048576));
  Val x504 = (((x293 * x291) + x294) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_2__1_Arm1_SuperLayout> x512 = LAYOUT_LOOKUP(x3, arm1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct24Array x513 = x4.arrD;
  Val x514 = x513[15]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:345)
  ToBits_22_Struct x515 = exec_ToBits_22_(ctx, x514, LAYOUT_LOOKUP(x512, unpackM1));
  NondetRegStruct22Array x516 = x515._super;
  Val x517 = x516[0]._super;
  Val x518 = x516[1]._super;
  Val x519 = x516[2]._super;
  Val x520 = x516[3]._super;
  Val x521 = x516[4]._super;
  Val x522 = x516[5]._super;
  Val x523 = x516[6]._super;
  Val x524 = x516[7]._super;
  Val x525 = x516[8]._super;
  Val x526 = x516[9]._super;
  Val x527 = x516[10]._super;
  Val x528 = x516[11]._super;
  Val x529 = x516[12]._super;
  Val x530 = x516[13]._super;
  Val x531 = x516[14]._super;
  Val x532 = x516[15]._super;
  Val x533 = x516[16]._super;
  Val x534 = x516[17]._super;
  Val x535 = x516[18]._super;
  Val x536 = x516[19]._super;
  Val x537 = x516[20]._super;
  Val x538 = x516[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:346)
  Val x539 = (((x517 + (x518 * Val(2))) + (x519 * Val(4))) + (x520 * Val(8)));
  Val x540 = (((x539 + (x521 * Val(16))) + (x522 * Val(32))) + (x523 * Val(64)));
  Val x541 = (((x540 + (x524 * Val(128))) + (x525 * Val(256))) + (x526 * Val(512)));
  Val x542 = (((x541 + (x527 * Val(1024))) + (x528 * Val(2048))) + (x529 * Val(4096)));
  Val x543 = (((x542 + (x530 * Val(8192))) + (x531 * Val(16384))) + (x532 * Val(32768)));
  Val x544 = (((x543 + (x533 * Val(65536))) + (x534 * Val(131072))) + (x535 * Val(262144)));
  Val x545 = (((x544 + (x536 * Val(524288))) + (x537 * Val(1048576))) + (x538 * Val(2097152)));
  EQZ((x545 - x514), "rho_minor1(zirgen/circuit/keccak/keccak.zir:346)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x546 = x513[16]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:349)
  ToBits_21_Struct x547 = exec_ToBits_21_(ctx, x546, LAYOUT_LOOKUP(x512, unpackM2));
  NondetRegStruct21Array x548 = x547._super;
  Val x549 = x548[0]._super;
  Val x550 = x548[1]._super;
  Val x551 = x548[2]._super;
  Val x552 = x548[3]._super;
  Val x553 = x548[4]._super;
  Val x554 = x548[5]._super;
  Val x555 = x548[6]._super;
  Val x556 = x548[7]._super;
  Val x557 = x548[8]._super;
  Val x558 = x548[9]._super;
  Val x559 = x548[10]._super;
  Val x560 = x548[11]._super;
  Val x561 = x548[12]._super;
  Val x562 = x548[13]._super;
  Val x563 = x548[14]._super;
  Val x564 = x548[15]._super;
  Val x565 = x548[16]._super;
  Val x566 = x548[17]._super;
  Val x567 = x548[18]._super;
  Val x568 = x548[19]._super;
  Val x569 = x548[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:350)
  Val x570 = (((x549 + (x550 * Val(2))) + (x551 * Val(4))) + (x552 * Val(8)));
  Val x571 = (((x570 + (x553 * Val(16))) + (x554 * Val(32))) + (x555 * Val(64)));
  Val x572 = (((x571 + (x556 * Val(128))) + (x557 * Val(256))) + (x558 * Val(512)));
  Val x573 = (((x572 + (x559 * Val(1024))) + (x560 * Val(2048))) + (x561 * Val(4096)));
  Val x574 = (((x573 + (x562 * Val(8192))) + (x563 * Val(16384))) + (x564 * Val(32768)));
  Val x575 = (((x574 + (x565 * Val(65536))) + (x566 * Val(131072))) + (x567 * Val(262144)));
  Val x576 = (((x575 + (x568 * Val(524288))) + (x569 * Val(1048576))) - x546);
  EQZ(x576, "rho_minor1(zirgen/circuit/keccak/keccak.zir:350)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x577 = x513[17]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:354)
  ToBits_21_Struct x578 = exec_ToBits_21_(ctx, x577, LAYOUT_LOOKUP(x512, unpackM3));
  NondetRegStruct21Array x579 = x578._super;
  Val x580 = x579[0]._super;
  Val x581 = x579[1]._super;
  Val x582 = x579[2]._super;
  Val x583 = x579[3]._super;
  Val x584 = x579[4]._super;
  Val x585 = x579[5]._super;
  Val x586 = x579[6]._super;
  Val x587 = x579[7]._super;
  Val x588 = x579[8]._super;
  Val x589 = x579[9]._super;
  Val x590 = x579[10]._super;
  Val x591 = x579[11]._super;
  Val x592 = x579[12]._super;
  Val x593 = x579[13]._super;
  Val x594 = x579[14]._super;
  Val x595 = x579[15]._super;
  Val x596 = x579[16]._super;
  Val x597 = x579[17]._super;
  Val x598 = x579[18]._super;
  Val x599 = x579[19]._super;
  Val x600 = x579[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:355)
  Val x601 = (((x580 + (x581 * Val(2))) + (x582 * Val(4))) + (x583 * Val(8)));
  Val x602 = (((x601 + (x584 * Val(16))) + (x585 * Val(32))) + (x586 * Val(64)));
  Val x603 = (((x602 + (x587 * Val(128))) + (x588 * Val(256))) + (x589 * Val(512)));
  Val x604 = (((x603 + (x590 * Val(1024))) + (x591 * Val(2048))) + (x592 * Val(4096)));
  Val x605 = (((x604 + (x593 * Val(8192))) + (x594 * Val(16384))) + (x595 * Val(32768)));
  Val x606 = (((x605 + (x596 * Val(65536))) + (x597 * Val(131072))) + (x598 * Val(262144)));
  Val x607 = (((x606 + (x599 * Val(524288))) + (x600 * Val(1048576))) - x577);
  EQZ(x607, "rho_minor1(zirgen/circuit/keccak/keccak.zir:355)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:358)
  RetTupleStruct x608 = exec_RetTuple(
      ctx,
      Val22Array{x517, x518, x519, x520, x521, x522, x523, x524, x525, x526, x527,
                 x528, x529, x530, x531, x532, x533, x534, x535, x536, x537, x538},
      Val22Array{x549, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559,
                 x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, Val(0)},
      Val22Array{x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x590,
                 x591, x592, x593, x594, x595, x596, x597, x598, x599, x600, Val(0)},
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(5),
      Val(6),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x512, _super));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x609 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x609;
}
RetTupleStruct execRhoMinor2_2__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor2_2__1_Layout> layout2) {
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  RetTupleStruct x3 = back_RetTuple(ctx, 6, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct24Array x5 = x3.arrD;
  Val x6 = x5[21]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:368)
  ToBits_22_Struct x7 = exec_ToBits_22_(ctx, x6, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  Val x30 = x8[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:369)
  Val x31 = (((x9 + (x10 * Val(2))) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) + (x30 * Val(2097152)));
  EQZ((x37 - x6), "rho_minor2(zirgen/circuit/keccak/keccak.zir:369)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x38 = x5[22]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:372)
  ToBits_21_Struct x39 = exec_ToBits_21_(ctx, x38, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x40 = x39._super;
  Val x41 = x40[0]._super;
  Val x42 = x40[1]._super;
  Val x43 = x40[2]._super;
  Val x44 = x40[3]._super;
  Val x45 = x40[4]._super;
  Val x46 = x40[5]._super;
  Val x47 = x40[6]._super;
  Val x48 = x40[7]._super;
  Val x49 = x40[8]._super;
  Val x50 = x40[9]._super;
  Val x51 = x40[10]._super;
  Val x52 = x40[11]._super;
  Val x53 = x40[12]._super;
  Val x54 = x40[13]._super;
  Val x55 = x40[14]._super;
  Val x56 = x40[15]._super;
  Val x57 = x40[16]._super;
  Val x58 = x40[17]._super;
  Val x59 = x40[18]._super;
  Val x60 = x40[19]._super;
  Val x61 = x40[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:373)
  Val x62 = (((x41 + (x42 * Val(2))) + (x43 * Val(4))) + (x44 * Val(8)));
  Val x63 = (((x62 + (x45 * Val(16))) + (x46 * Val(32))) + (x47 * Val(64)));
  Val x64 = (((x63 + (x48 * Val(128))) + (x49 * Val(256))) + (x50 * Val(512)));
  Val x65 = (((x64 + (x51 * Val(1024))) + (x52 * Val(2048))) + (x53 * Val(4096)));
  Val x66 = (((x65 + (x54 * Val(8192))) + (x55 * Val(16384))) + (x56 * Val(32768)));
  Val x67 = (((x66 + (x57 * Val(65536))) + (x58 * Val(131072))) + (x59 * Val(262144)));
  Val x68 = (((x67 + (x60 * Val(524288))) + (x61 * Val(1048576))) - x38);
  EQZ(x68, "rho_minor2(zirgen/circuit/keccak/keccak.zir:373)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x69 = x5[23]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:376)
  ToBits_21_Struct x70 = exec_ToBits_21_(ctx, x69, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:377)
  Val x93 = (((x72 + (x73 * Val(2))) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x94 = (((x93 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x95 = (((x94 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x96 = (((x95 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x97 = (((x96 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x98 = (((x97 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x99 = (((x98 + (x91 * Val(524288))) + (x92 * Val(1048576))) - x69);
  EQZ(x99, "rho_minor2(zirgen/circuit/keccak/keccak.zir:377)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct22Array x100 = x3.arrB;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:383)
  Val x101 = x100[2]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:390)
  ToBits_22_Struct x102 = exec_ToBits_22_(ctx, x101, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x103 = x102._super;
  Val x104 = x103[0]._super;
  Val x105 = x103[1]._super;
  Val x106 = x103[2]._super;
  Val x107 = x103[3]._super;
  Val x108 = x103[4]._super;
  Val x109 = x103[5]._super;
  Val x110 = x103[6]._super;
  Val x111 = x103[7]._super;
  Val x112 = x103[8]._super;
  Val x113 = x103[9]._super;
  Val x114 = x103[10]._super;
  Val x115 = x103[11]._super;
  Val x116 = x103[12]._super;
  Val x117 = x103[13]._super;
  Val x118 = x103[14]._super;
  Val x119 = x103[15]._super;
  Val x120 = x103[16]._super;
  Val x121 = x103[17]._super;
  Val x122 = x103[18]._super;
  Val x123 = x103[19]._super;
  Val x124 = x103[20]._super;
  Val x125 = x103[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:391)
  Val x126 = (((x104 + (x105 * Val(2))) + (x106 * Val(4))) + (x107 * Val(8)));
  Val x127 = (((x126 + (x108 * Val(16))) + (x109 * Val(32))) + (x110 * Val(64)));
  Val x128 = (((x127 + (x111 * Val(128))) + (x112 * Val(256))) + (x113 * Val(512)));
  Val x129 = (((x128 + (x114 * Val(1024))) + (x115 * Val(2048))) + (x116 * Val(4096)));
  Val x130 = (((x129 + (x117 * Val(8192))) + (x118 * Val(16384))) + (x119 * Val(32768)));
  Val x131 = (((x130 + (x120 * Val(65536))) + (x121 * Val(131072))) + (x122 * Val(262144)));
  Val x132 = (((x131 + (x123 * Val(524288))) + (x124 * Val(1048576))) + (x125 * Val(2097152)));
  EQZ((x132 - x101), "rho_minor2(zirgen/circuit/keccak/keccak.zir:391)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:395)
  Val x133 = x100[3]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:402)
  ToBits_21_Struct x134 = exec_ToBits_21_(ctx, x133, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x135 = x134._super;
  Val x136 = x135[0]._super;
  Val x137 = x135[1]._super;
  Val x138 = x135[2]._super;
  Val x139 = x135[3]._super;
  Val x140 = x135[4]._super;
  Val x141 = x135[5]._super;
  Val x142 = x135[6]._super;
  Val x143 = x135[7]._super;
  Val x144 = x135[8]._super;
  Val x145 = x135[9]._super;
  Val x146 = x135[10]._super;
  Val x147 = x135[11]._super;
  Val x148 = x135[12]._super;
  Val x149 = x135[13]._super;
  Val x150 = x135[14]._super;
  Val x151 = x135[15]._super;
  Val x152 = x135[16]._super;
  Val x153 = x135[17]._super;
  Val x154 = x135[18]._super;
  Val x155 = x135[19]._super;
  Val x156 = x135[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:403)
  Val x157 = (((x136 + (x137 * Val(2))) + (x138 * Val(4))) + (x139 * Val(8)));
  Val x158 = (((x157 + (x140 * Val(16))) + (x141 * Val(32))) + (x142 * Val(64)));
  Val x159 = (((x158 + (x143 * Val(128))) + (x144 * Val(256))) + (x145 * Val(512)));
  Val x160 = (((x159 + (x146 * Val(1024))) + (x147 * Val(2048))) + (x148 * Val(4096)));
  Val x161 = (((x160 + (x149 * Val(8192))) + (x150 * Val(16384))) + (x151 * Val(32768)));
  Val x162 = (((x161 + (x152 * Val(65536))) + (x153 * Val(131072))) + (x154 * Val(262144)));
  Val x163 = (((x162 + (x155 * Val(524288))) + (x156 * Val(1048576))) - x133);
  EQZ(x163, "rho_minor2(zirgen/circuit/keccak/keccak.zir:403)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:407)
  Val x164 = x100[4]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:414)
  ToBits_21_Struct x165 = exec_ToBits_21_(ctx, x164, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x166 = x165._super;
  Val x167 = x166[0]._super;
  Val x168 = x166[1]._super;
  Val x169 = x166[2]._super;
  Val x170 = x166[3]._super;
  Val x171 = x166[4]._super;
  Val x172 = x166[5]._super;
  Val x173 = x166[6]._super;
  Val x174 = x166[7]._super;
  Val x175 = x166[8]._super;
  Val x176 = x166[9]._super;
  Val x177 = x166[10]._super;
  Val x178 = x166[11]._super;
  Val x179 = x166[12]._super;
  Val x180 = x166[13]._super;
  Val x181 = x166[14]._super;
  Val x182 = x166[15]._super;
  Val x183 = x166[16]._super;
  Val x184 = x166[17]._super;
  Val x185 = x166[18]._super;
  Val x186 = x166[19]._super;
  Val x187 = x166[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:415)
  Val x188 = (((x167 + (x168 * Val(2))) + (x169 * Val(4))) + (x170 * Val(8)));
  Val x189 = (((x188 + (x171 * Val(16))) + (x172 * Val(32))) + (x173 * Val(64)));
  Val x190 = (((x189 + (x174 * Val(128))) + (x175 * Val(256))) + (x176 * Val(512)));
  Val x191 = (((x190 + (x177 * Val(1024))) + (x178 * Val(2048))) + (x179 * Val(4096)));
  Val x192 = (((x191 + (x180 * Val(8192))) + (x181 * Val(16384))) + (x182 * Val(32768)));
  Val x193 = (((x192 + (x183 * Val(65536))) + (x184 * Val(131072))) + (x185 * Val(262144)));
  Val x194 = (((x193 + (x186 * Val(524288))) + (x187 * Val(1048576))) - x164);
  EQZ(x194, "rho_minor2(zirgen/circuit/keccak/keccak.zir:415)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x195 = x4.arrA;
  Val x196 = x195[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x197 = ((Val(1) - x104) * (Val(1) - x196));
  Val x198 = ((x104 * x196) + x197);
  Val x199 = ((Val(1) - x198) * (Val(1) - x92));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x200 = x195[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x201 = ((Val(1) - x105) * (Val(1) - x200));
  Val x202 = ((x105 * x200) + x201);
  Val x203 = ((Val(1) - x202) * (Val(1) - x9));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x204 = x195[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x205 = ((Val(1) - x106) * (Val(1) - x204));
  Val x206 = ((x106 * x204) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x10));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x208 = x195[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x209 = ((Val(1) - x107) * (Val(1) - x208));
  Val x210 = ((x107 * x208) + x209);
  Val x211 = ((Val(1) - x210) * (Val(1) - x11));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x212 = x195[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x213 = ((Val(1) - x108) * (Val(1) - x212));
  Val x214 = ((x108 * x212) + x213);
  Val x215 = ((Val(1) - x214) * (Val(1) - x12));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x216 = x195[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x217 = ((Val(1) - x109) * (Val(1) - x216));
  Val x218 = ((x109 * x216) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x13));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x220 = x195[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x221 = ((Val(1) - x110) * (Val(1) - x220));
  Val x222 = ((x110 * x220) + x221);
  Val x223 = ((Val(1) - x222) * (Val(1) - x14));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x224 = x195[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x225 = ((Val(1) - x111) * (Val(1) - x224));
  Val x226 = ((x111 * x224) + x225);
  Val x227 = ((Val(1) - x226) * (Val(1) - x15));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x228 = x195[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x229 = ((Val(1) - x112) * (Val(1) - x228));
  Val x230 = ((x112 * x228) + x229);
  Val x231 = ((Val(1) - x230) * (Val(1) - x16));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x232 = x195[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x233 = ((Val(1) - x113) * (Val(1) - x232));
  Val x234 = ((x113 * x232) + x233);
  Val x235 = ((Val(1) - x234) * (Val(1) - x17));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x236 = x195[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x237 = ((Val(1) - x114) * (Val(1) - x236));
  Val x238 = ((x114 * x236) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x18));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x240 = x195[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x241 = ((Val(1) - x115) * (Val(1) - x240));
  Val x242 = ((x115 * x240) + x241);
  Val x243 = ((Val(1) - x242) * (Val(1) - x19));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x244 = x195[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x245 = ((Val(1) - x116) * (Val(1) - x244));
  Val x246 = ((x116 * x244) + x245);
  Val x247 = ((Val(1) - x246) * (Val(1) - x20));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x248 = x195[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x249 = ((Val(1) - x117) * (Val(1) - x248));
  Val x250 = ((x117 * x248) + x249);
  Val x251 = ((Val(1) - x250) * (Val(1) - x21));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x252 = x195[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x253 = ((Val(1) - x118) * (Val(1) - x252));
  Val x254 = ((x118 * x252) + x253);
  Val x255 = ((Val(1) - x254) * (Val(1) - x22));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x256 = x195[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x257 = ((Val(1) - x119) * (Val(1) - x256));
  Val x258 = ((x119 * x256) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x23));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x260 = x195[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x261 = ((Val(1) - x120) * (Val(1) - x260));
  Val x262 = ((x120 * x260) + x261);
  Val x263 = ((Val(1) - x262) * (Val(1) - x24));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x264 = x195[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x265 = ((Val(1) - x121) * (Val(1) - x264));
  Val x266 = ((x121 * x264) + x265);
  Val x267 = ((Val(1) - x266) * (Val(1) - x25));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x268 = x195[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x269 = ((Val(1) - x122) * (Val(1) - x268));
  Val x270 = ((x122 * x268) + x269);
  Val x271 = ((Val(1) - x270) * (Val(1) - x26));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x272 = x195[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x273 = ((Val(1) - x123) * (Val(1) - x272));
  Val x274 = ((x123 * x272) + x273);
  Val x275 = ((Val(1) - x274) * (Val(1) - x27));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x276 = x195[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x277 = ((Val(1) - x124) * (Val(1) - x276));
  Val x278 = ((x124 * x276) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x28));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x280 = x195[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x281 = ((Val(1) - x125) * (Val(1) - x280));
  Val x282 = ((x125 * x280) + x281);
  Val x283 = ((Val(1) - x282) * (Val(1) - x29));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x284 = x4.arrB;
  Val x285 = x284[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x286 = ((Val(1) - x136) * (Val(1) - x285));
  Val x287 = ((x136 * x285) + x286);
  Val x288 = ((Val(1) - x287) * (Val(1) - x30));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x289 = x284[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x290 = ((Val(1) - x137) * (Val(1) - x289));
  Val x291 = ((x137 * x289) + x290);
  Val x292 = ((Val(1) - x291) * (Val(1) - x41));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x293 = x284[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x294 = ((Val(1) - x138) * (Val(1) - x293));
  Val x295 = ((x138 * x293) + x294);
  Val x296 = ((Val(1) - x295) * (Val(1) - x42));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x297 = x284[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x298 = ((Val(1) - x139) * (Val(1) - x297));
  Val x299 = ((x139 * x297) + x298);
  Val x300 = ((Val(1) - x299) * (Val(1) - x43));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x301 = x284[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x302 = ((Val(1) - x140) * (Val(1) - x301));
  Val x303 = ((x140 * x301) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x44));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x305 = x284[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x306 = ((Val(1) - x141) * (Val(1) - x305));
  Val x307 = ((x141 * x305) + x306);
  Val x308 = ((Val(1) - x307) * (Val(1) - x45));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x309 = x284[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x310 = ((Val(1) - x142) * (Val(1) - x309));
  Val x311 = ((x142 * x309) + x310);
  Val x312 = ((Val(1) - x311) * (Val(1) - x46));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x313 = x284[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x314 = ((Val(1) - x143) * (Val(1) - x313));
  Val x315 = ((x143 * x313) + x314);
  Val x316 = ((Val(1) - x315) * (Val(1) - x47));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x317 = x284[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x318 = ((Val(1) - x144) * (Val(1) - x317));
  Val x319 = ((x144 * x317) + x318);
  Val x320 = ((Val(1) - x319) * (Val(1) - x48));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x321 = x284[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x322 = ((Val(1) - x145) * (Val(1) - x321));
  Val x323 = ((x145 * x321) + x322);
  Val x324 = ((Val(1) - x323) * (Val(1) - x49));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x325 = x284[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x326 = ((Val(1) - x146) * (Val(1) - x325));
  Val x327 = ((x146 * x325) + x326);
  Val x328 = ((Val(1) - x327) * (Val(1) - x50));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x329 = x284[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x330 = ((Val(1) - x147) * (Val(1) - x329));
  Val x331 = ((x147 * x329) + x330);
  Val x332 = ((Val(1) - x331) * (Val(1) - x51));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x333 = x284[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x334 = ((Val(1) - x148) * (Val(1) - x333));
  Val x335 = ((x148 * x333) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x52));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x337 = x284[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x338 = ((Val(1) - x149) * (Val(1) - x337));
  Val x339 = ((x149 * x337) + x338);
  Val x340 = ((Val(1) - x339) * (Val(1) - x53));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x341 = x284[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x342 = ((Val(1) - x150) * (Val(1) - x341));
  Val x343 = ((x150 * x341) + x342);
  Val x344 = ((Val(1) - x343) * (Val(1) - x54));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x345 = x284[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x346 = ((Val(1) - x151) * (Val(1) - x345));
  Val x347 = ((x151 * x345) + x346);
  Val x348 = ((Val(1) - x347) * (Val(1) - x55));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x349 = x284[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x350 = ((Val(1) - x152) * (Val(1) - x349));
  Val x351 = ((x152 * x349) + x350);
  Val x352 = ((Val(1) - x351) * (Val(1) - x56));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x353 = x284[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x354 = ((Val(1) - x153) * (Val(1) - x353));
  Val x355 = ((x153 * x353) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x57));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x357 = x284[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x358 = ((Val(1) - x154) * (Val(1) - x357));
  Val x359 = ((x154 * x357) + x358);
  Val x360 = ((Val(1) - x359) * (Val(1) - x58));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x361 = x284[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x362 = ((Val(1) - x155) * (Val(1) - x361));
  Val x363 = ((x155 * x361) + x362);
  Val x364 = ((Val(1) - x363) * (Val(1) - x59));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x365 = x284[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x366 = ((Val(1) - x156) * (Val(1) - x365));
  Val x367 = ((x156 * x365) + x366);
  Val x368 = ((Val(1) - x367) * (Val(1) - x60));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x369 = x4.arrC;
  Val x370 = x369[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x371 = ((Val(1) - x167) * (Val(1) - x370));
  Val x372 = ((x167 * x370) + x371);
  Val x373 = ((Val(1) - x372) * (Val(1) - x61));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x374 = x369[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x375 = ((Val(1) - x168) * (Val(1) - x374));
  Val x376 = ((x168 * x374) + x375);
  Val x377 = ((Val(1) - x376) * (Val(1) - x72));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x378 = x369[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x379 = ((Val(1) - x169) * (Val(1) - x378));
  Val x380 = ((x169 * x378) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x73));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x382 = x369[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x383 = ((Val(1) - x170) * (Val(1) - x382));
  Val x384 = ((x170 * x382) + x383);
  Val x385 = ((Val(1) - x384) * (Val(1) - x74));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x386 = x369[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x387 = ((Val(1) - x171) * (Val(1) - x386));
  Val x388 = ((x171 * x386) + x387);
  Val x389 = ((Val(1) - x388) * (Val(1) - x75));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x390 = x369[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x391 = ((Val(1) - x172) * (Val(1) - x390));
  Val x392 = ((x172 * x390) + x391);
  Val x393 = ((Val(1) - x392) * (Val(1) - x76));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x394 = x369[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x395 = ((Val(1) - x173) * (Val(1) - x394));
  Val x396 = ((x173 * x394) + x395);
  Val x397 = ((Val(1) - x396) * (Val(1) - x77));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x398 = x369[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x399 = ((Val(1) - x174) * (Val(1) - x398));
  Val x400 = ((x174 * x398) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x78));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x402 = x369[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x403 = ((Val(1) - x175) * (Val(1) - x402));
  Val x404 = ((x175 * x402) + x403);
  Val x405 = ((Val(1) - x404) * (Val(1) - x79));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x406 = x369[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x407 = ((Val(1) - x176) * (Val(1) - x406));
  Val x408 = ((x176 * x406) + x407);
  Val x409 = ((Val(1) - x408) * (Val(1) - x80));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x410 = x369[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x411 = ((Val(1) - x177) * (Val(1) - x410));
  Val x412 = ((x177 * x410) + x411);
  Val x413 = ((Val(1) - x412) * (Val(1) - x81));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x414 = x369[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x415 = ((Val(1) - x178) * (Val(1) - x414));
  Val x416 = ((x178 * x414) + x415);
  Val x417 = ((Val(1) - x416) * (Val(1) - x82));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x418 = x369[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x419 = ((Val(1) - x179) * (Val(1) - x418));
  Val x420 = ((x179 * x418) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x83));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x422 = x369[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x423 = ((Val(1) - x180) * (Val(1) - x422));
  Val x424 = ((x180 * x422) + x423);
  Val x425 = ((Val(1) - x424) * (Val(1) - x84));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x426 = x369[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x427 = ((Val(1) - x181) * (Val(1) - x426));
  Val x428 = ((x181 * x426) + x427);
  Val x429 = ((Val(1) - x428) * (Val(1) - x85));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x430 = x369[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x431 = ((Val(1) - x182) * (Val(1) - x430));
  Val x432 = ((x182 * x430) + x431);
  Val x433 = ((Val(1) - x432) * (Val(1) - x86));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x434 = x369[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x435 = ((Val(1) - x183) * (Val(1) - x434));
  Val x436 = ((x183 * x434) + x435);
  Val x437 = ((Val(1) - x436) * (Val(1) - x87));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x438 = x369[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x439 = ((Val(1) - x184) * (Val(1) - x438));
  Val x440 = ((x184 * x438) + x439);
  Val x441 = ((Val(1) - x440) * (Val(1) - x88));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x442 = x369[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x443 = ((Val(1) - x185) * (Val(1) - x442));
  Val x444 = ((x185 * x442) + x443);
  Val x445 = ((Val(1) - x444) * (Val(1) - x89));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x446 = x369[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x447 = ((Val(1) - x186) * (Val(1) - x446));
  Val x448 = ((x186 * x446) + x447);
  Val x449 = ((Val(1) - x448) * (Val(1) - x90));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x450 = x369[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x451 = ((Val(1) - x187) * (Val(1) - x450));
  Val x452 = ((x187 * x450) + x451);
  Val x453 = ((Val(1) - x452) * (Val(1) - x91));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:422)
  Val x454 = (((x238 * x18) + x239) * Val(2));
  Val x455 = (((x242 * x19) + x243) * Val(4));
  Val x456 = (((x246 * x20) + x247) * Val(8));
  Val x457 = (((x250 * x21) + x251) * Val(16));
  Val x458 = (((x254 * x22) + x255) * Val(32));
  Val x459 = (((x258 * x23) + x259) * Val(64));
  Val x460 = (((x262 * x24) + x263) * Val(128));
  Val x461 = (((x266 * x25) + x267) * Val(256));
  Val x462 = (((x270 * x26) + x271) * Val(512));
  Val x463 = (((x274 * x27) + x275) * Val(1024));
  Val x464 = (((x278 * x28) + x279) * Val(2048));
  Val x465 = (((x282 * x29) + x283) * Val(4096));
  Val x466 = (((x287 * x30) + x288) * Val(8192));
  Val x467 = (((x291 * x41) + x292) * Val(16384));
  Val x468 = (((x295 * x42) + x296) * Val(32768));
  Val x469 = (((x299 * x43) + x300) * Val(65536));
  Val x470 = (((x303 * x44) + x304) * Val(131072));
  Val x471 = (((x307 * x45) + x308) * Val(262144));
  Val x472 = (((x311 * x46) + x312) * Val(524288));
  Val x473 = (((x315 * x47) + x316) * Val(1048576));
  Val x474 = (((x319 * x48) + x320) * Val(2097152));
  Val x475 = (((x234 * x17) + x235) + x454);
  Val x476 = (((x475 + x455) + x456) + x457);
  Val x477 = (((x476 + x458) + x459) + x460);
  Val x478 = (((x477 + x461) + x462) + x463);
  Val x479 = (((x478 + x464) + x465) + x466);
  Val x480 = (((x479 + x467) + x468) + x469);
  Val x481 = (((x480 + x470) + x471) + x472);
  NondetRegStruct x482 = exec_Reg(ctx, ((x481 + x473) + x474), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:423)
  Val x483 = (((x327 * x50) + x328) * Val(2));
  Val x484 = (((x331 * x51) + x332) * Val(4));
  Val x485 = (((x335 * x52) + x336) * Val(8));
  Val x486 = (((x339 * x53) + x340) * Val(16));
  Val x487 = (((x343 * x54) + x344) * Val(32));
  Val x488 = (((x347 * x55) + x348) * Val(64));
  Val x489 = (((x351 * x56) + x352) * Val(128));
  Val x490 = (((x355 * x57) + x356) * Val(256));
  Val x491 = (((x359 * x58) + x360) * Val(512));
  Val x492 = (((x363 * x59) + x364) * Val(1024));
  Val x493 = (((x367 * x60) + x368) * Val(2048));
  Val x494 = (((x372 * x61) + x373) * Val(4096));
  Val x495 = (((x376 * x72) + x377) * Val(8192));
  Val x496 = (((x380 * x73) + x381) * Val(16384));
  Val x497 = (((x384 * x74) + x385) * Val(32768));
  Val x498 = (((x388 * x75) + x389) * Val(65536));
  Val x499 = (((x392 * x76) + x393) * Val(131072));
  Val x500 = (((x396 * x77) + x397) * Val(262144));
  Val x501 = (((x400 * x78) + x401) * Val(524288));
  Val x502 = (((x404 * x79) + x405) * Val(1048576));
  Val x503 = (((x323 * x49) + x324) + x483);
  Val x504 = (((x503 + x484) + x485) + x486);
  Val x505 = (((x504 + x487) + x488) + x489);
  Val x506 = (((x505 + x490) + x491) + x492);
  Val x507 = (((x506 + x493) + x494) + x495);
  Val x508 = (((x507 + x496) + x497) + x498);
  Val x509 = (((x508 + x499) + x500) + x501);
  NondetRegStruct x510 = exec_Reg(ctx, (x509 + x502), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:424)
  Val x511 = (((x412 * x81) + x413) * Val(2));
  Val x512 = (((x416 * x82) + x417) * Val(4));
  Val x513 = (((x420 * x83) + x421) * Val(8));
  Val x514 = (((x424 * x84) + x425) * Val(16));
  Val x515 = (((x428 * x85) + x429) * Val(32));
  Val x516 = (((x432 * x86) + x433) * Val(64));
  Val x517 = (((x436 * x87) + x437) * Val(128));
  Val x518 = (((x440 * x88) + x441) * Val(256));
  Val x519 = (((x444 * x89) + x445) * Val(512));
  Val x520 = (((x448 * x90) + x449) * Val(1024));
  Val x521 = (((x452 * x91) + x453) * Val(2048));
  Val x522 = (((x198 * x92) + x199) * Val(4096));
  Val x523 = (((x202 * x9) + x203) * Val(8192));
  Val x524 = (((x206 * x10) + x207) * Val(16384));
  Val x525 = (((x210 * x11) + x211) * Val(32768));
  Val x526 = (((x214 * x12) + x215) * Val(65536));
  Val x527 = (((x218 * x13) + x219) * Val(131072));
  Val x528 = (((x222 * x14) + x223) * Val(262144));
  Val x529 = (((x226 * x15) + x227) * Val(524288));
  Val x530 = (((x230 * x16) + x231) * Val(1048576));
  Val x531 = (((x408 * x80) + x409) + x511);
  Val x532 = (((x531 + x512) + x513) + x514);
  Val x533 = (((x532 + x515) + x516) + x517);
  Val x534 = (((x533 + x518) + x519) + x520);
  Val x535 = (((x534 + x521) + x522) + x523);
  Val x536 = (((x535 + x524) + x525) + x526);
  Val x537 = (((x536 + x527) + x528) + x529);
  NondetRegStruct x538 = exec_Reg(ctx, (x537 + x530), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:427)
  Val22Array x539 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x540 = exec_RetTuple(
      ctx,
      x539,
      x539,
      x539,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x539,
      Val22Array{x482._super, x510._super, x538._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(6),
      Val(6),
      x4.rnd._super,
      x4.blk._super,
      x4.midx._super,
      LAYOUT_LOOKUP(layout2, _super));
  return x540;
}
RetTupleStruct execRhoMinor0_4__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_4__1_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 7, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[18]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[19]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[20]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[9]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[10]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[11]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(7),
                    Val(6),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_4__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_4__1_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_4__1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 8, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrB;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[5]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[6]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[7]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x335 * x333) + x336) * Val(2));
  Val x428 = (((x340 * x338) + x341) * Val(4));
  Val x429 = (((x345 * x343) + x346) * Val(8));
  Val x430 = (((x350 * x348) + x351) * Val(16));
  Val x431 = (((x355 * x353) + x356) * Val(32));
  Val x432 = (((x360 * x358) + x361) * Val(64));
  Val x433 = (((x365 * x363) + x366) * Val(128));
  Val x434 = (((x370 * x368) + x371) * Val(256));
  Val x435 = (((x375 * x373) + x376) * Val(512));
  Val x436 = (((x380 * x378) + x381) * Val(1024));
  Val x437 = (((x385 * x383) + x386) * Val(2048));
  Val x438 = (((x390 * x388) + x391) * Val(4096));
  Val x439 = (((x395 * x393) + x396) * Val(8192));
  Val x440 = (((x400 * x398) + x401) * Val(16384));
  Val x441 = (((x405 * x403) + x406) * Val(32768));
  Val x442 = (((x410 * x408) + x411) * Val(65536));
  Val x443 = (((x415 * x413) + x416) * Val(131072));
  Val x444 = (((x420 * x418) + x421) * Val(262144));
  Val x445 = (((x425 * x423) + x426) * Val(524288));
  Val x446 = (((x106 * x104) + x107) * Val(1048576));
  Val x447 = (((x111 * x109) + x112) * Val(2097152));
  Val x448 = (((x330 * x328) + x331) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x121 * x119) + x122) * Val(2));
  Val x457 = (((x126 * x124) + x127) * Val(4));
  Val x458 = (((x131 * x129) + x132) * Val(8));
  Val x459 = (((x136 * x134) + x137) * Val(16));
  Val x460 = (((x141 * x139) + x142) * Val(32));
  Val x461 = (((x146 * x144) + x147) * Val(64));
  Val x462 = (((x151 * x149) + x152) * Val(128));
  Val x463 = (((x156 * x154) + x157) * Val(256));
  Val x464 = (((x161 * x159) + x162) * Val(512));
  Val x465 = (((x166 * x164) + x167) * Val(1024));
  Val x466 = (((x171 * x169) + x172) * Val(2048));
  Val x467 = (((x176 * x174) + x177) * Val(4096));
  Val x468 = (((x181 * x179) + x182) * Val(8192));
  Val x469 = (((x186 * x184) + x187) * Val(16384));
  Val x470 = (((x191 * x189) + x192) * Val(32768));
  Val x471 = (((x196 * x194) + x197) * Val(65536));
  Val x472 = (((x201 * x199) + x202) * Val(131072));
  Val x473 = (((x206 * x204) + x207) * Val(262144));
  Val x474 = (((x211 * x209) + x212) * Val(524288));
  Val x475 = (((x218 * x216) + x219) * Val(1048576));
  Val x476 = (((x116 * x114) + x117) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x228 * x226) + x229) * Val(2));
  Val x485 = (((x233 * x231) + x234) * Val(4));
  Val x486 = (((x238 * x236) + x239) * Val(8));
  Val x487 = (((x243 * x241) + x244) * Val(16));
  Val x488 = (((x248 * x246) + x249) * Val(32));
  Val x489 = (((x253 * x251) + x254) * Val(64));
  Val x490 = (((x258 * x256) + x259) * Val(128));
  Val x491 = (((x263 * x261) + x264) * Val(256));
  Val x492 = (((x268 * x266) + x269) * Val(512));
  Val x493 = (((x273 * x271) + x274) * Val(1024));
  Val x494 = (((x278 * x276) + x279) * Val(2048));
  Val x495 = (((x283 * x281) + x284) * Val(4096));
  Val x496 = (((x288 * x286) + x289) * Val(8192));
  Val x497 = (((x293 * x291) + x294) * Val(16384));
  Val x498 = (((x298 * x296) + x299) * Val(32768));
  Val x499 = (((x303 * x301) + x304) * Val(65536));
  Val x500 = (((x308 * x306) + x309) * Val(131072));
  Val x501 = (((x313 * x311) + x314) * Val(262144));
  Val x502 = (((x318 * x316) + x319) * Val(524288));
  Val x503 = (((x325 * x323) + x326) * Val(1048576));
  Val x504 = (((x223 * x221) + x224) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:342)
  Val22Array x512 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x513 = exec_RetTuple(
      ctx,
      x512,
      x512,
      x512,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x512,
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(8),
      Val(6),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x3, arm0));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x514 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x514;
}
RetTupleStruct execRhoMinor3_1_(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<RhoMinor3_1__SuperLayout> layout2) {
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:432)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:433)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:434)
  RetTupleStruct x5 = back_RetTuple(ctx, 4, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:435)
  RetTupleStruct x6 = back_RetTuple(ctx, 6, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:436)
  RetTupleStruct x7 = back_RetTuple(ctx, 7, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  RetTupleStruct x8 = back_RetTuple(ctx, 9, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:439)
  BoundLayout<RhoMinor3_1_Arm1_SuperLayout> x9 = LAYOUT_LOOKUP(layout2, arm1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:436)
  NondetRegStruct22Array x10 = x7.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:435)
  NondetRegStruct22Array x11 = x6.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:434)
  NondetRegStruct22Array x12 = x5.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  NondetRegStruct22Array x13 = x8.arrA;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:433)
  NondetRegStruct22Array x14 = x4.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:432)
  NondetRegStruct22Array x15 = x3.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  NondetRegStruct22Array x16 = x8.arrB;
  NondetRegStruct22Array x17 = x8.arrC;
  NondetRegStruct24Array x18 = x8.arrD;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:457)
  Val22Array x19 = Val22Array{
      x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super, x13[4]._super,  x13[5]._super,
      x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super, x13[10]._super, x13[11]._super,
      x13[12]._super, x13[13]._super, x13[14]._super, x10[0]._super, x10[1]._super,  x10[2]._super,
      x11[0]._super,  x11[1]._super,  x11[2]._super,  x12[0]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:461)
  Val22Array x20 =
      Val22Array{x12[1]._super,  x12[2]._super,  x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x15[0]._super,  x15[1]._super,  x15[2]._super,  x16[8]._super,  x16[9]._super,
                 x16[10]._super, x16[11]._super, x16[12]._super, x16[13]._super, x16[14]._super,
                 x16[15]._super, x16[16]._super, x16[17]._super, x16[18]._super, x16[19]._super,
                 x16[20]._super, x16[21]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  Val22Array x21 =
      Val22Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super};
  Val24Array x22 =
      Val24Array{x18[0]._super,  x18[1]._super,  x18[2]._super,  x18[3]._super,  x18[4]._super,
                 x18[5]._super,  x18[6]._super,  x18[7]._super,  x18[8]._super,  x18[9]._super,
                 x18[10]._super, x18[11]._super, x18[12]._super, x18[13]._super, x18[14]._super,
                 x18[15]._super, x18[16]._super, x18[17]._super, x18[18]._super, x18[19]._super,
                 x18[20]._super, x18[21]._super, x18[22]._super, x18[23]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:462)
  Val22Array x23 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x24 = exec_RetTuple(ctx,
                                     x19,
                                     x20,
                                     x21,
                                     x22,
                                     x23,
                                     x23,
                                     Val(0),
                                     Val(7),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(x9, arm0));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:453)
  RetTupleStruct x25 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x9, _super));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:439)
  RetTupleStruct x26 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(layout2, _super));
  return x26;
}
RetTupleStruct execRhoMajor_1_(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<RhoMajor_1_Layout> layout2) {
  // rho_major(zirgen/circuit/keccak/keccak.zir:529)
  BoundLayout<RhoMajor_1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_major(zirgen/circuit/keccak/keccak.zir:528)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_9_Struct x5 = exec_OneHot_9_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct9Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:530)
    RetTupleStruct x8 = execRhoMinor0_0__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm0));
    x7 = x8;
  } else if (to_size_t(x6[1]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:531)
    RetTupleStruct x9 = execRhoMinor1_0__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x9;
  } else if (to_size_t(x6[2]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:532)
    RetTupleStruct x10 = execRhoMinor2_0__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x10;
  } else if (to_size_t(x6[3]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:533)
    RetTupleStruct x11 = execRhoMinor0_2__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x11;
  } else if (to_size_t(x6[4]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:534)
    RetTupleStruct x12 = execRhoMinor1_2__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x12;
  } else if (to_size_t(x6[5]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:535)
    RetTupleStruct x13 = execRhoMinor2_2__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm5));
    x7 = x13;
  } else if (to_size_t(x6[6]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:536)
    RetTupleStruct x14 = execRhoMinor0_4__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm6));
    x7 = x14;
  } else if (to_size_t(x6[7]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:537)
    RetTupleStruct x15 = execRhoMinor1_4__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x15;
  } else if (to_size_t(x6[8]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:538)
    RetTupleStruct x16 = execRhoMinor3_1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x16;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // rho_major(zirgen/circuit/keccak/keccak.zir:529)
  RetTupleStruct x17 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x17;
}
RetTupleStruct execRhoMinor0_0__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_0__2_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[21]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[22]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[23]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[12]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[13]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[14]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(1),
                    Val(7),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_0__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_0__2_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_0__2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrB;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[8]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[9]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[10]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x420 * x418) + x421) * Val(2));
  Val x428 = (((x425 * x423) + x426) * Val(4));
  Val x429 = (((x106 * x104) + x107) * Val(8));
  Val x430 = (((x111 * x109) + x112) * Val(16));
  Val x431 = (((x116 * x114) + x117) * Val(32));
  Val x432 = (((x121 * x119) + x122) * Val(64));
  Val x433 = (((x126 * x124) + x127) * Val(128));
  Val x434 = (((x131 * x129) + x132) * Val(256));
  Val x435 = (((x136 * x134) + x137) * Val(512));
  Val x436 = (((x141 * x139) + x142) * Val(1024));
  Val x437 = (((x146 * x144) + x147) * Val(2048));
  Val x438 = (((x151 * x149) + x152) * Val(4096));
  Val x439 = (((x156 * x154) + x157) * Val(8192));
  Val x440 = (((x161 * x159) + x162) * Val(16384));
  Val x441 = (((x166 * x164) + x167) * Val(32768));
  Val x442 = (((x171 * x169) + x172) * Val(65536));
  Val x443 = (((x176 * x174) + x177) * Val(131072));
  Val x444 = (((x181 * x179) + x182) * Val(262144));
  Val x445 = (((x186 * x184) + x187) * Val(524288));
  Val x446 = (((x191 * x189) + x192) * Val(1048576));
  Val x447 = (((x196 * x194) + x197) * Val(2097152));
  Val x448 = (((x415 * x413) + x416) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x206 * x204) + x207) * Val(2));
  Val x457 = (((x211 * x209) + x212) * Val(4));
  Val x458 = (((x218 * x216) + x219) * Val(8));
  Val x459 = (((x223 * x221) + x224) * Val(16));
  Val x460 = (((x228 * x226) + x229) * Val(32));
  Val x461 = (((x233 * x231) + x234) * Val(64));
  Val x462 = (((x238 * x236) + x239) * Val(128));
  Val x463 = (((x243 * x241) + x244) * Val(256));
  Val x464 = (((x248 * x246) + x249) * Val(512));
  Val x465 = (((x253 * x251) + x254) * Val(1024));
  Val x466 = (((x258 * x256) + x259) * Val(2048));
  Val x467 = (((x263 * x261) + x264) * Val(4096));
  Val x468 = (((x268 * x266) + x269) * Val(8192));
  Val x469 = (((x273 * x271) + x274) * Val(16384));
  Val x470 = (((x278 * x276) + x279) * Val(32768));
  Val x471 = (((x283 * x281) + x284) * Val(65536));
  Val x472 = (((x288 * x286) + x289) * Val(131072));
  Val x473 = (((x293 * x291) + x294) * Val(262144));
  Val x474 = (((x298 * x296) + x299) * Val(524288));
  Val x475 = (((x303 * x301) + x304) * Val(1048576));
  Val x476 = (((x201 * x199) + x202) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x313 * x311) + x314) * Val(2));
  Val x485 = (((x318 * x316) + x319) * Val(4));
  Val x486 = (((x325 * x323) + x326) * Val(8));
  Val x487 = (((x330 * x328) + x331) * Val(16));
  Val x488 = (((x335 * x333) + x336) * Val(32));
  Val x489 = (((x340 * x338) + x341) * Val(64));
  Val x490 = (((x345 * x343) + x346) * Val(128));
  Val x491 = (((x350 * x348) + x351) * Val(256));
  Val x492 = (((x355 * x353) + x356) * Val(512));
  Val x493 = (((x360 * x358) + x361) * Val(1024));
  Val x494 = (((x365 * x363) + x366) * Val(2048));
  Val x495 = (((x370 * x368) + x371) * Val(4096));
  Val x496 = (((x375 * x373) + x376) * Val(8192));
  Val x497 = (((x380 * x378) + x381) * Val(16384));
  Val x498 = (((x385 * x383) + x386) * Val(32768));
  Val x499 = (((x390 * x388) + x391) * Val(65536));
  Val x500 = (((x395 * x393) + x396) * Val(131072));
  Val x501 = (((x400 * x398) + x401) * Val(262144));
  Val x502 = (((x405 * x403) + x406) * Val(524288));
  Val x503 = (((x410 * x408) + x411) * Val(1048576));
  Val x504 = (((x308 * x306) + x309) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_0__2_Arm1_SuperLayout> x512 = LAYOUT_LOOKUP(x3, arm1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct24Array x513 = x4.arrD;
  Val x514 = x513[9]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:345)
  ToBits_22_Struct x515 = exec_ToBits_22_(ctx, x514, LAYOUT_LOOKUP(x512, unpackM1));
  NondetRegStruct22Array x516 = x515._super;
  Val x517 = x516[0]._super;
  Val x518 = x516[1]._super;
  Val x519 = x516[2]._super;
  Val x520 = x516[3]._super;
  Val x521 = x516[4]._super;
  Val x522 = x516[5]._super;
  Val x523 = x516[6]._super;
  Val x524 = x516[7]._super;
  Val x525 = x516[8]._super;
  Val x526 = x516[9]._super;
  Val x527 = x516[10]._super;
  Val x528 = x516[11]._super;
  Val x529 = x516[12]._super;
  Val x530 = x516[13]._super;
  Val x531 = x516[14]._super;
  Val x532 = x516[15]._super;
  Val x533 = x516[16]._super;
  Val x534 = x516[17]._super;
  Val x535 = x516[18]._super;
  Val x536 = x516[19]._super;
  Val x537 = x516[20]._super;
  Val x538 = x516[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:346)
  Val x539 = (((x517 + (x518 * Val(2))) + (x519 * Val(4))) + (x520 * Val(8)));
  Val x540 = (((x539 + (x521 * Val(16))) + (x522 * Val(32))) + (x523 * Val(64)));
  Val x541 = (((x540 + (x524 * Val(128))) + (x525 * Val(256))) + (x526 * Val(512)));
  Val x542 = (((x541 + (x527 * Val(1024))) + (x528 * Val(2048))) + (x529 * Val(4096)));
  Val x543 = (((x542 + (x530 * Val(8192))) + (x531 * Val(16384))) + (x532 * Val(32768)));
  Val x544 = (((x543 + (x533 * Val(65536))) + (x534 * Val(131072))) + (x535 * Val(262144)));
  Val x545 = (((x544 + (x536 * Val(524288))) + (x537 * Val(1048576))) + (x538 * Val(2097152)));
  EQZ((x545 - x514), "rho_minor1(zirgen/circuit/keccak/keccak.zir:346)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x546 = x513[10]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:349)
  ToBits_21_Struct x547 = exec_ToBits_21_(ctx, x546, LAYOUT_LOOKUP(x512, unpackM2));
  NondetRegStruct21Array x548 = x547._super;
  Val x549 = x548[0]._super;
  Val x550 = x548[1]._super;
  Val x551 = x548[2]._super;
  Val x552 = x548[3]._super;
  Val x553 = x548[4]._super;
  Val x554 = x548[5]._super;
  Val x555 = x548[6]._super;
  Val x556 = x548[7]._super;
  Val x557 = x548[8]._super;
  Val x558 = x548[9]._super;
  Val x559 = x548[10]._super;
  Val x560 = x548[11]._super;
  Val x561 = x548[12]._super;
  Val x562 = x548[13]._super;
  Val x563 = x548[14]._super;
  Val x564 = x548[15]._super;
  Val x565 = x548[16]._super;
  Val x566 = x548[17]._super;
  Val x567 = x548[18]._super;
  Val x568 = x548[19]._super;
  Val x569 = x548[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:350)
  Val x570 = (((x549 + (x550 * Val(2))) + (x551 * Val(4))) + (x552 * Val(8)));
  Val x571 = (((x570 + (x553 * Val(16))) + (x554 * Val(32))) + (x555 * Val(64)));
  Val x572 = (((x571 + (x556 * Val(128))) + (x557 * Val(256))) + (x558 * Val(512)));
  Val x573 = (((x572 + (x559 * Val(1024))) + (x560 * Val(2048))) + (x561 * Val(4096)));
  Val x574 = (((x573 + (x562 * Val(8192))) + (x563 * Val(16384))) + (x564 * Val(32768)));
  Val x575 = (((x574 + (x565 * Val(65536))) + (x566 * Val(131072))) + (x567 * Val(262144)));
  Val x576 = (((x575 + (x568 * Val(524288))) + (x569 * Val(1048576))) - x546);
  EQZ(x576, "rho_minor1(zirgen/circuit/keccak/keccak.zir:350)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x577 = x513[11]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:354)
  ToBits_21_Struct x578 = exec_ToBits_21_(ctx, x577, LAYOUT_LOOKUP(x512, unpackM3));
  NondetRegStruct21Array x579 = x578._super;
  Val x580 = x579[0]._super;
  Val x581 = x579[1]._super;
  Val x582 = x579[2]._super;
  Val x583 = x579[3]._super;
  Val x584 = x579[4]._super;
  Val x585 = x579[5]._super;
  Val x586 = x579[6]._super;
  Val x587 = x579[7]._super;
  Val x588 = x579[8]._super;
  Val x589 = x579[9]._super;
  Val x590 = x579[10]._super;
  Val x591 = x579[11]._super;
  Val x592 = x579[12]._super;
  Val x593 = x579[13]._super;
  Val x594 = x579[14]._super;
  Val x595 = x579[15]._super;
  Val x596 = x579[16]._super;
  Val x597 = x579[17]._super;
  Val x598 = x579[18]._super;
  Val x599 = x579[19]._super;
  Val x600 = x579[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:355)
  Val x601 = (((x580 + (x581 * Val(2))) + (x582 * Val(4))) + (x583 * Val(8)));
  Val x602 = (((x601 + (x584 * Val(16))) + (x585 * Val(32))) + (x586 * Val(64)));
  Val x603 = (((x602 + (x587 * Val(128))) + (x588 * Val(256))) + (x589 * Val(512)));
  Val x604 = (((x603 + (x590 * Val(1024))) + (x591 * Val(2048))) + (x592 * Val(4096)));
  Val x605 = (((x604 + (x593 * Val(8192))) + (x594 * Val(16384))) + (x595 * Val(32768)));
  Val x606 = (((x605 + (x596 * Val(65536))) + (x597 * Val(131072))) + (x598 * Val(262144)));
  Val x607 = (((x606 + (x599 * Val(524288))) + (x600 * Val(1048576))) - x577);
  EQZ(x607, "rho_minor1(zirgen/circuit/keccak/keccak.zir:355)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:358)
  RetTupleStruct x608 = exec_RetTuple(
      ctx,
      Val22Array{x517, x518, x519, x520, x521, x522, x523, x524, x525, x526, x527,
                 x528, x529, x530, x531, x532, x533, x534, x535, x536, x537, x538},
      Val22Array{x549, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559,
                 x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, Val(0)},
      Val22Array{x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x590,
                 x591, x592, x593, x594, x595, x596, x597, x598, x599, x600, Val(0)},
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(2),
      Val(7),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x512, _super));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x609 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x609;
}
RetTupleStruct execRhoMinor2_0__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor2_0__2_Layout> layout2) {
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  RetTupleStruct x3 = back_RetTuple(ctx, 3, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct24Array x5 = x3.arrD;
  Val x6 = x5[15]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:368)
  ToBits_22_Struct x7 = exec_ToBits_22_(ctx, x6, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  Val x30 = x8[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:369)
  Val x31 = (((x9 + (x10 * Val(2))) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) + (x30 * Val(2097152)));
  EQZ((x37 - x6), "rho_minor2(zirgen/circuit/keccak/keccak.zir:369)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x38 = x5[16]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:372)
  ToBits_21_Struct x39 = exec_ToBits_21_(ctx, x38, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x40 = x39._super;
  Val x41 = x40[0]._super;
  Val x42 = x40[1]._super;
  Val x43 = x40[2]._super;
  Val x44 = x40[3]._super;
  Val x45 = x40[4]._super;
  Val x46 = x40[5]._super;
  Val x47 = x40[6]._super;
  Val x48 = x40[7]._super;
  Val x49 = x40[8]._super;
  Val x50 = x40[9]._super;
  Val x51 = x40[10]._super;
  Val x52 = x40[11]._super;
  Val x53 = x40[12]._super;
  Val x54 = x40[13]._super;
  Val x55 = x40[14]._super;
  Val x56 = x40[15]._super;
  Val x57 = x40[16]._super;
  Val x58 = x40[17]._super;
  Val x59 = x40[18]._super;
  Val x60 = x40[19]._super;
  Val x61 = x40[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:373)
  Val x62 = (((x41 + (x42 * Val(2))) + (x43 * Val(4))) + (x44 * Val(8)));
  Val x63 = (((x62 + (x45 * Val(16))) + (x46 * Val(32))) + (x47 * Val(64)));
  Val x64 = (((x63 + (x48 * Val(128))) + (x49 * Val(256))) + (x50 * Val(512)));
  Val x65 = (((x64 + (x51 * Val(1024))) + (x52 * Val(2048))) + (x53 * Val(4096)));
  Val x66 = (((x65 + (x54 * Val(8192))) + (x55 * Val(16384))) + (x56 * Val(32768)));
  Val x67 = (((x66 + (x57 * Val(65536))) + (x58 * Val(131072))) + (x59 * Val(262144)));
  Val x68 = (((x67 + (x60 * Val(524288))) + (x61 * Val(1048576))) - x38);
  EQZ(x68, "rho_minor2(zirgen/circuit/keccak/keccak.zir:373)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x69 = x5[17]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:376)
  ToBits_21_Struct x70 = exec_ToBits_21_(ctx, x69, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:377)
  Val x93 = (((x72 + (x73 * Val(2))) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x94 = (((x93 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x95 = (((x94 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x96 = (((x95 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x97 = (((x96 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x98 = (((x97 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x99 = (((x98 + (x91 * Val(524288))) + (x92 * Val(1048576))) - x69);
  EQZ(x99, "rho_minor2(zirgen/circuit/keccak/keccak.zir:377)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct22Array x100 = x3.arrB;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:383)
  Val x101 = x100[11]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:390)
  ToBits_22_Struct x102 = exec_ToBits_22_(ctx, x101, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x103 = x102._super;
  Val x104 = x103[0]._super;
  Val x105 = x103[1]._super;
  Val x106 = x103[2]._super;
  Val x107 = x103[3]._super;
  Val x108 = x103[4]._super;
  Val x109 = x103[5]._super;
  Val x110 = x103[6]._super;
  Val x111 = x103[7]._super;
  Val x112 = x103[8]._super;
  Val x113 = x103[9]._super;
  Val x114 = x103[10]._super;
  Val x115 = x103[11]._super;
  Val x116 = x103[12]._super;
  Val x117 = x103[13]._super;
  Val x118 = x103[14]._super;
  Val x119 = x103[15]._super;
  Val x120 = x103[16]._super;
  Val x121 = x103[17]._super;
  Val x122 = x103[18]._super;
  Val x123 = x103[19]._super;
  Val x124 = x103[20]._super;
  Val x125 = x103[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:391)
  Val x126 = (((x104 + (x105 * Val(2))) + (x106 * Val(4))) + (x107 * Val(8)));
  Val x127 = (((x126 + (x108 * Val(16))) + (x109 * Val(32))) + (x110 * Val(64)));
  Val x128 = (((x127 + (x111 * Val(128))) + (x112 * Val(256))) + (x113 * Val(512)));
  Val x129 = (((x128 + (x114 * Val(1024))) + (x115 * Val(2048))) + (x116 * Val(4096)));
  Val x130 = (((x129 + (x117 * Val(8192))) + (x118 * Val(16384))) + (x119 * Val(32768)));
  Val x131 = (((x130 + (x120 * Val(65536))) + (x121 * Val(131072))) + (x122 * Val(262144)));
  Val x132 = (((x131 + (x123 * Val(524288))) + (x124 * Val(1048576))) + (x125 * Val(2097152)));
  EQZ((x132 - x101), "rho_minor2(zirgen/circuit/keccak/keccak.zir:391)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:395)
  Val x133 = x100[12]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:402)
  ToBits_21_Struct x134 = exec_ToBits_21_(ctx, x133, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x135 = x134._super;
  Val x136 = x135[0]._super;
  Val x137 = x135[1]._super;
  Val x138 = x135[2]._super;
  Val x139 = x135[3]._super;
  Val x140 = x135[4]._super;
  Val x141 = x135[5]._super;
  Val x142 = x135[6]._super;
  Val x143 = x135[7]._super;
  Val x144 = x135[8]._super;
  Val x145 = x135[9]._super;
  Val x146 = x135[10]._super;
  Val x147 = x135[11]._super;
  Val x148 = x135[12]._super;
  Val x149 = x135[13]._super;
  Val x150 = x135[14]._super;
  Val x151 = x135[15]._super;
  Val x152 = x135[16]._super;
  Val x153 = x135[17]._super;
  Val x154 = x135[18]._super;
  Val x155 = x135[19]._super;
  Val x156 = x135[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:403)
  Val x157 = (((x136 + (x137 * Val(2))) + (x138 * Val(4))) + (x139 * Val(8)));
  Val x158 = (((x157 + (x140 * Val(16))) + (x141 * Val(32))) + (x142 * Val(64)));
  Val x159 = (((x158 + (x143 * Val(128))) + (x144 * Val(256))) + (x145 * Val(512)));
  Val x160 = (((x159 + (x146 * Val(1024))) + (x147 * Val(2048))) + (x148 * Val(4096)));
  Val x161 = (((x160 + (x149 * Val(8192))) + (x150 * Val(16384))) + (x151 * Val(32768)));
  Val x162 = (((x161 + (x152 * Val(65536))) + (x153 * Val(131072))) + (x154 * Val(262144)));
  Val x163 = (((x162 + (x155 * Val(524288))) + (x156 * Val(1048576))) - x133);
  EQZ(x163, "rho_minor2(zirgen/circuit/keccak/keccak.zir:403)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:407)
  Val x164 = x100[13]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:414)
  ToBits_21_Struct x165 = exec_ToBits_21_(ctx, x164, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x166 = x165._super;
  Val x167 = x166[0]._super;
  Val x168 = x166[1]._super;
  Val x169 = x166[2]._super;
  Val x170 = x166[3]._super;
  Val x171 = x166[4]._super;
  Val x172 = x166[5]._super;
  Val x173 = x166[6]._super;
  Val x174 = x166[7]._super;
  Val x175 = x166[8]._super;
  Val x176 = x166[9]._super;
  Val x177 = x166[10]._super;
  Val x178 = x166[11]._super;
  Val x179 = x166[12]._super;
  Val x180 = x166[13]._super;
  Val x181 = x166[14]._super;
  Val x182 = x166[15]._super;
  Val x183 = x166[16]._super;
  Val x184 = x166[17]._super;
  Val x185 = x166[18]._super;
  Val x186 = x166[19]._super;
  Val x187 = x166[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:415)
  Val x188 = (((x167 + (x168 * Val(2))) + (x169 * Val(4))) + (x170 * Val(8)));
  Val x189 = (((x188 + (x171 * Val(16))) + (x172 * Val(32))) + (x173 * Val(64)));
  Val x190 = (((x189 + (x174 * Val(128))) + (x175 * Val(256))) + (x176 * Val(512)));
  Val x191 = (((x190 + (x177 * Val(1024))) + (x178 * Val(2048))) + (x179 * Val(4096)));
  Val x192 = (((x191 + (x180 * Val(8192))) + (x181 * Val(16384))) + (x182 * Val(32768)));
  Val x193 = (((x192 + (x183 * Val(65536))) + (x184 * Val(131072))) + (x185 * Val(262144)));
  Val x194 = (((x193 + (x186 * Val(524288))) + (x187 * Val(1048576))) - x164);
  EQZ(x194, "rho_minor2(zirgen/circuit/keccak/keccak.zir:415)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x195 = x4.arrA;
  Val x196 = x195[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x197 = ((Val(1) - x104) * (Val(1) - x196));
  Val x198 = ((x104 * x196) + x197);
  Val x199 = ((Val(1) - x198) * (Val(1) - x92));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x200 = x195[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x201 = ((Val(1) - x105) * (Val(1) - x200));
  Val x202 = ((x105 * x200) + x201);
  Val x203 = ((Val(1) - x202) * (Val(1) - x9));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x204 = x195[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x205 = ((Val(1) - x106) * (Val(1) - x204));
  Val x206 = ((x106 * x204) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x10));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x208 = x195[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x209 = ((Val(1) - x107) * (Val(1) - x208));
  Val x210 = ((x107 * x208) + x209);
  Val x211 = ((Val(1) - x210) * (Val(1) - x11));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x212 = x195[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x213 = ((Val(1) - x108) * (Val(1) - x212));
  Val x214 = ((x108 * x212) + x213);
  Val x215 = ((Val(1) - x214) * (Val(1) - x12));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x216 = x195[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x217 = ((Val(1) - x109) * (Val(1) - x216));
  Val x218 = ((x109 * x216) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x13));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x220 = x195[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x221 = ((Val(1) - x110) * (Val(1) - x220));
  Val x222 = ((x110 * x220) + x221);
  Val x223 = ((Val(1) - x222) * (Val(1) - x14));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x224 = x195[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x225 = ((Val(1) - x111) * (Val(1) - x224));
  Val x226 = ((x111 * x224) + x225);
  Val x227 = ((Val(1) - x226) * (Val(1) - x15));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x228 = x195[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x229 = ((Val(1) - x112) * (Val(1) - x228));
  Val x230 = ((x112 * x228) + x229);
  Val x231 = ((Val(1) - x230) * (Val(1) - x16));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x232 = x195[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x233 = ((Val(1) - x113) * (Val(1) - x232));
  Val x234 = ((x113 * x232) + x233);
  Val x235 = ((Val(1) - x234) * (Val(1) - x17));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x236 = x195[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x237 = ((Val(1) - x114) * (Val(1) - x236));
  Val x238 = ((x114 * x236) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x18));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x240 = x195[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x241 = ((Val(1) - x115) * (Val(1) - x240));
  Val x242 = ((x115 * x240) + x241);
  Val x243 = ((Val(1) - x242) * (Val(1) - x19));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x244 = x195[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x245 = ((Val(1) - x116) * (Val(1) - x244));
  Val x246 = ((x116 * x244) + x245);
  Val x247 = ((Val(1) - x246) * (Val(1) - x20));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x248 = x195[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x249 = ((Val(1) - x117) * (Val(1) - x248));
  Val x250 = ((x117 * x248) + x249);
  Val x251 = ((Val(1) - x250) * (Val(1) - x21));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x252 = x195[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x253 = ((Val(1) - x118) * (Val(1) - x252));
  Val x254 = ((x118 * x252) + x253);
  Val x255 = ((Val(1) - x254) * (Val(1) - x22));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x256 = x195[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x257 = ((Val(1) - x119) * (Val(1) - x256));
  Val x258 = ((x119 * x256) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x23));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x260 = x195[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x261 = ((Val(1) - x120) * (Val(1) - x260));
  Val x262 = ((x120 * x260) + x261);
  Val x263 = ((Val(1) - x262) * (Val(1) - x24));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x264 = x195[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x265 = ((Val(1) - x121) * (Val(1) - x264));
  Val x266 = ((x121 * x264) + x265);
  Val x267 = ((Val(1) - x266) * (Val(1) - x25));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x268 = x195[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x269 = ((Val(1) - x122) * (Val(1) - x268));
  Val x270 = ((x122 * x268) + x269);
  Val x271 = ((Val(1) - x270) * (Val(1) - x26));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x272 = x195[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x273 = ((Val(1) - x123) * (Val(1) - x272));
  Val x274 = ((x123 * x272) + x273);
  Val x275 = ((Val(1) - x274) * (Val(1) - x27));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x276 = x195[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x277 = ((Val(1) - x124) * (Val(1) - x276));
  Val x278 = ((x124 * x276) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x28));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x280 = x195[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x281 = ((Val(1) - x125) * (Val(1) - x280));
  Val x282 = ((x125 * x280) + x281);
  Val x283 = ((Val(1) - x282) * (Val(1) - x29));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x284 = x4.arrB;
  Val x285 = x284[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x286 = ((Val(1) - x136) * (Val(1) - x285));
  Val x287 = ((x136 * x285) + x286);
  Val x288 = ((Val(1) - x287) * (Val(1) - x30));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x289 = x284[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x290 = ((Val(1) - x137) * (Val(1) - x289));
  Val x291 = ((x137 * x289) + x290);
  Val x292 = ((Val(1) - x291) * (Val(1) - x41));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x293 = x284[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x294 = ((Val(1) - x138) * (Val(1) - x293));
  Val x295 = ((x138 * x293) + x294);
  Val x296 = ((Val(1) - x295) * (Val(1) - x42));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x297 = x284[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x298 = ((Val(1) - x139) * (Val(1) - x297));
  Val x299 = ((x139 * x297) + x298);
  Val x300 = ((Val(1) - x299) * (Val(1) - x43));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x301 = x284[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x302 = ((Val(1) - x140) * (Val(1) - x301));
  Val x303 = ((x140 * x301) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x44));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x305 = x284[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x306 = ((Val(1) - x141) * (Val(1) - x305));
  Val x307 = ((x141 * x305) + x306);
  Val x308 = ((Val(1) - x307) * (Val(1) - x45));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x309 = x284[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x310 = ((Val(1) - x142) * (Val(1) - x309));
  Val x311 = ((x142 * x309) + x310);
  Val x312 = ((Val(1) - x311) * (Val(1) - x46));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x313 = x284[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x314 = ((Val(1) - x143) * (Val(1) - x313));
  Val x315 = ((x143 * x313) + x314);
  Val x316 = ((Val(1) - x315) * (Val(1) - x47));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x317 = x284[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x318 = ((Val(1) - x144) * (Val(1) - x317));
  Val x319 = ((x144 * x317) + x318);
  Val x320 = ((Val(1) - x319) * (Val(1) - x48));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x321 = x284[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x322 = ((Val(1) - x145) * (Val(1) - x321));
  Val x323 = ((x145 * x321) + x322);
  Val x324 = ((Val(1) - x323) * (Val(1) - x49));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x325 = x284[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x326 = ((Val(1) - x146) * (Val(1) - x325));
  Val x327 = ((x146 * x325) + x326);
  Val x328 = ((Val(1) - x327) * (Val(1) - x50));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x329 = x284[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x330 = ((Val(1) - x147) * (Val(1) - x329));
  Val x331 = ((x147 * x329) + x330);
  Val x332 = ((Val(1) - x331) * (Val(1) - x51));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x333 = x284[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x334 = ((Val(1) - x148) * (Val(1) - x333));
  Val x335 = ((x148 * x333) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x52));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x337 = x284[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x338 = ((Val(1) - x149) * (Val(1) - x337));
  Val x339 = ((x149 * x337) + x338);
  Val x340 = ((Val(1) - x339) * (Val(1) - x53));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x341 = x284[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x342 = ((Val(1) - x150) * (Val(1) - x341));
  Val x343 = ((x150 * x341) + x342);
  Val x344 = ((Val(1) - x343) * (Val(1) - x54));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x345 = x284[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x346 = ((Val(1) - x151) * (Val(1) - x345));
  Val x347 = ((x151 * x345) + x346);
  Val x348 = ((Val(1) - x347) * (Val(1) - x55));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x349 = x284[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x350 = ((Val(1) - x152) * (Val(1) - x349));
  Val x351 = ((x152 * x349) + x350);
  Val x352 = ((Val(1) - x351) * (Val(1) - x56));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x353 = x284[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x354 = ((Val(1) - x153) * (Val(1) - x353));
  Val x355 = ((x153 * x353) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x57));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x357 = x284[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x358 = ((Val(1) - x154) * (Val(1) - x357));
  Val x359 = ((x154 * x357) + x358);
  Val x360 = ((Val(1) - x359) * (Val(1) - x58));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x361 = x284[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x362 = ((Val(1) - x155) * (Val(1) - x361));
  Val x363 = ((x155 * x361) + x362);
  Val x364 = ((Val(1) - x363) * (Val(1) - x59));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x365 = x284[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x366 = ((Val(1) - x156) * (Val(1) - x365));
  Val x367 = ((x156 * x365) + x366);
  Val x368 = ((Val(1) - x367) * (Val(1) - x60));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x369 = x4.arrC;
  Val x370 = x369[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x371 = ((Val(1) - x167) * (Val(1) - x370));
  Val x372 = ((x167 * x370) + x371);
  Val x373 = ((Val(1) - x372) * (Val(1) - x61));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x374 = x369[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x375 = ((Val(1) - x168) * (Val(1) - x374));
  Val x376 = ((x168 * x374) + x375);
  Val x377 = ((Val(1) - x376) * (Val(1) - x72));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x378 = x369[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x379 = ((Val(1) - x169) * (Val(1) - x378));
  Val x380 = ((x169 * x378) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x73));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x382 = x369[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x383 = ((Val(1) - x170) * (Val(1) - x382));
  Val x384 = ((x170 * x382) + x383);
  Val x385 = ((Val(1) - x384) * (Val(1) - x74));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x386 = x369[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x387 = ((Val(1) - x171) * (Val(1) - x386));
  Val x388 = ((x171 * x386) + x387);
  Val x389 = ((Val(1) - x388) * (Val(1) - x75));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x390 = x369[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x391 = ((Val(1) - x172) * (Val(1) - x390));
  Val x392 = ((x172 * x390) + x391);
  Val x393 = ((Val(1) - x392) * (Val(1) - x76));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x394 = x369[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x395 = ((Val(1) - x173) * (Val(1) - x394));
  Val x396 = ((x173 * x394) + x395);
  Val x397 = ((Val(1) - x396) * (Val(1) - x77));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x398 = x369[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x399 = ((Val(1) - x174) * (Val(1) - x398));
  Val x400 = ((x174 * x398) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x78));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x402 = x369[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x403 = ((Val(1) - x175) * (Val(1) - x402));
  Val x404 = ((x175 * x402) + x403);
  Val x405 = ((Val(1) - x404) * (Val(1) - x79));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x406 = x369[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x407 = ((Val(1) - x176) * (Val(1) - x406));
  Val x408 = ((x176 * x406) + x407);
  Val x409 = ((Val(1) - x408) * (Val(1) - x80));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x410 = x369[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x411 = ((Val(1) - x177) * (Val(1) - x410));
  Val x412 = ((x177 * x410) + x411);
  Val x413 = ((Val(1) - x412) * (Val(1) - x81));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x414 = x369[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x415 = ((Val(1) - x178) * (Val(1) - x414));
  Val x416 = ((x178 * x414) + x415);
  Val x417 = ((Val(1) - x416) * (Val(1) - x82));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x418 = x369[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x419 = ((Val(1) - x179) * (Val(1) - x418));
  Val x420 = ((x179 * x418) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x83));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x422 = x369[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x423 = ((Val(1) - x180) * (Val(1) - x422));
  Val x424 = ((x180 * x422) + x423);
  Val x425 = ((Val(1) - x424) * (Val(1) - x84));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x426 = x369[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x427 = ((Val(1) - x181) * (Val(1) - x426));
  Val x428 = ((x181 * x426) + x427);
  Val x429 = ((Val(1) - x428) * (Val(1) - x85));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x430 = x369[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x431 = ((Val(1) - x182) * (Val(1) - x430));
  Val x432 = ((x182 * x430) + x431);
  Val x433 = ((Val(1) - x432) * (Val(1) - x86));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x434 = x369[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x435 = ((Val(1) - x183) * (Val(1) - x434));
  Val x436 = ((x183 * x434) + x435);
  Val x437 = ((Val(1) - x436) * (Val(1) - x87));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x438 = x369[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x439 = ((Val(1) - x184) * (Val(1) - x438));
  Val x440 = ((x184 * x438) + x439);
  Val x441 = ((Val(1) - x440) * (Val(1) - x88));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x442 = x369[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x443 = ((Val(1) - x185) * (Val(1) - x442));
  Val x444 = ((x185 * x442) + x443);
  Val x445 = ((Val(1) - x444) * (Val(1) - x89));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x446 = x369[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x447 = ((Val(1) - x186) * (Val(1) - x446));
  Val x448 = ((x186 * x446) + x447);
  Val x449 = ((Val(1) - x448) * (Val(1) - x90));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x450 = x369[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x451 = ((Val(1) - x187) * (Val(1) - x450));
  Val x452 = ((x187 * x450) + x451);
  Val x453 = ((Val(1) - x452) * (Val(1) - x91));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:422)
  Val x454 = (((x420 * x83) + x421) * Val(2));
  Val x455 = (((x424 * x84) + x425) * Val(4));
  Val x456 = (((x428 * x85) + x429) * Val(8));
  Val x457 = (((x432 * x86) + x433) * Val(16));
  Val x458 = (((x436 * x87) + x437) * Val(32));
  Val x459 = (((x440 * x88) + x441) * Val(64));
  Val x460 = (((x444 * x89) + x445) * Val(128));
  Val x461 = (((x448 * x90) + x449) * Val(256));
  Val x462 = (((x452 * x91) + x453) * Val(512));
  Val x463 = (((x198 * x92) + x199) * Val(1024));
  Val x464 = (((x202 * x9) + x203) * Val(2048));
  Val x465 = (((x206 * x10) + x207) * Val(4096));
  Val x466 = (((x210 * x11) + x211) * Val(8192));
  Val x467 = (((x214 * x12) + x215) * Val(16384));
  Val x468 = (((x218 * x13) + x219) * Val(32768));
  Val x469 = (((x222 * x14) + x223) * Val(65536));
  Val x470 = (((x226 * x15) + x227) * Val(131072));
  Val x471 = (((x230 * x16) + x231) * Val(262144));
  Val x472 = (((x234 * x17) + x235) * Val(524288));
  Val x473 = (((x238 * x18) + x239) * Val(1048576));
  Val x474 = (((x242 * x19) + x243) * Val(2097152));
  Val x475 = (((x416 * x82) + x417) + x454);
  Val x476 = (((x475 + x455) + x456) + x457);
  Val x477 = (((x476 + x458) + x459) + x460);
  Val x478 = (((x477 + x461) + x462) + x463);
  Val x479 = (((x478 + x464) + x465) + x466);
  Val x480 = (((x479 + x467) + x468) + x469);
  Val x481 = (((x480 + x470) + x471) + x472);
  NondetRegStruct x482 = exec_Reg(ctx, ((x481 + x473) + x474), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:423)
  Val x483 = (((x250 * x21) + x251) * Val(2));
  Val x484 = (((x254 * x22) + x255) * Val(4));
  Val x485 = (((x258 * x23) + x259) * Val(8));
  Val x486 = (((x262 * x24) + x263) * Val(16));
  Val x487 = (((x266 * x25) + x267) * Val(32));
  Val x488 = (((x270 * x26) + x271) * Val(64));
  Val x489 = (((x274 * x27) + x275) * Val(128));
  Val x490 = (((x278 * x28) + x279) * Val(256));
  Val x491 = (((x282 * x29) + x283) * Val(512));
  Val x492 = (((x287 * x30) + x288) * Val(1024));
  Val x493 = (((x291 * x41) + x292) * Val(2048));
  Val x494 = (((x295 * x42) + x296) * Val(4096));
  Val x495 = (((x299 * x43) + x300) * Val(8192));
  Val x496 = (((x303 * x44) + x304) * Val(16384));
  Val x497 = (((x307 * x45) + x308) * Val(32768));
  Val x498 = (((x311 * x46) + x312) * Val(65536));
  Val x499 = (((x315 * x47) + x316) * Val(131072));
  Val x500 = (((x319 * x48) + x320) * Val(262144));
  Val x501 = (((x323 * x49) + x324) * Val(524288));
  Val x502 = (((x327 * x50) + x328) * Val(1048576));
  Val x503 = (((x246 * x20) + x247) + x483);
  Val x504 = (((x503 + x484) + x485) + x486);
  Val x505 = (((x504 + x487) + x488) + x489);
  Val x506 = (((x505 + x490) + x491) + x492);
  Val x507 = (((x506 + x493) + x494) + x495);
  Val x508 = (((x507 + x496) + x497) + x498);
  Val x509 = (((x508 + x499) + x500) + x501);
  NondetRegStruct x510 = exec_Reg(ctx, (x509 + x502), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:424)
  Val x511 = (((x335 * x52) + x336) * Val(2));
  Val x512 = (((x339 * x53) + x340) * Val(4));
  Val x513 = (((x343 * x54) + x344) * Val(8));
  Val x514 = (((x347 * x55) + x348) * Val(16));
  Val x515 = (((x351 * x56) + x352) * Val(32));
  Val x516 = (((x355 * x57) + x356) * Val(64));
  Val x517 = (((x359 * x58) + x360) * Val(128));
  Val x518 = (((x363 * x59) + x364) * Val(256));
  Val x519 = (((x367 * x60) + x368) * Val(512));
  Val x520 = (((x372 * x61) + x373) * Val(1024));
  Val x521 = (((x376 * x72) + x377) * Val(2048));
  Val x522 = (((x380 * x73) + x381) * Val(4096));
  Val x523 = (((x384 * x74) + x385) * Val(8192));
  Val x524 = (((x388 * x75) + x389) * Val(16384));
  Val x525 = (((x392 * x76) + x393) * Val(32768));
  Val x526 = (((x396 * x77) + x397) * Val(65536));
  Val x527 = (((x400 * x78) + x401) * Val(131072));
  Val x528 = (((x404 * x79) + x405) * Val(262144));
  Val x529 = (((x408 * x80) + x409) * Val(524288));
  Val x530 = (((x412 * x81) + x413) * Val(1048576));
  Val x531 = (((x331 * x51) + x332) + x511);
  Val x532 = (((x531 + x512) + x513) + x514);
  Val x533 = (((x532 + x515) + x516) + x517);
  Val x534 = (((x533 + x518) + x519) + x520);
  Val x535 = (((x534 + x521) + x522) + x523);
  Val x536 = (((x535 + x524) + x525) + x526);
  Val x537 = (((x536 + x527) + x528) + x529);
  NondetRegStruct x538 = exec_Reg(ctx, (x537 + x530), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:427)
  Val22Array x539 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x540 = exec_RetTuple(
      ctx,
      x539,
      x539,
      x539,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x539,
      Val22Array{x482._super, x510._super, x538._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(3),
      Val(7),
      x4.rnd._super,
      x4.blk._super,
      x4.midx._super,
      LAYOUT_LOOKUP(layout2, _super));
  return x540;
}
RetTupleStruct execRhoMinor0_2__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_2__2_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 4, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[12]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[13]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[14]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[18]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[19]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[20]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(4),
                    Val(7),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_2__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_2__2_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_2__2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 5, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrB;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[14]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[15]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[16]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x218 * x216) + x219) * Val(2));
  Val x428 = (((x223 * x221) + x224) * Val(4));
  Val x429 = (((x228 * x226) + x229) * Val(8));
  Val x430 = (((x233 * x231) + x234) * Val(16));
  Val x431 = (((x238 * x236) + x239) * Val(32));
  Val x432 = (((x243 * x241) + x244) * Val(64));
  Val x433 = (((x248 * x246) + x249) * Val(128));
  Val x434 = (((x253 * x251) + x254) * Val(256));
  Val x435 = (((x258 * x256) + x259) * Val(512));
  Val x436 = (((x263 * x261) + x264) * Val(1024));
  Val x437 = (((x268 * x266) + x269) * Val(2048));
  Val x438 = (((x273 * x271) + x274) * Val(4096));
  Val x439 = (((x278 * x276) + x279) * Val(8192));
  Val x440 = (((x283 * x281) + x284) * Val(16384));
  Val x441 = (((x288 * x286) + x289) * Val(32768));
  Val x442 = (((x293 * x291) + x294) * Val(65536));
  Val x443 = (((x298 * x296) + x299) * Val(131072));
  Val x444 = (((x303 * x301) + x304) * Val(262144));
  Val x445 = (((x308 * x306) + x309) * Val(524288));
  Val x446 = (((x313 * x311) + x314) * Val(1048576));
  Val x447 = (((x318 * x316) + x319) * Val(2097152));
  Val x448 = (((x211 * x209) + x212) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x330 * x328) + x331) * Val(2));
  Val x457 = (((x335 * x333) + x336) * Val(4));
  Val x458 = (((x340 * x338) + x341) * Val(8));
  Val x459 = (((x345 * x343) + x346) * Val(16));
  Val x460 = (((x350 * x348) + x351) * Val(32));
  Val x461 = (((x355 * x353) + x356) * Val(64));
  Val x462 = (((x360 * x358) + x361) * Val(128));
  Val x463 = (((x365 * x363) + x366) * Val(256));
  Val x464 = (((x370 * x368) + x371) * Val(512));
  Val x465 = (((x375 * x373) + x376) * Val(1024));
  Val x466 = (((x380 * x378) + x381) * Val(2048));
  Val x467 = (((x385 * x383) + x386) * Val(4096));
  Val x468 = (((x390 * x388) + x391) * Val(8192));
  Val x469 = (((x395 * x393) + x396) * Val(16384));
  Val x470 = (((x400 * x398) + x401) * Val(32768));
  Val x471 = (((x405 * x403) + x406) * Val(65536));
  Val x472 = (((x410 * x408) + x411) * Val(131072));
  Val x473 = (((x415 * x413) + x416) * Val(262144));
  Val x474 = (((x420 * x418) + x421) * Val(524288));
  Val x475 = (((x425 * x423) + x426) * Val(1048576));
  Val x476 = (((x325 * x323) + x326) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x111 * x109) + x112) * Val(2));
  Val x485 = (((x116 * x114) + x117) * Val(4));
  Val x486 = (((x121 * x119) + x122) * Val(8));
  Val x487 = (((x126 * x124) + x127) * Val(16));
  Val x488 = (((x131 * x129) + x132) * Val(32));
  Val x489 = (((x136 * x134) + x137) * Val(64));
  Val x490 = (((x141 * x139) + x142) * Val(128));
  Val x491 = (((x146 * x144) + x147) * Val(256));
  Val x492 = (((x151 * x149) + x152) * Val(512));
  Val x493 = (((x156 * x154) + x157) * Val(1024));
  Val x494 = (((x161 * x159) + x162) * Val(2048));
  Val x495 = (((x166 * x164) + x167) * Val(4096));
  Val x496 = (((x171 * x169) + x172) * Val(8192));
  Val x497 = (((x176 * x174) + x177) * Val(16384));
  Val x498 = (((x181 * x179) + x182) * Val(32768));
  Val x499 = (((x186 * x184) + x187) * Val(65536));
  Val x500 = (((x191 * x189) + x192) * Val(131072));
  Val x501 = (((x196 * x194) + x197) * Val(262144));
  Val x502 = (((x201 * x199) + x202) * Val(524288));
  Val x503 = (((x206 * x204) + x207) * Val(1048576));
  Val x504 = (((x106 * x104) + x107) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_2__2_Arm1_SuperLayout> x512 = LAYOUT_LOOKUP(x3, arm1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct24Array x513 = x4.arrD;
  Val x514 = x513[15]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:345)
  ToBits_22_Struct x515 = exec_ToBits_22_(ctx, x514, LAYOUT_LOOKUP(x512, unpackM1));
  NondetRegStruct22Array x516 = x515._super;
  Val x517 = x516[0]._super;
  Val x518 = x516[1]._super;
  Val x519 = x516[2]._super;
  Val x520 = x516[3]._super;
  Val x521 = x516[4]._super;
  Val x522 = x516[5]._super;
  Val x523 = x516[6]._super;
  Val x524 = x516[7]._super;
  Val x525 = x516[8]._super;
  Val x526 = x516[9]._super;
  Val x527 = x516[10]._super;
  Val x528 = x516[11]._super;
  Val x529 = x516[12]._super;
  Val x530 = x516[13]._super;
  Val x531 = x516[14]._super;
  Val x532 = x516[15]._super;
  Val x533 = x516[16]._super;
  Val x534 = x516[17]._super;
  Val x535 = x516[18]._super;
  Val x536 = x516[19]._super;
  Val x537 = x516[20]._super;
  Val x538 = x516[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:346)
  Val x539 = (((x517 + (x518 * Val(2))) + (x519 * Val(4))) + (x520 * Val(8)));
  Val x540 = (((x539 + (x521 * Val(16))) + (x522 * Val(32))) + (x523 * Val(64)));
  Val x541 = (((x540 + (x524 * Val(128))) + (x525 * Val(256))) + (x526 * Val(512)));
  Val x542 = (((x541 + (x527 * Val(1024))) + (x528 * Val(2048))) + (x529 * Val(4096)));
  Val x543 = (((x542 + (x530 * Val(8192))) + (x531 * Val(16384))) + (x532 * Val(32768)));
  Val x544 = (((x543 + (x533 * Val(65536))) + (x534 * Val(131072))) + (x535 * Val(262144)));
  Val x545 = (((x544 + (x536 * Val(524288))) + (x537 * Val(1048576))) + (x538 * Val(2097152)));
  EQZ((x545 - x514), "rho_minor1(zirgen/circuit/keccak/keccak.zir:346)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x546 = x513[16]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:349)
  ToBits_21_Struct x547 = exec_ToBits_21_(ctx, x546, LAYOUT_LOOKUP(x512, unpackM2));
  NondetRegStruct21Array x548 = x547._super;
  Val x549 = x548[0]._super;
  Val x550 = x548[1]._super;
  Val x551 = x548[2]._super;
  Val x552 = x548[3]._super;
  Val x553 = x548[4]._super;
  Val x554 = x548[5]._super;
  Val x555 = x548[6]._super;
  Val x556 = x548[7]._super;
  Val x557 = x548[8]._super;
  Val x558 = x548[9]._super;
  Val x559 = x548[10]._super;
  Val x560 = x548[11]._super;
  Val x561 = x548[12]._super;
  Val x562 = x548[13]._super;
  Val x563 = x548[14]._super;
  Val x564 = x548[15]._super;
  Val x565 = x548[16]._super;
  Val x566 = x548[17]._super;
  Val x567 = x548[18]._super;
  Val x568 = x548[19]._super;
  Val x569 = x548[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:350)
  Val x570 = (((x549 + (x550 * Val(2))) + (x551 * Val(4))) + (x552 * Val(8)));
  Val x571 = (((x570 + (x553 * Val(16))) + (x554 * Val(32))) + (x555 * Val(64)));
  Val x572 = (((x571 + (x556 * Val(128))) + (x557 * Val(256))) + (x558 * Val(512)));
  Val x573 = (((x572 + (x559 * Val(1024))) + (x560 * Val(2048))) + (x561 * Val(4096)));
  Val x574 = (((x573 + (x562 * Val(8192))) + (x563 * Val(16384))) + (x564 * Val(32768)));
  Val x575 = (((x574 + (x565 * Val(65536))) + (x566 * Val(131072))) + (x567 * Val(262144)));
  Val x576 = (((x575 + (x568 * Val(524288))) + (x569 * Val(1048576))) - x546);
  EQZ(x576, "rho_minor1(zirgen/circuit/keccak/keccak.zir:350)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x577 = x513[17]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:354)
  ToBits_21_Struct x578 = exec_ToBits_21_(ctx, x577, LAYOUT_LOOKUP(x512, unpackM3));
  NondetRegStruct21Array x579 = x578._super;
  Val x580 = x579[0]._super;
  Val x581 = x579[1]._super;
  Val x582 = x579[2]._super;
  Val x583 = x579[3]._super;
  Val x584 = x579[4]._super;
  Val x585 = x579[5]._super;
  Val x586 = x579[6]._super;
  Val x587 = x579[7]._super;
  Val x588 = x579[8]._super;
  Val x589 = x579[9]._super;
  Val x590 = x579[10]._super;
  Val x591 = x579[11]._super;
  Val x592 = x579[12]._super;
  Val x593 = x579[13]._super;
  Val x594 = x579[14]._super;
  Val x595 = x579[15]._super;
  Val x596 = x579[16]._super;
  Val x597 = x579[17]._super;
  Val x598 = x579[18]._super;
  Val x599 = x579[19]._super;
  Val x600 = x579[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:355)
  Val x601 = (((x580 + (x581 * Val(2))) + (x582 * Val(4))) + (x583 * Val(8)));
  Val x602 = (((x601 + (x584 * Val(16))) + (x585 * Val(32))) + (x586 * Val(64)));
  Val x603 = (((x602 + (x587 * Val(128))) + (x588 * Val(256))) + (x589 * Val(512)));
  Val x604 = (((x603 + (x590 * Val(1024))) + (x591 * Val(2048))) + (x592 * Val(4096)));
  Val x605 = (((x604 + (x593 * Val(8192))) + (x594 * Val(16384))) + (x595 * Val(32768)));
  Val x606 = (((x605 + (x596 * Val(65536))) + (x597 * Val(131072))) + (x598 * Val(262144)));
  Val x607 = (((x606 + (x599 * Val(524288))) + (x600 * Val(1048576))) - x577);
  EQZ(x607, "rho_minor1(zirgen/circuit/keccak/keccak.zir:355)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:358)
  RetTupleStruct x608 = exec_RetTuple(
      ctx,
      Val22Array{x517, x518, x519, x520, x521, x522, x523, x524, x525, x526, x527,
                 x528, x529, x530, x531, x532, x533, x534, x535, x536, x537, x538},
      Val22Array{x549, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559,
                 x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, Val(0)},
      Val22Array{x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x590,
                 x591, x592, x593, x594, x595, x596, x597, x598, x599, x600, Val(0)},
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(5),
      Val(7),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x512, _super));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x609 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x609;
}
RetTupleStruct execRhoMinor2_2__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor2_2__2_Layout> layout2) {
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  RetTupleStruct x3 = back_RetTuple(ctx, 6, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct24Array x5 = x3.arrD;
  Val x6 = x5[21]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:368)
  ToBits_22_Struct x7 = exec_ToBits_22_(ctx, x6, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  Val x30 = x8[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:369)
  Val x31 = (((x9 + (x10 * Val(2))) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) + (x30 * Val(2097152)));
  EQZ((x37 - x6), "rho_minor2(zirgen/circuit/keccak/keccak.zir:369)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x38 = x5[22]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:372)
  ToBits_21_Struct x39 = exec_ToBits_21_(ctx, x38, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x40 = x39._super;
  Val x41 = x40[0]._super;
  Val x42 = x40[1]._super;
  Val x43 = x40[2]._super;
  Val x44 = x40[3]._super;
  Val x45 = x40[4]._super;
  Val x46 = x40[5]._super;
  Val x47 = x40[6]._super;
  Val x48 = x40[7]._super;
  Val x49 = x40[8]._super;
  Val x50 = x40[9]._super;
  Val x51 = x40[10]._super;
  Val x52 = x40[11]._super;
  Val x53 = x40[12]._super;
  Val x54 = x40[13]._super;
  Val x55 = x40[14]._super;
  Val x56 = x40[15]._super;
  Val x57 = x40[16]._super;
  Val x58 = x40[17]._super;
  Val x59 = x40[18]._super;
  Val x60 = x40[19]._super;
  Val x61 = x40[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:373)
  Val x62 = (((x41 + (x42 * Val(2))) + (x43 * Val(4))) + (x44 * Val(8)));
  Val x63 = (((x62 + (x45 * Val(16))) + (x46 * Val(32))) + (x47 * Val(64)));
  Val x64 = (((x63 + (x48 * Val(128))) + (x49 * Val(256))) + (x50 * Val(512)));
  Val x65 = (((x64 + (x51 * Val(1024))) + (x52 * Val(2048))) + (x53 * Val(4096)));
  Val x66 = (((x65 + (x54 * Val(8192))) + (x55 * Val(16384))) + (x56 * Val(32768)));
  Val x67 = (((x66 + (x57 * Val(65536))) + (x58 * Val(131072))) + (x59 * Val(262144)));
  Val x68 = (((x67 + (x60 * Val(524288))) + (x61 * Val(1048576))) - x38);
  EQZ(x68, "rho_minor2(zirgen/circuit/keccak/keccak.zir:373)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x69 = x5[23]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:376)
  ToBits_21_Struct x70 = exec_ToBits_21_(ctx, x69, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:377)
  Val x93 = (((x72 + (x73 * Val(2))) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x94 = (((x93 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x95 = (((x94 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x96 = (((x95 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x97 = (((x96 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x98 = (((x97 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x99 = (((x98 + (x91 * Val(524288))) + (x92 * Val(1048576))) - x69);
  EQZ(x99, "rho_minor2(zirgen/circuit/keccak/keccak.zir:377)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct22Array x100 = x3.arrB;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:383)
  Val x101 = x100[17]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:390)
  ToBits_22_Struct x102 = exec_ToBits_22_(ctx, x101, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x103 = x102._super;
  Val x104 = x103[0]._super;
  Val x105 = x103[1]._super;
  Val x106 = x103[2]._super;
  Val x107 = x103[3]._super;
  Val x108 = x103[4]._super;
  Val x109 = x103[5]._super;
  Val x110 = x103[6]._super;
  Val x111 = x103[7]._super;
  Val x112 = x103[8]._super;
  Val x113 = x103[9]._super;
  Val x114 = x103[10]._super;
  Val x115 = x103[11]._super;
  Val x116 = x103[12]._super;
  Val x117 = x103[13]._super;
  Val x118 = x103[14]._super;
  Val x119 = x103[15]._super;
  Val x120 = x103[16]._super;
  Val x121 = x103[17]._super;
  Val x122 = x103[18]._super;
  Val x123 = x103[19]._super;
  Val x124 = x103[20]._super;
  Val x125 = x103[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:391)
  Val x126 = (((x104 + (x105 * Val(2))) + (x106 * Val(4))) + (x107 * Val(8)));
  Val x127 = (((x126 + (x108 * Val(16))) + (x109 * Val(32))) + (x110 * Val(64)));
  Val x128 = (((x127 + (x111 * Val(128))) + (x112 * Val(256))) + (x113 * Val(512)));
  Val x129 = (((x128 + (x114 * Val(1024))) + (x115 * Val(2048))) + (x116 * Val(4096)));
  Val x130 = (((x129 + (x117 * Val(8192))) + (x118 * Val(16384))) + (x119 * Val(32768)));
  Val x131 = (((x130 + (x120 * Val(65536))) + (x121 * Val(131072))) + (x122 * Val(262144)));
  Val x132 = (((x131 + (x123 * Val(524288))) + (x124 * Val(1048576))) + (x125 * Val(2097152)));
  EQZ((x132 - x101), "rho_minor2(zirgen/circuit/keccak/keccak.zir:391)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:395)
  Val x133 = x100[18]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:402)
  ToBits_21_Struct x134 = exec_ToBits_21_(ctx, x133, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x135 = x134._super;
  Val x136 = x135[0]._super;
  Val x137 = x135[1]._super;
  Val x138 = x135[2]._super;
  Val x139 = x135[3]._super;
  Val x140 = x135[4]._super;
  Val x141 = x135[5]._super;
  Val x142 = x135[6]._super;
  Val x143 = x135[7]._super;
  Val x144 = x135[8]._super;
  Val x145 = x135[9]._super;
  Val x146 = x135[10]._super;
  Val x147 = x135[11]._super;
  Val x148 = x135[12]._super;
  Val x149 = x135[13]._super;
  Val x150 = x135[14]._super;
  Val x151 = x135[15]._super;
  Val x152 = x135[16]._super;
  Val x153 = x135[17]._super;
  Val x154 = x135[18]._super;
  Val x155 = x135[19]._super;
  Val x156 = x135[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:403)
  Val x157 = (((x136 + (x137 * Val(2))) + (x138 * Val(4))) + (x139 * Val(8)));
  Val x158 = (((x157 + (x140 * Val(16))) + (x141 * Val(32))) + (x142 * Val(64)));
  Val x159 = (((x158 + (x143 * Val(128))) + (x144 * Val(256))) + (x145 * Val(512)));
  Val x160 = (((x159 + (x146 * Val(1024))) + (x147 * Val(2048))) + (x148 * Val(4096)));
  Val x161 = (((x160 + (x149 * Val(8192))) + (x150 * Val(16384))) + (x151 * Val(32768)));
  Val x162 = (((x161 + (x152 * Val(65536))) + (x153 * Val(131072))) + (x154 * Val(262144)));
  Val x163 = (((x162 + (x155 * Val(524288))) + (x156 * Val(1048576))) - x133);
  EQZ(x163, "rho_minor2(zirgen/circuit/keccak/keccak.zir:403)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:407)
  Val x164 = x100[19]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:414)
  ToBits_21_Struct x165 = exec_ToBits_21_(ctx, x164, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x166 = x165._super;
  Val x167 = x166[0]._super;
  Val x168 = x166[1]._super;
  Val x169 = x166[2]._super;
  Val x170 = x166[3]._super;
  Val x171 = x166[4]._super;
  Val x172 = x166[5]._super;
  Val x173 = x166[6]._super;
  Val x174 = x166[7]._super;
  Val x175 = x166[8]._super;
  Val x176 = x166[9]._super;
  Val x177 = x166[10]._super;
  Val x178 = x166[11]._super;
  Val x179 = x166[12]._super;
  Val x180 = x166[13]._super;
  Val x181 = x166[14]._super;
  Val x182 = x166[15]._super;
  Val x183 = x166[16]._super;
  Val x184 = x166[17]._super;
  Val x185 = x166[18]._super;
  Val x186 = x166[19]._super;
  Val x187 = x166[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:415)
  Val x188 = (((x167 + (x168 * Val(2))) + (x169 * Val(4))) + (x170 * Val(8)));
  Val x189 = (((x188 + (x171 * Val(16))) + (x172 * Val(32))) + (x173 * Val(64)));
  Val x190 = (((x189 + (x174 * Val(128))) + (x175 * Val(256))) + (x176 * Val(512)));
  Val x191 = (((x190 + (x177 * Val(1024))) + (x178 * Val(2048))) + (x179 * Val(4096)));
  Val x192 = (((x191 + (x180 * Val(8192))) + (x181 * Val(16384))) + (x182 * Val(32768)));
  Val x193 = (((x192 + (x183 * Val(65536))) + (x184 * Val(131072))) + (x185 * Val(262144)));
  Val x194 = (((x193 + (x186 * Val(524288))) + (x187 * Val(1048576))) - x164);
  EQZ(x194, "rho_minor2(zirgen/circuit/keccak/keccak.zir:415)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x195 = x4.arrA;
  Val x196 = x195[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x197 = ((Val(1) - x104) * (Val(1) - x196));
  Val x198 = ((x104 * x196) + x197);
  Val x199 = ((Val(1) - x198) * (Val(1) - x92));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x200 = x195[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x201 = ((Val(1) - x105) * (Val(1) - x200));
  Val x202 = ((x105 * x200) + x201);
  Val x203 = ((Val(1) - x202) * (Val(1) - x9));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x204 = x195[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x205 = ((Val(1) - x106) * (Val(1) - x204));
  Val x206 = ((x106 * x204) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x10));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x208 = x195[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x209 = ((Val(1) - x107) * (Val(1) - x208));
  Val x210 = ((x107 * x208) + x209);
  Val x211 = ((Val(1) - x210) * (Val(1) - x11));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x212 = x195[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x213 = ((Val(1) - x108) * (Val(1) - x212));
  Val x214 = ((x108 * x212) + x213);
  Val x215 = ((Val(1) - x214) * (Val(1) - x12));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x216 = x195[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x217 = ((Val(1) - x109) * (Val(1) - x216));
  Val x218 = ((x109 * x216) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x13));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x220 = x195[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x221 = ((Val(1) - x110) * (Val(1) - x220));
  Val x222 = ((x110 * x220) + x221);
  Val x223 = ((Val(1) - x222) * (Val(1) - x14));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x224 = x195[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x225 = ((Val(1) - x111) * (Val(1) - x224));
  Val x226 = ((x111 * x224) + x225);
  Val x227 = ((Val(1) - x226) * (Val(1) - x15));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x228 = x195[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x229 = ((Val(1) - x112) * (Val(1) - x228));
  Val x230 = ((x112 * x228) + x229);
  Val x231 = ((Val(1) - x230) * (Val(1) - x16));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x232 = x195[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x233 = ((Val(1) - x113) * (Val(1) - x232));
  Val x234 = ((x113 * x232) + x233);
  Val x235 = ((Val(1) - x234) * (Val(1) - x17));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x236 = x195[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x237 = ((Val(1) - x114) * (Val(1) - x236));
  Val x238 = ((x114 * x236) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x18));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x240 = x195[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x241 = ((Val(1) - x115) * (Val(1) - x240));
  Val x242 = ((x115 * x240) + x241);
  Val x243 = ((Val(1) - x242) * (Val(1) - x19));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x244 = x195[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x245 = ((Val(1) - x116) * (Val(1) - x244));
  Val x246 = ((x116 * x244) + x245);
  Val x247 = ((Val(1) - x246) * (Val(1) - x20));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x248 = x195[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x249 = ((Val(1) - x117) * (Val(1) - x248));
  Val x250 = ((x117 * x248) + x249);
  Val x251 = ((Val(1) - x250) * (Val(1) - x21));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x252 = x195[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x253 = ((Val(1) - x118) * (Val(1) - x252));
  Val x254 = ((x118 * x252) + x253);
  Val x255 = ((Val(1) - x254) * (Val(1) - x22));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x256 = x195[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x257 = ((Val(1) - x119) * (Val(1) - x256));
  Val x258 = ((x119 * x256) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x23));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x260 = x195[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x261 = ((Val(1) - x120) * (Val(1) - x260));
  Val x262 = ((x120 * x260) + x261);
  Val x263 = ((Val(1) - x262) * (Val(1) - x24));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x264 = x195[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x265 = ((Val(1) - x121) * (Val(1) - x264));
  Val x266 = ((x121 * x264) + x265);
  Val x267 = ((Val(1) - x266) * (Val(1) - x25));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x268 = x195[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x269 = ((Val(1) - x122) * (Val(1) - x268));
  Val x270 = ((x122 * x268) + x269);
  Val x271 = ((Val(1) - x270) * (Val(1) - x26));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x272 = x195[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x273 = ((Val(1) - x123) * (Val(1) - x272));
  Val x274 = ((x123 * x272) + x273);
  Val x275 = ((Val(1) - x274) * (Val(1) - x27));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x276 = x195[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x277 = ((Val(1) - x124) * (Val(1) - x276));
  Val x278 = ((x124 * x276) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x28));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x280 = x195[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x281 = ((Val(1) - x125) * (Val(1) - x280));
  Val x282 = ((x125 * x280) + x281);
  Val x283 = ((Val(1) - x282) * (Val(1) - x29));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x284 = x4.arrB;
  Val x285 = x284[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x286 = ((Val(1) - x136) * (Val(1) - x285));
  Val x287 = ((x136 * x285) + x286);
  Val x288 = ((Val(1) - x287) * (Val(1) - x30));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x289 = x284[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x290 = ((Val(1) - x137) * (Val(1) - x289));
  Val x291 = ((x137 * x289) + x290);
  Val x292 = ((Val(1) - x291) * (Val(1) - x41));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x293 = x284[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x294 = ((Val(1) - x138) * (Val(1) - x293));
  Val x295 = ((x138 * x293) + x294);
  Val x296 = ((Val(1) - x295) * (Val(1) - x42));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x297 = x284[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x298 = ((Val(1) - x139) * (Val(1) - x297));
  Val x299 = ((x139 * x297) + x298);
  Val x300 = ((Val(1) - x299) * (Val(1) - x43));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x301 = x284[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x302 = ((Val(1) - x140) * (Val(1) - x301));
  Val x303 = ((x140 * x301) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x44));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x305 = x284[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x306 = ((Val(1) - x141) * (Val(1) - x305));
  Val x307 = ((x141 * x305) + x306);
  Val x308 = ((Val(1) - x307) * (Val(1) - x45));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x309 = x284[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x310 = ((Val(1) - x142) * (Val(1) - x309));
  Val x311 = ((x142 * x309) + x310);
  Val x312 = ((Val(1) - x311) * (Val(1) - x46));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x313 = x284[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x314 = ((Val(1) - x143) * (Val(1) - x313));
  Val x315 = ((x143 * x313) + x314);
  Val x316 = ((Val(1) - x315) * (Val(1) - x47));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x317 = x284[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x318 = ((Val(1) - x144) * (Val(1) - x317));
  Val x319 = ((x144 * x317) + x318);
  Val x320 = ((Val(1) - x319) * (Val(1) - x48));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x321 = x284[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x322 = ((Val(1) - x145) * (Val(1) - x321));
  Val x323 = ((x145 * x321) + x322);
  Val x324 = ((Val(1) - x323) * (Val(1) - x49));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x325 = x284[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x326 = ((Val(1) - x146) * (Val(1) - x325));
  Val x327 = ((x146 * x325) + x326);
  Val x328 = ((Val(1) - x327) * (Val(1) - x50));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x329 = x284[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x330 = ((Val(1) - x147) * (Val(1) - x329));
  Val x331 = ((x147 * x329) + x330);
  Val x332 = ((Val(1) - x331) * (Val(1) - x51));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x333 = x284[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x334 = ((Val(1) - x148) * (Val(1) - x333));
  Val x335 = ((x148 * x333) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x52));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x337 = x284[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x338 = ((Val(1) - x149) * (Val(1) - x337));
  Val x339 = ((x149 * x337) + x338);
  Val x340 = ((Val(1) - x339) * (Val(1) - x53));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x341 = x284[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x342 = ((Val(1) - x150) * (Val(1) - x341));
  Val x343 = ((x150 * x341) + x342);
  Val x344 = ((Val(1) - x343) * (Val(1) - x54));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x345 = x284[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x346 = ((Val(1) - x151) * (Val(1) - x345));
  Val x347 = ((x151 * x345) + x346);
  Val x348 = ((Val(1) - x347) * (Val(1) - x55));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x349 = x284[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x350 = ((Val(1) - x152) * (Val(1) - x349));
  Val x351 = ((x152 * x349) + x350);
  Val x352 = ((Val(1) - x351) * (Val(1) - x56));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x353 = x284[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x354 = ((Val(1) - x153) * (Val(1) - x353));
  Val x355 = ((x153 * x353) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x57));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x357 = x284[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x358 = ((Val(1) - x154) * (Val(1) - x357));
  Val x359 = ((x154 * x357) + x358);
  Val x360 = ((Val(1) - x359) * (Val(1) - x58));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x361 = x284[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x362 = ((Val(1) - x155) * (Val(1) - x361));
  Val x363 = ((x155 * x361) + x362);
  Val x364 = ((Val(1) - x363) * (Val(1) - x59));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x365 = x284[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x366 = ((Val(1) - x156) * (Val(1) - x365));
  Val x367 = ((x156 * x365) + x366);
  Val x368 = ((Val(1) - x367) * (Val(1) - x60));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x369 = x4.arrC;
  Val x370 = x369[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x371 = ((Val(1) - x167) * (Val(1) - x370));
  Val x372 = ((x167 * x370) + x371);
  Val x373 = ((Val(1) - x372) * (Val(1) - x61));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x374 = x369[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x375 = ((Val(1) - x168) * (Val(1) - x374));
  Val x376 = ((x168 * x374) + x375);
  Val x377 = ((Val(1) - x376) * (Val(1) - x72));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x378 = x369[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x379 = ((Val(1) - x169) * (Val(1) - x378));
  Val x380 = ((x169 * x378) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x73));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x382 = x369[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x383 = ((Val(1) - x170) * (Val(1) - x382));
  Val x384 = ((x170 * x382) + x383);
  Val x385 = ((Val(1) - x384) * (Val(1) - x74));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x386 = x369[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x387 = ((Val(1) - x171) * (Val(1) - x386));
  Val x388 = ((x171 * x386) + x387);
  Val x389 = ((Val(1) - x388) * (Val(1) - x75));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x390 = x369[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x391 = ((Val(1) - x172) * (Val(1) - x390));
  Val x392 = ((x172 * x390) + x391);
  Val x393 = ((Val(1) - x392) * (Val(1) - x76));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x394 = x369[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x395 = ((Val(1) - x173) * (Val(1) - x394));
  Val x396 = ((x173 * x394) + x395);
  Val x397 = ((Val(1) - x396) * (Val(1) - x77));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x398 = x369[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x399 = ((Val(1) - x174) * (Val(1) - x398));
  Val x400 = ((x174 * x398) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x78));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x402 = x369[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x403 = ((Val(1) - x175) * (Val(1) - x402));
  Val x404 = ((x175 * x402) + x403);
  Val x405 = ((Val(1) - x404) * (Val(1) - x79));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x406 = x369[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x407 = ((Val(1) - x176) * (Val(1) - x406));
  Val x408 = ((x176 * x406) + x407);
  Val x409 = ((Val(1) - x408) * (Val(1) - x80));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x410 = x369[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x411 = ((Val(1) - x177) * (Val(1) - x410));
  Val x412 = ((x177 * x410) + x411);
  Val x413 = ((Val(1) - x412) * (Val(1) - x81));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x414 = x369[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x415 = ((Val(1) - x178) * (Val(1) - x414));
  Val x416 = ((x178 * x414) + x415);
  Val x417 = ((Val(1) - x416) * (Val(1) - x82));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x418 = x369[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x419 = ((Val(1) - x179) * (Val(1) - x418));
  Val x420 = ((x179 * x418) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x83));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x422 = x369[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x423 = ((Val(1) - x180) * (Val(1) - x422));
  Val x424 = ((x180 * x422) + x423);
  Val x425 = ((Val(1) - x424) * (Val(1) - x84));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x426 = x369[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x427 = ((Val(1) - x181) * (Val(1) - x426));
  Val x428 = ((x181 * x426) + x427);
  Val x429 = ((Val(1) - x428) * (Val(1) - x85));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x430 = x369[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x431 = ((Val(1) - x182) * (Val(1) - x430));
  Val x432 = ((x182 * x430) + x431);
  Val x433 = ((Val(1) - x432) * (Val(1) - x86));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x434 = x369[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x435 = ((Val(1) - x183) * (Val(1) - x434));
  Val x436 = ((x183 * x434) + x435);
  Val x437 = ((Val(1) - x436) * (Val(1) - x87));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x438 = x369[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x439 = ((Val(1) - x184) * (Val(1) - x438));
  Val x440 = ((x184 * x438) + x439);
  Val x441 = ((Val(1) - x440) * (Val(1) - x88));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x442 = x369[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x443 = ((Val(1) - x185) * (Val(1) - x442));
  Val x444 = ((x185 * x442) + x443);
  Val x445 = ((Val(1) - x444) * (Val(1) - x89));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x446 = x369[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x447 = ((Val(1) - x186) * (Val(1) - x446));
  Val x448 = ((x186 * x446) + x447);
  Val x449 = ((Val(1) - x448) * (Val(1) - x90));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x450 = x369[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x451 = ((Val(1) - x187) * (Val(1) - x450));
  Val x452 = ((x187 * x450) + x451);
  Val x453 = ((Val(1) - x452) * (Val(1) - x91));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:422)
  Val x454 = (((x359 * x58) + x360) * Val(2));
  Val x455 = (((x363 * x59) + x364) * Val(4));
  Val x456 = (((x367 * x60) + x368) * Val(8));
  Val x457 = (((x372 * x61) + x373) * Val(16));
  Val x458 = (((x376 * x72) + x377) * Val(32));
  Val x459 = (((x380 * x73) + x381) * Val(64));
  Val x460 = (((x384 * x74) + x385) * Val(128));
  Val x461 = (((x388 * x75) + x389) * Val(256));
  Val x462 = (((x392 * x76) + x393) * Val(512));
  Val x463 = (((x396 * x77) + x397) * Val(1024));
  Val x464 = (((x400 * x78) + x401) * Val(2048));
  Val x465 = (((x404 * x79) + x405) * Val(4096));
  Val x466 = (((x408 * x80) + x409) * Val(8192));
  Val x467 = (((x412 * x81) + x413) * Val(16384));
  Val x468 = (((x416 * x82) + x417) * Val(32768));
  Val x469 = (((x420 * x83) + x421) * Val(65536));
  Val x470 = (((x424 * x84) + x425) * Val(131072));
  Val x471 = (((x428 * x85) + x429) * Val(262144));
  Val x472 = (((x432 * x86) + x433) * Val(524288));
  Val x473 = (((x436 * x87) + x437) * Val(1048576));
  Val x474 = (((x440 * x88) + x441) * Val(2097152));
  Val x475 = (((x355 * x57) + x356) + x454);
  Val x476 = (((x475 + x455) + x456) + x457);
  Val x477 = (((x476 + x458) + x459) + x460);
  Val x478 = (((x477 + x461) + x462) + x463);
  Val x479 = (((x478 + x464) + x465) + x466);
  Val x480 = (((x479 + x467) + x468) + x469);
  Val x481 = (((x480 + x470) + x471) + x472);
  NondetRegStruct x482 = exec_Reg(ctx, ((x481 + x473) + x474), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:423)
  Val x483 = (((x448 * x90) + x449) * Val(2));
  Val x484 = (((x452 * x91) + x453) * Val(4));
  Val x485 = (((x198 * x92) + x199) * Val(8));
  Val x486 = (((x202 * x9) + x203) * Val(16));
  Val x487 = (((x206 * x10) + x207) * Val(32));
  Val x488 = (((x210 * x11) + x211) * Val(64));
  Val x489 = (((x214 * x12) + x215) * Val(128));
  Val x490 = (((x218 * x13) + x219) * Val(256));
  Val x491 = (((x222 * x14) + x223) * Val(512));
  Val x492 = (((x226 * x15) + x227) * Val(1024));
  Val x493 = (((x230 * x16) + x231) * Val(2048));
  Val x494 = (((x234 * x17) + x235) * Val(4096));
  Val x495 = (((x238 * x18) + x239) * Val(8192));
  Val x496 = (((x242 * x19) + x243) * Val(16384));
  Val x497 = (((x246 * x20) + x247) * Val(32768));
  Val x498 = (((x250 * x21) + x251) * Val(65536));
  Val x499 = (((x254 * x22) + x255) * Val(131072));
  Val x500 = (((x258 * x23) + x259) * Val(262144));
  Val x501 = (((x262 * x24) + x263) * Val(524288));
  Val x502 = (((x266 * x25) + x267) * Val(1048576));
  Val x503 = (((x444 * x89) + x445) + x483);
  Val x504 = (((x503 + x484) + x485) + x486);
  Val x505 = (((x504 + x487) + x488) + x489);
  Val x506 = (((x505 + x490) + x491) + x492);
  Val x507 = (((x506 + x493) + x494) + x495);
  Val x508 = (((x507 + x496) + x497) + x498);
  Val x509 = (((x508 + x499) + x500) + x501);
  NondetRegStruct x510 = exec_Reg(ctx, (x509 + x502), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:424)
  Val x511 = (((x274 * x27) + x275) * Val(2));
  Val x512 = (((x278 * x28) + x279) * Val(4));
  Val x513 = (((x282 * x29) + x283) * Val(8));
  Val x514 = (((x287 * x30) + x288) * Val(16));
  Val x515 = (((x291 * x41) + x292) * Val(32));
  Val x516 = (((x295 * x42) + x296) * Val(64));
  Val x517 = (((x299 * x43) + x300) * Val(128));
  Val x518 = (((x303 * x44) + x304) * Val(256));
  Val x519 = (((x307 * x45) + x308) * Val(512));
  Val x520 = (((x311 * x46) + x312) * Val(1024));
  Val x521 = (((x315 * x47) + x316) * Val(2048));
  Val x522 = (((x319 * x48) + x320) * Val(4096));
  Val x523 = (((x323 * x49) + x324) * Val(8192));
  Val x524 = (((x327 * x50) + x328) * Val(16384));
  Val x525 = (((x331 * x51) + x332) * Val(32768));
  Val x526 = (((x335 * x52) + x336) * Val(65536));
  Val x527 = (((x339 * x53) + x340) * Val(131072));
  Val x528 = (((x343 * x54) + x344) * Val(262144));
  Val x529 = (((x347 * x55) + x348) * Val(524288));
  Val x530 = (((x351 * x56) + x352) * Val(1048576));
  Val x531 = (((x270 * x26) + x271) + x511);
  Val x532 = (((x531 + x512) + x513) + x514);
  Val x533 = (((x532 + x515) + x516) + x517);
  Val x534 = (((x533 + x518) + x519) + x520);
  Val x535 = (((x534 + x521) + x522) + x523);
  Val x536 = (((x535 + x524) + x525) + x526);
  Val x537 = (((x536 + x527) + x528) + x529);
  NondetRegStruct x538 = exec_Reg(ctx, (x537 + x530), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:427)
  Val22Array x539 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x540 = exec_RetTuple(
      ctx,
      x539,
      x539,
      x539,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x539,
      Val22Array{x482._super, x510._super, x538._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(6),
      Val(7),
      x4.rnd._super,
      x4.blk._super,
      x4.midx._super,
      LAYOUT_LOOKUP(layout2, _super));
  return x540;
}
RetTupleStruct execRhoMinor0_4__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_4__2_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 7, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[18]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[19]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[20]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[9]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[10]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[11]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(7),
                    Val(7),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_4__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_4__2_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_4__2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 8, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrB;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[20]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[21]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x4.arrC[0]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x238 * x236) + x239) * Val(2));
  Val x428 = (((x243 * x241) + x244) * Val(4));
  Val x429 = (((x248 * x246) + x249) * Val(8));
  Val x430 = (((x253 * x251) + x254) * Val(16));
  Val x431 = (((x258 * x256) + x259) * Val(32));
  Val x432 = (((x263 * x261) + x264) * Val(64));
  Val x433 = (((x268 * x266) + x269) * Val(128));
  Val x434 = (((x273 * x271) + x274) * Val(256));
  Val x435 = (((x278 * x276) + x279) * Val(512));
  Val x436 = (((x283 * x281) + x284) * Val(1024));
  Val x437 = (((x288 * x286) + x289) * Val(2048));
  Val x438 = (((x293 * x291) + x294) * Val(4096));
  Val x439 = (((x298 * x296) + x299) * Val(8192));
  Val x440 = (((x303 * x301) + x304) * Val(16384));
  Val x441 = (((x308 * x306) + x309) * Val(32768));
  Val x442 = (((x313 * x311) + x314) * Val(65536));
  Val x443 = (((x318 * x316) + x319) * Val(131072));
  Val x444 = (((x325 * x323) + x326) * Val(262144));
  Val x445 = (((x330 * x328) + x331) * Val(524288));
  Val x446 = (((x335 * x333) + x336) * Val(1048576));
  Val x447 = (((x340 * x338) + x341) * Val(2097152));
  Val x448 = (((x233 * x231) + x234) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x350 * x348) + x351) * Val(2));
  Val x457 = (((x355 * x353) + x356) * Val(4));
  Val x458 = (((x360 * x358) + x361) * Val(8));
  Val x459 = (((x365 * x363) + x366) * Val(16));
  Val x460 = (((x370 * x368) + x371) * Val(32));
  Val x461 = (((x375 * x373) + x376) * Val(64));
  Val x462 = (((x380 * x378) + x381) * Val(128));
  Val x463 = (((x385 * x383) + x386) * Val(256));
  Val x464 = (((x390 * x388) + x391) * Val(512));
  Val x465 = (((x395 * x393) + x396) * Val(1024));
  Val x466 = (((x400 * x398) + x401) * Val(2048));
  Val x467 = (((x405 * x403) + x406) * Val(4096));
  Val x468 = (((x410 * x408) + x411) * Val(8192));
  Val x469 = (((x415 * x413) + x416) * Val(16384));
  Val x470 = (((x420 * x418) + x421) * Val(32768));
  Val x471 = (((x425 * x423) + x426) * Val(65536));
  Val x472 = (((x106 * x104) + x107) * Val(131072));
  Val x473 = (((x111 * x109) + x112) * Val(262144));
  Val x474 = (((x116 * x114) + x117) * Val(524288));
  Val x475 = (((x121 * x119) + x122) * Val(1048576));
  Val x476 = (((x345 * x343) + x346) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x131 * x129) + x132) * Val(2));
  Val x485 = (((x136 * x134) + x137) * Val(4));
  Val x486 = (((x141 * x139) + x142) * Val(8));
  Val x487 = (((x146 * x144) + x147) * Val(16));
  Val x488 = (((x151 * x149) + x152) * Val(32));
  Val x489 = (((x156 * x154) + x157) * Val(64));
  Val x490 = (((x161 * x159) + x162) * Val(128));
  Val x491 = (((x166 * x164) + x167) * Val(256));
  Val x492 = (((x171 * x169) + x172) * Val(512));
  Val x493 = (((x176 * x174) + x177) * Val(1024));
  Val x494 = (((x181 * x179) + x182) * Val(2048));
  Val x495 = (((x186 * x184) + x187) * Val(4096));
  Val x496 = (((x191 * x189) + x192) * Val(8192));
  Val x497 = (((x196 * x194) + x197) * Val(16384));
  Val x498 = (((x201 * x199) + x202) * Val(32768));
  Val x499 = (((x206 * x204) + x207) * Val(65536));
  Val x500 = (((x211 * x209) + x212) * Val(131072));
  Val x501 = (((x218 * x216) + x219) * Val(262144));
  Val x502 = (((x223 * x221) + x224) * Val(524288));
  Val x503 = (((x228 * x226) + x229) * Val(1048576));
  Val x504 = (((x126 * x124) + x127) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:342)
  Val22Array x512 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x513 = exec_RetTuple(
      ctx,
      x512,
      x512,
      x512,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x512,
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(8),
      Val(7),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x3, arm0));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x514 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x514;
}
RetTupleStruct execRhoMinor3_2_(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<RhoMinor3_2__SuperLayout> layout2) {
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:432)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:433)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:434)
  RetTupleStruct x5 = back_RetTuple(ctx, 4, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:435)
  RetTupleStruct x6 = back_RetTuple(ctx, 6, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:436)
  RetTupleStruct x7 = back_RetTuple(ctx, 7, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  RetTupleStruct x8 = back_RetTuple(ctx, 9, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:439)
  BoundLayout<RhoMinor3_2_Arm1_SuperLayout> x9 = LAYOUT_LOOKUP(layout2, arm1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:453)
  BoundLayout<RhoMinor3_2_Arm1Arm1_SuperLayout> x10 = LAYOUT_LOOKUP(x9, arm1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:436)
  NondetRegStruct22Array x11 = x7.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:435)
  NondetRegStruct22Array x12 = x6.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:434)
  NondetRegStruct22Array x13 = x5.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:433)
  NondetRegStruct22Array x14 = x4.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:432)
  NondetRegStruct22Array x15 = x3.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  NondetRegStruct22Array x16 = x8.arrB;
  NondetRegStruct22Array x17 = x8.arrC;
  NondetRegStruct22Array x18 = x8.arrA;
  NondetRegStruct24Array x19 = x8.arrD;
  Val22Array x20 =
      Val22Array{x18[0]._super,  x18[1]._super,  x18[2]._super,  x18[3]._super,  x18[4]._super,
                 x18[5]._super,  x18[6]._super,  x18[7]._super,  x18[8]._super,  x18[9]._super,
                 x18[10]._super, x18[11]._super, x18[12]._super, x18[13]._super, x18[14]._super,
                 x18[15]._super, x18[16]._super, x18[17]._super, x18[18]._super, x18[19]._super,
                 x18[20]._super, x18[21]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:471)
  Val22Array x21 = Val22Array{
      x16[0]._super, x16[1]._super, x16[2]._super, x16[3]._super, x16[4]._super, x16[5]._super,
      x16[6]._super, x16[7]._super, x11[0]._super, x11[1]._super, x11[2]._super, x12[0]._super,
      x12[1]._super, x12[2]._super, x13[0]._super, x13[1]._super, x13[2]._super, x14[0]._super,
      x14[1]._super, x14[2]._super, x15[0]._super, x15[1]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:473)
  Val22Array x22 =
      Val22Array{x15[2]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  Val24Array x23 =
      Val24Array{x19[0]._super,  x19[1]._super,  x19[2]._super,  x19[3]._super,  x19[4]._super,
                 x19[5]._super,  x19[6]._super,  x19[7]._super,  x19[8]._super,  x19[9]._super,
                 x19[10]._super, x19[11]._super, x19[12]._super, x19[13]._super, x19[14]._super,
                 x19[15]._super, x19[16]._super, x19[17]._super, x19[18]._super, x19[19]._super,
                 x19[20]._super, x19[21]._super, x19[22]._super, x19[23]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:474)
  Val22Array x24 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x25 = exec_RetTuple(ctx,
                                     x20,
                                     x21,
                                     x22,
                                     x23,
                                     x24,
                                     x24,
                                     Val(0),
                                     Val(8),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(x10, arm0));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:465)
  RetTupleStruct x26 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x10, _super));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:453)
  RetTupleStruct x27 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x9, _super));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:439)
  RetTupleStruct x28 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(layout2, _super));
  return x28;
}
RetTupleStruct execRhoMajor_2_(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<RhoMajor_2_Layout> layout2) {
  // rho_major(zirgen/circuit/keccak/keccak.zir:529)
  BoundLayout<RhoMajor_2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_major(zirgen/circuit/keccak/keccak.zir:528)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_9_Struct x5 = exec_OneHot_9_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct9Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:530)
    RetTupleStruct x8 = execRhoMinor0_0__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm0));
    x7 = x8;
  } else if (to_size_t(x6[1]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:531)
    RetTupleStruct x9 = execRhoMinor1_0__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x9;
  } else if (to_size_t(x6[2]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:532)
    RetTupleStruct x10 = execRhoMinor2_0__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x10;
  } else if (to_size_t(x6[3]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:533)
    RetTupleStruct x11 = execRhoMinor0_2__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x11;
  } else if (to_size_t(x6[4]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:534)
    RetTupleStruct x12 = execRhoMinor1_2__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x12;
  } else if (to_size_t(x6[5]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:535)
    RetTupleStruct x13 = execRhoMinor2_2__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm5));
    x7 = x13;
  } else if (to_size_t(x6[6]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:536)
    RetTupleStruct x14 = execRhoMinor0_4__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm6));
    x7 = x14;
  } else if (to_size_t(x6[7]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:537)
    RetTupleStruct x15 = execRhoMinor1_4__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x15;
  } else if (to_size_t(x6[8]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:538)
    RetTupleStruct x16 = execRhoMinor3_2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x16;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // rho_major(zirgen/circuit/keccak/keccak.zir:529)
  RetTupleStruct x17 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x17;
}
RetTupleStruct execRhoMinor0_0__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_0__3_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[21]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[22]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[23]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[12]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[13]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[14]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(1),
                    Val(8),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_0__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_0__3_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_0__3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrC;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[1]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[2]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[3]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x228 * x226) + x229) * Val(2));
  Val x428 = (((x233 * x231) + x234) * Val(4));
  Val x429 = (((x238 * x236) + x239) * Val(8));
  Val x430 = (((x243 * x241) + x244) * Val(16));
  Val x431 = (((x248 * x246) + x249) * Val(32));
  Val x432 = (((x253 * x251) + x254) * Val(64));
  Val x433 = (((x258 * x256) + x259) * Val(128));
  Val x434 = (((x263 * x261) + x264) * Val(256));
  Val x435 = (((x268 * x266) + x269) * Val(512));
  Val x436 = (((x273 * x271) + x274) * Val(1024));
  Val x437 = (((x278 * x276) + x279) * Val(2048));
  Val x438 = (((x283 * x281) + x284) * Val(4096));
  Val x439 = (((x288 * x286) + x289) * Val(8192));
  Val x440 = (((x293 * x291) + x294) * Val(16384));
  Val x441 = (((x298 * x296) + x299) * Val(32768));
  Val x442 = (((x303 * x301) + x304) * Val(65536));
  Val x443 = (((x308 * x306) + x309) * Val(131072));
  Val x444 = (((x313 * x311) + x314) * Val(262144));
  Val x445 = (((x318 * x316) + x319) * Val(524288));
  Val x446 = (((x325 * x323) + x326) * Val(1048576));
  Val x447 = (((x330 * x328) + x331) * Val(2097152));
  Val x448 = (((x223 * x221) + x224) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x340 * x338) + x341) * Val(2));
  Val x457 = (((x345 * x343) + x346) * Val(4));
  Val x458 = (((x350 * x348) + x351) * Val(8));
  Val x459 = (((x355 * x353) + x356) * Val(16));
  Val x460 = (((x360 * x358) + x361) * Val(32));
  Val x461 = (((x365 * x363) + x366) * Val(64));
  Val x462 = (((x370 * x368) + x371) * Val(128));
  Val x463 = (((x375 * x373) + x376) * Val(256));
  Val x464 = (((x380 * x378) + x381) * Val(512));
  Val x465 = (((x385 * x383) + x386) * Val(1024));
  Val x466 = (((x390 * x388) + x391) * Val(2048));
  Val x467 = (((x395 * x393) + x396) * Val(4096));
  Val x468 = (((x400 * x398) + x401) * Val(8192));
  Val x469 = (((x405 * x403) + x406) * Val(16384));
  Val x470 = (((x410 * x408) + x411) * Val(32768));
  Val x471 = (((x415 * x413) + x416) * Val(65536));
  Val x472 = (((x420 * x418) + x421) * Val(131072));
  Val x473 = (((x425 * x423) + x426) * Val(262144));
  Val x474 = (((x106 * x104) + x107) * Val(524288));
  Val x475 = (((x111 * x109) + x112) * Val(1048576));
  Val x476 = (((x335 * x333) + x336) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x121 * x119) + x122) * Val(2));
  Val x485 = (((x126 * x124) + x127) * Val(4));
  Val x486 = (((x131 * x129) + x132) * Val(8));
  Val x487 = (((x136 * x134) + x137) * Val(16));
  Val x488 = (((x141 * x139) + x142) * Val(32));
  Val x489 = (((x146 * x144) + x147) * Val(64));
  Val x490 = (((x151 * x149) + x152) * Val(128));
  Val x491 = (((x156 * x154) + x157) * Val(256));
  Val x492 = (((x161 * x159) + x162) * Val(512));
  Val x493 = (((x166 * x164) + x167) * Val(1024));
  Val x494 = (((x171 * x169) + x172) * Val(2048));
  Val x495 = (((x176 * x174) + x177) * Val(4096));
  Val x496 = (((x181 * x179) + x182) * Val(8192));
  Val x497 = (((x186 * x184) + x187) * Val(16384));
  Val x498 = (((x191 * x189) + x192) * Val(32768));
  Val x499 = (((x196 * x194) + x197) * Val(65536));
  Val x500 = (((x201 * x199) + x202) * Val(131072));
  Val x501 = (((x206 * x204) + x207) * Val(262144));
  Val x502 = (((x211 * x209) + x212) * Val(524288));
  Val x503 = (((x218 * x216) + x219) * Val(1048576));
  Val x504 = (((x116 * x114) + x117) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_0__3_Arm1_SuperLayout> x512 = LAYOUT_LOOKUP(x3, arm1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct24Array x513 = x4.arrD;
  Val x514 = x513[9]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:345)
  ToBits_22_Struct x515 = exec_ToBits_22_(ctx, x514, LAYOUT_LOOKUP(x512, unpackM1));
  NondetRegStruct22Array x516 = x515._super;
  Val x517 = x516[0]._super;
  Val x518 = x516[1]._super;
  Val x519 = x516[2]._super;
  Val x520 = x516[3]._super;
  Val x521 = x516[4]._super;
  Val x522 = x516[5]._super;
  Val x523 = x516[6]._super;
  Val x524 = x516[7]._super;
  Val x525 = x516[8]._super;
  Val x526 = x516[9]._super;
  Val x527 = x516[10]._super;
  Val x528 = x516[11]._super;
  Val x529 = x516[12]._super;
  Val x530 = x516[13]._super;
  Val x531 = x516[14]._super;
  Val x532 = x516[15]._super;
  Val x533 = x516[16]._super;
  Val x534 = x516[17]._super;
  Val x535 = x516[18]._super;
  Val x536 = x516[19]._super;
  Val x537 = x516[20]._super;
  Val x538 = x516[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:346)
  Val x539 = (((x517 + (x518 * Val(2))) + (x519 * Val(4))) + (x520 * Val(8)));
  Val x540 = (((x539 + (x521 * Val(16))) + (x522 * Val(32))) + (x523 * Val(64)));
  Val x541 = (((x540 + (x524 * Val(128))) + (x525 * Val(256))) + (x526 * Val(512)));
  Val x542 = (((x541 + (x527 * Val(1024))) + (x528 * Val(2048))) + (x529 * Val(4096)));
  Val x543 = (((x542 + (x530 * Val(8192))) + (x531 * Val(16384))) + (x532 * Val(32768)));
  Val x544 = (((x543 + (x533 * Val(65536))) + (x534 * Val(131072))) + (x535 * Val(262144)));
  Val x545 = (((x544 + (x536 * Val(524288))) + (x537 * Val(1048576))) + (x538 * Val(2097152)));
  EQZ((x545 - x514), "rho_minor1(zirgen/circuit/keccak/keccak.zir:346)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x546 = x513[10]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:349)
  ToBits_21_Struct x547 = exec_ToBits_21_(ctx, x546, LAYOUT_LOOKUP(x512, unpackM2));
  NondetRegStruct21Array x548 = x547._super;
  Val x549 = x548[0]._super;
  Val x550 = x548[1]._super;
  Val x551 = x548[2]._super;
  Val x552 = x548[3]._super;
  Val x553 = x548[4]._super;
  Val x554 = x548[5]._super;
  Val x555 = x548[6]._super;
  Val x556 = x548[7]._super;
  Val x557 = x548[8]._super;
  Val x558 = x548[9]._super;
  Val x559 = x548[10]._super;
  Val x560 = x548[11]._super;
  Val x561 = x548[12]._super;
  Val x562 = x548[13]._super;
  Val x563 = x548[14]._super;
  Val x564 = x548[15]._super;
  Val x565 = x548[16]._super;
  Val x566 = x548[17]._super;
  Val x567 = x548[18]._super;
  Val x568 = x548[19]._super;
  Val x569 = x548[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:350)
  Val x570 = (((x549 + (x550 * Val(2))) + (x551 * Val(4))) + (x552 * Val(8)));
  Val x571 = (((x570 + (x553 * Val(16))) + (x554 * Val(32))) + (x555 * Val(64)));
  Val x572 = (((x571 + (x556 * Val(128))) + (x557 * Val(256))) + (x558 * Val(512)));
  Val x573 = (((x572 + (x559 * Val(1024))) + (x560 * Val(2048))) + (x561 * Val(4096)));
  Val x574 = (((x573 + (x562 * Val(8192))) + (x563 * Val(16384))) + (x564 * Val(32768)));
  Val x575 = (((x574 + (x565 * Val(65536))) + (x566 * Val(131072))) + (x567 * Val(262144)));
  Val x576 = (((x575 + (x568 * Val(524288))) + (x569 * Val(1048576))) - x546);
  EQZ(x576, "rho_minor1(zirgen/circuit/keccak/keccak.zir:350)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x577 = x513[11]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:354)
  ToBits_21_Struct x578 = exec_ToBits_21_(ctx, x577, LAYOUT_LOOKUP(x512, unpackM3));
  NondetRegStruct21Array x579 = x578._super;
  Val x580 = x579[0]._super;
  Val x581 = x579[1]._super;
  Val x582 = x579[2]._super;
  Val x583 = x579[3]._super;
  Val x584 = x579[4]._super;
  Val x585 = x579[5]._super;
  Val x586 = x579[6]._super;
  Val x587 = x579[7]._super;
  Val x588 = x579[8]._super;
  Val x589 = x579[9]._super;
  Val x590 = x579[10]._super;
  Val x591 = x579[11]._super;
  Val x592 = x579[12]._super;
  Val x593 = x579[13]._super;
  Val x594 = x579[14]._super;
  Val x595 = x579[15]._super;
  Val x596 = x579[16]._super;
  Val x597 = x579[17]._super;
  Val x598 = x579[18]._super;
  Val x599 = x579[19]._super;
  Val x600 = x579[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:355)
  Val x601 = (((x580 + (x581 * Val(2))) + (x582 * Val(4))) + (x583 * Val(8)));
  Val x602 = (((x601 + (x584 * Val(16))) + (x585 * Val(32))) + (x586 * Val(64)));
  Val x603 = (((x602 + (x587 * Val(128))) + (x588 * Val(256))) + (x589 * Val(512)));
  Val x604 = (((x603 + (x590 * Val(1024))) + (x591 * Val(2048))) + (x592 * Val(4096)));
  Val x605 = (((x604 + (x593 * Val(8192))) + (x594 * Val(16384))) + (x595 * Val(32768)));
  Val x606 = (((x605 + (x596 * Val(65536))) + (x597 * Val(131072))) + (x598 * Val(262144)));
  Val x607 = (((x606 + (x599 * Val(524288))) + (x600 * Val(1048576))) - x577);
  EQZ(x607, "rho_minor1(zirgen/circuit/keccak/keccak.zir:355)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:358)
  RetTupleStruct x608 = exec_RetTuple(
      ctx,
      Val22Array{x517, x518, x519, x520, x521, x522, x523, x524, x525, x526, x527,
                 x528, x529, x530, x531, x532, x533, x534, x535, x536, x537, x538},
      Val22Array{x549, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559,
                 x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, Val(0)},
      Val22Array{x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x590,
                 x591, x592, x593, x594, x595, x596, x597, x598, x599, x600, Val(0)},
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(2),
      Val(8),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x512, _super));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x609 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x609;
}
RetTupleStruct execRhoMinor2_0__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor2_0__3_Layout> layout2) {
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  RetTupleStruct x3 = back_RetTuple(ctx, 3, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct24Array x5 = x3.arrD;
  Val x6 = x5[15]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:368)
  ToBits_22_Struct x7 = exec_ToBits_22_(ctx, x6, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  Val x30 = x8[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:369)
  Val x31 = (((x9 + (x10 * Val(2))) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) + (x30 * Val(2097152)));
  EQZ((x37 - x6), "rho_minor2(zirgen/circuit/keccak/keccak.zir:369)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x38 = x5[16]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:372)
  ToBits_21_Struct x39 = exec_ToBits_21_(ctx, x38, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x40 = x39._super;
  Val x41 = x40[0]._super;
  Val x42 = x40[1]._super;
  Val x43 = x40[2]._super;
  Val x44 = x40[3]._super;
  Val x45 = x40[4]._super;
  Val x46 = x40[5]._super;
  Val x47 = x40[6]._super;
  Val x48 = x40[7]._super;
  Val x49 = x40[8]._super;
  Val x50 = x40[9]._super;
  Val x51 = x40[10]._super;
  Val x52 = x40[11]._super;
  Val x53 = x40[12]._super;
  Val x54 = x40[13]._super;
  Val x55 = x40[14]._super;
  Val x56 = x40[15]._super;
  Val x57 = x40[16]._super;
  Val x58 = x40[17]._super;
  Val x59 = x40[18]._super;
  Val x60 = x40[19]._super;
  Val x61 = x40[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:373)
  Val x62 = (((x41 + (x42 * Val(2))) + (x43 * Val(4))) + (x44 * Val(8)));
  Val x63 = (((x62 + (x45 * Val(16))) + (x46 * Val(32))) + (x47 * Val(64)));
  Val x64 = (((x63 + (x48 * Val(128))) + (x49 * Val(256))) + (x50 * Val(512)));
  Val x65 = (((x64 + (x51 * Val(1024))) + (x52 * Val(2048))) + (x53 * Val(4096)));
  Val x66 = (((x65 + (x54 * Val(8192))) + (x55 * Val(16384))) + (x56 * Val(32768)));
  Val x67 = (((x66 + (x57 * Val(65536))) + (x58 * Val(131072))) + (x59 * Val(262144)));
  Val x68 = (((x67 + (x60 * Val(524288))) + (x61 * Val(1048576))) - x38);
  EQZ(x68, "rho_minor2(zirgen/circuit/keccak/keccak.zir:373)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x69 = x5[17]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:376)
  ToBits_21_Struct x70 = exec_ToBits_21_(ctx, x69, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:377)
  Val x93 = (((x72 + (x73 * Val(2))) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x94 = (((x93 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x95 = (((x94 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x96 = (((x95 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x97 = (((x96 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x98 = (((x97 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x99 = (((x98 + (x91 * Val(524288))) + (x92 * Val(1048576))) - x69);
  EQZ(x99, "rho_minor2(zirgen/circuit/keccak/keccak.zir:377)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct22Array x100 = x3.arrC;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:383)
  Val x101 = x100[4]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:390)
  ToBits_22_Struct x102 = exec_ToBits_22_(ctx, x101, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x103 = x102._super;
  Val x104 = x103[0]._super;
  Val x105 = x103[1]._super;
  Val x106 = x103[2]._super;
  Val x107 = x103[3]._super;
  Val x108 = x103[4]._super;
  Val x109 = x103[5]._super;
  Val x110 = x103[6]._super;
  Val x111 = x103[7]._super;
  Val x112 = x103[8]._super;
  Val x113 = x103[9]._super;
  Val x114 = x103[10]._super;
  Val x115 = x103[11]._super;
  Val x116 = x103[12]._super;
  Val x117 = x103[13]._super;
  Val x118 = x103[14]._super;
  Val x119 = x103[15]._super;
  Val x120 = x103[16]._super;
  Val x121 = x103[17]._super;
  Val x122 = x103[18]._super;
  Val x123 = x103[19]._super;
  Val x124 = x103[20]._super;
  Val x125 = x103[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:391)
  Val x126 = (((x104 + (x105 * Val(2))) + (x106 * Val(4))) + (x107 * Val(8)));
  Val x127 = (((x126 + (x108 * Val(16))) + (x109 * Val(32))) + (x110 * Val(64)));
  Val x128 = (((x127 + (x111 * Val(128))) + (x112 * Val(256))) + (x113 * Val(512)));
  Val x129 = (((x128 + (x114 * Val(1024))) + (x115 * Val(2048))) + (x116 * Val(4096)));
  Val x130 = (((x129 + (x117 * Val(8192))) + (x118 * Val(16384))) + (x119 * Val(32768)));
  Val x131 = (((x130 + (x120 * Val(65536))) + (x121 * Val(131072))) + (x122 * Val(262144)));
  Val x132 = (((x131 + (x123 * Val(524288))) + (x124 * Val(1048576))) + (x125 * Val(2097152)));
  EQZ((x132 - x101), "rho_minor2(zirgen/circuit/keccak/keccak.zir:391)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:395)
  Val x133 = x100[5]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:402)
  ToBits_21_Struct x134 = exec_ToBits_21_(ctx, x133, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x135 = x134._super;
  Val x136 = x135[0]._super;
  Val x137 = x135[1]._super;
  Val x138 = x135[2]._super;
  Val x139 = x135[3]._super;
  Val x140 = x135[4]._super;
  Val x141 = x135[5]._super;
  Val x142 = x135[6]._super;
  Val x143 = x135[7]._super;
  Val x144 = x135[8]._super;
  Val x145 = x135[9]._super;
  Val x146 = x135[10]._super;
  Val x147 = x135[11]._super;
  Val x148 = x135[12]._super;
  Val x149 = x135[13]._super;
  Val x150 = x135[14]._super;
  Val x151 = x135[15]._super;
  Val x152 = x135[16]._super;
  Val x153 = x135[17]._super;
  Val x154 = x135[18]._super;
  Val x155 = x135[19]._super;
  Val x156 = x135[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:403)
  Val x157 = (((x136 + (x137 * Val(2))) + (x138 * Val(4))) + (x139 * Val(8)));
  Val x158 = (((x157 + (x140 * Val(16))) + (x141 * Val(32))) + (x142 * Val(64)));
  Val x159 = (((x158 + (x143 * Val(128))) + (x144 * Val(256))) + (x145 * Val(512)));
  Val x160 = (((x159 + (x146 * Val(1024))) + (x147 * Val(2048))) + (x148 * Val(4096)));
  Val x161 = (((x160 + (x149 * Val(8192))) + (x150 * Val(16384))) + (x151 * Val(32768)));
  Val x162 = (((x161 + (x152 * Val(65536))) + (x153 * Val(131072))) + (x154 * Val(262144)));
  Val x163 = (((x162 + (x155 * Val(524288))) + (x156 * Val(1048576))) - x133);
  EQZ(x163, "rho_minor2(zirgen/circuit/keccak/keccak.zir:403)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:407)
  Val x164 = x100[6]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:414)
  ToBits_21_Struct x165 = exec_ToBits_21_(ctx, x164, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x166 = x165._super;
  Val x167 = x166[0]._super;
  Val x168 = x166[1]._super;
  Val x169 = x166[2]._super;
  Val x170 = x166[3]._super;
  Val x171 = x166[4]._super;
  Val x172 = x166[5]._super;
  Val x173 = x166[6]._super;
  Val x174 = x166[7]._super;
  Val x175 = x166[8]._super;
  Val x176 = x166[9]._super;
  Val x177 = x166[10]._super;
  Val x178 = x166[11]._super;
  Val x179 = x166[12]._super;
  Val x180 = x166[13]._super;
  Val x181 = x166[14]._super;
  Val x182 = x166[15]._super;
  Val x183 = x166[16]._super;
  Val x184 = x166[17]._super;
  Val x185 = x166[18]._super;
  Val x186 = x166[19]._super;
  Val x187 = x166[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:415)
  Val x188 = (((x167 + (x168 * Val(2))) + (x169 * Val(4))) + (x170 * Val(8)));
  Val x189 = (((x188 + (x171 * Val(16))) + (x172 * Val(32))) + (x173 * Val(64)));
  Val x190 = (((x189 + (x174 * Val(128))) + (x175 * Val(256))) + (x176 * Val(512)));
  Val x191 = (((x190 + (x177 * Val(1024))) + (x178 * Val(2048))) + (x179 * Val(4096)));
  Val x192 = (((x191 + (x180 * Val(8192))) + (x181 * Val(16384))) + (x182 * Val(32768)));
  Val x193 = (((x192 + (x183 * Val(65536))) + (x184 * Val(131072))) + (x185 * Val(262144)));
  Val x194 = (((x193 + (x186 * Val(524288))) + (x187 * Val(1048576))) - x164);
  EQZ(x194, "rho_minor2(zirgen/circuit/keccak/keccak.zir:415)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x195 = x4.arrA;
  Val x196 = x195[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x197 = ((Val(1) - x104) * (Val(1) - x196));
  Val x198 = ((x104 * x196) + x197);
  Val x199 = ((Val(1) - x198) * (Val(1) - x92));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x200 = x195[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x201 = ((Val(1) - x105) * (Val(1) - x200));
  Val x202 = ((x105 * x200) + x201);
  Val x203 = ((Val(1) - x202) * (Val(1) - x9));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x204 = x195[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x205 = ((Val(1) - x106) * (Val(1) - x204));
  Val x206 = ((x106 * x204) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x10));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x208 = x195[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x209 = ((Val(1) - x107) * (Val(1) - x208));
  Val x210 = ((x107 * x208) + x209);
  Val x211 = ((Val(1) - x210) * (Val(1) - x11));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x212 = x195[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x213 = ((Val(1) - x108) * (Val(1) - x212));
  Val x214 = ((x108 * x212) + x213);
  Val x215 = ((Val(1) - x214) * (Val(1) - x12));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x216 = x195[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x217 = ((Val(1) - x109) * (Val(1) - x216));
  Val x218 = ((x109 * x216) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x13));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x220 = x195[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x221 = ((Val(1) - x110) * (Val(1) - x220));
  Val x222 = ((x110 * x220) + x221);
  Val x223 = ((Val(1) - x222) * (Val(1) - x14));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x224 = x195[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x225 = ((Val(1) - x111) * (Val(1) - x224));
  Val x226 = ((x111 * x224) + x225);
  Val x227 = ((Val(1) - x226) * (Val(1) - x15));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x228 = x195[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x229 = ((Val(1) - x112) * (Val(1) - x228));
  Val x230 = ((x112 * x228) + x229);
  Val x231 = ((Val(1) - x230) * (Val(1) - x16));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x232 = x195[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x233 = ((Val(1) - x113) * (Val(1) - x232));
  Val x234 = ((x113 * x232) + x233);
  Val x235 = ((Val(1) - x234) * (Val(1) - x17));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x236 = x195[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x237 = ((Val(1) - x114) * (Val(1) - x236));
  Val x238 = ((x114 * x236) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x18));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x240 = x195[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x241 = ((Val(1) - x115) * (Val(1) - x240));
  Val x242 = ((x115 * x240) + x241);
  Val x243 = ((Val(1) - x242) * (Val(1) - x19));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x244 = x195[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x245 = ((Val(1) - x116) * (Val(1) - x244));
  Val x246 = ((x116 * x244) + x245);
  Val x247 = ((Val(1) - x246) * (Val(1) - x20));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x248 = x195[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x249 = ((Val(1) - x117) * (Val(1) - x248));
  Val x250 = ((x117 * x248) + x249);
  Val x251 = ((Val(1) - x250) * (Val(1) - x21));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x252 = x195[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x253 = ((Val(1) - x118) * (Val(1) - x252));
  Val x254 = ((x118 * x252) + x253);
  Val x255 = ((Val(1) - x254) * (Val(1) - x22));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x256 = x195[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x257 = ((Val(1) - x119) * (Val(1) - x256));
  Val x258 = ((x119 * x256) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x23));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x260 = x195[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x261 = ((Val(1) - x120) * (Val(1) - x260));
  Val x262 = ((x120 * x260) + x261);
  Val x263 = ((Val(1) - x262) * (Val(1) - x24));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x264 = x195[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x265 = ((Val(1) - x121) * (Val(1) - x264));
  Val x266 = ((x121 * x264) + x265);
  Val x267 = ((Val(1) - x266) * (Val(1) - x25));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x268 = x195[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x269 = ((Val(1) - x122) * (Val(1) - x268));
  Val x270 = ((x122 * x268) + x269);
  Val x271 = ((Val(1) - x270) * (Val(1) - x26));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x272 = x195[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x273 = ((Val(1) - x123) * (Val(1) - x272));
  Val x274 = ((x123 * x272) + x273);
  Val x275 = ((Val(1) - x274) * (Val(1) - x27));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x276 = x195[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x277 = ((Val(1) - x124) * (Val(1) - x276));
  Val x278 = ((x124 * x276) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x28));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x280 = x195[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x281 = ((Val(1) - x125) * (Val(1) - x280));
  Val x282 = ((x125 * x280) + x281);
  Val x283 = ((Val(1) - x282) * (Val(1) - x29));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x284 = x4.arrB;
  Val x285 = x284[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x286 = ((Val(1) - x136) * (Val(1) - x285));
  Val x287 = ((x136 * x285) + x286);
  Val x288 = ((Val(1) - x287) * (Val(1) - x30));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x289 = x284[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x290 = ((Val(1) - x137) * (Val(1) - x289));
  Val x291 = ((x137 * x289) + x290);
  Val x292 = ((Val(1) - x291) * (Val(1) - x41));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x293 = x284[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x294 = ((Val(1) - x138) * (Val(1) - x293));
  Val x295 = ((x138 * x293) + x294);
  Val x296 = ((Val(1) - x295) * (Val(1) - x42));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x297 = x284[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x298 = ((Val(1) - x139) * (Val(1) - x297));
  Val x299 = ((x139 * x297) + x298);
  Val x300 = ((Val(1) - x299) * (Val(1) - x43));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x301 = x284[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x302 = ((Val(1) - x140) * (Val(1) - x301));
  Val x303 = ((x140 * x301) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x44));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x305 = x284[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x306 = ((Val(1) - x141) * (Val(1) - x305));
  Val x307 = ((x141 * x305) + x306);
  Val x308 = ((Val(1) - x307) * (Val(1) - x45));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x309 = x284[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x310 = ((Val(1) - x142) * (Val(1) - x309));
  Val x311 = ((x142 * x309) + x310);
  Val x312 = ((Val(1) - x311) * (Val(1) - x46));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x313 = x284[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x314 = ((Val(1) - x143) * (Val(1) - x313));
  Val x315 = ((x143 * x313) + x314);
  Val x316 = ((Val(1) - x315) * (Val(1) - x47));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x317 = x284[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x318 = ((Val(1) - x144) * (Val(1) - x317));
  Val x319 = ((x144 * x317) + x318);
  Val x320 = ((Val(1) - x319) * (Val(1) - x48));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x321 = x284[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x322 = ((Val(1) - x145) * (Val(1) - x321));
  Val x323 = ((x145 * x321) + x322);
  Val x324 = ((Val(1) - x323) * (Val(1) - x49));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x325 = x284[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x326 = ((Val(1) - x146) * (Val(1) - x325));
  Val x327 = ((x146 * x325) + x326);
  Val x328 = ((Val(1) - x327) * (Val(1) - x50));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x329 = x284[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x330 = ((Val(1) - x147) * (Val(1) - x329));
  Val x331 = ((x147 * x329) + x330);
  Val x332 = ((Val(1) - x331) * (Val(1) - x51));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x333 = x284[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x334 = ((Val(1) - x148) * (Val(1) - x333));
  Val x335 = ((x148 * x333) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x52));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x337 = x284[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x338 = ((Val(1) - x149) * (Val(1) - x337));
  Val x339 = ((x149 * x337) + x338);
  Val x340 = ((Val(1) - x339) * (Val(1) - x53));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x341 = x284[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x342 = ((Val(1) - x150) * (Val(1) - x341));
  Val x343 = ((x150 * x341) + x342);
  Val x344 = ((Val(1) - x343) * (Val(1) - x54));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x345 = x284[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x346 = ((Val(1) - x151) * (Val(1) - x345));
  Val x347 = ((x151 * x345) + x346);
  Val x348 = ((Val(1) - x347) * (Val(1) - x55));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x349 = x284[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x350 = ((Val(1) - x152) * (Val(1) - x349));
  Val x351 = ((x152 * x349) + x350);
  Val x352 = ((Val(1) - x351) * (Val(1) - x56));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x353 = x284[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x354 = ((Val(1) - x153) * (Val(1) - x353));
  Val x355 = ((x153 * x353) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x57));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x357 = x284[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x358 = ((Val(1) - x154) * (Val(1) - x357));
  Val x359 = ((x154 * x357) + x358);
  Val x360 = ((Val(1) - x359) * (Val(1) - x58));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x361 = x284[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x362 = ((Val(1) - x155) * (Val(1) - x361));
  Val x363 = ((x155 * x361) + x362);
  Val x364 = ((Val(1) - x363) * (Val(1) - x59));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x365 = x284[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x366 = ((Val(1) - x156) * (Val(1) - x365));
  Val x367 = ((x156 * x365) + x366);
  Val x368 = ((Val(1) - x367) * (Val(1) - x60));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x369 = x4.arrC;
  Val x370 = x369[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x371 = ((Val(1) - x167) * (Val(1) - x370));
  Val x372 = ((x167 * x370) + x371);
  Val x373 = ((Val(1) - x372) * (Val(1) - x61));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x374 = x369[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x375 = ((Val(1) - x168) * (Val(1) - x374));
  Val x376 = ((x168 * x374) + x375);
  Val x377 = ((Val(1) - x376) * (Val(1) - x72));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x378 = x369[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x379 = ((Val(1) - x169) * (Val(1) - x378));
  Val x380 = ((x169 * x378) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x73));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x382 = x369[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x383 = ((Val(1) - x170) * (Val(1) - x382));
  Val x384 = ((x170 * x382) + x383);
  Val x385 = ((Val(1) - x384) * (Val(1) - x74));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x386 = x369[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x387 = ((Val(1) - x171) * (Val(1) - x386));
  Val x388 = ((x171 * x386) + x387);
  Val x389 = ((Val(1) - x388) * (Val(1) - x75));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x390 = x369[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x391 = ((Val(1) - x172) * (Val(1) - x390));
  Val x392 = ((x172 * x390) + x391);
  Val x393 = ((Val(1) - x392) * (Val(1) - x76));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x394 = x369[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x395 = ((Val(1) - x173) * (Val(1) - x394));
  Val x396 = ((x173 * x394) + x395);
  Val x397 = ((Val(1) - x396) * (Val(1) - x77));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x398 = x369[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x399 = ((Val(1) - x174) * (Val(1) - x398));
  Val x400 = ((x174 * x398) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x78));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x402 = x369[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x403 = ((Val(1) - x175) * (Val(1) - x402));
  Val x404 = ((x175 * x402) + x403);
  Val x405 = ((Val(1) - x404) * (Val(1) - x79));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x406 = x369[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x407 = ((Val(1) - x176) * (Val(1) - x406));
  Val x408 = ((x176 * x406) + x407);
  Val x409 = ((Val(1) - x408) * (Val(1) - x80));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x410 = x369[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x411 = ((Val(1) - x177) * (Val(1) - x410));
  Val x412 = ((x177 * x410) + x411);
  Val x413 = ((Val(1) - x412) * (Val(1) - x81));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x414 = x369[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x415 = ((Val(1) - x178) * (Val(1) - x414));
  Val x416 = ((x178 * x414) + x415);
  Val x417 = ((Val(1) - x416) * (Val(1) - x82));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x418 = x369[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x419 = ((Val(1) - x179) * (Val(1) - x418));
  Val x420 = ((x179 * x418) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x83));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x422 = x369[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x423 = ((Val(1) - x180) * (Val(1) - x422));
  Val x424 = ((x180 * x422) + x423);
  Val x425 = ((Val(1) - x424) * (Val(1) - x84));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x426 = x369[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x427 = ((Val(1) - x181) * (Val(1) - x426));
  Val x428 = ((x181 * x426) + x427);
  Val x429 = ((Val(1) - x428) * (Val(1) - x85));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x430 = x369[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x431 = ((Val(1) - x182) * (Val(1) - x430));
  Val x432 = ((x182 * x430) + x431);
  Val x433 = ((Val(1) - x432) * (Val(1) - x86));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x434 = x369[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x435 = ((Val(1) - x183) * (Val(1) - x434));
  Val x436 = ((x183 * x434) + x435);
  Val x437 = ((Val(1) - x436) * (Val(1) - x87));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x438 = x369[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x439 = ((Val(1) - x184) * (Val(1) - x438));
  Val x440 = ((x184 * x438) + x439);
  Val x441 = ((Val(1) - x440) * (Val(1) - x88));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x442 = x369[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x443 = ((Val(1) - x185) * (Val(1) - x442));
  Val x444 = ((x185 * x442) + x443);
  Val x445 = ((Val(1) - x444) * (Val(1) - x89));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x446 = x369[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x447 = ((Val(1) - x186) * (Val(1) - x446));
  Val x448 = ((x186 * x446) + x447);
  Val x449 = ((Val(1) - x448) * (Val(1) - x90));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x450 = x369[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x451 = ((Val(1) - x187) * (Val(1) - x450));
  Val x452 = ((x187 * x450) + x451);
  Val x453 = ((Val(1) - x452) * (Val(1) - x91));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:422)
  Val x454 = (((x278 * x28) + x279) * Val(2));
  Val x455 = (((x282 * x29) + x283) * Val(4));
  Val x456 = (((x287 * x30) + x288) * Val(8));
  Val x457 = (((x291 * x41) + x292) * Val(16));
  Val x458 = (((x295 * x42) + x296) * Val(32));
  Val x459 = (((x299 * x43) + x300) * Val(64));
  Val x460 = (((x303 * x44) + x304) * Val(128));
  Val x461 = (((x307 * x45) + x308) * Val(256));
  Val x462 = (((x311 * x46) + x312) * Val(512));
  Val x463 = (((x315 * x47) + x316) * Val(1024));
  Val x464 = (((x319 * x48) + x320) * Val(2048));
  Val x465 = (((x323 * x49) + x324) * Val(4096));
  Val x466 = (((x327 * x50) + x328) * Val(8192));
  Val x467 = (((x331 * x51) + x332) * Val(16384));
  Val x468 = (((x335 * x52) + x336) * Val(32768));
  Val x469 = (((x339 * x53) + x340) * Val(65536));
  Val x470 = (((x343 * x54) + x344) * Val(131072));
  Val x471 = (((x347 * x55) + x348) * Val(262144));
  Val x472 = (((x351 * x56) + x352) * Val(524288));
  Val x473 = (((x355 * x57) + x356) * Val(1048576));
  Val x474 = (((x359 * x58) + x360) * Val(2097152));
  Val x475 = (((x274 * x27) + x275) + x454);
  Val x476 = (((x475 + x455) + x456) + x457);
  Val x477 = (((x476 + x458) + x459) + x460);
  Val x478 = (((x477 + x461) + x462) + x463);
  Val x479 = (((x478 + x464) + x465) + x466);
  Val x480 = (((x479 + x467) + x468) + x469);
  Val x481 = (((x480 + x470) + x471) + x472);
  NondetRegStruct x482 = exec_Reg(ctx, ((x481 + x473) + x474), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:423)
  Val x483 = (((x367 * x60) + x368) * Val(2));
  Val x484 = (((x372 * x61) + x373) * Val(4));
  Val x485 = (((x376 * x72) + x377) * Val(8));
  Val x486 = (((x380 * x73) + x381) * Val(16));
  Val x487 = (((x384 * x74) + x385) * Val(32));
  Val x488 = (((x388 * x75) + x389) * Val(64));
  Val x489 = (((x392 * x76) + x393) * Val(128));
  Val x490 = (((x396 * x77) + x397) * Val(256));
  Val x491 = (((x400 * x78) + x401) * Val(512));
  Val x492 = (((x404 * x79) + x405) * Val(1024));
  Val x493 = (((x408 * x80) + x409) * Val(2048));
  Val x494 = (((x412 * x81) + x413) * Val(4096));
  Val x495 = (((x416 * x82) + x417) * Val(8192));
  Val x496 = (((x420 * x83) + x421) * Val(16384));
  Val x497 = (((x424 * x84) + x425) * Val(32768));
  Val x498 = (((x428 * x85) + x429) * Val(65536));
  Val x499 = (((x432 * x86) + x433) * Val(131072));
  Val x500 = (((x436 * x87) + x437) * Val(262144));
  Val x501 = (((x440 * x88) + x441) * Val(524288));
  Val x502 = (((x444 * x89) + x445) * Val(1048576));
  Val x503 = (((x363 * x59) + x364) + x483);
  Val x504 = (((x503 + x484) + x485) + x486);
  Val x505 = (((x504 + x487) + x488) + x489);
  Val x506 = (((x505 + x490) + x491) + x492);
  Val x507 = (((x506 + x493) + x494) + x495);
  Val x508 = (((x507 + x496) + x497) + x498);
  Val x509 = (((x508 + x499) + x500) + x501);
  NondetRegStruct x510 = exec_Reg(ctx, (x509 + x502), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:424)
  Val x511 = (((x452 * x91) + x453) * Val(2));
  Val x512 = (((x198 * x92) + x199) * Val(4));
  Val x513 = (((x202 * x9) + x203) * Val(8));
  Val x514 = (((x206 * x10) + x207) * Val(16));
  Val x515 = (((x210 * x11) + x211) * Val(32));
  Val x516 = (((x214 * x12) + x215) * Val(64));
  Val x517 = (((x218 * x13) + x219) * Val(128));
  Val x518 = (((x222 * x14) + x223) * Val(256));
  Val x519 = (((x226 * x15) + x227) * Val(512));
  Val x520 = (((x230 * x16) + x231) * Val(1024));
  Val x521 = (((x234 * x17) + x235) * Val(2048));
  Val x522 = (((x238 * x18) + x239) * Val(4096));
  Val x523 = (((x242 * x19) + x243) * Val(8192));
  Val x524 = (((x246 * x20) + x247) * Val(16384));
  Val x525 = (((x250 * x21) + x251) * Val(32768));
  Val x526 = (((x254 * x22) + x255) * Val(65536));
  Val x527 = (((x258 * x23) + x259) * Val(131072));
  Val x528 = (((x262 * x24) + x263) * Val(262144));
  Val x529 = (((x266 * x25) + x267) * Val(524288));
  Val x530 = (((x270 * x26) + x271) * Val(1048576));
  Val x531 = (((x448 * x90) + x449) + x511);
  Val x532 = (((x531 + x512) + x513) + x514);
  Val x533 = (((x532 + x515) + x516) + x517);
  Val x534 = (((x533 + x518) + x519) + x520);
  Val x535 = (((x534 + x521) + x522) + x523);
  Val x536 = (((x535 + x524) + x525) + x526);
  Val x537 = (((x536 + x527) + x528) + x529);
  NondetRegStruct x538 = exec_Reg(ctx, (x537 + x530), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:427)
  Val22Array x539 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x540 = exec_RetTuple(
      ctx,
      x539,
      x539,
      x539,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x539,
      Val22Array{x482._super, x510._super, x538._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(3),
      Val(8),
      x4.rnd._super,
      x4.blk._super,
      x4.midx._super,
      LAYOUT_LOOKUP(layout2, _super));
  return x540;
}
RetTupleStruct execRhoMinor0_2__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_2__3_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 4, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[12]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[13]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[14]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[18]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[19]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[20]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(4),
                    Val(8),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_2__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_2__3_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_2__3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 5, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrC;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[7]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[8]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[9]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x360 * x358) + x361) * Val(2));
  Val x428 = (((x365 * x363) + x366) * Val(4));
  Val x429 = (((x370 * x368) + x371) * Val(8));
  Val x430 = (((x375 * x373) + x376) * Val(16));
  Val x431 = (((x380 * x378) + x381) * Val(32));
  Val x432 = (((x385 * x383) + x386) * Val(64));
  Val x433 = (((x390 * x388) + x391) * Val(128));
  Val x434 = (((x395 * x393) + x396) * Val(256));
  Val x435 = (((x400 * x398) + x401) * Val(512));
  Val x436 = (((x405 * x403) + x406) * Val(1024));
  Val x437 = (((x410 * x408) + x411) * Val(2048));
  Val x438 = (((x415 * x413) + x416) * Val(4096));
  Val x439 = (((x420 * x418) + x421) * Val(8192));
  Val x440 = (((x425 * x423) + x426) * Val(16384));
  Val x441 = (((x106 * x104) + x107) * Val(32768));
  Val x442 = (((x111 * x109) + x112) * Val(65536));
  Val x443 = (((x116 * x114) + x117) * Val(131072));
  Val x444 = (((x121 * x119) + x122) * Val(262144));
  Val x445 = (((x126 * x124) + x127) * Val(524288));
  Val x446 = (((x131 * x129) + x132) * Val(1048576));
  Val x447 = (((x136 * x134) + x137) * Val(2097152));
  Val x448 = (((x355 * x353) + x356) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x146 * x144) + x147) * Val(2));
  Val x457 = (((x151 * x149) + x152) * Val(4));
  Val x458 = (((x156 * x154) + x157) * Val(8));
  Val x459 = (((x161 * x159) + x162) * Val(16));
  Val x460 = (((x166 * x164) + x167) * Val(32));
  Val x461 = (((x171 * x169) + x172) * Val(64));
  Val x462 = (((x176 * x174) + x177) * Val(128));
  Val x463 = (((x181 * x179) + x182) * Val(256));
  Val x464 = (((x186 * x184) + x187) * Val(512));
  Val x465 = (((x191 * x189) + x192) * Val(1024));
  Val x466 = (((x196 * x194) + x197) * Val(2048));
  Val x467 = (((x201 * x199) + x202) * Val(4096));
  Val x468 = (((x206 * x204) + x207) * Val(8192));
  Val x469 = (((x211 * x209) + x212) * Val(16384));
  Val x470 = (((x218 * x216) + x219) * Val(32768));
  Val x471 = (((x223 * x221) + x224) * Val(65536));
  Val x472 = (((x228 * x226) + x229) * Val(131072));
  Val x473 = (((x233 * x231) + x234) * Val(262144));
  Val x474 = (((x238 * x236) + x239) * Val(524288));
  Val x475 = (((x243 * x241) + x244) * Val(1048576));
  Val x476 = (((x141 * x139) + x142) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x253 * x251) + x254) * Val(2));
  Val x485 = (((x258 * x256) + x259) * Val(4));
  Val x486 = (((x263 * x261) + x264) * Val(8));
  Val x487 = (((x268 * x266) + x269) * Val(16));
  Val x488 = (((x273 * x271) + x274) * Val(32));
  Val x489 = (((x278 * x276) + x279) * Val(64));
  Val x490 = (((x283 * x281) + x284) * Val(128));
  Val x491 = (((x288 * x286) + x289) * Val(256));
  Val x492 = (((x293 * x291) + x294) * Val(512));
  Val x493 = (((x298 * x296) + x299) * Val(1024));
  Val x494 = (((x303 * x301) + x304) * Val(2048));
  Val x495 = (((x308 * x306) + x309) * Val(4096));
  Val x496 = (((x313 * x311) + x314) * Val(8192));
  Val x497 = (((x318 * x316) + x319) * Val(16384));
  Val x498 = (((x325 * x323) + x326) * Val(32768));
  Val x499 = (((x330 * x328) + x331) * Val(65536));
  Val x500 = (((x335 * x333) + x336) * Val(131072));
  Val x501 = (((x340 * x338) + x341) * Val(262144));
  Val x502 = (((x345 * x343) + x346) * Val(524288));
  Val x503 = (((x350 * x348) + x351) * Val(1048576));
  Val x504 = (((x248 * x246) + x249) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_2__3_Arm1_SuperLayout> x512 = LAYOUT_LOOKUP(x3, arm1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct24Array x513 = x4.arrD;
  Val x514 = x513[15]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:345)
  ToBits_22_Struct x515 = exec_ToBits_22_(ctx, x514, LAYOUT_LOOKUP(x512, unpackM1));
  NondetRegStruct22Array x516 = x515._super;
  Val x517 = x516[0]._super;
  Val x518 = x516[1]._super;
  Val x519 = x516[2]._super;
  Val x520 = x516[3]._super;
  Val x521 = x516[4]._super;
  Val x522 = x516[5]._super;
  Val x523 = x516[6]._super;
  Val x524 = x516[7]._super;
  Val x525 = x516[8]._super;
  Val x526 = x516[9]._super;
  Val x527 = x516[10]._super;
  Val x528 = x516[11]._super;
  Val x529 = x516[12]._super;
  Val x530 = x516[13]._super;
  Val x531 = x516[14]._super;
  Val x532 = x516[15]._super;
  Val x533 = x516[16]._super;
  Val x534 = x516[17]._super;
  Val x535 = x516[18]._super;
  Val x536 = x516[19]._super;
  Val x537 = x516[20]._super;
  Val x538 = x516[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:346)
  Val x539 = (((x517 + (x518 * Val(2))) + (x519 * Val(4))) + (x520 * Val(8)));
  Val x540 = (((x539 + (x521 * Val(16))) + (x522 * Val(32))) + (x523 * Val(64)));
  Val x541 = (((x540 + (x524 * Val(128))) + (x525 * Val(256))) + (x526 * Val(512)));
  Val x542 = (((x541 + (x527 * Val(1024))) + (x528 * Val(2048))) + (x529 * Val(4096)));
  Val x543 = (((x542 + (x530 * Val(8192))) + (x531 * Val(16384))) + (x532 * Val(32768)));
  Val x544 = (((x543 + (x533 * Val(65536))) + (x534 * Val(131072))) + (x535 * Val(262144)));
  Val x545 = (((x544 + (x536 * Val(524288))) + (x537 * Val(1048576))) + (x538 * Val(2097152)));
  EQZ((x545 - x514), "rho_minor1(zirgen/circuit/keccak/keccak.zir:346)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x546 = x513[16]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:349)
  ToBits_21_Struct x547 = exec_ToBits_21_(ctx, x546, LAYOUT_LOOKUP(x512, unpackM2));
  NondetRegStruct21Array x548 = x547._super;
  Val x549 = x548[0]._super;
  Val x550 = x548[1]._super;
  Val x551 = x548[2]._super;
  Val x552 = x548[3]._super;
  Val x553 = x548[4]._super;
  Val x554 = x548[5]._super;
  Val x555 = x548[6]._super;
  Val x556 = x548[7]._super;
  Val x557 = x548[8]._super;
  Val x558 = x548[9]._super;
  Val x559 = x548[10]._super;
  Val x560 = x548[11]._super;
  Val x561 = x548[12]._super;
  Val x562 = x548[13]._super;
  Val x563 = x548[14]._super;
  Val x564 = x548[15]._super;
  Val x565 = x548[16]._super;
  Val x566 = x548[17]._super;
  Val x567 = x548[18]._super;
  Val x568 = x548[19]._super;
  Val x569 = x548[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:350)
  Val x570 = (((x549 + (x550 * Val(2))) + (x551 * Val(4))) + (x552 * Val(8)));
  Val x571 = (((x570 + (x553 * Val(16))) + (x554 * Val(32))) + (x555 * Val(64)));
  Val x572 = (((x571 + (x556 * Val(128))) + (x557 * Val(256))) + (x558 * Val(512)));
  Val x573 = (((x572 + (x559 * Val(1024))) + (x560 * Val(2048))) + (x561 * Val(4096)));
  Val x574 = (((x573 + (x562 * Val(8192))) + (x563 * Val(16384))) + (x564 * Val(32768)));
  Val x575 = (((x574 + (x565 * Val(65536))) + (x566 * Val(131072))) + (x567 * Val(262144)));
  Val x576 = (((x575 + (x568 * Val(524288))) + (x569 * Val(1048576))) - x546);
  EQZ(x576, "rho_minor1(zirgen/circuit/keccak/keccak.zir:350)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x577 = x513[17]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:354)
  ToBits_21_Struct x578 = exec_ToBits_21_(ctx, x577, LAYOUT_LOOKUP(x512, unpackM3));
  NondetRegStruct21Array x579 = x578._super;
  Val x580 = x579[0]._super;
  Val x581 = x579[1]._super;
  Val x582 = x579[2]._super;
  Val x583 = x579[3]._super;
  Val x584 = x579[4]._super;
  Val x585 = x579[5]._super;
  Val x586 = x579[6]._super;
  Val x587 = x579[7]._super;
  Val x588 = x579[8]._super;
  Val x589 = x579[9]._super;
  Val x590 = x579[10]._super;
  Val x591 = x579[11]._super;
  Val x592 = x579[12]._super;
  Val x593 = x579[13]._super;
  Val x594 = x579[14]._super;
  Val x595 = x579[15]._super;
  Val x596 = x579[16]._super;
  Val x597 = x579[17]._super;
  Val x598 = x579[18]._super;
  Val x599 = x579[19]._super;
  Val x600 = x579[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:355)
  Val x601 = (((x580 + (x581 * Val(2))) + (x582 * Val(4))) + (x583 * Val(8)));
  Val x602 = (((x601 + (x584 * Val(16))) + (x585 * Val(32))) + (x586 * Val(64)));
  Val x603 = (((x602 + (x587 * Val(128))) + (x588 * Val(256))) + (x589 * Val(512)));
  Val x604 = (((x603 + (x590 * Val(1024))) + (x591 * Val(2048))) + (x592 * Val(4096)));
  Val x605 = (((x604 + (x593 * Val(8192))) + (x594 * Val(16384))) + (x595 * Val(32768)));
  Val x606 = (((x605 + (x596 * Val(65536))) + (x597 * Val(131072))) + (x598 * Val(262144)));
  Val x607 = (((x606 + (x599 * Val(524288))) + (x600 * Val(1048576))) - x577);
  EQZ(x607, "rho_minor1(zirgen/circuit/keccak/keccak.zir:355)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:358)
  RetTupleStruct x608 = exec_RetTuple(
      ctx,
      Val22Array{x517, x518, x519, x520, x521, x522, x523, x524, x525, x526, x527,
                 x528, x529, x530, x531, x532, x533, x534, x535, x536, x537, x538},
      Val22Array{x549, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559,
                 x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, Val(0)},
      Val22Array{x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x590,
                 x591, x592, x593, x594, x595, x596, x597, x598, x599, x600, Val(0)},
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(5),
      Val(8),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x512, _super));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x609 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x609;
}
RetTupleStruct execRhoMinor2_2__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor2_2__3_Layout> layout2) {
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  RetTupleStruct x3 = back_RetTuple(ctx, 6, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct24Array x5 = x3.arrD;
  Val x6 = x5[21]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:368)
  ToBits_22_Struct x7 = exec_ToBits_22_(ctx, x6, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  Val x30 = x8[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:369)
  Val x31 = (((x9 + (x10 * Val(2))) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) + (x30 * Val(2097152)));
  EQZ((x37 - x6), "rho_minor2(zirgen/circuit/keccak/keccak.zir:369)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x38 = x5[22]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:372)
  ToBits_21_Struct x39 = exec_ToBits_21_(ctx, x38, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x40 = x39._super;
  Val x41 = x40[0]._super;
  Val x42 = x40[1]._super;
  Val x43 = x40[2]._super;
  Val x44 = x40[3]._super;
  Val x45 = x40[4]._super;
  Val x46 = x40[5]._super;
  Val x47 = x40[6]._super;
  Val x48 = x40[7]._super;
  Val x49 = x40[8]._super;
  Val x50 = x40[9]._super;
  Val x51 = x40[10]._super;
  Val x52 = x40[11]._super;
  Val x53 = x40[12]._super;
  Val x54 = x40[13]._super;
  Val x55 = x40[14]._super;
  Val x56 = x40[15]._super;
  Val x57 = x40[16]._super;
  Val x58 = x40[17]._super;
  Val x59 = x40[18]._super;
  Val x60 = x40[19]._super;
  Val x61 = x40[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:373)
  Val x62 = (((x41 + (x42 * Val(2))) + (x43 * Val(4))) + (x44 * Val(8)));
  Val x63 = (((x62 + (x45 * Val(16))) + (x46 * Val(32))) + (x47 * Val(64)));
  Val x64 = (((x63 + (x48 * Val(128))) + (x49 * Val(256))) + (x50 * Val(512)));
  Val x65 = (((x64 + (x51 * Val(1024))) + (x52 * Val(2048))) + (x53 * Val(4096)));
  Val x66 = (((x65 + (x54 * Val(8192))) + (x55 * Val(16384))) + (x56 * Val(32768)));
  Val x67 = (((x66 + (x57 * Val(65536))) + (x58 * Val(131072))) + (x59 * Val(262144)));
  Val x68 = (((x67 + (x60 * Val(524288))) + (x61 * Val(1048576))) - x38);
  EQZ(x68, "rho_minor2(zirgen/circuit/keccak/keccak.zir:373)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x69 = x5[23]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:376)
  ToBits_21_Struct x70 = exec_ToBits_21_(ctx, x69, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:377)
  Val x93 = (((x72 + (x73 * Val(2))) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x94 = (((x93 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x95 = (((x94 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x96 = (((x95 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x97 = (((x96 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x98 = (((x97 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x99 = (((x98 + (x91 * Val(524288))) + (x92 * Val(1048576))) - x69);
  EQZ(x99, "rho_minor2(zirgen/circuit/keccak/keccak.zir:377)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct22Array x100 = x3.arrC;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:383)
  Val x101 = x100[10]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:390)
  ToBits_22_Struct x102 = exec_ToBits_22_(ctx, x101, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x103 = x102._super;
  Val x104 = x103[0]._super;
  Val x105 = x103[1]._super;
  Val x106 = x103[2]._super;
  Val x107 = x103[3]._super;
  Val x108 = x103[4]._super;
  Val x109 = x103[5]._super;
  Val x110 = x103[6]._super;
  Val x111 = x103[7]._super;
  Val x112 = x103[8]._super;
  Val x113 = x103[9]._super;
  Val x114 = x103[10]._super;
  Val x115 = x103[11]._super;
  Val x116 = x103[12]._super;
  Val x117 = x103[13]._super;
  Val x118 = x103[14]._super;
  Val x119 = x103[15]._super;
  Val x120 = x103[16]._super;
  Val x121 = x103[17]._super;
  Val x122 = x103[18]._super;
  Val x123 = x103[19]._super;
  Val x124 = x103[20]._super;
  Val x125 = x103[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:391)
  Val x126 = (((x104 + (x105 * Val(2))) + (x106 * Val(4))) + (x107 * Val(8)));
  Val x127 = (((x126 + (x108 * Val(16))) + (x109 * Val(32))) + (x110 * Val(64)));
  Val x128 = (((x127 + (x111 * Val(128))) + (x112 * Val(256))) + (x113 * Val(512)));
  Val x129 = (((x128 + (x114 * Val(1024))) + (x115 * Val(2048))) + (x116 * Val(4096)));
  Val x130 = (((x129 + (x117 * Val(8192))) + (x118 * Val(16384))) + (x119 * Val(32768)));
  Val x131 = (((x130 + (x120 * Val(65536))) + (x121 * Val(131072))) + (x122 * Val(262144)));
  Val x132 = (((x131 + (x123 * Val(524288))) + (x124 * Val(1048576))) + (x125 * Val(2097152)));
  EQZ((x132 - x101), "rho_minor2(zirgen/circuit/keccak/keccak.zir:391)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:395)
  Val x133 = x100[11]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:402)
  ToBits_21_Struct x134 = exec_ToBits_21_(ctx, x133, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x135 = x134._super;
  Val x136 = x135[0]._super;
  Val x137 = x135[1]._super;
  Val x138 = x135[2]._super;
  Val x139 = x135[3]._super;
  Val x140 = x135[4]._super;
  Val x141 = x135[5]._super;
  Val x142 = x135[6]._super;
  Val x143 = x135[7]._super;
  Val x144 = x135[8]._super;
  Val x145 = x135[9]._super;
  Val x146 = x135[10]._super;
  Val x147 = x135[11]._super;
  Val x148 = x135[12]._super;
  Val x149 = x135[13]._super;
  Val x150 = x135[14]._super;
  Val x151 = x135[15]._super;
  Val x152 = x135[16]._super;
  Val x153 = x135[17]._super;
  Val x154 = x135[18]._super;
  Val x155 = x135[19]._super;
  Val x156 = x135[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:403)
  Val x157 = (((x136 + (x137 * Val(2))) + (x138 * Val(4))) + (x139 * Val(8)));
  Val x158 = (((x157 + (x140 * Val(16))) + (x141 * Val(32))) + (x142 * Val(64)));
  Val x159 = (((x158 + (x143 * Val(128))) + (x144 * Val(256))) + (x145 * Val(512)));
  Val x160 = (((x159 + (x146 * Val(1024))) + (x147 * Val(2048))) + (x148 * Val(4096)));
  Val x161 = (((x160 + (x149 * Val(8192))) + (x150 * Val(16384))) + (x151 * Val(32768)));
  Val x162 = (((x161 + (x152 * Val(65536))) + (x153 * Val(131072))) + (x154 * Val(262144)));
  Val x163 = (((x162 + (x155 * Val(524288))) + (x156 * Val(1048576))) - x133);
  EQZ(x163, "rho_minor2(zirgen/circuit/keccak/keccak.zir:403)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:407)
  Val x164 = x100[12]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:414)
  ToBits_21_Struct x165 = exec_ToBits_21_(ctx, x164, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x166 = x165._super;
  Val x167 = x166[0]._super;
  Val x168 = x166[1]._super;
  Val x169 = x166[2]._super;
  Val x170 = x166[3]._super;
  Val x171 = x166[4]._super;
  Val x172 = x166[5]._super;
  Val x173 = x166[6]._super;
  Val x174 = x166[7]._super;
  Val x175 = x166[8]._super;
  Val x176 = x166[9]._super;
  Val x177 = x166[10]._super;
  Val x178 = x166[11]._super;
  Val x179 = x166[12]._super;
  Val x180 = x166[13]._super;
  Val x181 = x166[14]._super;
  Val x182 = x166[15]._super;
  Val x183 = x166[16]._super;
  Val x184 = x166[17]._super;
  Val x185 = x166[18]._super;
  Val x186 = x166[19]._super;
  Val x187 = x166[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:415)
  Val x188 = (((x167 + (x168 * Val(2))) + (x169 * Val(4))) + (x170 * Val(8)));
  Val x189 = (((x188 + (x171 * Val(16))) + (x172 * Val(32))) + (x173 * Val(64)));
  Val x190 = (((x189 + (x174 * Val(128))) + (x175 * Val(256))) + (x176 * Val(512)));
  Val x191 = (((x190 + (x177 * Val(1024))) + (x178 * Val(2048))) + (x179 * Val(4096)));
  Val x192 = (((x191 + (x180 * Val(8192))) + (x181 * Val(16384))) + (x182 * Val(32768)));
  Val x193 = (((x192 + (x183 * Val(65536))) + (x184 * Val(131072))) + (x185 * Val(262144)));
  Val x194 = (((x193 + (x186 * Val(524288))) + (x187 * Val(1048576))) - x164);
  EQZ(x194, "rho_minor2(zirgen/circuit/keccak/keccak.zir:415)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x195 = x4.arrA;
  Val x196 = x195[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x197 = ((Val(1) - x104) * (Val(1) - x196));
  Val x198 = ((x104 * x196) + x197);
  Val x199 = ((Val(1) - x198) * (Val(1) - x92));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x200 = x195[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x201 = ((Val(1) - x105) * (Val(1) - x200));
  Val x202 = ((x105 * x200) + x201);
  Val x203 = ((Val(1) - x202) * (Val(1) - x9));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x204 = x195[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x205 = ((Val(1) - x106) * (Val(1) - x204));
  Val x206 = ((x106 * x204) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x10));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x208 = x195[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x209 = ((Val(1) - x107) * (Val(1) - x208));
  Val x210 = ((x107 * x208) + x209);
  Val x211 = ((Val(1) - x210) * (Val(1) - x11));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x212 = x195[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x213 = ((Val(1) - x108) * (Val(1) - x212));
  Val x214 = ((x108 * x212) + x213);
  Val x215 = ((Val(1) - x214) * (Val(1) - x12));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x216 = x195[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x217 = ((Val(1) - x109) * (Val(1) - x216));
  Val x218 = ((x109 * x216) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x13));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x220 = x195[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x221 = ((Val(1) - x110) * (Val(1) - x220));
  Val x222 = ((x110 * x220) + x221);
  Val x223 = ((Val(1) - x222) * (Val(1) - x14));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x224 = x195[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x225 = ((Val(1) - x111) * (Val(1) - x224));
  Val x226 = ((x111 * x224) + x225);
  Val x227 = ((Val(1) - x226) * (Val(1) - x15));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x228 = x195[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x229 = ((Val(1) - x112) * (Val(1) - x228));
  Val x230 = ((x112 * x228) + x229);
  Val x231 = ((Val(1) - x230) * (Val(1) - x16));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x232 = x195[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x233 = ((Val(1) - x113) * (Val(1) - x232));
  Val x234 = ((x113 * x232) + x233);
  Val x235 = ((Val(1) - x234) * (Val(1) - x17));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x236 = x195[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x237 = ((Val(1) - x114) * (Val(1) - x236));
  Val x238 = ((x114 * x236) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x18));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x240 = x195[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x241 = ((Val(1) - x115) * (Val(1) - x240));
  Val x242 = ((x115 * x240) + x241);
  Val x243 = ((Val(1) - x242) * (Val(1) - x19));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x244 = x195[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x245 = ((Val(1) - x116) * (Val(1) - x244));
  Val x246 = ((x116 * x244) + x245);
  Val x247 = ((Val(1) - x246) * (Val(1) - x20));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x248 = x195[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x249 = ((Val(1) - x117) * (Val(1) - x248));
  Val x250 = ((x117 * x248) + x249);
  Val x251 = ((Val(1) - x250) * (Val(1) - x21));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x252 = x195[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x253 = ((Val(1) - x118) * (Val(1) - x252));
  Val x254 = ((x118 * x252) + x253);
  Val x255 = ((Val(1) - x254) * (Val(1) - x22));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x256 = x195[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x257 = ((Val(1) - x119) * (Val(1) - x256));
  Val x258 = ((x119 * x256) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x23));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x260 = x195[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x261 = ((Val(1) - x120) * (Val(1) - x260));
  Val x262 = ((x120 * x260) + x261);
  Val x263 = ((Val(1) - x262) * (Val(1) - x24));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x264 = x195[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x265 = ((Val(1) - x121) * (Val(1) - x264));
  Val x266 = ((x121 * x264) + x265);
  Val x267 = ((Val(1) - x266) * (Val(1) - x25));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x268 = x195[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x269 = ((Val(1) - x122) * (Val(1) - x268));
  Val x270 = ((x122 * x268) + x269);
  Val x271 = ((Val(1) - x270) * (Val(1) - x26));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x272 = x195[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x273 = ((Val(1) - x123) * (Val(1) - x272));
  Val x274 = ((x123 * x272) + x273);
  Val x275 = ((Val(1) - x274) * (Val(1) - x27));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x276 = x195[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x277 = ((Val(1) - x124) * (Val(1) - x276));
  Val x278 = ((x124 * x276) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x28));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x280 = x195[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x281 = ((Val(1) - x125) * (Val(1) - x280));
  Val x282 = ((x125 * x280) + x281);
  Val x283 = ((Val(1) - x282) * (Val(1) - x29));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x284 = x4.arrB;
  Val x285 = x284[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x286 = ((Val(1) - x136) * (Val(1) - x285));
  Val x287 = ((x136 * x285) + x286);
  Val x288 = ((Val(1) - x287) * (Val(1) - x30));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x289 = x284[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x290 = ((Val(1) - x137) * (Val(1) - x289));
  Val x291 = ((x137 * x289) + x290);
  Val x292 = ((Val(1) - x291) * (Val(1) - x41));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x293 = x284[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x294 = ((Val(1) - x138) * (Val(1) - x293));
  Val x295 = ((x138 * x293) + x294);
  Val x296 = ((Val(1) - x295) * (Val(1) - x42));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x297 = x284[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x298 = ((Val(1) - x139) * (Val(1) - x297));
  Val x299 = ((x139 * x297) + x298);
  Val x300 = ((Val(1) - x299) * (Val(1) - x43));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x301 = x284[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x302 = ((Val(1) - x140) * (Val(1) - x301));
  Val x303 = ((x140 * x301) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x44));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x305 = x284[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x306 = ((Val(1) - x141) * (Val(1) - x305));
  Val x307 = ((x141 * x305) + x306);
  Val x308 = ((Val(1) - x307) * (Val(1) - x45));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x309 = x284[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x310 = ((Val(1) - x142) * (Val(1) - x309));
  Val x311 = ((x142 * x309) + x310);
  Val x312 = ((Val(1) - x311) * (Val(1) - x46));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x313 = x284[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x314 = ((Val(1) - x143) * (Val(1) - x313));
  Val x315 = ((x143 * x313) + x314);
  Val x316 = ((Val(1) - x315) * (Val(1) - x47));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x317 = x284[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x318 = ((Val(1) - x144) * (Val(1) - x317));
  Val x319 = ((x144 * x317) + x318);
  Val x320 = ((Val(1) - x319) * (Val(1) - x48));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x321 = x284[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x322 = ((Val(1) - x145) * (Val(1) - x321));
  Val x323 = ((x145 * x321) + x322);
  Val x324 = ((Val(1) - x323) * (Val(1) - x49));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x325 = x284[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x326 = ((Val(1) - x146) * (Val(1) - x325));
  Val x327 = ((x146 * x325) + x326);
  Val x328 = ((Val(1) - x327) * (Val(1) - x50));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x329 = x284[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x330 = ((Val(1) - x147) * (Val(1) - x329));
  Val x331 = ((x147 * x329) + x330);
  Val x332 = ((Val(1) - x331) * (Val(1) - x51));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x333 = x284[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x334 = ((Val(1) - x148) * (Val(1) - x333));
  Val x335 = ((x148 * x333) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x52));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x337 = x284[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x338 = ((Val(1) - x149) * (Val(1) - x337));
  Val x339 = ((x149 * x337) + x338);
  Val x340 = ((Val(1) - x339) * (Val(1) - x53));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x341 = x284[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x342 = ((Val(1) - x150) * (Val(1) - x341));
  Val x343 = ((x150 * x341) + x342);
  Val x344 = ((Val(1) - x343) * (Val(1) - x54));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x345 = x284[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x346 = ((Val(1) - x151) * (Val(1) - x345));
  Val x347 = ((x151 * x345) + x346);
  Val x348 = ((Val(1) - x347) * (Val(1) - x55));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x349 = x284[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x350 = ((Val(1) - x152) * (Val(1) - x349));
  Val x351 = ((x152 * x349) + x350);
  Val x352 = ((Val(1) - x351) * (Val(1) - x56));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x353 = x284[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x354 = ((Val(1) - x153) * (Val(1) - x353));
  Val x355 = ((x153 * x353) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x57));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x357 = x284[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x358 = ((Val(1) - x154) * (Val(1) - x357));
  Val x359 = ((x154 * x357) + x358);
  Val x360 = ((Val(1) - x359) * (Val(1) - x58));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x361 = x284[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x362 = ((Val(1) - x155) * (Val(1) - x361));
  Val x363 = ((x155 * x361) + x362);
  Val x364 = ((Val(1) - x363) * (Val(1) - x59));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x365 = x284[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x366 = ((Val(1) - x156) * (Val(1) - x365));
  Val x367 = ((x156 * x365) + x366);
  Val x368 = ((Val(1) - x367) * (Val(1) - x60));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x369 = x4.arrC;
  Val x370 = x369[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x371 = ((Val(1) - x167) * (Val(1) - x370));
  Val x372 = ((x167 * x370) + x371);
  Val x373 = ((Val(1) - x372) * (Val(1) - x61));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x374 = x369[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x375 = ((Val(1) - x168) * (Val(1) - x374));
  Val x376 = ((x168 * x374) + x375);
  Val x377 = ((Val(1) - x376) * (Val(1) - x72));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x378 = x369[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x379 = ((Val(1) - x169) * (Val(1) - x378));
  Val x380 = ((x169 * x378) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x73));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x382 = x369[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x383 = ((Val(1) - x170) * (Val(1) - x382));
  Val x384 = ((x170 * x382) + x383);
  Val x385 = ((Val(1) - x384) * (Val(1) - x74));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x386 = x369[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x387 = ((Val(1) - x171) * (Val(1) - x386));
  Val x388 = ((x171 * x386) + x387);
  Val x389 = ((Val(1) - x388) * (Val(1) - x75));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x390 = x369[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x391 = ((Val(1) - x172) * (Val(1) - x390));
  Val x392 = ((x172 * x390) + x391);
  Val x393 = ((Val(1) - x392) * (Val(1) - x76));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x394 = x369[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x395 = ((Val(1) - x173) * (Val(1) - x394));
  Val x396 = ((x173 * x394) + x395);
  Val x397 = ((Val(1) - x396) * (Val(1) - x77));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x398 = x369[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x399 = ((Val(1) - x174) * (Val(1) - x398));
  Val x400 = ((x174 * x398) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x78));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x402 = x369[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x403 = ((Val(1) - x175) * (Val(1) - x402));
  Val x404 = ((x175 * x402) + x403);
  Val x405 = ((Val(1) - x404) * (Val(1) - x79));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x406 = x369[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x407 = ((Val(1) - x176) * (Val(1) - x406));
  Val x408 = ((x176 * x406) + x407);
  Val x409 = ((Val(1) - x408) * (Val(1) - x80));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x410 = x369[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x411 = ((Val(1) - x177) * (Val(1) - x410));
  Val x412 = ((x177 * x410) + x411);
  Val x413 = ((Val(1) - x412) * (Val(1) - x81));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x414 = x369[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x415 = ((Val(1) - x178) * (Val(1) - x414));
  Val x416 = ((x178 * x414) + x415);
  Val x417 = ((Val(1) - x416) * (Val(1) - x82));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x418 = x369[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x419 = ((Val(1) - x179) * (Val(1) - x418));
  Val x420 = ((x179 * x418) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x83));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x422 = x369[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x423 = ((Val(1) - x180) * (Val(1) - x422));
  Val x424 = ((x180 * x422) + x423);
  Val x425 = ((Val(1) - x424) * (Val(1) - x84));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x426 = x369[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x427 = ((Val(1) - x181) * (Val(1) - x426));
  Val x428 = ((x181 * x426) + x427);
  Val x429 = ((Val(1) - x428) * (Val(1) - x85));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x430 = x369[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x431 = ((Val(1) - x182) * (Val(1) - x430));
  Val x432 = ((x182 * x430) + x431);
  Val x433 = ((Val(1) - x432) * (Val(1) - x86));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x434 = x369[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x435 = ((Val(1) - x183) * (Val(1) - x434));
  Val x436 = ((x183 * x434) + x435);
  Val x437 = ((Val(1) - x436) * (Val(1) - x87));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x438 = x369[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x439 = ((Val(1) - x184) * (Val(1) - x438));
  Val x440 = ((x184 * x438) + x439);
  Val x441 = ((Val(1) - x440) * (Val(1) - x88));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x442 = x369[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x443 = ((Val(1) - x185) * (Val(1) - x442));
  Val x444 = ((x185 * x442) + x443);
  Val x445 = ((Val(1) - x444) * (Val(1) - x89));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x446 = x369[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x447 = ((Val(1) - x186) * (Val(1) - x446));
  Val x448 = ((x186 * x446) + x447);
  Val x449 = ((Val(1) - x448) * (Val(1) - x90));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x450 = x369[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x451 = ((Val(1) - x187) * (Val(1) - x450));
  Val x452 = ((x187 * x450) + x451);
  Val x453 = ((Val(1) - x452) * (Val(1) - x91));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:422)
  Val x454 = (((x376 * x72) + x377) * Val(2));
  Val x455 = (((x380 * x73) + x381) * Val(4));
  Val x456 = (((x384 * x74) + x385) * Val(8));
  Val x457 = (((x388 * x75) + x389) * Val(16));
  Val x458 = (((x392 * x76) + x393) * Val(32));
  Val x459 = (((x396 * x77) + x397) * Val(64));
  Val x460 = (((x400 * x78) + x401) * Val(128));
  Val x461 = (((x404 * x79) + x405) * Val(256));
  Val x462 = (((x408 * x80) + x409) * Val(512));
  Val x463 = (((x412 * x81) + x413) * Val(1024));
  Val x464 = (((x416 * x82) + x417) * Val(2048));
  Val x465 = (((x420 * x83) + x421) * Val(4096));
  Val x466 = (((x424 * x84) + x425) * Val(8192));
  Val x467 = (((x428 * x85) + x429) * Val(16384));
  Val x468 = (((x432 * x86) + x433) * Val(32768));
  Val x469 = (((x436 * x87) + x437) * Val(65536));
  Val x470 = (((x440 * x88) + x441) * Val(131072));
  Val x471 = (((x444 * x89) + x445) * Val(262144));
  Val x472 = (((x448 * x90) + x449) * Val(524288));
  Val x473 = (((x452 * x91) + x453) * Val(1048576));
  Val x474 = (((x198 * x92) + x199) * Val(2097152));
  Val x475 = (((x372 * x61) + x373) + x454);
  Val x476 = (((x475 + x455) + x456) + x457);
  Val x477 = (((x476 + x458) + x459) + x460);
  Val x478 = (((x477 + x461) + x462) + x463);
  Val x479 = (((x478 + x464) + x465) + x466);
  Val x480 = (((x479 + x467) + x468) + x469);
  Val x481 = (((x480 + x470) + x471) + x472);
  NondetRegStruct x482 = exec_Reg(ctx, ((x481 + x473) + x474), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:423)
  Val x483 = (((x206 * x10) + x207) * Val(2));
  Val x484 = (((x210 * x11) + x211) * Val(4));
  Val x485 = (((x214 * x12) + x215) * Val(8));
  Val x486 = (((x218 * x13) + x219) * Val(16));
  Val x487 = (((x222 * x14) + x223) * Val(32));
  Val x488 = (((x226 * x15) + x227) * Val(64));
  Val x489 = (((x230 * x16) + x231) * Val(128));
  Val x490 = (((x234 * x17) + x235) * Val(256));
  Val x491 = (((x238 * x18) + x239) * Val(512));
  Val x492 = (((x242 * x19) + x243) * Val(1024));
  Val x493 = (((x246 * x20) + x247) * Val(2048));
  Val x494 = (((x250 * x21) + x251) * Val(4096));
  Val x495 = (((x254 * x22) + x255) * Val(8192));
  Val x496 = (((x258 * x23) + x259) * Val(16384));
  Val x497 = (((x262 * x24) + x263) * Val(32768));
  Val x498 = (((x266 * x25) + x267) * Val(65536));
  Val x499 = (((x270 * x26) + x271) * Val(131072));
  Val x500 = (((x274 * x27) + x275) * Val(262144));
  Val x501 = (((x278 * x28) + x279) * Val(524288));
  Val x502 = (((x282 * x29) + x283) * Val(1048576));
  Val x503 = (((x202 * x9) + x203) + x483);
  Val x504 = (((x503 + x484) + x485) + x486);
  Val x505 = (((x504 + x487) + x488) + x489);
  Val x506 = (((x505 + x490) + x491) + x492);
  Val x507 = (((x506 + x493) + x494) + x495);
  Val x508 = (((x507 + x496) + x497) + x498);
  Val x509 = (((x508 + x499) + x500) + x501);
  NondetRegStruct x510 = exec_Reg(ctx, (x509 + x502), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:424)
  Val x511 = (((x291 * x41) + x292) * Val(2));
  Val x512 = (((x295 * x42) + x296) * Val(4));
  Val x513 = (((x299 * x43) + x300) * Val(8));
  Val x514 = (((x303 * x44) + x304) * Val(16));
  Val x515 = (((x307 * x45) + x308) * Val(32));
  Val x516 = (((x311 * x46) + x312) * Val(64));
  Val x517 = (((x315 * x47) + x316) * Val(128));
  Val x518 = (((x319 * x48) + x320) * Val(256));
  Val x519 = (((x323 * x49) + x324) * Val(512));
  Val x520 = (((x327 * x50) + x328) * Val(1024));
  Val x521 = (((x331 * x51) + x332) * Val(2048));
  Val x522 = (((x335 * x52) + x336) * Val(4096));
  Val x523 = (((x339 * x53) + x340) * Val(8192));
  Val x524 = (((x343 * x54) + x344) * Val(16384));
  Val x525 = (((x347 * x55) + x348) * Val(32768));
  Val x526 = (((x351 * x56) + x352) * Val(65536));
  Val x527 = (((x355 * x57) + x356) * Val(131072));
  Val x528 = (((x359 * x58) + x360) * Val(262144));
  Val x529 = (((x363 * x59) + x364) * Val(524288));
  Val x530 = (((x367 * x60) + x368) * Val(1048576));
  Val x531 = (((x287 * x30) + x288) + x511);
  Val x532 = (((x531 + x512) + x513) + x514);
  Val x533 = (((x532 + x515) + x516) + x517);
  Val x534 = (((x533 + x518) + x519) + x520);
  Val x535 = (((x534 + x521) + x522) + x523);
  Val x536 = (((x535 + x524) + x525) + x526);
  Val x537 = (((x536 + x527) + x528) + x529);
  NondetRegStruct x538 = exec_Reg(ctx, (x537 + x530), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:427)
  Val22Array x539 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x540 = exec_RetTuple(
      ctx,
      x539,
      x539,
      x539,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x539,
      Val22Array{x482._super, x510._super, x538._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(6),
      Val(8),
      x4.rnd._super,
      x4.blk._super,
      x4.midx._super,
      LAYOUT_LOOKUP(layout2, _super));
  return x540;
}
RetTupleStruct execRhoMinor0_4__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_4__3_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 7, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[18]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[19]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[20]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[9]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[10]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[11]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(7),
                    Val(8),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_4__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_4__3_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_4__3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 8, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrC;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[13]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[14]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[15]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x395 * x393) + x396) * Val(2));
  Val x428 = (((x400 * x398) + x401) * Val(4));
  Val x429 = (((x405 * x403) + x406) * Val(8));
  Val x430 = (((x410 * x408) + x411) * Val(16));
  Val x431 = (((x415 * x413) + x416) * Val(32));
  Val x432 = (((x420 * x418) + x421) * Val(64));
  Val x433 = (((x425 * x423) + x426) * Val(128));
  Val x434 = (((x106 * x104) + x107) * Val(256));
  Val x435 = (((x111 * x109) + x112) * Val(512));
  Val x436 = (((x116 * x114) + x117) * Val(1024));
  Val x437 = (((x121 * x119) + x122) * Val(2048));
  Val x438 = (((x126 * x124) + x127) * Val(4096));
  Val x439 = (((x131 * x129) + x132) * Val(8192));
  Val x440 = (((x136 * x134) + x137) * Val(16384));
  Val x441 = (((x141 * x139) + x142) * Val(32768));
  Val x442 = (((x146 * x144) + x147) * Val(65536));
  Val x443 = (((x151 * x149) + x152) * Val(131072));
  Val x444 = (((x156 * x154) + x157) * Val(262144));
  Val x445 = (((x161 * x159) + x162) * Val(524288));
  Val x446 = (((x166 * x164) + x167) * Val(1048576));
  Val x447 = (((x171 * x169) + x172) * Val(2097152));
  Val x448 = (((x390 * x388) + x391) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x181 * x179) + x182) * Val(2));
  Val x457 = (((x186 * x184) + x187) * Val(4));
  Val x458 = (((x191 * x189) + x192) * Val(8));
  Val x459 = (((x196 * x194) + x197) * Val(16));
  Val x460 = (((x201 * x199) + x202) * Val(32));
  Val x461 = (((x206 * x204) + x207) * Val(64));
  Val x462 = (((x211 * x209) + x212) * Val(128));
  Val x463 = (((x218 * x216) + x219) * Val(256));
  Val x464 = (((x223 * x221) + x224) * Val(512));
  Val x465 = (((x228 * x226) + x229) * Val(1024));
  Val x466 = (((x233 * x231) + x234) * Val(2048));
  Val x467 = (((x238 * x236) + x239) * Val(4096));
  Val x468 = (((x243 * x241) + x244) * Val(8192));
  Val x469 = (((x248 * x246) + x249) * Val(16384));
  Val x470 = (((x253 * x251) + x254) * Val(32768));
  Val x471 = (((x258 * x256) + x259) * Val(65536));
  Val x472 = (((x263 * x261) + x264) * Val(131072));
  Val x473 = (((x268 * x266) + x269) * Val(262144));
  Val x474 = (((x273 * x271) + x274) * Val(524288));
  Val x475 = (((x278 * x276) + x279) * Val(1048576));
  Val x476 = (((x176 * x174) + x177) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x288 * x286) + x289) * Val(2));
  Val x485 = (((x293 * x291) + x294) * Val(4));
  Val x486 = (((x298 * x296) + x299) * Val(8));
  Val x487 = (((x303 * x301) + x304) * Val(16));
  Val x488 = (((x308 * x306) + x309) * Val(32));
  Val x489 = (((x313 * x311) + x314) * Val(64));
  Val x490 = (((x318 * x316) + x319) * Val(128));
  Val x491 = (((x325 * x323) + x326) * Val(256));
  Val x492 = (((x330 * x328) + x331) * Val(512));
  Val x493 = (((x335 * x333) + x336) * Val(1024));
  Val x494 = (((x340 * x338) + x341) * Val(2048));
  Val x495 = (((x345 * x343) + x346) * Val(4096));
  Val x496 = (((x350 * x348) + x351) * Val(8192));
  Val x497 = (((x355 * x353) + x356) * Val(16384));
  Val x498 = (((x360 * x358) + x361) * Val(32768));
  Val x499 = (((x365 * x363) + x366) * Val(65536));
  Val x500 = (((x370 * x368) + x371) * Val(131072));
  Val x501 = (((x375 * x373) + x376) * Val(262144));
  Val x502 = (((x380 * x378) + x381) * Val(524288));
  Val x503 = (((x385 * x383) + x386) * Val(1048576));
  Val x504 = (((x283 * x281) + x284) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:342)
  Val22Array x512 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x513 = exec_RetTuple(
      ctx,
      x512,
      x512,
      x512,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x512,
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(8),
      Val(8),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x3, arm0));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x514 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x514;
}
RetTupleStruct execRhoMinor3_3_(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<RhoMinor3_3__SuperLayout> layout2) {
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:432)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:433)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:434)
  RetTupleStruct x5 = back_RetTuple(ctx, 4, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:435)
  RetTupleStruct x6 = back_RetTuple(ctx, 6, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:436)
  RetTupleStruct x7 = back_RetTuple(ctx, 7, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  RetTupleStruct x8 = back_RetTuple(ctx, 9, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:439)
  BoundLayout<RhoMinor3_3_Arm1_SuperLayout> x9 = LAYOUT_LOOKUP(layout2, arm1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:453)
  BoundLayout<RhoMinor3_3_Arm1Arm1_SuperLayout> x10 = LAYOUT_LOOKUP(x9, arm1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:465)
  BoundLayout<RhoMinor3_3_Arm1Arm1Arm1_SuperLayout> x11 = LAYOUT_LOOKUP(x10, arm1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:436)
  NondetRegStruct22Array x12 = x7.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:435)
  NondetRegStruct22Array x13 = x6.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:434)
  NondetRegStruct22Array x14 = x5.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:433)
  NondetRegStruct22Array x15 = x4.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:432)
  NondetRegStruct22Array x16 = x3.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  NondetRegStruct22Array x17 = x8.arrC;
  NondetRegStruct22Array x18 = x8.arrA;
  NondetRegStruct22Array x19 = x8.arrB;
  NondetRegStruct24Array x20 = x8.arrD;
  Val22Array x21 =
      Val22Array{x18[0]._super,  x18[1]._super,  x18[2]._super,  x18[3]._super,  x18[4]._super,
                 x18[5]._super,  x18[6]._super,  x18[7]._super,  x18[8]._super,  x18[9]._super,
                 x18[10]._super, x18[11]._super, x18[12]._super, x18[13]._super, x18[14]._super,
                 x18[15]._super, x18[16]._super, x18[17]._super, x18[18]._super, x18[19]._super,
                 x18[20]._super, x18[21]._super};
  Val22Array x22 =
      Val22Array{x19[0]._super,  x19[1]._super,  x19[2]._super,  x19[3]._super,  x19[4]._super,
                 x19[5]._super,  x19[6]._super,  x19[7]._super,  x19[8]._super,  x19[9]._super,
                 x19[10]._super, x19[11]._super, x19[12]._super, x19[13]._super, x19[14]._super,
                 x19[15]._super, x19[16]._super, x19[17]._super, x19[18]._super, x19[19]._super,
                 x19[20]._super, x19[21]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:484)
  Val22Array x23 = Val22Array{
      x17[0]._super,  x12[0]._super,  x12[1]._super,  x12[2]._super, x13[0]._super,  x13[1]._super,
      x13[2]._super,  x14[0]._super,  x14[1]._super,  x14[2]._super, x15[0]._super,  x15[1]._super,
      x15[2]._super,  x16[0]._super,  x16[1]._super,  x16[2]._super, x17[16]._super, x17[17]._super,
      x17[18]._super, x17[19]._super, x17[20]._super, x17[21]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  Val24Array x24 =
      Val24Array{x20[0]._super,  x20[1]._super,  x20[2]._super,  x20[3]._super,  x20[4]._super,
                 x20[5]._super,  x20[6]._super,  x20[7]._super,  x20[8]._super,  x20[9]._super,
                 x20[10]._super, x20[11]._super, x20[12]._super, x20[13]._super, x20[14]._super,
                 x20[15]._super, x20[16]._super, x20[17]._super, x20[18]._super, x20[19]._super,
                 x20[20]._super, x20[21]._super, x20[22]._super, x20[23]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:485)
  Val22Array x25 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x26 = exec_RetTuple(ctx,
                                     x21,
                                     x22,
                                     x23,
                                     x24,
                                     x25,
                                     x25,
                                     Val(0),
                                     Val(9),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(x11, arm0));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:477)
  RetTupleStruct x27 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x11, _super));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:465)
  RetTupleStruct x28 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x10, _super));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:453)
  RetTupleStruct x29 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x9, _super));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:439)
  RetTupleStruct x30 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(layout2, _super));
  return x30;
}
RetTupleStruct execRhoMajor_3_(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<RhoMajor_3_Layout> layout2) {
  // rho_major(zirgen/circuit/keccak/keccak.zir:529)
  BoundLayout<RhoMajor_3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_major(zirgen/circuit/keccak/keccak.zir:528)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_9_Struct x5 = exec_OneHot_9_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct9Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:530)
    RetTupleStruct x8 = execRhoMinor0_0__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm0));
    x7 = x8;
  } else if (to_size_t(x6[1]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:531)
    RetTupleStruct x9 = execRhoMinor1_0__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x9;
  } else if (to_size_t(x6[2]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:532)
    RetTupleStruct x10 = execRhoMinor2_0__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x10;
  } else if (to_size_t(x6[3]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:533)
    RetTupleStruct x11 = execRhoMinor0_2__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x11;
  } else if (to_size_t(x6[4]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:534)
    RetTupleStruct x12 = execRhoMinor1_2__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x12;
  } else if (to_size_t(x6[5]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:535)
    RetTupleStruct x13 = execRhoMinor2_2__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm5));
    x7 = x13;
  } else if (to_size_t(x6[6]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:536)
    RetTupleStruct x14 = execRhoMinor0_4__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm6));
    x7 = x14;
  } else if (to_size_t(x6[7]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:537)
    RetTupleStruct x15 = execRhoMinor1_4__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x15;
  } else if (to_size_t(x6[8]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:538)
    RetTupleStruct x16 = execRhoMinor3_3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x16;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // rho_major(zirgen/circuit/keccak/keccak.zir:529)
  RetTupleStruct x17 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x17;
}
RetTupleStruct execRhoMinor0_0__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_0__4_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[21]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[22]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[23]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[12]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[13]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[14]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(1),
                    Val(9),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_0__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_0__4_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_0__4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct22Array x6 = x4.arrC;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[16]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[17]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[18]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x345 * x343) + x346) * Val(2));
  Val x428 = (((x350 * x348) + x351) * Val(4));
  Val x429 = (((x355 * x353) + x356) * Val(8));
  Val x430 = (((x360 * x358) + x361) * Val(16));
  Val x431 = (((x365 * x363) + x366) * Val(32));
  Val x432 = (((x370 * x368) + x371) * Val(64));
  Val x433 = (((x375 * x373) + x376) * Val(128));
  Val x434 = (((x380 * x378) + x381) * Val(256));
  Val x435 = (((x385 * x383) + x386) * Val(512));
  Val x436 = (((x390 * x388) + x391) * Val(1024));
  Val x437 = (((x395 * x393) + x396) * Val(2048));
  Val x438 = (((x400 * x398) + x401) * Val(4096));
  Val x439 = (((x405 * x403) + x406) * Val(8192));
  Val x440 = (((x410 * x408) + x411) * Val(16384));
  Val x441 = (((x415 * x413) + x416) * Val(32768));
  Val x442 = (((x420 * x418) + x421) * Val(65536));
  Val x443 = (((x425 * x423) + x426) * Val(131072));
  Val x444 = (((x106 * x104) + x107) * Val(262144));
  Val x445 = (((x111 * x109) + x112) * Val(524288));
  Val x446 = (((x116 * x114) + x117) * Val(1048576));
  Val x447 = (((x121 * x119) + x122) * Val(2097152));
  Val x448 = (((x340 * x338) + x341) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x131 * x129) + x132) * Val(2));
  Val x457 = (((x136 * x134) + x137) * Val(4));
  Val x458 = (((x141 * x139) + x142) * Val(8));
  Val x459 = (((x146 * x144) + x147) * Val(16));
  Val x460 = (((x151 * x149) + x152) * Val(32));
  Val x461 = (((x156 * x154) + x157) * Val(64));
  Val x462 = (((x161 * x159) + x162) * Val(128));
  Val x463 = (((x166 * x164) + x167) * Val(256));
  Val x464 = (((x171 * x169) + x172) * Val(512));
  Val x465 = (((x176 * x174) + x177) * Val(1024));
  Val x466 = (((x181 * x179) + x182) * Val(2048));
  Val x467 = (((x186 * x184) + x187) * Val(4096));
  Val x468 = (((x191 * x189) + x192) * Val(8192));
  Val x469 = (((x196 * x194) + x197) * Val(16384));
  Val x470 = (((x201 * x199) + x202) * Val(32768));
  Val x471 = (((x206 * x204) + x207) * Val(65536));
  Val x472 = (((x211 * x209) + x212) * Val(131072));
  Val x473 = (((x218 * x216) + x219) * Val(262144));
  Val x474 = (((x223 * x221) + x224) * Val(524288));
  Val x475 = (((x228 * x226) + x229) * Val(1048576));
  Val x476 = (((x126 * x124) + x127) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x238 * x236) + x239) * Val(2));
  Val x485 = (((x243 * x241) + x244) * Val(4));
  Val x486 = (((x248 * x246) + x249) * Val(8));
  Val x487 = (((x253 * x251) + x254) * Val(16));
  Val x488 = (((x258 * x256) + x259) * Val(32));
  Val x489 = (((x263 * x261) + x264) * Val(64));
  Val x490 = (((x268 * x266) + x269) * Val(128));
  Val x491 = (((x273 * x271) + x274) * Val(256));
  Val x492 = (((x278 * x276) + x279) * Val(512));
  Val x493 = (((x283 * x281) + x284) * Val(1024));
  Val x494 = (((x288 * x286) + x289) * Val(2048));
  Val x495 = (((x293 * x291) + x294) * Val(4096));
  Val x496 = (((x298 * x296) + x299) * Val(8192));
  Val x497 = (((x303 * x301) + x304) * Val(16384));
  Val x498 = (((x308 * x306) + x309) * Val(32768));
  Val x499 = (((x313 * x311) + x314) * Val(65536));
  Val x500 = (((x318 * x316) + x319) * Val(131072));
  Val x501 = (((x325 * x323) + x326) * Val(262144));
  Val x502 = (((x330 * x328) + x331) * Val(524288));
  Val x503 = (((x335 * x333) + x336) * Val(1048576));
  Val x504 = (((x233 * x231) + x234) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_0__4_Arm1_SuperLayout> x512 = LAYOUT_LOOKUP(x3, arm1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct24Array x513 = x4.arrD;
  Val x514 = x513[9]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:345)
  ToBits_22_Struct x515 = exec_ToBits_22_(ctx, x514, LAYOUT_LOOKUP(x512, unpackM1));
  NondetRegStruct22Array x516 = x515._super;
  Val x517 = x516[0]._super;
  Val x518 = x516[1]._super;
  Val x519 = x516[2]._super;
  Val x520 = x516[3]._super;
  Val x521 = x516[4]._super;
  Val x522 = x516[5]._super;
  Val x523 = x516[6]._super;
  Val x524 = x516[7]._super;
  Val x525 = x516[8]._super;
  Val x526 = x516[9]._super;
  Val x527 = x516[10]._super;
  Val x528 = x516[11]._super;
  Val x529 = x516[12]._super;
  Val x530 = x516[13]._super;
  Val x531 = x516[14]._super;
  Val x532 = x516[15]._super;
  Val x533 = x516[16]._super;
  Val x534 = x516[17]._super;
  Val x535 = x516[18]._super;
  Val x536 = x516[19]._super;
  Val x537 = x516[20]._super;
  Val x538 = x516[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:346)
  Val x539 = (((x517 + (x518 * Val(2))) + (x519 * Val(4))) + (x520 * Val(8)));
  Val x540 = (((x539 + (x521 * Val(16))) + (x522 * Val(32))) + (x523 * Val(64)));
  Val x541 = (((x540 + (x524 * Val(128))) + (x525 * Val(256))) + (x526 * Val(512)));
  Val x542 = (((x541 + (x527 * Val(1024))) + (x528 * Val(2048))) + (x529 * Val(4096)));
  Val x543 = (((x542 + (x530 * Val(8192))) + (x531 * Val(16384))) + (x532 * Val(32768)));
  Val x544 = (((x543 + (x533 * Val(65536))) + (x534 * Val(131072))) + (x535 * Val(262144)));
  Val x545 = (((x544 + (x536 * Val(524288))) + (x537 * Val(1048576))) + (x538 * Val(2097152)));
  EQZ((x545 - x514), "rho_minor1(zirgen/circuit/keccak/keccak.zir:346)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x546 = x513[10]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:349)
  ToBits_21_Struct x547 = exec_ToBits_21_(ctx, x546, LAYOUT_LOOKUP(x512, unpackM2));
  NondetRegStruct21Array x548 = x547._super;
  Val x549 = x548[0]._super;
  Val x550 = x548[1]._super;
  Val x551 = x548[2]._super;
  Val x552 = x548[3]._super;
  Val x553 = x548[4]._super;
  Val x554 = x548[5]._super;
  Val x555 = x548[6]._super;
  Val x556 = x548[7]._super;
  Val x557 = x548[8]._super;
  Val x558 = x548[9]._super;
  Val x559 = x548[10]._super;
  Val x560 = x548[11]._super;
  Val x561 = x548[12]._super;
  Val x562 = x548[13]._super;
  Val x563 = x548[14]._super;
  Val x564 = x548[15]._super;
  Val x565 = x548[16]._super;
  Val x566 = x548[17]._super;
  Val x567 = x548[18]._super;
  Val x568 = x548[19]._super;
  Val x569 = x548[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:350)
  Val x570 = (((x549 + (x550 * Val(2))) + (x551 * Val(4))) + (x552 * Val(8)));
  Val x571 = (((x570 + (x553 * Val(16))) + (x554 * Val(32))) + (x555 * Val(64)));
  Val x572 = (((x571 + (x556 * Val(128))) + (x557 * Val(256))) + (x558 * Val(512)));
  Val x573 = (((x572 + (x559 * Val(1024))) + (x560 * Val(2048))) + (x561 * Val(4096)));
  Val x574 = (((x573 + (x562 * Val(8192))) + (x563 * Val(16384))) + (x564 * Val(32768)));
  Val x575 = (((x574 + (x565 * Val(65536))) + (x566 * Val(131072))) + (x567 * Val(262144)));
  Val x576 = (((x575 + (x568 * Val(524288))) + (x569 * Val(1048576))) - x546);
  EQZ(x576, "rho_minor1(zirgen/circuit/keccak/keccak.zir:350)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x577 = x513[11]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:354)
  ToBits_21_Struct x578 = exec_ToBits_21_(ctx, x577, LAYOUT_LOOKUP(x512, unpackM3));
  NondetRegStruct21Array x579 = x578._super;
  Val x580 = x579[0]._super;
  Val x581 = x579[1]._super;
  Val x582 = x579[2]._super;
  Val x583 = x579[3]._super;
  Val x584 = x579[4]._super;
  Val x585 = x579[5]._super;
  Val x586 = x579[6]._super;
  Val x587 = x579[7]._super;
  Val x588 = x579[8]._super;
  Val x589 = x579[9]._super;
  Val x590 = x579[10]._super;
  Val x591 = x579[11]._super;
  Val x592 = x579[12]._super;
  Val x593 = x579[13]._super;
  Val x594 = x579[14]._super;
  Val x595 = x579[15]._super;
  Val x596 = x579[16]._super;
  Val x597 = x579[17]._super;
  Val x598 = x579[18]._super;
  Val x599 = x579[19]._super;
  Val x600 = x579[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:355)
  Val x601 = (((x580 + (x581 * Val(2))) + (x582 * Val(4))) + (x583 * Val(8)));
  Val x602 = (((x601 + (x584 * Val(16))) + (x585 * Val(32))) + (x586 * Val(64)));
  Val x603 = (((x602 + (x587 * Val(128))) + (x588 * Val(256))) + (x589 * Val(512)));
  Val x604 = (((x603 + (x590 * Val(1024))) + (x591 * Val(2048))) + (x592 * Val(4096)));
  Val x605 = (((x604 + (x593 * Val(8192))) + (x594 * Val(16384))) + (x595 * Val(32768)));
  Val x606 = (((x605 + (x596 * Val(65536))) + (x597 * Val(131072))) + (x598 * Val(262144)));
  Val x607 = (((x606 + (x599 * Val(524288))) + (x600 * Val(1048576))) - x577);
  EQZ(x607, "rho_minor1(zirgen/circuit/keccak/keccak.zir:355)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:358)
  RetTupleStruct x608 = exec_RetTuple(
      ctx,
      Val22Array{x517, x518, x519, x520, x521, x522, x523, x524, x525, x526, x527,
                 x528, x529, x530, x531, x532, x533, x534, x535, x536, x537, x538},
      Val22Array{x549, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559,
                 x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, Val(0)},
      Val22Array{x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x590,
                 x591, x592, x593, x594, x595, x596, x597, x598, x599, x600, Val(0)},
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(2),
      Val(9),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x512, _super));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x609 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x609;
}
RetTupleStruct execRhoMinor2_0__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor2_0__4_Layout> layout2) {
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  RetTupleStruct x3 = back_RetTuple(ctx, 3, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct24Array x5 = x3.arrD;
  Val x6 = x5[15]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:368)
  ToBits_22_Struct x7 = exec_ToBits_22_(ctx, x6, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  Val x30 = x8[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:369)
  Val x31 = (((x9 + (x10 * Val(2))) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) + (x30 * Val(2097152)));
  EQZ((x37 - x6), "rho_minor2(zirgen/circuit/keccak/keccak.zir:369)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x38 = x5[16]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:372)
  ToBits_21_Struct x39 = exec_ToBits_21_(ctx, x38, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x40 = x39._super;
  Val x41 = x40[0]._super;
  Val x42 = x40[1]._super;
  Val x43 = x40[2]._super;
  Val x44 = x40[3]._super;
  Val x45 = x40[4]._super;
  Val x46 = x40[5]._super;
  Val x47 = x40[6]._super;
  Val x48 = x40[7]._super;
  Val x49 = x40[8]._super;
  Val x50 = x40[9]._super;
  Val x51 = x40[10]._super;
  Val x52 = x40[11]._super;
  Val x53 = x40[12]._super;
  Val x54 = x40[13]._super;
  Val x55 = x40[14]._super;
  Val x56 = x40[15]._super;
  Val x57 = x40[16]._super;
  Val x58 = x40[17]._super;
  Val x59 = x40[18]._super;
  Val x60 = x40[19]._super;
  Val x61 = x40[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:373)
  Val x62 = (((x41 + (x42 * Val(2))) + (x43 * Val(4))) + (x44 * Val(8)));
  Val x63 = (((x62 + (x45 * Val(16))) + (x46 * Val(32))) + (x47 * Val(64)));
  Val x64 = (((x63 + (x48 * Val(128))) + (x49 * Val(256))) + (x50 * Val(512)));
  Val x65 = (((x64 + (x51 * Val(1024))) + (x52 * Val(2048))) + (x53 * Val(4096)));
  Val x66 = (((x65 + (x54 * Val(8192))) + (x55 * Val(16384))) + (x56 * Val(32768)));
  Val x67 = (((x66 + (x57 * Val(65536))) + (x58 * Val(131072))) + (x59 * Val(262144)));
  Val x68 = (((x67 + (x60 * Val(524288))) + (x61 * Val(1048576))) - x38);
  EQZ(x68, "rho_minor2(zirgen/circuit/keccak/keccak.zir:373)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x69 = x5[17]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:376)
  ToBits_21_Struct x70 = exec_ToBits_21_(ctx, x69, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:377)
  Val x93 = (((x72 + (x73 * Val(2))) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x94 = (((x93 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x95 = (((x94 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x96 = (((x95 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x97 = (((x96 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x98 = (((x97 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x99 = (((x98 + (x91 * Val(524288))) + (x92 * Val(1048576))) - x69);
  EQZ(x99, "rho_minor2(zirgen/circuit/keccak/keccak.zir:377)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct22Array x100 = x3.arrC;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:383)
  Val x101 = x100[19]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:390)
  ToBits_22_Struct x102 = exec_ToBits_22_(ctx, x101, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x103 = x102._super;
  Val x104 = x103[0]._super;
  Val x105 = x103[1]._super;
  Val x106 = x103[2]._super;
  Val x107 = x103[3]._super;
  Val x108 = x103[4]._super;
  Val x109 = x103[5]._super;
  Val x110 = x103[6]._super;
  Val x111 = x103[7]._super;
  Val x112 = x103[8]._super;
  Val x113 = x103[9]._super;
  Val x114 = x103[10]._super;
  Val x115 = x103[11]._super;
  Val x116 = x103[12]._super;
  Val x117 = x103[13]._super;
  Val x118 = x103[14]._super;
  Val x119 = x103[15]._super;
  Val x120 = x103[16]._super;
  Val x121 = x103[17]._super;
  Val x122 = x103[18]._super;
  Val x123 = x103[19]._super;
  Val x124 = x103[20]._super;
  Val x125 = x103[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:391)
  Val x126 = (((x104 + (x105 * Val(2))) + (x106 * Val(4))) + (x107 * Val(8)));
  Val x127 = (((x126 + (x108 * Val(16))) + (x109 * Val(32))) + (x110 * Val(64)));
  Val x128 = (((x127 + (x111 * Val(128))) + (x112 * Val(256))) + (x113 * Val(512)));
  Val x129 = (((x128 + (x114 * Val(1024))) + (x115 * Val(2048))) + (x116 * Val(4096)));
  Val x130 = (((x129 + (x117 * Val(8192))) + (x118 * Val(16384))) + (x119 * Val(32768)));
  Val x131 = (((x130 + (x120 * Val(65536))) + (x121 * Val(131072))) + (x122 * Val(262144)));
  Val x132 = (((x131 + (x123 * Val(524288))) + (x124 * Val(1048576))) + (x125 * Val(2097152)));
  EQZ((x132 - x101), "rho_minor2(zirgen/circuit/keccak/keccak.zir:391)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:395)
  Val x133 = x100[20]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:402)
  ToBits_21_Struct x134 = exec_ToBits_21_(ctx, x133, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x135 = x134._super;
  Val x136 = x135[0]._super;
  Val x137 = x135[1]._super;
  Val x138 = x135[2]._super;
  Val x139 = x135[3]._super;
  Val x140 = x135[4]._super;
  Val x141 = x135[5]._super;
  Val x142 = x135[6]._super;
  Val x143 = x135[7]._super;
  Val x144 = x135[8]._super;
  Val x145 = x135[9]._super;
  Val x146 = x135[10]._super;
  Val x147 = x135[11]._super;
  Val x148 = x135[12]._super;
  Val x149 = x135[13]._super;
  Val x150 = x135[14]._super;
  Val x151 = x135[15]._super;
  Val x152 = x135[16]._super;
  Val x153 = x135[17]._super;
  Val x154 = x135[18]._super;
  Val x155 = x135[19]._super;
  Val x156 = x135[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:403)
  Val x157 = (((x136 + (x137 * Val(2))) + (x138 * Val(4))) + (x139 * Val(8)));
  Val x158 = (((x157 + (x140 * Val(16))) + (x141 * Val(32))) + (x142 * Val(64)));
  Val x159 = (((x158 + (x143 * Val(128))) + (x144 * Val(256))) + (x145 * Val(512)));
  Val x160 = (((x159 + (x146 * Val(1024))) + (x147 * Val(2048))) + (x148 * Val(4096)));
  Val x161 = (((x160 + (x149 * Val(8192))) + (x150 * Val(16384))) + (x151 * Val(32768)));
  Val x162 = (((x161 + (x152 * Val(65536))) + (x153 * Val(131072))) + (x154 * Val(262144)));
  Val x163 = (((x162 + (x155 * Val(524288))) + (x156 * Val(1048576))) - x133);
  EQZ(x163, "rho_minor2(zirgen/circuit/keccak/keccak.zir:403)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:407)
  Val x164 = x100[21]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:414)
  ToBits_21_Struct x165 = exec_ToBits_21_(ctx, x164, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x166 = x165._super;
  Val x167 = x166[0]._super;
  Val x168 = x166[1]._super;
  Val x169 = x166[2]._super;
  Val x170 = x166[3]._super;
  Val x171 = x166[4]._super;
  Val x172 = x166[5]._super;
  Val x173 = x166[6]._super;
  Val x174 = x166[7]._super;
  Val x175 = x166[8]._super;
  Val x176 = x166[9]._super;
  Val x177 = x166[10]._super;
  Val x178 = x166[11]._super;
  Val x179 = x166[12]._super;
  Val x180 = x166[13]._super;
  Val x181 = x166[14]._super;
  Val x182 = x166[15]._super;
  Val x183 = x166[16]._super;
  Val x184 = x166[17]._super;
  Val x185 = x166[18]._super;
  Val x186 = x166[19]._super;
  Val x187 = x166[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:415)
  Val x188 = (((x167 + (x168 * Val(2))) + (x169 * Val(4))) + (x170 * Val(8)));
  Val x189 = (((x188 + (x171 * Val(16))) + (x172 * Val(32))) + (x173 * Val(64)));
  Val x190 = (((x189 + (x174 * Val(128))) + (x175 * Val(256))) + (x176 * Val(512)));
  Val x191 = (((x190 + (x177 * Val(1024))) + (x178 * Val(2048))) + (x179 * Val(4096)));
  Val x192 = (((x191 + (x180 * Val(8192))) + (x181 * Val(16384))) + (x182 * Val(32768)));
  Val x193 = (((x192 + (x183 * Val(65536))) + (x184 * Val(131072))) + (x185 * Val(262144)));
  Val x194 = (((x193 + (x186 * Val(524288))) + (x187 * Val(1048576))) - x164);
  EQZ(x194, "rho_minor2(zirgen/circuit/keccak/keccak.zir:415)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x195 = x4.arrA;
  Val x196 = x195[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x197 = ((Val(1) - x104) * (Val(1) - x196));
  Val x198 = ((x104 * x196) + x197);
  Val x199 = ((Val(1) - x198) * (Val(1) - x92));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x200 = x195[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x201 = ((Val(1) - x105) * (Val(1) - x200));
  Val x202 = ((x105 * x200) + x201);
  Val x203 = ((Val(1) - x202) * (Val(1) - x9));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x204 = x195[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x205 = ((Val(1) - x106) * (Val(1) - x204));
  Val x206 = ((x106 * x204) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x10));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x208 = x195[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x209 = ((Val(1) - x107) * (Val(1) - x208));
  Val x210 = ((x107 * x208) + x209);
  Val x211 = ((Val(1) - x210) * (Val(1) - x11));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x212 = x195[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x213 = ((Val(1) - x108) * (Val(1) - x212));
  Val x214 = ((x108 * x212) + x213);
  Val x215 = ((Val(1) - x214) * (Val(1) - x12));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x216 = x195[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x217 = ((Val(1) - x109) * (Val(1) - x216));
  Val x218 = ((x109 * x216) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x13));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x220 = x195[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x221 = ((Val(1) - x110) * (Val(1) - x220));
  Val x222 = ((x110 * x220) + x221);
  Val x223 = ((Val(1) - x222) * (Val(1) - x14));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x224 = x195[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x225 = ((Val(1) - x111) * (Val(1) - x224));
  Val x226 = ((x111 * x224) + x225);
  Val x227 = ((Val(1) - x226) * (Val(1) - x15));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x228 = x195[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x229 = ((Val(1) - x112) * (Val(1) - x228));
  Val x230 = ((x112 * x228) + x229);
  Val x231 = ((Val(1) - x230) * (Val(1) - x16));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x232 = x195[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x233 = ((Val(1) - x113) * (Val(1) - x232));
  Val x234 = ((x113 * x232) + x233);
  Val x235 = ((Val(1) - x234) * (Val(1) - x17));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x236 = x195[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x237 = ((Val(1) - x114) * (Val(1) - x236));
  Val x238 = ((x114 * x236) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x18));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x240 = x195[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x241 = ((Val(1) - x115) * (Val(1) - x240));
  Val x242 = ((x115 * x240) + x241);
  Val x243 = ((Val(1) - x242) * (Val(1) - x19));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x244 = x195[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x245 = ((Val(1) - x116) * (Val(1) - x244));
  Val x246 = ((x116 * x244) + x245);
  Val x247 = ((Val(1) - x246) * (Val(1) - x20));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x248 = x195[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x249 = ((Val(1) - x117) * (Val(1) - x248));
  Val x250 = ((x117 * x248) + x249);
  Val x251 = ((Val(1) - x250) * (Val(1) - x21));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x252 = x195[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x253 = ((Val(1) - x118) * (Val(1) - x252));
  Val x254 = ((x118 * x252) + x253);
  Val x255 = ((Val(1) - x254) * (Val(1) - x22));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x256 = x195[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x257 = ((Val(1) - x119) * (Val(1) - x256));
  Val x258 = ((x119 * x256) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x23));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x260 = x195[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x261 = ((Val(1) - x120) * (Val(1) - x260));
  Val x262 = ((x120 * x260) + x261);
  Val x263 = ((Val(1) - x262) * (Val(1) - x24));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x264 = x195[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x265 = ((Val(1) - x121) * (Val(1) - x264));
  Val x266 = ((x121 * x264) + x265);
  Val x267 = ((Val(1) - x266) * (Val(1) - x25));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x268 = x195[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x269 = ((Val(1) - x122) * (Val(1) - x268));
  Val x270 = ((x122 * x268) + x269);
  Val x271 = ((Val(1) - x270) * (Val(1) - x26));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x272 = x195[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x273 = ((Val(1) - x123) * (Val(1) - x272));
  Val x274 = ((x123 * x272) + x273);
  Val x275 = ((Val(1) - x274) * (Val(1) - x27));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x276 = x195[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x277 = ((Val(1) - x124) * (Val(1) - x276));
  Val x278 = ((x124 * x276) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x28));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x280 = x195[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x281 = ((Val(1) - x125) * (Val(1) - x280));
  Val x282 = ((x125 * x280) + x281);
  Val x283 = ((Val(1) - x282) * (Val(1) - x29));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x284 = x4.arrB;
  Val x285 = x284[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x286 = ((Val(1) - x136) * (Val(1) - x285));
  Val x287 = ((x136 * x285) + x286);
  Val x288 = ((Val(1) - x287) * (Val(1) - x30));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x289 = x284[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x290 = ((Val(1) - x137) * (Val(1) - x289));
  Val x291 = ((x137 * x289) + x290);
  Val x292 = ((Val(1) - x291) * (Val(1) - x41));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x293 = x284[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x294 = ((Val(1) - x138) * (Val(1) - x293));
  Val x295 = ((x138 * x293) + x294);
  Val x296 = ((Val(1) - x295) * (Val(1) - x42));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x297 = x284[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x298 = ((Val(1) - x139) * (Val(1) - x297));
  Val x299 = ((x139 * x297) + x298);
  Val x300 = ((Val(1) - x299) * (Val(1) - x43));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x301 = x284[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x302 = ((Val(1) - x140) * (Val(1) - x301));
  Val x303 = ((x140 * x301) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x44));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x305 = x284[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x306 = ((Val(1) - x141) * (Val(1) - x305));
  Val x307 = ((x141 * x305) + x306);
  Val x308 = ((Val(1) - x307) * (Val(1) - x45));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x309 = x284[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x310 = ((Val(1) - x142) * (Val(1) - x309));
  Val x311 = ((x142 * x309) + x310);
  Val x312 = ((Val(1) - x311) * (Val(1) - x46));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x313 = x284[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x314 = ((Val(1) - x143) * (Val(1) - x313));
  Val x315 = ((x143 * x313) + x314);
  Val x316 = ((Val(1) - x315) * (Val(1) - x47));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x317 = x284[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x318 = ((Val(1) - x144) * (Val(1) - x317));
  Val x319 = ((x144 * x317) + x318);
  Val x320 = ((Val(1) - x319) * (Val(1) - x48));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x321 = x284[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x322 = ((Val(1) - x145) * (Val(1) - x321));
  Val x323 = ((x145 * x321) + x322);
  Val x324 = ((Val(1) - x323) * (Val(1) - x49));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x325 = x284[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x326 = ((Val(1) - x146) * (Val(1) - x325));
  Val x327 = ((x146 * x325) + x326);
  Val x328 = ((Val(1) - x327) * (Val(1) - x50));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x329 = x284[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x330 = ((Val(1) - x147) * (Val(1) - x329));
  Val x331 = ((x147 * x329) + x330);
  Val x332 = ((Val(1) - x331) * (Val(1) - x51));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x333 = x284[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x334 = ((Val(1) - x148) * (Val(1) - x333));
  Val x335 = ((x148 * x333) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x52));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x337 = x284[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x338 = ((Val(1) - x149) * (Val(1) - x337));
  Val x339 = ((x149 * x337) + x338);
  Val x340 = ((Val(1) - x339) * (Val(1) - x53));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x341 = x284[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x342 = ((Val(1) - x150) * (Val(1) - x341));
  Val x343 = ((x150 * x341) + x342);
  Val x344 = ((Val(1) - x343) * (Val(1) - x54));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x345 = x284[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x346 = ((Val(1) - x151) * (Val(1) - x345));
  Val x347 = ((x151 * x345) + x346);
  Val x348 = ((Val(1) - x347) * (Val(1) - x55));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x349 = x284[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x350 = ((Val(1) - x152) * (Val(1) - x349));
  Val x351 = ((x152 * x349) + x350);
  Val x352 = ((Val(1) - x351) * (Val(1) - x56));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x353 = x284[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x354 = ((Val(1) - x153) * (Val(1) - x353));
  Val x355 = ((x153 * x353) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x57));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x357 = x284[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x358 = ((Val(1) - x154) * (Val(1) - x357));
  Val x359 = ((x154 * x357) + x358);
  Val x360 = ((Val(1) - x359) * (Val(1) - x58));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x361 = x284[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x362 = ((Val(1) - x155) * (Val(1) - x361));
  Val x363 = ((x155 * x361) + x362);
  Val x364 = ((Val(1) - x363) * (Val(1) - x59));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x365 = x284[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x366 = ((Val(1) - x156) * (Val(1) - x365));
  Val x367 = ((x156 * x365) + x366);
  Val x368 = ((Val(1) - x367) * (Val(1) - x60));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x369 = x4.arrC;
  Val x370 = x369[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x371 = ((Val(1) - x167) * (Val(1) - x370));
  Val x372 = ((x167 * x370) + x371);
  Val x373 = ((Val(1) - x372) * (Val(1) - x61));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x374 = x369[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x375 = ((Val(1) - x168) * (Val(1) - x374));
  Val x376 = ((x168 * x374) + x375);
  Val x377 = ((Val(1) - x376) * (Val(1) - x72));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x378 = x369[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x379 = ((Val(1) - x169) * (Val(1) - x378));
  Val x380 = ((x169 * x378) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x73));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x382 = x369[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x383 = ((Val(1) - x170) * (Val(1) - x382));
  Val x384 = ((x170 * x382) + x383);
  Val x385 = ((Val(1) - x384) * (Val(1) - x74));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x386 = x369[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x387 = ((Val(1) - x171) * (Val(1) - x386));
  Val x388 = ((x171 * x386) + x387);
  Val x389 = ((Val(1) - x388) * (Val(1) - x75));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x390 = x369[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x391 = ((Val(1) - x172) * (Val(1) - x390));
  Val x392 = ((x172 * x390) + x391);
  Val x393 = ((Val(1) - x392) * (Val(1) - x76));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x394 = x369[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x395 = ((Val(1) - x173) * (Val(1) - x394));
  Val x396 = ((x173 * x394) + x395);
  Val x397 = ((Val(1) - x396) * (Val(1) - x77));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x398 = x369[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x399 = ((Val(1) - x174) * (Val(1) - x398));
  Val x400 = ((x174 * x398) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x78));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x402 = x369[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x403 = ((Val(1) - x175) * (Val(1) - x402));
  Val x404 = ((x175 * x402) + x403);
  Val x405 = ((Val(1) - x404) * (Val(1) - x79));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x406 = x369[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x407 = ((Val(1) - x176) * (Val(1) - x406));
  Val x408 = ((x176 * x406) + x407);
  Val x409 = ((Val(1) - x408) * (Val(1) - x80));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x410 = x369[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x411 = ((Val(1) - x177) * (Val(1) - x410));
  Val x412 = ((x177 * x410) + x411);
  Val x413 = ((Val(1) - x412) * (Val(1) - x81));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x414 = x369[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x415 = ((Val(1) - x178) * (Val(1) - x414));
  Val x416 = ((x178 * x414) + x415);
  Val x417 = ((Val(1) - x416) * (Val(1) - x82));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x418 = x369[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x419 = ((Val(1) - x179) * (Val(1) - x418));
  Val x420 = ((x179 * x418) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x83));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x422 = x369[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x423 = ((Val(1) - x180) * (Val(1) - x422));
  Val x424 = ((x180 * x422) + x423);
  Val x425 = ((Val(1) - x424) * (Val(1) - x84));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x426 = x369[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x427 = ((Val(1) - x181) * (Val(1) - x426));
  Val x428 = ((x181 * x426) + x427);
  Val x429 = ((Val(1) - x428) * (Val(1) - x85));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x430 = x369[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x431 = ((Val(1) - x182) * (Val(1) - x430));
  Val x432 = ((x182 * x430) + x431);
  Val x433 = ((Val(1) - x432) * (Val(1) - x86));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x434 = x369[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x435 = ((Val(1) - x183) * (Val(1) - x434));
  Val x436 = ((x183 * x434) + x435);
  Val x437 = ((Val(1) - x436) * (Val(1) - x87));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x438 = x369[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x439 = ((Val(1) - x184) * (Val(1) - x438));
  Val x440 = ((x184 * x438) + x439);
  Val x441 = ((Val(1) - x440) * (Val(1) - x88));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x442 = x369[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x443 = ((Val(1) - x185) * (Val(1) - x442));
  Val x444 = ((x185 * x442) + x443);
  Val x445 = ((Val(1) - x444) * (Val(1) - x89));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x446 = x369[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x447 = ((Val(1) - x186) * (Val(1) - x446));
  Val x448 = ((x186 * x446) + x447);
  Val x449 = ((Val(1) - x448) * (Val(1) - x90));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x450 = x369[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x451 = ((Val(1) - x187) * (Val(1) - x450));
  Val x452 = ((x187 * x450) + x451);
  Val x453 = ((Val(1) - x452) * (Val(1) - x91));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:422)
  Val x454 = (((x452 * x91) + x453) * Val(2));
  Val x455 = (((x198 * x92) + x199) * Val(4));
  Val x456 = (((x202 * x9) + x203) * Val(8));
  Val x457 = (((x206 * x10) + x207) * Val(16));
  Val x458 = (((x210 * x11) + x211) * Val(32));
  Val x459 = (((x214 * x12) + x215) * Val(64));
  Val x460 = (((x218 * x13) + x219) * Val(128));
  Val x461 = (((x222 * x14) + x223) * Val(256));
  Val x462 = (((x226 * x15) + x227) * Val(512));
  Val x463 = (((x230 * x16) + x231) * Val(1024));
  Val x464 = (((x234 * x17) + x235) * Val(2048));
  Val x465 = (((x238 * x18) + x239) * Val(4096));
  Val x466 = (((x242 * x19) + x243) * Val(8192));
  Val x467 = (((x246 * x20) + x247) * Val(16384));
  Val x468 = (((x250 * x21) + x251) * Val(32768));
  Val x469 = (((x254 * x22) + x255) * Val(65536));
  Val x470 = (((x258 * x23) + x259) * Val(131072));
  Val x471 = (((x262 * x24) + x263) * Val(262144));
  Val x472 = (((x266 * x25) + x267) * Val(524288));
  Val x473 = (((x270 * x26) + x271) * Val(1048576));
  Val x474 = (((x274 * x27) + x275) * Val(2097152));
  Val x475 = (((x448 * x90) + x449) + x454);
  Val x476 = (((x475 + x455) + x456) + x457);
  Val x477 = (((x476 + x458) + x459) + x460);
  Val x478 = (((x477 + x461) + x462) + x463);
  Val x479 = (((x478 + x464) + x465) + x466);
  Val x480 = (((x479 + x467) + x468) + x469);
  Val x481 = (((x480 + x470) + x471) + x472);
  NondetRegStruct x482 = exec_Reg(ctx, ((x481 + x473) + x474), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:423)
  Val x483 = (((x282 * x29) + x283) * Val(2));
  Val x484 = (((x287 * x30) + x288) * Val(4));
  Val x485 = (((x291 * x41) + x292) * Val(8));
  Val x486 = (((x295 * x42) + x296) * Val(16));
  Val x487 = (((x299 * x43) + x300) * Val(32));
  Val x488 = (((x303 * x44) + x304) * Val(64));
  Val x489 = (((x307 * x45) + x308) * Val(128));
  Val x490 = (((x311 * x46) + x312) * Val(256));
  Val x491 = (((x315 * x47) + x316) * Val(512));
  Val x492 = (((x319 * x48) + x320) * Val(1024));
  Val x493 = (((x323 * x49) + x324) * Val(2048));
  Val x494 = (((x327 * x50) + x328) * Val(4096));
  Val x495 = (((x331 * x51) + x332) * Val(8192));
  Val x496 = (((x335 * x52) + x336) * Val(16384));
  Val x497 = (((x339 * x53) + x340) * Val(32768));
  Val x498 = (((x343 * x54) + x344) * Val(65536));
  Val x499 = (((x347 * x55) + x348) * Val(131072));
  Val x500 = (((x351 * x56) + x352) * Val(262144));
  Val x501 = (((x355 * x57) + x356) * Val(524288));
  Val x502 = (((x359 * x58) + x360) * Val(1048576));
  Val x503 = (((x278 * x28) + x279) + x483);
  Val x504 = (((x503 + x484) + x485) + x486);
  Val x505 = (((x504 + x487) + x488) + x489);
  Val x506 = (((x505 + x490) + x491) + x492);
  Val x507 = (((x506 + x493) + x494) + x495);
  Val x508 = (((x507 + x496) + x497) + x498);
  Val x509 = (((x508 + x499) + x500) + x501);
  NondetRegStruct x510 = exec_Reg(ctx, (x509 + x502), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:424)
  Val x511 = (((x367 * x60) + x368) * Val(2));
  Val x512 = (((x372 * x61) + x373) * Val(4));
  Val x513 = (((x376 * x72) + x377) * Val(8));
  Val x514 = (((x380 * x73) + x381) * Val(16));
  Val x515 = (((x384 * x74) + x385) * Val(32));
  Val x516 = (((x388 * x75) + x389) * Val(64));
  Val x517 = (((x392 * x76) + x393) * Val(128));
  Val x518 = (((x396 * x77) + x397) * Val(256));
  Val x519 = (((x400 * x78) + x401) * Val(512));
  Val x520 = (((x404 * x79) + x405) * Val(1024));
  Val x521 = (((x408 * x80) + x409) * Val(2048));
  Val x522 = (((x412 * x81) + x413) * Val(4096));
  Val x523 = (((x416 * x82) + x417) * Val(8192));
  Val x524 = (((x420 * x83) + x421) * Val(16384));
  Val x525 = (((x424 * x84) + x425) * Val(32768));
  Val x526 = (((x428 * x85) + x429) * Val(65536));
  Val x527 = (((x432 * x86) + x433) * Val(131072));
  Val x528 = (((x436 * x87) + x437) * Val(262144));
  Val x529 = (((x440 * x88) + x441) * Val(524288));
  Val x530 = (((x444 * x89) + x445) * Val(1048576));
  Val x531 = (((x363 * x59) + x364) + x511);
  Val x532 = (((x531 + x512) + x513) + x514);
  Val x533 = (((x532 + x515) + x516) + x517);
  Val x534 = (((x533 + x518) + x519) + x520);
  Val x535 = (((x534 + x521) + x522) + x523);
  Val x536 = (((x535 + x524) + x525) + x526);
  Val x537 = (((x536 + x527) + x528) + x529);
  NondetRegStruct x538 = exec_Reg(ctx, (x537 + x530), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:427)
  Val22Array x539 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x540 = exec_RetTuple(
      ctx,
      x539,
      x539,
      x539,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x539,
      Val22Array{x482._super, x510._super, x538._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(3),
      Val(9),
      x4.rnd._super,
      x4.blk._super,
      x4.midx._super,
      LAYOUT_LOOKUP(layout2, _super));
  return x540;
}
RetTupleStruct execRhoMinor0_2__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_2__4_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 4, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[12]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[13]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[14]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[18]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[19]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[20]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(4),
                    Val(9),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_2__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_2__4_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_2__4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 5, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct24Array x6 = x4.arrD;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[0]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[1]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[2]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x126 * x124) + x127) * Val(2));
  Val x428 = (((x131 * x129) + x132) * Val(4));
  Val x429 = (((x136 * x134) + x137) * Val(8));
  Val x430 = (((x141 * x139) + x142) * Val(16));
  Val x431 = (((x146 * x144) + x147) * Val(32));
  Val x432 = (((x151 * x149) + x152) * Val(64));
  Val x433 = (((x156 * x154) + x157) * Val(128));
  Val x434 = (((x161 * x159) + x162) * Val(256));
  Val x435 = (((x166 * x164) + x167) * Val(512));
  Val x436 = (((x171 * x169) + x172) * Val(1024));
  Val x437 = (((x176 * x174) + x177) * Val(2048));
  Val x438 = (((x181 * x179) + x182) * Val(4096));
  Val x439 = (((x186 * x184) + x187) * Val(8192));
  Val x440 = (((x191 * x189) + x192) * Val(16384));
  Val x441 = (((x196 * x194) + x197) * Val(32768));
  Val x442 = (((x201 * x199) + x202) * Val(65536));
  Val x443 = (((x206 * x204) + x207) * Val(131072));
  Val x444 = (((x211 * x209) + x212) * Val(262144));
  Val x445 = (((x218 * x216) + x219) * Val(524288));
  Val x446 = (((x223 * x221) + x224) * Val(1048576));
  Val x447 = (((x228 * x226) + x229) * Val(2097152));
  Val x448 = (((x121 * x119) + x122) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x238 * x236) + x239) * Val(2));
  Val x457 = (((x243 * x241) + x244) * Val(4));
  Val x458 = (((x248 * x246) + x249) * Val(8));
  Val x459 = (((x253 * x251) + x254) * Val(16));
  Val x460 = (((x258 * x256) + x259) * Val(32));
  Val x461 = (((x263 * x261) + x264) * Val(64));
  Val x462 = (((x268 * x266) + x269) * Val(128));
  Val x463 = (((x273 * x271) + x274) * Val(256));
  Val x464 = (((x278 * x276) + x279) * Val(512));
  Val x465 = (((x283 * x281) + x284) * Val(1024));
  Val x466 = (((x288 * x286) + x289) * Val(2048));
  Val x467 = (((x293 * x291) + x294) * Val(4096));
  Val x468 = (((x298 * x296) + x299) * Val(8192));
  Val x469 = (((x303 * x301) + x304) * Val(16384));
  Val x470 = (((x308 * x306) + x309) * Val(32768));
  Val x471 = (((x313 * x311) + x314) * Val(65536));
  Val x472 = (((x318 * x316) + x319) * Val(131072));
  Val x473 = (((x325 * x323) + x326) * Val(262144));
  Val x474 = (((x330 * x328) + x331) * Val(524288));
  Val x475 = (((x335 * x333) + x336) * Val(1048576));
  Val x476 = (((x233 * x231) + x234) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x345 * x343) + x346) * Val(2));
  Val x485 = (((x350 * x348) + x351) * Val(4));
  Val x486 = (((x355 * x353) + x356) * Val(8));
  Val x487 = (((x360 * x358) + x361) * Val(16));
  Val x488 = (((x365 * x363) + x366) * Val(32));
  Val x489 = (((x370 * x368) + x371) * Val(64));
  Val x490 = (((x375 * x373) + x376) * Val(128));
  Val x491 = (((x380 * x378) + x381) * Val(256));
  Val x492 = (((x385 * x383) + x386) * Val(512));
  Val x493 = (((x390 * x388) + x391) * Val(1024));
  Val x494 = (((x395 * x393) + x396) * Val(2048));
  Val x495 = (((x400 * x398) + x401) * Val(4096));
  Val x496 = (((x405 * x403) + x406) * Val(8192));
  Val x497 = (((x410 * x408) + x411) * Val(16384));
  Val x498 = (((x415 * x413) + x416) * Val(32768));
  Val x499 = (((x420 * x418) + x421) * Val(65536));
  Val x500 = (((x425 * x423) + x426) * Val(131072));
  Val x501 = (((x106 * x104) + x107) * Val(262144));
  Val x502 = (((x111 * x109) + x112) * Val(524288));
  Val x503 = (((x116 * x114) + x117) * Val(1048576));
  Val x504 = (((x340 * x338) + x341) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_2__4_Arm1_SuperLayout> x512 = LAYOUT_LOOKUP(x3, arm1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x513 = x6[15]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:345)
  ToBits_22_Struct x514 = exec_ToBits_22_(ctx, x513, LAYOUT_LOOKUP(x512, unpackM1));
  NondetRegStruct22Array x515 = x514._super;
  Val x516 = x515[0]._super;
  Val x517 = x515[1]._super;
  Val x518 = x515[2]._super;
  Val x519 = x515[3]._super;
  Val x520 = x515[4]._super;
  Val x521 = x515[5]._super;
  Val x522 = x515[6]._super;
  Val x523 = x515[7]._super;
  Val x524 = x515[8]._super;
  Val x525 = x515[9]._super;
  Val x526 = x515[10]._super;
  Val x527 = x515[11]._super;
  Val x528 = x515[12]._super;
  Val x529 = x515[13]._super;
  Val x530 = x515[14]._super;
  Val x531 = x515[15]._super;
  Val x532 = x515[16]._super;
  Val x533 = x515[17]._super;
  Val x534 = x515[18]._super;
  Val x535 = x515[19]._super;
  Val x536 = x515[20]._super;
  Val x537 = x515[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:346)
  Val x538 = (((x516 + (x517 * Val(2))) + (x518 * Val(4))) + (x519 * Val(8)));
  Val x539 = (((x538 + (x520 * Val(16))) + (x521 * Val(32))) + (x522 * Val(64)));
  Val x540 = (((x539 + (x523 * Val(128))) + (x524 * Val(256))) + (x525 * Val(512)));
  Val x541 = (((x540 + (x526 * Val(1024))) + (x527 * Val(2048))) + (x528 * Val(4096)));
  Val x542 = (((x541 + (x529 * Val(8192))) + (x530 * Val(16384))) + (x531 * Val(32768)));
  Val x543 = (((x542 + (x532 * Val(65536))) + (x533 * Val(131072))) + (x534 * Val(262144)));
  Val x544 = (((x543 + (x535 * Val(524288))) + (x536 * Val(1048576))) + (x537 * Val(2097152)));
  EQZ((x544 - x513), "rho_minor1(zirgen/circuit/keccak/keccak.zir:346)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x545 = x6[16]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:349)
  ToBits_21_Struct x546 = exec_ToBits_21_(ctx, x545, LAYOUT_LOOKUP(x512, unpackM2));
  NondetRegStruct21Array x547 = x546._super;
  Val x548 = x547[0]._super;
  Val x549 = x547[1]._super;
  Val x550 = x547[2]._super;
  Val x551 = x547[3]._super;
  Val x552 = x547[4]._super;
  Val x553 = x547[5]._super;
  Val x554 = x547[6]._super;
  Val x555 = x547[7]._super;
  Val x556 = x547[8]._super;
  Val x557 = x547[9]._super;
  Val x558 = x547[10]._super;
  Val x559 = x547[11]._super;
  Val x560 = x547[12]._super;
  Val x561 = x547[13]._super;
  Val x562 = x547[14]._super;
  Val x563 = x547[15]._super;
  Val x564 = x547[16]._super;
  Val x565 = x547[17]._super;
  Val x566 = x547[18]._super;
  Val x567 = x547[19]._super;
  Val x568 = x547[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:350)
  Val x569 = (((x548 + (x549 * Val(2))) + (x550 * Val(4))) + (x551 * Val(8)));
  Val x570 = (((x569 + (x552 * Val(16))) + (x553 * Val(32))) + (x554 * Val(64)));
  Val x571 = (((x570 + (x555 * Val(128))) + (x556 * Val(256))) + (x557 * Val(512)));
  Val x572 = (((x571 + (x558 * Val(1024))) + (x559 * Val(2048))) + (x560 * Val(4096)));
  Val x573 = (((x572 + (x561 * Val(8192))) + (x562 * Val(16384))) + (x563 * Val(32768)));
  Val x574 = (((x573 + (x564 * Val(65536))) + (x565 * Val(131072))) + (x566 * Val(262144)));
  Val x575 = (((x574 + (x567 * Val(524288))) + (x568 * Val(1048576))) - x545);
  EQZ(x575, "rho_minor1(zirgen/circuit/keccak/keccak.zir:350)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  Val x576 = x6[17]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:354)
  ToBits_21_Struct x577 = exec_ToBits_21_(ctx, x576, LAYOUT_LOOKUP(x512, unpackM3));
  NondetRegStruct21Array x578 = x577._super;
  Val x579 = x578[0]._super;
  Val x580 = x578[1]._super;
  Val x581 = x578[2]._super;
  Val x582 = x578[3]._super;
  Val x583 = x578[4]._super;
  Val x584 = x578[5]._super;
  Val x585 = x578[6]._super;
  Val x586 = x578[7]._super;
  Val x587 = x578[8]._super;
  Val x588 = x578[9]._super;
  Val x589 = x578[10]._super;
  Val x590 = x578[11]._super;
  Val x591 = x578[12]._super;
  Val x592 = x578[13]._super;
  Val x593 = x578[14]._super;
  Val x594 = x578[15]._super;
  Val x595 = x578[16]._super;
  Val x596 = x578[17]._super;
  Val x597 = x578[18]._super;
  Val x598 = x578[19]._super;
  Val x599 = x578[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:355)
  Val x600 = (((x579 + (x580 * Val(2))) + (x581 * Val(4))) + (x582 * Val(8)));
  Val x601 = (((x600 + (x583 * Val(16))) + (x584 * Val(32))) + (x585 * Val(64)));
  Val x602 = (((x601 + (x586 * Val(128))) + (x587 * Val(256))) + (x588 * Val(512)));
  Val x603 = (((x602 + (x589 * Val(1024))) + (x590 * Val(2048))) + (x591 * Val(4096)));
  Val x604 = (((x603 + (x592 * Val(8192))) + (x593 * Val(16384))) + (x594 * Val(32768)));
  Val x605 = (((x604 + (x595 * Val(65536))) + (x596 * Val(131072))) + (x597 * Val(262144)));
  Val x606 = (((x605 + (x598 * Val(524288))) + (x599 * Val(1048576))) - x576);
  EQZ(x606, "rho_minor1(zirgen/circuit/keccak/keccak.zir:355)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:358)
  RetTupleStruct x607 = exec_RetTuple(
      ctx,
      Val22Array{x516, x517, x518, x519, x520, x521, x522, x523, x524, x525, x526,
                 x527, x528, x529, x530, x531, x532, x533, x534, x535, x536, x537},
      Val22Array{x548, x549, x550, x551, x552, x553, x554, x555, x556, x557, x558,
                 x559, x560, x561, x562, x563, x564, x565, x566, x567, x568, Val(0)},
      Val22Array{x579, x580, x581, x582, x583, x584, x585, x586, x587, x588, x589,
                 x590, x591, x592, x593, x594, x595, x596, x597, x598, x599, Val(0)},
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(5),
      Val(9),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x512, _super));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x608 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x608;
}
RetTupleStruct execRhoMinor2_2__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor2_2__4_Layout> layout2) {
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  RetTupleStruct x3 = back_RetTuple(ctx, 6, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  NondetRegStruct24Array x5 = x3.arrD;
  Val x6 = x5[21]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:368)
  ToBits_22_Struct x7 = exec_ToBits_22_(ctx, x6, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  Val x30 = x8[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:369)
  Val x31 = (((x9 + (x10 * Val(2))) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) + (x30 * Val(2097152)));
  EQZ((x37 - x6), "rho_minor2(zirgen/circuit/keccak/keccak.zir:369)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x38 = x5[22]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:372)
  ToBits_21_Struct x39 = exec_ToBits_21_(ctx, x38, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x40 = x39._super;
  Val x41 = x40[0]._super;
  Val x42 = x40[1]._super;
  Val x43 = x40[2]._super;
  Val x44 = x40[3]._super;
  Val x45 = x40[4]._super;
  Val x46 = x40[5]._super;
  Val x47 = x40[6]._super;
  Val x48 = x40[7]._super;
  Val x49 = x40[8]._super;
  Val x50 = x40[9]._super;
  Val x51 = x40[10]._super;
  Val x52 = x40[11]._super;
  Val x53 = x40[12]._super;
  Val x54 = x40[13]._super;
  Val x55 = x40[14]._super;
  Val x56 = x40[15]._super;
  Val x57 = x40[16]._super;
  Val x58 = x40[17]._super;
  Val x59 = x40[18]._super;
  Val x60 = x40[19]._super;
  Val x61 = x40[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:373)
  Val x62 = (((x41 + (x42 * Val(2))) + (x43 * Val(4))) + (x44 * Val(8)));
  Val x63 = (((x62 + (x45 * Val(16))) + (x46 * Val(32))) + (x47 * Val(64)));
  Val x64 = (((x63 + (x48 * Val(128))) + (x49 * Val(256))) + (x50 * Val(512)));
  Val x65 = (((x64 + (x51 * Val(1024))) + (x52 * Val(2048))) + (x53 * Val(4096)));
  Val x66 = (((x65 + (x54 * Val(8192))) + (x55 * Val(16384))) + (x56 * Val(32768)));
  Val x67 = (((x66 + (x57 * Val(65536))) + (x58 * Val(131072))) + (x59 * Val(262144)));
  Val x68 = (((x67 + (x60 * Val(524288))) + (x61 * Val(1048576))) - x38);
  EQZ(x68, "rho_minor2(zirgen/circuit/keccak/keccak.zir:373)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:364)
  Val x69 = x5[23]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:376)
  ToBits_21_Struct x70 = exec_ToBits_21_(ctx, x69, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x71 = x70._super;
  Val x72 = x71[0]._super;
  Val x73 = x71[1]._super;
  Val x74 = x71[2]._super;
  Val x75 = x71[3]._super;
  Val x76 = x71[4]._super;
  Val x77 = x71[5]._super;
  Val x78 = x71[6]._super;
  Val x79 = x71[7]._super;
  Val x80 = x71[8]._super;
  Val x81 = x71[9]._super;
  Val x82 = x71[10]._super;
  Val x83 = x71[11]._super;
  Val x84 = x71[12]._super;
  Val x85 = x71[13]._super;
  Val x86 = x71[14]._super;
  Val x87 = x71[15]._super;
  Val x88 = x71[16]._super;
  Val x89 = x71[17]._super;
  Val x90 = x71[18]._super;
  Val x91 = x71[19]._super;
  Val x92 = x71[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:377)
  Val x93 = (((x72 + (x73 * Val(2))) + (x74 * Val(4))) + (x75 * Val(8)));
  Val x94 = (((x93 + (x76 * Val(16))) + (x77 * Val(32))) + (x78 * Val(64)));
  Val x95 = (((x94 + (x79 * Val(128))) + (x80 * Val(256))) + (x81 * Val(512)));
  Val x96 = (((x95 + (x82 * Val(1024))) + (x83 * Val(2048))) + (x84 * Val(4096)));
  Val x97 = (((x96 + (x85 * Val(8192))) + (x86 * Val(16384))) + (x87 * Val(32768)));
  Val x98 = (((x97 + (x88 * Val(65536))) + (x89 * Val(131072))) + (x90 * Val(262144)));
  Val x99 = (((x98 + (x91 * Val(524288))) + (x92 * Val(1048576))) - x69);
  EQZ(x99, "rho_minor2(zirgen/circuit/keccak/keccak.zir:377)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:383)
  Val x100 = x5[3]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:390)
  ToBits_22_Struct x101 = exec_ToBits_22_(ctx, x100, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x102 = x101._super;
  Val x103 = x102[0]._super;
  Val x104 = x102[1]._super;
  Val x105 = x102[2]._super;
  Val x106 = x102[3]._super;
  Val x107 = x102[4]._super;
  Val x108 = x102[5]._super;
  Val x109 = x102[6]._super;
  Val x110 = x102[7]._super;
  Val x111 = x102[8]._super;
  Val x112 = x102[9]._super;
  Val x113 = x102[10]._super;
  Val x114 = x102[11]._super;
  Val x115 = x102[12]._super;
  Val x116 = x102[13]._super;
  Val x117 = x102[14]._super;
  Val x118 = x102[15]._super;
  Val x119 = x102[16]._super;
  Val x120 = x102[17]._super;
  Val x121 = x102[18]._super;
  Val x122 = x102[19]._super;
  Val x123 = x102[20]._super;
  Val x124 = x102[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:391)
  Val x125 = (((x103 + (x104 * Val(2))) + (x105 * Val(4))) + (x106 * Val(8)));
  Val x126 = (((x125 + (x107 * Val(16))) + (x108 * Val(32))) + (x109 * Val(64)));
  Val x127 = (((x126 + (x110 * Val(128))) + (x111 * Val(256))) + (x112 * Val(512)));
  Val x128 = (((x127 + (x113 * Val(1024))) + (x114 * Val(2048))) + (x115 * Val(4096)));
  Val x129 = (((x128 + (x116 * Val(8192))) + (x117 * Val(16384))) + (x118 * Val(32768)));
  Val x130 = (((x129 + (x119 * Val(65536))) + (x120 * Val(131072))) + (x121 * Val(262144)));
  Val x131 = (((x130 + (x122 * Val(524288))) + (x123 * Val(1048576))) + (x124 * Val(2097152)));
  EQZ((x131 - x100), "rho_minor2(zirgen/circuit/keccak/keccak.zir:391)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:395)
  Val x132 = x5[4]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:402)
  ToBits_21_Struct x133 = exec_ToBits_21_(ctx, x132, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x134 = x133._super;
  Val x135 = x134[0]._super;
  Val x136 = x134[1]._super;
  Val x137 = x134[2]._super;
  Val x138 = x134[3]._super;
  Val x139 = x134[4]._super;
  Val x140 = x134[5]._super;
  Val x141 = x134[6]._super;
  Val x142 = x134[7]._super;
  Val x143 = x134[8]._super;
  Val x144 = x134[9]._super;
  Val x145 = x134[10]._super;
  Val x146 = x134[11]._super;
  Val x147 = x134[12]._super;
  Val x148 = x134[13]._super;
  Val x149 = x134[14]._super;
  Val x150 = x134[15]._super;
  Val x151 = x134[16]._super;
  Val x152 = x134[17]._super;
  Val x153 = x134[18]._super;
  Val x154 = x134[19]._super;
  Val x155 = x134[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:403)
  Val x156 = (((x135 + (x136 * Val(2))) + (x137 * Val(4))) + (x138 * Val(8)));
  Val x157 = (((x156 + (x139 * Val(16))) + (x140 * Val(32))) + (x141 * Val(64)));
  Val x158 = (((x157 + (x142 * Val(128))) + (x143 * Val(256))) + (x144 * Val(512)));
  Val x159 = (((x158 + (x145 * Val(1024))) + (x146 * Val(2048))) + (x147 * Val(4096)));
  Val x160 = (((x159 + (x148 * Val(8192))) + (x149 * Val(16384))) + (x150 * Val(32768)));
  Val x161 = (((x160 + (x151 * Val(65536))) + (x152 * Val(131072))) + (x153 * Val(262144)));
  Val x162 = (((x161 + (x154 * Val(524288))) + (x155 * Val(1048576))) - x132);
  EQZ(x162, "rho_minor2(zirgen/circuit/keccak/keccak.zir:403)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:407)
  Val x163 = x5[5]._super;
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:414)
  ToBits_21_Struct x164 = exec_ToBits_21_(ctx, x163, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x165 = x164._super;
  Val x166 = x165[0]._super;
  Val x167 = x165[1]._super;
  Val x168 = x165[2]._super;
  Val x169 = x165[3]._super;
  Val x170 = x165[4]._super;
  Val x171 = x165[5]._super;
  Val x172 = x165[6]._super;
  Val x173 = x165[7]._super;
  Val x174 = x165[8]._super;
  Val x175 = x165[9]._super;
  Val x176 = x165[10]._super;
  Val x177 = x165[11]._super;
  Val x178 = x165[12]._super;
  Val x179 = x165[13]._super;
  Val x180 = x165[14]._super;
  Val x181 = x165[15]._super;
  Val x182 = x165[16]._super;
  Val x183 = x165[17]._super;
  Val x184 = x165[18]._super;
  Val x185 = x165[19]._super;
  Val x186 = x165[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:415)
  Val x187 = (((x166 + (x167 * Val(2))) + (x168 * Val(4))) + (x169 * Val(8)));
  Val x188 = (((x187 + (x170 * Val(16))) + (x171 * Val(32))) + (x172 * Val(64)));
  Val x189 = (((x188 + (x173 * Val(128))) + (x174 * Val(256))) + (x175 * Val(512)));
  Val x190 = (((x189 + (x176 * Val(1024))) + (x177 * Val(2048))) + (x178 * Val(4096)));
  Val x191 = (((x190 + (x179 * Val(8192))) + (x180 * Val(16384))) + (x181 * Val(32768)));
  Val x192 = (((x191 + (x182 * Val(65536))) + (x183 * Val(131072))) + (x184 * Val(262144)));
  Val x193 = (((x192 + (x185 * Val(524288))) + (x186 * Val(1048576))) - x163);
  EQZ(x193, "rho_minor2(zirgen/circuit/keccak/keccak.zir:415)");
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x194 = x4.arrA;
  Val x195 = x194[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x196 = ((Val(1) - x103) * (Val(1) - x195));
  Val x197 = ((x103 * x195) + x196);
  Val x198 = ((Val(1) - x197) * (Val(1) - x92));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x199 = x194[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x200 = ((Val(1) - x104) * (Val(1) - x199));
  Val x201 = ((x104 * x199) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x9));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x203 = x194[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x204 = ((Val(1) - x105) * (Val(1) - x203));
  Val x205 = ((x105 * x203) + x204);
  Val x206 = ((Val(1) - x205) * (Val(1) - x10));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x207 = x194[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x208 = ((Val(1) - x106) * (Val(1) - x207));
  Val x209 = ((x106 * x207) + x208);
  Val x210 = ((Val(1) - x209) * (Val(1) - x11));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x211 = x194[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x212 = ((Val(1) - x107) * (Val(1) - x211));
  Val x213 = ((x107 * x211) + x212);
  Val x214 = ((Val(1) - x213) * (Val(1) - x12));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x215 = x194[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x216 = ((Val(1) - x108) * (Val(1) - x215));
  Val x217 = ((x108 * x215) + x216);
  Val x218 = ((Val(1) - x217) * (Val(1) - x13));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x219 = x194[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x220 = ((Val(1) - x109) * (Val(1) - x219));
  Val x221 = ((x109 * x219) + x220);
  Val x222 = ((Val(1) - x221) * (Val(1) - x14));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x223 = x194[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x224 = ((Val(1) - x110) * (Val(1) - x223));
  Val x225 = ((x110 * x223) + x224);
  Val x226 = ((Val(1) - x225) * (Val(1) - x15));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x227 = x194[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x228 = ((Val(1) - x111) * (Val(1) - x227));
  Val x229 = ((x111 * x227) + x228);
  Val x230 = ((Val(1) - x229) * (Val(1) - x16));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x231 = x194[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x232 = ((Val(1) - x112) * (Val(1) - x231));
  Val x233 = ((x112 * x231) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x17));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x235 = x194[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x236 = ((Val(1) - x113) * (Val(1) - x235));
  Val x237 = ((x113 * x235) + x236);
  Val x238 = ((Val(1) - x237) * (Val(1) - x18));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x239 = x194[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x240 = ((Val(1) - x114) * (Val(1) - x239));
  Val x241 = ((x114 * x239) + x240);
  Val x242 = ((Val(1) - x241) * (Val(1) - x19));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x243 = x194[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x244 = ((Val(1) - x115) * (Val(1) - x243));
  Val x245 = ((x115 * x243) + x244);
  Val x246 = ((Val(1) - x245) * (Val(1) - x20));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x247 = x194[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x248 = ((Val(1) - x116) * (Val(1) - x247));
  Val x249 = ((x116 * x247) + x248);
  Val x250 = ((Val(1) - x249) * (Val(1) - x21));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x251 = x194[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x252 = ((Val(1) - x117) * (Val(1) - x251));
  Val x253 = ((x117 * x251) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x22));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x255 = x194[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x256 = ((Val(1) - x118) * (Val(1) - x255));
  Val x257 = ((x118 * x255) + x256);
  Val x258 = ((Val(1) - x257) * (Val(1) - x23));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x259 = x194[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x260 = ((Val(1) - x119) * (Val(1) - x259));
  Val x261 = ((x119 * x259) + x260);
  Val x262 = ((Val(1) - x261) * (Val(1) - x24));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x263 = x194[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x264 = ((Val(1) - x120) * (Val(1) - x263));
  Val x265 = ((x120 * x263) + x264);
  Val x266 = ((Val(1) - x265) * (Val(1) - x25));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x267 = x194[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x268 = ((Val(1) - x121) * (Val(1) - x267));
  Val x269 = ((x121 * x267) + x268);
  Val x270 = ((Val(1) - x269) * (Val(1) - x26));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x271 = x194[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x272 = ((Val(1) - x122) * (Val(1) - x271));
  Val x273 = ((x122 * x271) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x27));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x275 = x194[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x276 = ((Val(1) - x123) * (Val(1) - x275));
  Val x277 = ((x123 * x275) + x276);
  Val x278 = ((Val(1) - x277) * (Val(1) - x28));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x279 = x194[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:417)
  Val x280 = ((Val(1) - x124) * (Val(1) - x279));
  Val x281 = ((x124 * x279) + x280);
  Val x282 = ((Val(1) - x281) * (Val(1) - x29));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x283 = x4.arrB;
  Val x284 = x283[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x285 = ((Val(1) - x135) * (Val(1) - x284));
  Val x286 = ((x135 * x284) + x285);
  Val x287 = ((Val(1) - x286) * (Val(1) - x30));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x288 = x283[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x289 = ((Val(1) - x136) * (Val(1) - x288));
  Val x290 = ((x136 * x288) + x289);
  Val x291 = ((Val(1) - x290) * (Val(1) - x41));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x292 = x283[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x293 = ((Val(1) - x137) * (Val(1) - x292));
  Val x294 = ((x137 * x292) + x293);
  Val x295 = ((Val(1) - x294) * (Val(1) - x42));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x296 = x283[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x297 = ((Val(1) - x138) * (Val(1) - x296));
  Val x298 = ((x138 * x296) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x43));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x300 = x283[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x301 = ((Val(1) - x139) * (Val(1) - x300));
  Val x302 = ((x139 * x300) + x301);
  Val x303 = ((Val(1) - x302) * (Val(1) - x44));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x304 = x283[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x305 = ((Val(1) - x140) * (Val(1) - x304));
  Val x306 = ((x140 * x304) + x305);
  Val x307 = ((Val(1) - x306) * (Val(1) - x45));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x308 = x283[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x309 = ((Val(1) - x141) * (Val(1) - x308));
  Val x310 = ((x141 * x308) + x309);
  Val x311 = ((Val(1) - x310) * (Val(1) - x46));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x312 = x283[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x313 = ((Val(1) - x142) * (Val(1) - x312));
  Val x314 = ((x142 * x312) + x313);
  Val x315 = ((Val(1) - x314) * (Val(1) - x47));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x316 = x283[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x317 = ((Val(1) - x143) * (Val(1) - x316));
  Val x318 = ((x143 * x316) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x48));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x320 = x283[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x321 = ((Val(1) - x144) * (Val(1) - x320));
  Val x322 = ((x144 * x320) + x321);
  Val x323 = ((Val(1) - x322) * (Val(1) - x49));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x324 = x283[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x325 = ((Val(1) - x145) * (Val(1) - x324));
  Val x326 = ((x145 * x324) + x325);
  Val x327 = ((Val(1) - x326) * (Val(1) - x50));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x328 = x283[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x329 = ((Val(1) - x146) * (Val(1) - x328));
  Val x330 = ((x146 * x328) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x51));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x332 = x283[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x333 = ((Val(1) - x147) * (Val(1) - x332));
  Val x334 = ((x147 * x332) + x333);
  Val x335 = ((Val(1) - x334) * (Val(1) - x52));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x336 = x283[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x337 = ((Val(1) - x148) * (Val(1) - x336));
  Val x338 = ((x148 * x336) + x337);
  Val x339 = ((Val(1) - x338) * (Val(1) - x53));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x340 = x283[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x341 = ((Val(1) - x149) * (Val(1) - x340));
  Val x342 = ((x149 * x340) + x341);
  Val x343 = ((Val(1) - x342) * (Val(1) - x54));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x344 = x283[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x345 = ((Val(1) - x150) * (Val(1) - x344));
  Val x346 = ((x150 * x344) + x345);
  Val x347 = ((Val(1) - x346) * (Val(1) - x55));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x348 = x283[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x349 = ((Val(1) - x151) * (Val(1) - x348));
  Val x350 = ((x151 * x348) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x56));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x352 = x283[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x353 = ((Val(1) - x152) * (Val(1) - x352));
  Val x354 = ((x152 * x352) + x353);
  Val x355 = ((Val(1) - x354) * (Val(1) - x57));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x356 = x283[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x357 = ((Val(1) - x153) * (Val(1) - x356));
  Val x358 = ((x153 * x356) + x357);
  Val x359 = ((Val(1) - x358) * (Val(1) - x58));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x360 = x283[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x361 = ((Val(1) - x154) * (Val(1) - x360));
  Val x362 = ((x154 * x360) + x361);
  Val x363 = ((Val(1) - x362) * (Val(1) - x59));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x364 = x283[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:418)
  Val x365 = ((Val(1) - x155) * (Val(1) - x364));
  Val x366 = ((x155 * x364) + x365);
  Val x367 = ((Val(1) - x366) * (Val(1) - x60));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  NondetRegStruct22Array x368 = x4.arrC;
  Val x369 = x368[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x370 = ((Val(1) - x166) * (Val(1) - x369));
  Val x371 = ((x166 * x369) + x370);
  Val x372 = ((Val(1) - x371) * (Val(1) - x61));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x373 = x368[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x374 = ((Val(1) - x167) * (Val(1) - x373));
  Val x375 = ((x167 * x373) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x72));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x377 = x368[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x378 = ((Val(1) - x168) * (Val(1) - x377));
  Val x379 = ((x168 * x377) + x378);
  Val x380 = ((Val(1) - x379) * (Val(1) - x73));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x381 = x368[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x382 = ((Val(1) - x169) * (Val(1) - x381));
  Val x383 = ((x169 * x381) + x382);
  Val x384 = ((Val(1) - x383) * (Val(1) - x74));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x385 = x368[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x386 = ((Val(1) - x170) * (Val(1) - x385));
  Val x387 = ((x170 * x385) + x386);
  Val x388 = ((Val(1) - x387) * (Val(1) - x75));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x389 = x368[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x390 = ((Val(1) - x171) * (Val(1) - x389));
  Val x391 = ((x171 * x389) + x390);
  Val x392 = ((Val(1) - x391) * (Val(1) - x76));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x393 = x368[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x394 = ((Val(1) - x172) * (Val(1) - x393));
  Val x395 = ((x172 * x393) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x77));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x397 = x368[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x398 = ((Val(1) - x173) * (Val(1) - x397));
  Val x399 = ((x173 * x397) + x398);
  Val x400 = ((Val(1) - x399) * (Val(1) - x78));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x401 = x368[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x402 = ((Val(1) - x174) * (Val(1) - x401));
  Val x403 = ((x174 * x401) + x402);
  Val x404 = ((Val(1) - x403) * (Val(1) - x79));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x405 = x368[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x406 = ((Val(1) - x175) * (Val(1) - x405));
  Val x407 = ((x175 * x405) + x406);
  Val x408 = ((Val(1) - x407) * (Val(1) - x80));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x409 = x368[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x410 = ((Val(1) - x176) * (Val(1) - x409));
  Val x411 = ((x176 * x409) + x410);
  Val x412 = ((Val(1) - x411) * (Val(1) - x81));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x413 = x368[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x414 = ((Val(1) - x177) * (Val(1) - x413));
  Val x415 = ((x177 * x413) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x82));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x417 = x368[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x418 = ((Val(1) - x178) * (Val(1) - x417));
  Val x419 = ((x178 * x417) + x418);
  Val x420 = ((Val(1) - x419) * (Val(1) - x83));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x421 = x368[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x422 = ((Val(1) - x179) * (Val(1) - x421));
  Val x423 = ((x179 * x421) + x422);
  Val x424 = ((Val(1) - x423) * (Val(1) - x84));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x425 = x368[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x426 = ((Val(1) - x180) * (Val(1) - x425));
  Val x427 = ((x180 * x425) + x426);
  Val x428 = ((Val(1) - x427) * (Val(1) - x85));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x429 = x368[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x430 = ((Val(1) - x181) * (Val(1) - x429));
  Val x431 = ((x181 * x429) + x430);
  Val x432 = ((Val(1) - x431) * (Val(1) - x86));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x433 = x368[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x434 = ((Val(1) - x182) * (Val(1) - x433));
  Val x435 = ((x182 * x433) + x434);
  Val x436 = ((Val(1) - x435) * (Val(1) - x87));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x437 = x368[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x438 = ((Val(1) - x183) * (Val(1) - x437));
  Val x439 = ((x183 * x437) + x438);
  Val x440 = ((Val(1) - x439) * (Val(1) - x88));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x441 = x368[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x442 = ((Val(1) - x184) * (Val(1) - x441));
  Val x443 = ((x184 * x441) + x442);
  Val x444 = ((Val(1) - x443) * (Val(1) - x89));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x445 = x368[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x446 = ((Val(1) - x185) * (Val(1) - x445));
  Val x447 = ((x185 * x445) + x446);
  Val x448 = ((Val(1) - x447) * (Val(1) - x90));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:365)
  Val x449 = x368[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:419)
  Val x450 = ((Val(1) - x186) * (Val(1) - x449));
  Val x451 = ((x186 * x449) + x450);
  Val x452 = ((Val(1) - x451) * (Val(1) - x91));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:422)
  Val x453 = (((x233 * x17) + x234) * Val(2));
  Val x454 = (((x237 * x18) + x238) * Val(4));
  Val x455 = (((x241 * x19) + x242) * Val(8));
  Val x456 = (((x245 * x20) + x246) * Val(16));
  Val x457 = (((x249 * x21) + x250) * Val(32));
  Val x458 = (((x253 * x22) + x254) * Val(64));
  Val x459 = (((x257 * x23) + x258) * Val(128));
  Val x460 = (((x261 * x24) + x262) * Val(256));
  Val x461 = (((x265 * x25) + x266) * Val(512));
  Val x462 = (((x269 * x26) + x270) * Val(1024));
  Val x463 = (((x273 * x27) + x274) * Val(2048));
  Val x464 = (((x277 * x28) + x278) * Val(4096));
  Val x465 = (((x281 * x29) + x282) * Val(8192));
  Val x466 = (((x286 * x30) + x287) * Val(16384));
  Val x467 = (((x290 * x41) + x291) * Val(32768));
  Val x468 = (((x294 * x42) + x295) * Val(65536));
  Val x469 = (((x298 * x43) + x299) * Val(131072));
  Val x470 = (((x302 * x44) + x303) * Val(262144));
  Val x471 = (((x306 * x45) + x307) * Val(524288));
  Val x472 = (((x310 * x46) + x311) * Val(1048576));
  Val x473 = (((x314 * x47) + x315) * Val(2097152));
  Val x474 = (((x229 * x16) + x230) + x453);
  Val x475 = (((x474 + x454) + x455) + x456);
  Val x476 = (((x475 + x457) + x458) + x459);
  Val x477 = (((x476 + x460) + x461) + x462);
  Val x478 = (((x477 + x463) + x464) + x465);
  Val x479 = (((x478 + x466) + x467) + x468);
  Val x480 = (((x479 + x469) + x470) + x471);
  NondetRegStruct x481 = exec_Reg(ctx, ((x480 + x472) + x473), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:423)
  Val x482 = (((x322 * x49) + x323) * Val(2));
  Val x483 = (((x326 * x50) + x327) * Val(4));
  Val x484 = (((x330 * x51) + x331) * Val(8));
  Val x485 = (((x334 * x52) + x335) * Val(16));
  Val x486 = (((x338 * x53) + x339) * Val(32));
  Val x487 = (((x342 * x54) + x343) * Val(64));
  Val x488 = (((x346 * x55) + x347) * Val(128));
  Val x489 = (((x350 * x56) + x351) * Val(256));
  Val x490 = (((x354 * x57) + x355) * Val(512));
  Val x491 = (((x358 * x58) + x359) * Val(1024));
  Val x492 = (((x362 * x59) + x363) * Val(2048));
  Val x493 = (((x366 * x60) + x367) * Val(4096));
  Val x494 = (((x371 * x61) + x372) * Val(8192));
  Val x495 = (((x375 * x72) + x376) * Val(16384));
  Val x496 = (((x379 * x73) + x380) * Val(32768));
  Val x497 = (((x383 * x74) + x384) * Val(65536));
  Val x498 = (((x387 * x75) + x388) * Val(131072));
  Val x499 = (((x391 * x76) + x392) * Val(262144));
  Val x500 = (((x395 * x77) + x396) * Val(524288));
  Val x501 = (((x399 * x78) + x400) * Val(1048576));
  Val x502 = (((x318 * x48) + x319) + x482);
  Val x503 = (((x502 + x483) + x484) + x485);
  Val x504 = (((x503 + x486) + x487) + x488);
  Val x505 = (((x504 + x489) + x490) + x491);
  Val x506 = (((x505 + x492) + x493) + x494);
  Val x507 = (((x506 + x495) + x496) + x497);
  Val x508 = (((x507 + x498) + x499) + x500);
  NondetRegStruct x509 = exec_Reg(ctx, (x508 + x501), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:424)
  Val x510 = (((x407 * x80) + x408) * Val(2));
  Val x511 = (((x411 * x81) + x412) * Val(4));
  Val x512 = (((x415 * x82) + x416) * Val(8));
  Val x513 = (((x419 * x83) + x420) * Val(16));
  Val x514 = (((x423 * x84) + x424) * Val(32));
  Val x515 = (((x427 * x85) + x428) * Val(64));
  Val x516 = (((x431 * x86) + x432) * Val(128));
  Val x517 = (((x435 * x87) + x436) * Val(256));
  Val x518 = (((x439 * x88) + x440) * Val(512));
  Val x519 = (((x443 * x89) + x444) * Val(1024));
  Val x520 = (((x447 * x90) + x448) * Val(2048));
  Val x521 = (((x451 * x91) + x452) * Val(4096));
  Val x522 = (((x197 * x92) + x198) * Val(8192));
  Val x523 = (((x201 * x9) + x202) * Val(16384));
  Val x524 = (((x205 * x10) + x206) * Val(32768));
  Val x525 = (((x209 * x11) + x210) * Val(65536));
  Val x526 = (((x213 * x12) + x214) * Val(131072));
  Val x527 = (((x217 * x13) + x218) * Val(262144));
  Val x528 = (((x221 * x14) + x222) * Val(524288));
  Val x529 = (((x225 * x15) + x226) * Val(1048576));
  Val x530 = (((x403 * x79) + x404) + x510);
  Val x531 = (((x530 + x511) + x512) + x513);
  Val x532 = (((x531 + x514) + x515) + x516);
  Val x533 = (((x532 + x517) + x518) + x519);
  Val x534 = (((x533 + x520) + x521) + x522);
  Val x535 = (((x534 + x523) + x524) + x525);
  Val x536 = (((x535 + x526) + x527) + x528);
  NondetRegStruct x537 = exec_Reg(ctx, (x536 + x529), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor2(zirgen/circuit/keccak/keccak.zir:427)
  Val22Array x538 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x539 = exec_RetTuple(
      ctx,
      x538,
      x538,
      x538,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x538,
      Val22Array{x481._super, x509._super, x537._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(6),
      Val(9),
      x4.rnd._super,
      x4.blk._super,
      x4.midx._super,
      LAYOUT_LOOKUP(layout2, _super));
  return x539;
}
RetTupleStruct execRhoMinor0_4__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor0_4__4_Layout> layout2) {
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  RetTupleStruct x3 = back_RetTuple(ctx, 7, arg1);
  NondetRegStruct24Array x4 = x3.arrD;
  Val x5 = x4[18]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:257)
  ToBits_22_Struct x6 = exec_ToBits_22_(ctx, x5, LAYOUT_LOOKUP(layout2, unpackM1));
  NondetRegStruct22Array x7 = x6._super;
  Val x8 = x7[0]._super;
  Val x9 = x7[1]._super;
  Val x10 = x7[2]._super;
  Val x11 = x7[3]._super;
  Val x12 = x7[4]._super;
  Val x13 = x7[5]._super;
  Val x14 = x7[6]._super;
  Val x15 = x7[7]._super;
  Val x16 = x7[8]._super;
  Val x17 = x7[9]._super;
  Val x18 = x7[10]._super;
  Val x19 = x7[11]._super;
  Val x20 = x7[12]._super;
  Val x21 = x7[13]._super;
  Val x22 = x7[14]._super;
  Val x23 = x7[15]._super;
  Val x24 = x7[16]._super;
  Val x25 = x7[17]._super;
  Val x26 = x7[18]._super;
  Val x27 = x7[19]._super;
  Val x28 = x7[20]._super;
  Val x29 = x7[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:258)
  Val x30 = (((x8 + (x9 * Val(2))) + (x10 * Val(4))) + (x11 * Val(8)));
  Val x31 = (((x30 + (x12 * Val(16))) + (x13 * Val(32))) + (x14 * Val(64)));
  Val x32 = (((x31 + (x15 * Val(128))) + (x16 * Val(256))) + (x17 * Val(512)));
  Val x33 = (((x32 + (x18 * Val(1024))) + (x19 * Val(2048))) + (x20 * Val(4096)));
  Val x34 = (((x33 + (x21 * Val(8192))) + (x22 * Val(16384))) + (x23 * Val(32768)));
  Val x35 = (((x34 + (x24 * Val(65536))) + (x25 * Val(131072))) + (x26 * Val(262144)));
  Val x36 = (((x35 + (x27 * Val(524288))) + (x28 * Val(1048576))) + (x29 * Val(2097152)));
  EQZ((x36 - x5), "rho_minor0(zirgen/circuit/keccak/keccak.zir:258)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x37 = x4[19]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:261)
  ToBits_21_Struct x38 = exec_ToBits_21_(ctx, x37, LAYOUT_LOOKUP(layout2, unpackM2));
  NondetRegStruct21Array x39 = x38._super;
  Val x40 = x39[0]._super;
  Val x41 = x39[1]._super;
  Val x42 = x39[2]._super;
  Val x43 = x39[3]._super;
  Val x44 = x39[4]._super;
  Val x45 = x39[5]._super;
  Val x46 = x39[6]._super;
  Val x47 = x39[7]._super;
  Val x48 = x39[8]._super;
  Val x49 = x39[9]._super;
  Val x50 = x39[10]._super;
  Val x51 = x39[11]._super;
  Val x52 = x39[12]._super;
  Val x53 = x39[13]._super;
  Val x54 = x39[14]._super;
  Val x55 = x39[15]._super;
  Val x56 = x39[16]._super;
  Val x57 = x39[17]._super;
  Val x58 = x39[18]._super;
  Val x59 = x39[19]._super;
  Val x60 = x39[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:262)
  Val x61 = (((x40 + (x41 * Val(2))) + (x42 * Val(4))) + (x43 * Val(8)));
  Val x62 = (((x61 + (x44 * Val(16))) + (x45 * Val(32))) + (x46 * Val(64)));
  Val x63 = (((x62 + (x47 * Val(128))) + (x48 * Val(256))) + (x49 * Val(512)));
  Val x64 = (((x63 + (x50 * Val(1024))) + (x51 * Val(2048))) + (x52 * Val(4096)));
  Val x65 = (((x64 + (x53 * Val(8192))) + (x54 * Val(16384))) + (x55 * Val(32768)));
  Val x66 = (((x65 + (x56 * Val(65536))) + (x57 * Val(131072))) + (x58 * Val(262144)));
  Val x67 = (((x66 + (x59 * Val(524288))) + (x60 * Val(1048576))) - x37);
  EQZ(x67, "rho_minor0(zirgen/circuit/keccak/keccak.zir:262)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x68 = x4[20]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:266)
  ToBits_21_Struct x69 = exec_ToBits_21_(ctx, x68, LAYOUT_LOOKUP(layout2, unpackM3));
  NondetRegStruct21Array x70 = x69._super;
  Val x71 = x70[0]._super;
  Val x72 = x70[1]._super;
  Val x73 = x70[2]._super;
  Val x74 = x70[3]._super;
  Val x75 = x70[4]._super;
  Val x76 = x70[5]._super;
  Val x77 = x70[6]._super;
  Val x78 = x70[7]._super;
  Val x79 = x70[8]._super;
  Val x80 = x70[9]._super;
  Val x81 = x70[10]._super;
  Val x82 = x70[11]._super;
  Val x83 = x70[12]._super;
  Val x84 = x70[13]._super;
  Val x85 = x70[14]._super;
  Val x86 = x70[15]._super;
  Val x87 = x70[16]._super;
  Val x88 = x70[17]._super;
  Val x89 = x70[18]._super;
  Val x90 = x70[19]._super;
  Val x91 = x70[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:267)
  Val x92 = (((x71 + (x72 * Val(2))) + (x73 * Val(4))) + (x74 * Val(8)));
  Val x93 = (((x92 + (x75 * Val(16))) + (x76 * Val(32))) + (x77 * Val(64)));
  Val x94 = (((x93 + (x78 * Val(128))) + (x79 * Val(256))) + (x80 * Val(512)));
  Val x95 = (((x94 + (x81 * Val(1024))) + (x82 * Val(2048))) + (x83 * Val(4096)));
  Val x96 = (((x95 + (x84 * Val(8192))) + (x85 * Val(16384))) + (x86 * Val(32768)));
  Val x97 = (((x96 + (x87 * Val(65536))) + (x88 * Val(131072))) + (x89 * Val(262144)));
  Val x98 = (((x97 + (x90 * Val(524288))) + (x91 * Val(1048576))) - x68);
  EQZ(x98, "rho_minor0(zirgen/circuit/keccak/keccak.zir:267)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x99 = x4[9]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:271)
  ToBits_22_Struct x100 = exec_ToBits_22_(ctx, x99, LAYOUT_LOOKUP(layout2, unpackP1));
  NondetRegStruct22Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  Val x123 = x101[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:272)
  Val x124 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x125 = (((x124 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x126 = (((x125 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x127 = (((x126 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x128 = (((x127 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x129 = (((x128 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x130 = (((x129 + (x121 * Val(524288))) + (x122 * Val(1048576))) + (x123 * Val(2097152)));
  EQZ((x130 - x99), "rho_minor0(zirgen/circuit/keccak/keccak.zir:272)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x131 = x4[10]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:275)
  ToBits_21_Struct x132 = exec_ToBits_21_(ctx, x131, LAYOUT_LOOKUP(layout2, unpackP2));
  NondetRegStruct21Array x133 = x132._super;
  Val x134 = x133[0]._super;
  Val x135 = x133[1]._super;
  Val x136 = x133[2]._super;
  Val x137 = x133[3]._super;
  Val x138 = x133[4]._super;
  Val x139 = x133[5]._super;
  Val x140 = x133[6]._super;
  Val x141 = x133[7]._super;
  Val x142 = x133[8]._super;
  Val x143 = x133[9]._super;
  Val x144 = x133[10]._super;
  Val x145 = x133[11]._super;
  Val x146 = x133[12]._super;
  Val x147 = x133[13]._super;
  Val x148 = x133[14]._super;
  Val x149 = x133[15]._super;
  Val x150 = x133[16]._super;
  Val x151 = x133[17]._super;
  Val x152 = x133[18]._super;
  Val x153 = x133[19]._super;
  Val x154 = x133[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:276)
  Val x155 = (((x134 + (x135 * Val(2))) + (x136 * Val(4))) + (x137 * Val(8)));
  Val x156 = (((x155 + (x138 * Val(16))) + (x139 * Val(32))) + (x140 * Val(64)));
  Val x157 = (((x156 + (x141 * Val(128))) + (x142 * Val(256))) + (x143 * Val(512)));
  Val x158 = (((x157 + (x144 * Val(1024))) + (x145 * Val(2048))) + (x146 * Val(4096)));
  Val x159 = (((x158 + (x147 * Val(8192))) + (x148 * Val(16384))) + (x149 * Val(32768)));
  Val x160 = (((x159 + (x150 * Val(65536))) + (x151 * Val(131072))) + (x152 * Val(262144)));
  Val x161 = (((x160 + (x153 * Val(524288))) + (x154 * Val(1048576))) - x131);
  EQZ(x161, "rho_minor0(zirgen/circuit/keccak/keccak.zir:276)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:253)
  Val x162 = x4[11]._super;
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:279)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout2, unpackP3));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:280)
  Val x186 = (((x165 + (x166 * Val(2))) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x187 = (((x186 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x188 = (((x187 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x189 = (((x188 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x190 = (((x189 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x191 = (((x190 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x192 = (((x191 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x192, "rho_minor0(zirgen/circuit/keccak/keccak.zir:280)");
  // rho_minor0(zirgen/circuit/keccak/keccak.zir:287)
  RetTupleStruct x193 =
      exec_RetTuple(ctx,
                    Val22Array{x185, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111,
                               x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122},
                    Val22Array{x123, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143,
                               x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, Val(0)},
                    Val22Array{x154, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174,
                               x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, Val(0)},
                    Val24Array{x8,  x9,  x10, x11, x12, x13, x14, x15, x16, x17, x18,    x19,
                               x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, Val(0), Val(0)},
                    Val22Array{x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50,
                               x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, Val(0)},
                    Val22Array{x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81,
                               x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, Val(0)},
                    Val(7),
                    Val(9),
                    x3.rnd._super,
                    x3.blk._super,
                    x3.midx._super,
                    LAYOUT_LOOKUP(layout2, _super));
  return x193;
}
RetTupleStruct execRhoMinor1_4__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<RhoMinor1_4__4_Layout> layout2) {
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  BoundLayout<RhoMinor1_4__4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  RetTupleStruct x4 = back_RetTuple(ctx, 8, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:292)
  NondetRegStruct24Array x6 = x4.arrD;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:297)
  Val x7 = x6[6]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:304)
  ToBits_22_Struct x8 = exec_ToBits_22_(ctx, x7, LAYOUT_LOOKUP(layout2, unpackXy1));
  NondetRegStruct22Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  Val x31 = x9[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:305)
  Val x32 = (((x10 + (x11 * Val(2))) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) + (x31 * Val(2097152)));
  EQZ((x38 - x7), "rho_minor1(zirgen/circuit/keccak/keccak.zir:305)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:309)
  Val x39 = x6[7]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:316)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpackXy2));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:317)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "rho_minor1(zirgen/circuit/keccak/keccak.zir:317)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:321)
  Val x70 = x6[8]._super;
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:328)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpackXy3));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:329)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "rho_minor1(zirgen/circuit/keccak/keccak.zir:329)");
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x101 = x5.arrA;
  NondetRegStruct24Array x102 = x5.arrD;
  Val x103 = x101[0]._super;
  Val x104 = x102[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x105 = ((Val(1) - x10) * (Val(1) - x103));
  Val x106 = ((x10 * x103) + x105);
  Val x107 = ((Val(1) - x106) * (Val(1) - x104));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x108 = x101[1]._super;
  Val x109 = x102[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x110 = ((Val(1) - x11) * (Val(1) - x108));
  Val x111 = ((x11 * x108) + x110);
  Val x112 = ((Val(1) - x111) * (Val(1) - x109));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x113 = x101[2]._super;
  Val x114 = x102[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x115 = ((Val(1) - x12) * (Val(1) - x113));
  Val x116 = ((x12 * x113) + x115);
  Val x117 = ((Val(1) - x116) * (Val(1) - x114));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x118 = x101[3]._super;
  Val x119 = x102[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x120 = ((Val(1) - x13) * (Val(1) - x118));
  Val x121 = ((x13 * x118) + x120);
  Val x122 = ((Val(1) - x121) * (Val(1) - x119));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x123 = x101[4]._super;
  Val x124 = x102[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x125 = ((Val(1) - x14) * (Val(1) - x123));
  Val x126 = ((x14 * x123) + x125);
  Val x127 = ((Val(1) - x126) * (Val(1) - x124));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x128 = x101[5]._super;
  Val x129 = x102[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x130 = ((Val(1) - x15) * (Val(1) - x128));
  Val x131 = ((x15 * x128) + x130);
  Val x132 = ((Val(1) - x131) * (Val(1) - x129));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x133 = x101[6]._super;
  Val x134 = x102[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x135 = ((Val(1) - x16) * (Val(1) - x133));
  Val x136 = ((x16 * x133) + x135);
  Val x137 = ((Val(1) - x136) * (Val(1) - x134));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x138 = x101[7]._super;
  Val x139 = x102[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x140 = ((Val(1) - x17) * (Val(1) - x138));
  Val x141 = ((x17 * x138) + x140);
  Val x142 = ((Val(1) - x141) * (Val(1) - x139));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x143 = x101[8]._super;
  Val x144 = x102[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x145 = ((Val(1) - x18) * (Val(1) - x143));
  Val x146 = ((x18 * x143) + x145);
  Val x147 = ((Val(1) - x146) * (Val(1) - x144));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x148 = x101[9]._super;
  Val x149 = x102[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x150 = ((Val(1) - x19) * (Val(1) - x148));
  Val x151 = ((x19 * x148) + x150);
  Val x152 = ((Val(1) - x151) * (Val(1) - x149));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x153 = x101[10]._super;
  Val x154 = x102[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x155 = ((Val(1) - x20) * (Val(1) - x153));
  Val x156 = ((x20 * x153) + x155);
  Val x157 = ((Val(1) - x156) * (Val(1) - x154));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x158 = x101[11]._super;
  Val x159 = x102[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x160 = ((Val(1) - x21) * (Val(1) - x158));
  Val x161 = ((x21 * x158) + x160);
  Val x162 = ((Val(1) - x161) * (Val(1) - x159));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x163 = x101[12]._super;
  Val x164 = x102[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x165 = ((Val(1) - x22) * (Val(1) - x163));
  Val x166 = ((x22 * x163) + x165);
  Val x167 = ((Val(1) - x166) * (Val(1) - x164));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x168 = x101[13]._super;
  Val x169 = x102[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x170 = ((Val(1) - x23) * (Val(1) - x168));
  Val x171 = ((x23 * x168) + x170);
  Val x172 = ((Val(1) - x171) * (Val(1) - x169));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x173 = x101[14]._super;
  Val x174 = x102[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x175 = ((Val(1) - x24) * (Val(1) - x173));
  Val x176 = ((x24 * x173) + x175);
  Val x177 = ((Val(1) - x176) * (Val(1) - x174));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x178 = x101[15]._super;
  Val x179 = x102[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x180 = ((Val(1) - x25) * (Val(1) - x178));
  Val x181 = ((x25 * x178) + x180);
  Val x182 = ((Val(1) - x181) * (Val(1) - x179));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x183 = x101[16]._super;
  Val x184 = x102[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x185 = ((Val(1) - x26) * (Val(1) - x183));
  Val x186 = ((x26 * x183) + x185);
  Val x187 = ((Val(1) - x186) * (Val(1) - x184));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x188 = x101[17]._super;
  Val x189 = x102[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x190 = ((Val(1) - x27) * (Val(1) - x188));
  Val x191 = ((x27 * x188) + x190);
  Val x192 = ((Val(1) - x191) * (Val(1) - x189));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x193 = x101[18]._super;
  Val x194 = x102[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x195 = ((Val(1) - x28) * (Val(1) - x193));
  Val x196 = ((x28 * x193) + x195);
  Val x197 = ((Val(1) - x196) * (Val(1) - x194));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x198 = x101[19]._super;
  Val x199 = x102[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x200 = ((Val(1) - x29) * (Val(1) - x198));
  Val x201 = ((x29 * x198) + x200);
  Val x202 = ((Val(1) - x201) * (Val(1) - x199));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x203 = x101[20]._super;
  Val x204 = x102[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x205 = ((Val(1) - x30) * (Val(1) - x203));
  Val x206 = ((x30 * x203) + x205);
  Val x207 = ((Val(1) - x206) * (Val(1) - x204));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x208 = x101[21]._super;
  Val x209 = x102[21]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:331)
  Val x210 = ((Val(1) - x31) * (Val(1) - x208));
  Val x211 = ((x31 * x208) + x210);
  Val x212 = ((Val(1) - x211) * (Val(1) - x209));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x213 = x5.arrB;
  NondetRegStruct22Array x214 = x5.arrE;
  Val x215 = x213[0]._super;
  Val x216 = x214[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x217 = ((Val(1) - x42) * (Val(1) - x215));
  Val x218 = ((x42 * x215) + x217);
  Val x219 = ((Val(1) - x218) * (Val(1) - x216));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x220 = x213[1]._super;
  Val x221 = x214[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x222 = ((Val(1) - x43) * (Val(1) - x220));
  Val x223 = ((x43 * x220) + x222);
  Val x224 = ((Val(1) - x223) * (Val(1) - x221));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x225 = x213[2]._super;
  Val x226 = x214[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x227 = ((Val(1) - x44) * (Val(1) - x225));
  Val x228 = ((x44 * x225) + x227);
  Val x229 = ((Val(1) - x228) * (Val(1) - x226));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x230 = x213[3]._super;
  Val x231 = x214[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x232 = ((Val(1) - x45) * (Val(1) - x230));
  Val x233 = ((x45 * x230) + x232);
  Val x234 = ((Val(1) - x233) * (Val(1) - x231));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x235 = x213[4]._super;
  Val x236 = x214[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x237 = ((Val(1) - x46) * (Val(1) - x235));
  Val x238 = ((x46 * x235) + x237);
  Val x239 = ((Val(1) - x238) * (Val(1) - x236));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x240 = x213[5]._super;
  Val x241 = x214[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x242 = ((Val(1) - x47) * (Val(1) - x240));
  Val x243 = ((x47 * x240) + x242);
  Val x244 = ((Val(1) - x243) * (Val(1) - x241));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x245 = x213[6]._super;
  Val x246 = x214[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x247 = ((Val(1) - x48) * (Val(1) - x245));
  Val x248 = ((x48 * x245) + x247);
  Val x249 = ((Val(1) - x248) * (Val(1) - x246));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x250 = x213[7]._super;
  Val x251 = x214[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x252 = ((Val(1) - x49) * (Val(1) - x250));
  Val x253 = ((x49 * x250) + x252);
  Val x254 = ((Val(1) - x253) * (Val(1) - x251));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x255 = x213[8]._super;
  Val x256 = x214[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x257 = ((Val(1) - x50) * (Val(1) - x255));
  Val x258 = ((x50 * x255) + x257);
  Val x259 = ((Val(1) - x258) * (Val(1) - x256));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x260 = x213[9]._super;
  Val x261 = x214[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x262 = ((Val(1) - x51) * (Val(1) - x260));
  Val x263 = ((x51 * x260) + x262);
  Val x264 = ((Val(1) - x263) * (Val(1) - x261));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x265 = x213[10]._super;
  Val x266 = x214[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x267 = ((Val(1) - x52) * (Val(1) - x265));
  Val x268 = ((x52 * x265) + x267);
  Val x269 = ((Val(1) - x268) * (Val(1) - x266));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x270 = x213[11]._super;
  Val x271 = x214[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x272 = ((Val(1) - x53) * (Val(1) - x270));
  Val x273 = ((x53 * x270) + x272);
  Val x274 = ((Val(1) - x273) * (Val(1) - x271));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x275 = x213[12]._super;
  Val x276 = x214[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x277 = ((Val(1) - x54) * (Val(1) - x275));
  Val x278 = ((x54 * x275) + x277);
  Val x279 = ((Val(1) - x278) * (Val(1) - x276));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x280 = x213[13]._super;
  Val x281 = x214[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x282 = ((Val(1) - x55) * (Val(1) - x280));
  Val x283 = ((x55 * x280) + x282);
  Val x284 = ((Val(1) - x283) * (Val(1) - x281));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x285 = x213[14]._super;
  Val x286 = x214[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x287 = ((Val(1) - x56) * (Val(1) - x285));
  Val x288 = ((x56 * x285) + x287);
  Val x289 = ((Val(1) - x288) * (Val(1) - x286));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x290 = x213[15]._super;
  Val x291 = x214[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x292 = ((Val(1) - x57) * (Val(1) - x290));
  Val x293 = ((x57 * x290) + x292);
  Val x294 = ((Val(1) - x293) * (Val(1) - x291));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x295 = x213[16]._super;
  Val x296 = x214[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x297 = ((Val(1) - x58) * (Val(1) - x295));
  Val x298 = ((x58 * x295) + x297);
  Val x299 = ((Val(1) - x298) * (Val(1) - x296));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x300 = x213[17]._super;
  Val x301 = x214[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x302 = ((Val(1) - x59) * (Val(1) - x300));
  Val x303 = ((x59 * x300) + x302);
  Val x304 = ((Val(1) - x303) * (Val(1) - x301));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x305 = x213[18]._super;
  Val x306 = x214[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x307 = ((Val(1) - x60) * (Val(1) - x305));
  Val x308 = ((x60 * x305) + x307);
  Val x309 = ((Val(1) - x308) * (Val(1) - x306));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x310 = x213[19]._super;
  Val x311 = x214[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x312 = ((Val(1) - x61) * (Val(1) - x310));
  Val x313 = ((x61 * x310) + x312);
  Val x314 = ((Val(1) - x313) * (Val(1) - x311));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x315 = x213[20]._super;
  Val x316 = x214[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:332)
  Val x317 = ((Val(1) - x62) * (Val(1) - x315));
  Val x318 = ((x62 * x315) + x317);
  Val x319 = ((Val(1) - x318) * (Val(1) - x316));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  NondetRegStruct22Array x320 = x5.arrC;
  NondetRegStruct22Array x321 = x5.arrF;
  Val x322 = x320[0]._super;
  Val x323 = x321[0]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x324 = ((Val(1) - x73) * (Val(1) - x322));
  Val x325 = ((x73 * x322) + x324);
  Val x326 = ((Val(1) - x325) * (Val(1) - x323));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x327 = x320[1]._super;
  Val x328 = x321[1]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x329 = ((Val(1) - x74) * (Val(1) - x327));
  Val x330 = ((x74 * x327) + x329);
  Val x331 = ((Val(1) - x330) * (Val(1) - x328));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x332 = x320[2]._super;
  Val x333 = x321[2]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x334 = ((Val(1) - x75) * (Val(1) - x332));
  Val x335 = ((x75 * x332) + x334);
  Val x336 = ((Val(1) - x335) * (Val(1) - x333));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x337 = x320[3]._super;
  Val x338 = x321[3]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x339 = ((Val(1) - x76) * (Val(1) - x337));
  Val x340 = ((x76 * x337) + x339);
  Val x341 = ((Val(1) - x340) * (Val(1) - x338));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x342 = x320[4]._super;
  Val x343 = x321[4]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x344 = ((Val(1) - x77) * (Val(1) - x342));
  Val x345 = ((x77 * x342) + x344);
  Val x346 = ((Val(1) - x345) * (Val(1) - x343));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x347 = x320[5]._super;
  Val x348 = x321[5]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x349 = ((Val(1) - x78) * (Val(1) - x347));
  Val x350 = ((x78 * x347) + x349);
  Val x351 = ((Val(1) - x350) * (Val(1) - x348));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x352 = x320[6]._super;
  Val x353 = x321[6]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x354 = ((Val(1) - x79) * (Val(1) - x352));
  Val x355 = ((x79 * x352) + x354);
  Val x356 = ((Val(1) - x355) * (Val(1) - x353));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x357 = x320[7]._super;
  Val x358 = x321[7]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x359 = ((Val(1) - x80) * (Val(1) - x357));
  Val x360 = ((x80 * x357) + x359);
  Val x361 = ((Val(1) - x360) * (Val(1) - x358));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x362 = x320[8]._super;
  Val x363 = x321[8]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x364 = ((Val(1) - x81) * (Val(1) - x362));
  Val x365 = ((x81 * x362) + x364);
  Val x366 = ((Val(1) - x365) * (Val(1) - x363));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x367 = x320[9]._super;
  Val x368 = x321[9]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x369 = ((Val(1) - x82) * (Val(1) - x367));
  Val x370 = ((x82 * x367) + x369);
  Val x371 = ((Val(1) - x370) * (Val(1) - x368));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x372 = x320[10]._super;
  Val x373 = x321[10]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x374 = ((Val(1) - x83) * (Val(1) - x372));
  Val x375 = ((x83 * x372) + x374);
  Val x376 = ((Val(1) - x375) * (Val(1) - x373));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x377 = x320[11]._super;
  Val x378 = x321[11]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x379 = ((Val(1) - x84) * (Val(1) - x377));
  Val x380 = ((x84 * x377) + x379);
  Val x381 = ((Val(1) - x380) * (Val(1) - x378));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x382 = x320[12]._super;
  Val x383 = x321[12]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x384 = ((Val(1) - x85) * (Val(1) - x382));
  Val x385 = ((x85 * x382) + x384);
  Val x386 = ((Val(1) - x385) * (Val(1) - x383));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x387 = x320[13]._super;
  Val x388 = x321[13]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x389 = ((Val(1) - x86) * (Val(1) - x387));
  Val x390 = ((x86 * x387) + x389);
  Val x391 = ((Val(1) - x390) * (Val(1) - x388));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x392 = x320[14]._super;
  Val x393 = x321[14]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x394 = ((Val(1) - x87) * (Val(1) - x392));
  Val x395 = ((x87 * x392) + x394);
  Val x396 = ((Val(1) - x395) * (Val(1) - x393));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x397 = x320[15]._super;
  Val x398 = x321[15]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x399 = ((Val(1) - x88) * (Val(1) - x397));
  Val x400 = ((x88 * x397) + x399);
  Val x401 = ((Val(1) - x400) * (Val(1) - x398));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x402 = x320[16]._super;
  Val x403 = x321[16]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x404 = ((Val(1) - x89) * (Val(1) - x402));
  Val x405 = ((x89 * x402) + x404);
  Val x406 = ((Val(1) - x405) * (Val(1) - x403));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x407 = x320[17]._super;
  Val x408 = x321[17]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x409 = ((Val(1) - x90) * (Val(1) - x407));
  Val x410 = ((x90 * x407) + x409);
  Val x411 = ((Val(1) - x410) * (Val(1) - x408));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x412 = x320[18]._super;
  Val x413 = x321[18]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x414 = ((Val(1) - x91) * (Val(1) - x412));
  Val x415 = ((x91 * x412) + x414);
  Val x416 = ((Val(1) - x415) * (Val(1) - x413));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x417 = x320[19]._super;
  Val x418 = x321[19]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x419 = ((Val(1) - x92) * (Val(1) - x417));
  Val x420 = ((x92 * x417) + x419);
  Val x421 = ((Val(1) - x420) * (Val(1) - x418));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:293)
  Val x422 = x320[20]._super;
  Val x423 = x321[20]._super;
  // xor3(zirgen/circuit/keccak/keccak.zir:110)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:333)
  Val x424 = ((Val(1) - x93) * (Val(1) - x422));
  Val x425 = ((x93 * x422) + x424);
  Val x426 = ((Val(1) - x425) * (Val(1) - x423));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:336)
  Val x427 = (((x365 * x363) + x366) * Val(2));
  Val x428 = (((x370 * x368) + x371) * Val(4));
  Val x429 = (((x375 * x373) + x376) * Val(8));
  Val x430 = (((x380 * x378) + x381) * Val(16));
  Val x431 = (((x385 * x383) + x386) * Val(32));
  Val x432 = (((x390 * x388) + x391) * Val(64));
  Val x433 = (((x395 * x393) + x396) * Val(128));
  Val x434 = (((x400 * x398) + x401) * Val(256));
  Val x435 = (((x405 * x403) + x406) * Val(512));
  Val x436 = (((x410 * x408) + x411) * Val(1024));
  Val x437 = (((x415 * x413) + x416) * Val(2048));
  Val x438 = (((x420 * x418) + x421) * Val(4096));
  Val x439 = (((x425 * x423) + x426) * Val(8192));
  Val x440 = (((x106 * x104) + x107) * Val(16384));
  Val x441 = (((x111 * x109) + x112) * Val(32768));
  Val x442 = (((x116 * x114) + x117) * Val(65536));
  Val x443 = (((x121 * x119) + x122) * Val(131072));
  Val x444 = (((x126 * x124) + x127) * Val(262144));
  Val x445 = (((x131 * x129) + x132) * Val(524288));
  Val x446 = (((x136 * x134) + x137) * Val(1048576));
  Val x447 = (((x141 * x139) + x142) * Val(2097152));
  Val x448 = (((x360 * x358) + x361) + x427);
  Val x449 = (((x448 + x428) + x429) + x430);
  Val x450 = (((x449 + x431) + x432) + x433);
  Val x451 = (((x450 + x434) + x435) + x436);
  Val x452 = (((x451 + x437) + x438) + x439);
  Val x453 = (((x452 + x440) + x441) + x442);
  Val x454 = (((x453 + x443) + x444) + x445);
  NondetRegStruct x455 = exec_Reg(ctx, ((x454 + x446) + x447), LAYOUT_LOOKUP(layout2, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:337)
  Val x456 = (((x151 * x149) + x152) * Val(2));
  Val x457 = (((x156 * x154) + x157) * Val(4));
  Val x458 = (((x161 * x159) + x162) * Val(8));
  Val x459 = (((x166 * x164) + x167) * Val(16));
  Val x460 = (((x171 * x169) + x172) * Val(32));
  Val x461 = (((x176 * x174) + x177) * Val(64));
  Val x462 = (((x181 * x179) + x182) * Val(128));
  Val x463 = (((x186 * x184) + x187) * Val(256));
  Val x464 = (((x191 * x189) + x192) * Val(512));
  Val x465 = (((x196 * x194) + x197) * Val(1024));
  Val x466 = (((x201 * x199) + x202) * Val(2048));
  Val x467 = (((x206 * x204) + x207) * Val(4096));
  Val x468 = (((x211 * x209) + x212) * Val(8192));
  Val x469 = (((x218 * x216) + x219) * Val(16384));
  Val x470 = (((x223 * x221) + x224) * Val(32768));
  Val x471 = (((x228 * x226) + x229) * Val(65536));
  Val x472 = (((x233 * x231) + x234) * Val(131072));
  Val x473 = (((x238 * x236) + x239) * Val(262144));
  Val x474 = (((x243 * x241) + x244) * Val(524288));
  Val x475 = (((x248 * x246) + x249) * Val(1048576));
  Val x476 = (((x146 * x144) + x147) + x456);
  Val x477 = (((x476 + x457) + x458) + x459);
  Val x478 = (((x477 + x460) + x461) + x462);
  Val x479 = (((x478 + x463) + x464) + x465);
  Val x480 = (((x479 + x466) + x467) + x468);
  Val x481 = (((x480 + x469) + x470) + x471);
  Val x482 = (((x481 + x472) + x473) + x474);
  NondetRegStruct x483 = exec_Reg(ctx, (x482 + x475), LAYOUT_LOOKUP(layout2, _1));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:338)
  Val x484 = (((x258 * x256) + x259) * Val(2));
  Val x485 = (((x263 * x261) + x264) * Val(4));
  Val x486 = (((x268 * x266) + x269) * Val(8));
  Val x487 = (((x273 * x271) + x274) * Val(16));
  Val x488 = (((x278 * x276) + x279) * Val(32));
  Val x489 = (((x283 * x281) + x284) * Val(64));
  Val x490 = (((x288 * x286) + x289) * Val(128));
  Val x491 = (((x293 * x291) + x294) * Val(256));
  Val x492 = (((x298 * x296) + x299) * Val(512));
  Val x493 = (((x303 * x301) + x304) * Val(1024));
  Val x494 = (((x308 * x306) + x309) * Val(2048));
  Val x495 = (((x313 * x311) + x314) * Val(4096));
  Val x496 = (((x318 * x316) + x319) * Val(8192));
  Val x497 = (((x325 * x323) + x326) * Val(16384));
  Val x498 = (((x330 * x328) + x331) * Val(32768));
  Val x499 = (((x335 * x333) + x336) * Val(65536));
  Val x500 = (((x340 * x338) + x341) * Val(131072));
  Val x501 = (((x345 * x343) + x346) * Val(262144));
  Val x502 = (((x350 * x348) + x351) * Val(524288));
  Val x503 = (((x355 * x353) + x356) * Val(1048576));
  Val x504 = (((x253 * x251) + x254) + x484);
  Val x505 = (((x504 + x485) + x486) + x487);
  Val x506 = (((x505 + x488) + x489) + x490);
  Val x507 = (((x506 + x491) + x492) + x493);
  Val x508 = (((x507 + x494) + x495) + x496);
  Val x509 = (((x508 + x497) + x498) + x499);
  Val x510 = (((x509 + x500) + x501) + x502);
  NondetRegStruct x511 = exec_Reg(ctx, (x510 + x503), LAYOUT_LOOKUP(layout2, _2));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:342)
  Val22Array x512 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x513 = exec_RetTuple(
      ctx,
      x512,
      x512,
      x512,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
      x512,
      Val22Array{x455._super, x483._super, x511._super, Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0), Val(0), Val(0),
                 Val(0),      Val(0),      Val(0),      Val(0), Val(0), Val(0)},
      Val(8),
      Val(9),
      x5.rnd._super,
      x5.blk._super,
      x5.midx._super,
      LAYOUT_LOOKUP(x3, arm0));
  // rho_minor1(zirgen/circuit/keccak/keccak.zir:341)
  RetTupleStruct x514 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x514;
}
RetTupleStruct execRhoMinor3_4_(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<RhoMinor3_4__SuperLayout> layout2) {
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:432)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:433)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:434)
  RetTupleStruct x5 = back_RetTuple(ctx, 4, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:435)
  RetTupleStruct x6 = back_RetTuple(ctx, 6, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:436)
  RetTupleStruct x7 = back_RetTuple(ctx, 7, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  RetTupleStruct x8 = back_RetTuple(ctx, 9, arg1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:439)
  BoundLayout<RhoMinor3_4_Arm1_SuperLayout> x9 = LAYOUT_LOOKUP(layout2, arm1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:453)
  BoundLayout<RhoMinor3_4_Arm1Arm1_SuperLayout> x10 = LAYOUT_LOOKUP(x9, arm1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:465)
  BoundLayout<RhoMinor3_4_Arm1Arm1Arm1_SuperLayout> x11 = LAYOUT_LOOKUP(x10, arm1);
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:437)
  NondetRegStruct22Array x12 = x8.arrA;
  NondetRegStruct22Array x13 = x8.arrB;
  NondetRegStruct22Array x14 = x8.arrC;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:432)
  NondetRegStruct22Array x15 = x3.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:491)
  Val22Array x16 =
      Val22Array{x12[0]._super,  x12[1]._super,  x12[2]._super,  x12[18]._super, x12[19]._super,
                 x12[20]._super, x13[14]._super, x13[15]._super, x13[16]._super, x14[10]._super,
                 x14[11]._super, x14[12]._super, x15[0]._super,  x15[1]._super,  x15[2]._super,
                 x12[9]._super,  x12[10]._super, x12[11]._super, x13[5]._super,  x13[6]._super,
                 x13[7]._super,  x13[8]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:434)
  NondetRegStruct22Array x17 = x5.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:436)
  NondetRegStruct22Array x18 = x7.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:500)
  Val22Array x19 =
      Val22Array{x13[9]._super,  x13[10]._super, x14[4]._super,  x14[5]._super,  x14[6]._super,
                 x17[0]._super,  x17[1]._super,  x17[2]._super,  x12[3]._super,  x12[4]._super,
                 x12[5]._super,  x12[21]._super, x13[0]._super,  x13[1]._super,  x13[17]._super,
                 x13[18]._super, x13[19]._super, x14[13]._super, x14[14]._super, x14[15]._super,
                 x18[0]._super,  x18[1]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:433)
  NondetRegStruct22Array x20 = x4.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:509)
  Val22Array x21 =
      Val22Array{x18[2]._super,  x12[12]._super, x12[13]._super, x12[14]._super, x12[15]._super,
                 x12[16]._super, x12[17]._super, x13[11]._super, x13[12]._super, x13[13]._super,
                 x14[7]._super,  x14[8]._super,  x14[9]._super,  x20[0]._super,  x20[1]._super,
                 x20[2]._super,  x12[6]._super,  x12[7]._super,  x12[8]._super,  x13[2]._super,
                 x13[3]._super,  x13[4]._super};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:435)
  NondetRegStruct22Array x22 = x6.arrF;
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:518)
  Val24Array x23 = Val24Array{
      x13[20]._super, x13[21]._super, x14[0]._super, x14[1]._super, x14[2]._super, x14[3]._super,
      x22[0]._super,  x22[1]._super,  x22[2]._super, Val(0),        Val(0),        Val(0),
      Val(0),         Val(0),         Val(0),        Val(0),        Val(0),        Val(0),
      Val(0),         Val(0),         Val(0),        Val(0),        Val(0),        Val(0)};
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:522)
  Val22Array x24 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x25 = exec_RetTuple(ctx,
                                     x16,
                                     x19,
                                     x21,
                                     x23,
                                     x24,
                                     x24,
                                     Val(0),
                                     Val(10),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(x11, arm1));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:477)
  RetTupleStruct x26 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x11, _super));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:465)
  RetTupleStruct x27 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x10, _super));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:453)
  RetTupleStruct x28 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x9, _super));
  // rho_minor3(zirgen/circuit/keccak/keccak.zir:439)
  RetTupleStruct x29 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(layout2, _super));
  return x29;
}
RetTupleStruct execRhoMajor_4_(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<RhoMajor_4_Layout> layout2) {
  // rho_major(zirgen/circuit/keccak/keccak.zir:529)
  BoundLayout<RhoMajor_4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // rho_major(zirgen/circuit/keccak/keccak.zir:528)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_9_Struct x5 = exec_OneHot_9_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct9Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:530)
    RetTupleStruct x8 = execRhoMinor0_0__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm0));
    x7 = x8;
  } else if (to_size_t(x6[1]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:531)
    RetTupleStruct x9 = execRhoMinor1_0__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x9;
  } else if (to_size_t(x6[2]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:532)
    RetTupleStruct x10 = execRhoMinor2_0__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x10;
  } else if (to_size_t(x6[3]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:533)
    RetTupleStruct x11 = execRhoMinor0_2__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x11;
  } else if (to_size_t(x6[4]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:534)
    RetTupleStruct x12 = execRhoMinor1_2__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x12;
  } else if (to_size_t(x6[5]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:535)
    RetTupleStruct x13 = execRhoMinor2_2__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm5));
    x7 = x13;
  } else if (to_size_t(x6[6]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:536)
    RetTupleStruct x14 = execRhoMinor0_4__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm6));
    x7 = x14;
  } else if (to_size_t(x6[7]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:537)
    RetTupleStruct x15 = execRhoMinor1_4__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x15;
  } else if (to_size_t(x6[8]._super)) {
    // rho_major(zirgen/circuit/keccak/keccak.zir:538)
    RetTupleStruct x16 = execRhoMinor3_4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x16;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // rho_major(zirgen/circuit/keccak/keccak.zir:529)
  RetTupleStruct x17 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x17;
}
RetTupleStruct execChiMinor0_0__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_0__0_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrA;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[3]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[4]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[6]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[7]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[0]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[1]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(1),
      Val(10),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_0__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_0__0_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_0__0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x6 = x4.arrA;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[2]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[5]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x6[8]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x10 + x101) - ((x10 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x12 + x104) - ((x12 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x13 + x106) - ((x13 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x14 + x108) - ((x14 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x15 + x110) - ((x15 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x16 + x112) - ((x16 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x17 + x114) - ((x17 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x18 + x116) - ((x18 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x19 + x118) - ((x19 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x20 + x120) - ((x20 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x21 + x122) - ((x21 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x22 + x124) - ((x22 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x23 + x126) - ((x23 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x24 + x128) - ((x24 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x25 + x130) - ((x25 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x26 + x132) - ((x26 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x27 + x134) - ((x27 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x28 + x136) - ((x28 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x29 + x138) - ((x29 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x30 + x140) - ((x30 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x11 + x103) - (x31 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_0__0_Arm1_SuperLayout> x151 = LAYOUT_LOOKUP(x3, arm1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:699)
  ToBits_21_Struct x152 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(x151, unpack_2nx));
  NondetRegStruct21Array x153 = x152._super;
  Val x154 = x153[0]._super;
  Val x155 = x153[1]._super;
  Val x156 = x153[2]._super;
  Val x157 = x153[3]._super;
  Val x158 = x153[4]._super;
  Val x159 = x153[5]._super;
  Val x160 = x153[6]._super;
  Val x161 = x153[7]._super;
  Val x162 = x153[8]._super;
  Val x163 = x153[9]._super;
  Val x164 = x153[10]._super;
  Val x165 = x153[11]._super;
  Val x166 = x153[12]._super;
  Val x167 = x153[13]._super;
  Val x168 = x153[14]._super;
  Val x169 = x153[15]._super;
  Val x170 = x153[16]._super;
  Val x171 = x153[17]._super;
  Val x172 = x153[18]._super;
  Val x173 = x153[19]._super;
  Val x174 = x153[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:700)
  Val x175 = (x155 * Val(2));
  Val x176 = (((x154 + x175) + (x156 * Val(4))) + (x157 * Val(8)));
  Val x177 = (((x176 + (x158 * Val(16))) + (x159 * Val(32))) + (x160 * Val(64)));
  Val x178 = (((x177 + (x161 * Val(128))) + (x162 * Val(256))) + (x163 * Val(512)));
  Val x179 = (((x178 + (x164 * Val(1024))) + (x165 * Val(2048))) + (x166 * Val(4096)));
  Val x180 = (((x179 + (x167 * Val(8192))) + (x168 * Val(16384))) + (x169 * Val(32768)));
  Val x181 = (((x180 + (x170 * Val(65536))) + (x171 * Val(131072))) + (x172 * Val(262144)));
  Val x182 = (((x181 + (x173 * Val(524288))) + (x174 * Val(1048576))) - x39);
  EQZ(x182, "chi_minor1(zirgen/circuit/keccak/keccak.zir:700)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:713)
  ToBits_21_Struct x183 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(x151, unpack_2nxp1));
  NondetRegStruct21Array x184 = x183._super;
  Val x185 = x184[0]._super;
  Val x186 = x184[1]._super;
  Val x187 = x184[2]._super;
  Val x188 = x184[3]._super;
  Val x189 = x184[4]._super;
  Val x190 = x184[5]._super;
  Val x191 = x184[6]._super;
  Val x192 = x184[7]._super;
  Val x193 = x184[8]._super;
  Val x194 = x184[9]._super;
  Val x195 = x184[10]._super;
  Val x196 = x184[11]._super;
  Val x197 = x184[12]._super;
  Val x198 = x184[13]._super;
  Val x199 = x184[14]._super;
  Val x200 = x184[15]._super;
  Val x201 = x184[16]._super;
  Val x202 = x184[17]._super;
  Val x203 = x184[18]._super;
  Val x204 = x184[19]._super;
  Val x205 = x184[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:714)
  Val x206 = (((x185 + (x186 * Val(2))) + (x187 * Val(4))) + (x188 * Val(8)));
  Val x207 = (((x206 + (x189 * Val(16))) + (x190 * Val(32))) + (x191 * Val(64)));
  Val x208 = (((x207 + (x192 * Val(128))) + (x193 * Val(256))) + (x194 * Val(512)));
  Val x209 = (((x208 + (x195 * Val(1024))) + (x196 * Val(2048))) + (x197 * Val(4096)));
  Val x210 = (((x209 + (x198 * Val(8192))) + (x199 * Val(16384))) + (x200 * Val(32768)));
  Val x211 = (((x210 + (x201 * Val(65536))) + (x202 * Val(131072))) + (x203 * Val(262144)));
  Val x212 = (((x211 + (x204 * Val(524288))) + (x205 * Val(1048576))) - x70);
  EQZ(x212, "chi_minor1(zirgen/circuit/keccak/keccak.zir:714)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:718)
  Val x213 = x6[11]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:726)
  ToBits_21_Struct x214 = exec_ToBits_21_(ctx, x213, LAYOUT_LOOKUP(x151, unpack_2nxp2));
  NondetRegStruct21Array x215 = x214._super;
  Val x216 = x215[0]._super;
  Val x217 = x215[1]._super;
  Val x218 = x215[2]._super;
  Val x219 = x215[3]._super;
  Val x220 = x215[4]._super;
  Val x221 = x215[5]._super;
  Val x222 = x215[6]._super;
  Val x223 = x215[7]._super;
  Val x224 = x215[8]._super;
  Val x225 = x215[9]._super;
  Val x226 = x215[10]._super;
  Val x227 = x215[11]._super;
  Val x228 = x215[12]._super;
  Val x229 = x215[13]._super;
  Val x230 = x215[14]._super;
  Val x231 = x215[15]._super;
  Val x232 = x215[16]._super;
  Val x233 = x215[17]._super;
  Val x234 = x215[18]._super;
  Val x235 = x215[19]._super;
  Val x236 = x215[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:727)
  Val x237 = (((x216 + (x217 * Val(2))) + (x218 * Val(4))) + (x219 * Val(8)));
  Val x238 = (((x237 + (x220 * Val(16))) + (x221 * Val(32))) + (x222 * Val(64)));
  Val x239 = (((x238 + (x223 * Val(128))) + (x224 * Val(256))) + (x225 * Val(512)));
  Val x240 = (((x239 + (x226 * Val(1024))) + (x227 * Val(2048))) + (x228 * Val(4096)));
  Val x241 = (((x240 + (x229 * Val(8192))) + (x230 * Val(16384))) + (x231 * Val(32768)));
  Val x242 = (((x241 + (x232 * Val(65536))) + (x233 * Val(131072))) + (x234 * Val(262144)));
  Val x243 = (((x242 + (x235 * Val(524288))) + (x236 * Val(1048576))) - x213);
  EQZ(x243, "chi_minor1(zirgen/circuit/keccak/keccak.zir:727)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:729)
  Val x244 = ((Val(1) - x185) * x216);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x154 + x244) - ((x154 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x186) * x217);
  Val x247 = ((Val(1) - x187) * x218);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x156 + x247) - ((x156 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x188) * x219);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x157 + x249) - ((x157 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x189) * x220);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x158 + x251) - ((x158 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x190) * x221);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x159 + x253) - ((x159 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x191) * x222);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x160 + x255) - ((x160 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x192) * x223);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x161 + x257) - ((x161 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x193) * x224);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x162 + x259) - ((x162 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x194) * x225);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x163 + x261) - ((x163 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x195) * x226);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x164 + x263) - ((x164 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x196) * x227);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x165 + x265) - ((x165 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x197) * x228);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x166 + x267) - ((x166 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x198) * x229);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x167 + x269) - ((x167 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x199) * x230);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x168 + x271) - ((x168 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x200) * x231);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x169 + x273) - ((x169 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x201) * x232);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x170 + x275) - ((x170 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x202) * x233);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x171 + x277) - ((x171 * Val(2)) * x277));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x279 = ((Val(1) - x203) * x234);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x280 = ((x172 + x279) - ((x172 * Val(2)) * x279));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x281 = ((Val(1) - x204) * x235);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x282 = ((x173 + x281) - ((x173 * Val(2)) * x281));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x283 = ((Val(1) - x205) * x236);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x284 = ((x174 + x283) - ((x174 * Val(2)) * x283));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:730)
  Val x285 = (((x155 + x246) - (x175 * x246)) * Val(2));
  Val x286 = (((x245 + x285) + (x248 * Val(4))) + (x250 * Val(8)));
  Val x287 = (((x286 + (x252 * Val(16))) + (x254 * Val(32))) + (x256 * Val(64)));
  Val x288 = (((x287 + (x258 * Val(128))) + (x260 * Val(256))) + (x262 * Val(512)));
  Val x289 = (((x288 + (x264 * Val(1024))) + (x266 * Val(2048))) + (x268 * Val(4096)));
  Val x290 = (((x289 + (x270 * Val(8192))) + (x272 * Val(16384))) + (x274 * Val(32768)));
  Val x291 = (((x290 + (x276 * Val(65536))) + (x278 * Val(131072))) + (x280 * Val(262144)));
  NondetRegStruct x292 = exec_Reg(
      ctx, ((x291 + (x282 * Val(524288))) + (x284 * Val(1048576))), LAYOUT_LOOKUP(x151, res3n));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x293 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x294 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:733)
  RetTupleStruct x295 =
      exec_RetTuple(ctx,
                    x293,
                    x294,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x292._super},
                    Val(2),
                    Val(10),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x151, _super));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x296 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x296;
}
RetTupleStruct execChiMinor0_1__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_1__0_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrA;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[6]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[7]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[9]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[10]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[3]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[4]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(3),
      Val(10),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor0_2__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_2__0_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrA;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[9]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[10]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[12]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[13]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[6]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[7]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(4),
      Val(10),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_2__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_2__0_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_2__0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 5, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x6 = x4.arrA;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[8]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[11]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x6[14]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x10 + x101) - ((x10 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x12 + x104) - ((x12 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x13 + x106) - ((x13 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x14 + x108) - ((x14 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x15 + x110) - ((x15 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x16 + x112) - ((x16 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x17 + x114) - ((x17 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x18 + x116) - ((x18 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x19 + x118) - ((x19 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x20 + x120) - ((x20 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x21 + x122) - ((x21 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x22 + x124) - ((x22 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x23 + x126) - ((x23 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x24 + x128) - ((x24 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x25 + x130) - ((x25 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x26 + x132) - ((x26 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x27 + x134) - ((x27 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x28 + x136) - ((x28 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x29 + x138) - ((x29 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x30 + x140) - ((x30 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x11 + x103) - (x31 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_2__0_Arm1_SuperLayout> x151 = LAYOUT_LOOKUP(x3, arm1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:699)
  ToBits_21_Struct x152 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(x151, unpack_2nx));
  NondetRegStruct21Array x153 = x152._super;
  Val x154 = x153[0]._super;
  Val x155 = x153[1]._super;
  Val x156 = x153[2]._super;
  Val x157 = x153[3]._super;
  Val x158 = x153[4]._super;
  Val x159 = x153[5]._super;
  Val x160 = x153[6]._super;
  Val x161 = x153[7]._super;
  Val x162 = x153[8]._super;
  Val x163 = x153[9]._super;
  Val x164 = x153[10]._super;
  Val x165 = x153[11]._super;
  Val x166 = x153[12]._super;
  Val x167 = x153[13]._super;
  Val x168 = x153[14]._super;
  Val x169 = x153[15]._super;
  Val x170 = x153[16]._super;
  Val x171 = x153[17]._super;
  Val x172 = x153[18]._super;
  Val x173 = x153[19]._super;
  Val x174 = x153[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:700)
  Val x175 = (x155 * Val(2));
  Val x176 = (((x154 + x175) + (x156 * Val(4))) + (x157 * Val(8)));
  Val x177 = (((x176 + (x158 * Val(16))) + (x159 * Val(32))) + (x160 * Val(64)));
  Val x178 = (((x177 + (x161 * Val(128))) + (x162 * Val(256))) + (x163 * Val(512)));
  Val x179 = (((x178 + (x164 * Val(1024))) + (x165 * Val(2048))) + (x166 * Val(4096)));
  Val x180 = (((x179 + (x167 * Val(8192))) + (x168 * Val(16384))) + (x169 * Val(32768)));
  Val x181 = (((x180 + (x170 * Val(65536))) + (x171 * Val(131072))) + (x172 * Val(262144)));
  Val x182 = (((x181 + (x173 * Val(524288))) + (x174 * Val(1048576))) - x39);
  EQZ(x182, "chi_minor1(zirgen/circuit/keccak/keccak.zir:700)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:713)
  ToBits_21_Struct x183 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(x151, unpack_2nxp1));
  NondetRegStruct21Array x184 = x183._super;
  Val x185 = x184[0]._super;
  Val x186 = x184[1]._super;
  Val x187 = x184[2]._super;
  Val x188 = x184[3]._super;
  Val x189 = x184[4]._super;
  Val x190 = x184[5]._super;
  Val x191 = x184[6]._super;
  Val x192 = x184[7]._super;
  Val x193 = x184[8]._super;
  Val x194 = x184[9]._super;
  Val x195 = x184[10]._super;
  Val x196 = x184[11]._super;
  Val x197 = x184[12]._super;
  Val x198 = x184[13]._super;
  Val x199 = x184[14]._super;
  Val x200 = x184[15]._super;
  Val x201 = x184[16]._super;
  Val x202 = x184[17]._super;
  Val x203 = x184[18]._super;
  Val x204 = x184[19]._super;
  Val x205 = x184[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:714)
  Val x206 = (((x185 + (x186 * Val(2))) + (x187 * Val(4))) + (x188 * Val(8)));
  Val x207 = (((x206 + (x189 * Val(16))) + (x190 * Val(32))) + (x191 * Val(64)));
  Val x208 = (((x207 + (x192 * Val(128))) + (x193 * Val(256))) + (x194 * Val(512)));
  Val x209 = (((x208 + (x195 * Val(1024))) + (x196 * Val(2048))) + (x197 * Val(4096)));
  Val x210 = (((x209 + (x198 * Val(8192))) + (x199 * Val(16384))) + (x200 * Val(32768)));
  Val x211 = (((x210 + (x201 * Val(65536))) + (x202 * Val(131072))) + (x203 * Val(262144)));
  Val x212 = (((x211 + (x204 * Val(524288))) + (x205 * Val(1048576))) - x70);
  EQZ(x212, "chi_minor1(zirgen/circuit/keccak/keccak.zir:714)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:718)
  Val x213 = x6[2]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:726)
  ToBits_21_Struct x214 = exec_ToBits_21_(ctx, x213, LAYOUT_LOOKUP(x151, unpack_2nxp2));
  NondetRegStruct21Array x215 = x214._super;
  Val x216 = x215[0]._super;
  Val x217 = x215[1]._super;
  Val x218 = x215[2]._super;
  Val x219 = x215[3]._super;
  Val x220 = x215[4]._super;
  Val x221 = x215[5]._super;
  Val x222 = x215[6]._super;
  Val x223 = x215[7]._super;
  Val x224 = x215[8]._super;
  Val x225 = x215[9]._super;
  Val x226 = x215[10]._super;
  Val x227 = x215[11]._super;
  Val x228 = x215[12]._super;
  Val x229 = x215[13]._super;
  Val x230 = x215[14]._super;
  Val x231 = x215[15]._super;
  Val x232 = x215[16]._super;
  Val x233 = x215[17]._super;
  Val x234 = x215[18]._super;
  Val x235 = x215[19]._super;
  Val x236 = x215[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:727)
  Val x237 = (((x216 + (x217 * Val(2))) + (x218 * Val(4))) + (x219 * Val(8)));
  Val x238 = (((x237 + (x220 * Val(16))) + (x221 * Val(32))) + (x222 * Val(64)));
  Val x239 = (((x238 + (x223 * Val(128))) + (x224 * Val(256))) + (x225 * Val(512)));
  Val x240 = (((x239 + (x226 * Val(1024))) + (x227 * Val(2048))) + (x228 * Val(4096)));
  Val x241 = (((x240 + (x229 * Val(8192))) + (x230 * Val(16384))) + (x231 * Val(32768)));
  Val x242 = (((x241 + (x232 * Val(65536))) + (x233 * Val(131072))) + (x234 * Val(262144)));
  Val x243 = (((x242 + (x235 * Val(524288))) + (x236 * Val(1048576))) - x213);
  EQZ(x243, "chi_minor1(zirgen/circuit/keccak/keccak.zir:727)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:729)
  Val x244 = ((Val(1) - x185) * x216);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x154 + x244) - ((x154 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x186) * x217);
  Val x247 = ((Val(1) - x187) * x218);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x156 + x247) - ((x156 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x188) * x219);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x157 + x249) - ((x157 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x189) * x220);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x158 + x251) - ((x158 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x190) * x221);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x159 + x253) - ((x159 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x191) * x222);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x160 + x255) - ((x160 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x192) * x223);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x161 + x257) - ((x161 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x193) * x224);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x162 + x259) - ((x162 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x194) * x225);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x163 + x261) - ((x163 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x195) * x226);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x164 + x263) - ((x164 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x196) * x227);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x165 + x265) - ((x165 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x197) * x228);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x166 + x267) - ((x166 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x198) * x229);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x167 + x269) - ((x167 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x199) * x230);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x168 + x271) - ((x168 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x200) * x231);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x169 + x273) - ((x169 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x201) * x232);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x170 + x275) - ((x170 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x202) * x233);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x171 + x277) - ((x171 * Val(2)) * x277));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x279 = ((Val(1) - x203) * x234);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x280 = ((x172 + x279) - ((x172 * Val(2)) * x279));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x281 = ((Val(1) - x204) * x235);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x282 = ((x173 + x281) - ((x173 * Val(2)) * x281));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x283 = ((Val(1) - x205) * x236);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x284 = ((x174 + x283) - ((x174 * Val(2)) * x283));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:730)
  Val x285 = (((x155 + x246) - (x175 * x246)) * Val(2));
  Val x286 = (((x245 + x285) + (x248 * Val(4))) + (x250 * Val(8)));
  Val x287 = (((x286 + (x252 * Val(16))) + (x254 * Val(32))) + (x256 * Val(64)));
  Val x288 = (((x287 + (x258 * Val(128))) + (x260 * Val(256))) + (x262 * Val(512)));
  Val x289 = (((x288 + (x264 * Val(1024))) + (x266 * Val(2048))) + (x268 * Val(4096)));
  Val x290 = (((x289 + (x270 * Val(8192))) + (x272 * Val(16384))) + (x274 * Val(32768)));
  Val x291 = (((x290 + (x276 * Val(65536))) + (x278 * Val(131072))) + (x280 * Val(262144)));
  NondetRegStruct x292 = exec_Reg(
      ctx, ((x291 + (x282 * Val(524288))) + (x284 * Val(1048576))), LAYOUT_LOOKUP(x151, res3n));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x293 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x294 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:733)
  RetTupleStruct x295 =
      exec_RetTuple(ctx,
                    x293,
                    x294,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x292._super},
                    Val(5),
                    Val(10),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x151, _super));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x296 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x296;
}
RetTupleStruct execChiMinor0_3__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_3__0_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrA;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[12]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[13]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[0]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[1]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[9]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[10]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(6),
      Val(10),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor0_4__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_4__0_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrA;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[0]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[1]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[3]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[4]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[12]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[13]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(7),
      Val(10),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_4__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_4__0_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_4__0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 8, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x6 = x4.arrA;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[14]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[2]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x6[5]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x10 + x101) - ((x10 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x12 + x104) - ((x12 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x13 + x106) - ((x13 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x14 + x108) - ((x14 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x15 + x110) - ((x15 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x16 + x112) - ((x16 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x17 + x114) - ((x17 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x18 + x116) - ((x18 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x19 + x118) - ((x19 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x20 + x120) - ((x20 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x21 + x122) - ((x21 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x22 + x124) - ((x22 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x23 + x126) - ((x23 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x24 + x128) - ((x24 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x25 + x130) - ((x25 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x26 + x132) - ((x26 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x27 + x134) - ((x27 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x28 + x136) - ((x28 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x29 + x138) - ((x29 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x30 + x140) - ((x30 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x11 + x103) - (x31 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x151 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x152 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:686)
  Val22Array x153 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x154 =
      exec_RetTuple(ctx,
                    x151,
                    x152,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x153,
                    x153,
                    Val(8),
                    Val(10),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x155 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x155;
}
OneHot_24_Struct
exec_OneHot_24_(ExecContext& ctx, Val arg0, BoundLayout<OneHot_24_Layout> layout1) {
  // OneHot(zirgen/circuit/keccak/one_hot.zir:7)
  NondetRegStruct24Array x2 =
      map(Val24Array{Val(0),  Val(1),  Val(2),  Val(3),  Val(4),  Val(5),  Val(6),  Val(7),
                     Val(8),  Val(9),  Val(10), Val(11), Val(12), Val(13), Val(14), Val(15),
                     Val(16), Val(17), Val(18), Val(19), Val(20), Val(21), Val(22), Val(23)},
          LAYOUT_LOOKUP(layout1, _super),
          std::function([&](Val24Array::value_type x3,
                            BoundLayout<NondetRegLayout24LayoutArray::value_type> x4) {
            NondetRegStruct x5 = exec_NondetBitReg(ctx, isz((x3 - arg0)), x4);
            return x5;
          }));
  // OneHot(zirgen/circuit/keccak/one_hot.zir:9)
  Val x6 = x2[1]._super;
  Val x7 = (x2[0]._super + x6);
  Val x8 = x2[2]._super;
  Val x9 = x2[3]._super;
  Val x10 = x2[4]._super;
  Val x11 = (((x7 + x8) + x9) + x10);
  Val x12 = x2[5]._super;
  Val x13 = x2[6]._super;
  Val x14 = x2[7]._super;
  Val x15 = (((x11 + x12) + x13) + x14);
  Val x16 = x2[8]._super;
  Val x17 = x2[9]._super;
  Val x18 = x2[10]._super;
  Val x19 = (((x15 + x16) + x17) + x18);
  Val x20 = x2[11]._super;
  Val x21 = x2[12]._super;
  Val x22 = x2[13]._super;
  Val x23 = (((x19 + x20) + x21) + x22);
  Val x24 = x2[14]._super;
  Val x25 = x2[15]._super;
  Val x26 = x2[16]._super;
  Val x27 = (((x23 + x24) + x25) + x26);
  Val x28 = x2[17]._super;
  Val x29 = x2[18]._super;
  Val x30 = x2[19]._super;
  Val x31 = (((x27 + x28) + x29) + x30);
  Val x32 = x2[20]._super;
  Val x33 = x2[21]._super;
  Val x34 = x2[22]._super;
  Val x35 = (((x31 + x32) + x33) + x34);
  Val x36 = x2[23]._super;
  EQZ(((x35 + x36) - Val(1)), "OneHot(zirgen/circuit/keccak/one_hot.zir:9)");
  // OneHot(zirgen/circuit/keccak/one_hot.zir:11)
  Val x37 = (((x6 + (x8 * Val(2))) + (x9 * Val(3))) + (x10 * Val(4)));
  Val x38 = (((x37 + (x12 * Val(5))) + (x13 * Val(6))) + (x14 * Val(7)));
  Val x39 = (((x38 + (x16 * Val(8))) + (x17 * Val(9))) + (x18 * Val(10)));
  Val x40 = (((x39 + (x20 * Val(11))) + (x21 * Val(12))) + (x22 * Val(13)));
  Val x41 = (((x40 + (x24 * Val(14))) + (x25 * Val(15))) + (x26 * Val(16)));
  Val x42 = (((x41 + (x28 * Val(17))) + (x29 * Val(18))) + (x30 * Val(19)));
  Val x43 = (((x42 + (x32 * Val(20))) + (x33 * Val(21))) + (x34 * Val(22)));
  EQZ(((x43 + (x36 * Val(23))) - arg0), "OneHot(zirgen/circuit/keccak/one_hot.zir:11)");
  return OneHot_24_Struct{._super = x2};
}
RetTupleStruct execChiMinor2_0_(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<ChiMinor2_0__SuperLayout> layout2) {
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:739)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:740)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  RetTupleStruct x5 = back_RetTuple(ctx, 4, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:742)
  RetTupleStruct x6 = back_RetTuple(ctx, 6, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:743)
  RetTupleStruct x7 = back_RetTuple(ctx, 7, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  RetTupleStruct x8 = back_RetTuple(ctx, 9, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:742)
  NondetRegStruct24Array x9 = x6.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:740)
  NondetRegStruct24Array x10 = x4.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  NondetRegStruct22Array x11 = x8.arrA;
  NondetRegStruct22Array x12 = x8.arrB;
  NondetRegStruct22Array x13 = x8.arrC;
  NondetRegStruct24Array x14 = x8.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:747)
  Val x15 = x7.arrA[21]._super;
  Val x16 = x7.arrB[21]._super;
  Val x17 = x7.arrC[21]._super;
  Val x18 = x7.arrF[21]._super;
  Val x19 = x5.arrA[21]._super;
  Val x20 = x5.arrB[21]._super;
  Val x21 = x5.arrC[21]._super;
  Val x22 = x5.arrF[21]._super;
  Val x23 = x3.arrA[21]._super;
  Val x24 = x3.arrB[21]._super;
  Val x25 = x3.arrC[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  Val22Array x26 =
      Val22Array{x12[0]._super,  x12[1]._super,  x12[2]._super,  x12[3]._super,  x12[4]._super,
                 x12[5]._super,  x12[6]._super,  x12[7]._super,  x12[8]._super,  x12[9]._super,
                 x12[10]._super, x12[11]._super, x12[12]._super, x12[13]._super, x12[14]._super,
                 x12[15]._super, x12[16]._super, x12[17]._super, x12[18]._super, x12[19]._super,
                 x12[20]._super, x12[21]._super};
  Val22Array x27 =
      Val22Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super};
  Val24Array x28 =
      Val24Array{x14[0]._super,  x14[1]._super,  x14[2]._super,  x14[3]._super,  x14[4]._super,
                 x14[5]._super,  x14[6]._super,  x14[7]._super,  x14[8]._super,  x14[9]._super,
                 x14[10]._super, x14[11]._super, x14[12]._super, x14[13]._super, x14[14]._super,
                 x14[15]._super, x14[16]._super, x14[17]._super, x14[18]._super, x14[19]._super,
                 x14[20]._super, x14[21]._super, x14[22]._super, x14[23]._super};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:755)
  Val22Array x29 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x30 = exec_RetTuple(ctx,
                                     Val22Array{x15,
                                                x16,
                                                x17,
                                                x9[22]._super,
                                                x9[23]._super,
                                                x18,
                                                x19,
                                                x20,
                                                x21,
                                                x10[22]._super,
                                                x10[23]._super,
                                                x22,
                                                x23,
                                                x24,
                                                x25,
                                                x11[15]._super,
                                                x11[16]._super,
                                                x11[17]._super,
                                                x11[18]._super,
                                                x11[19]._super,
                                                x11[20]._super,
                                                x11[21]._super},
                                     x26,
                                     x27,
                                     x28,
                                     x29,
                                     x29,
                                     Val(0),
                                     Val(11),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(layout2, arm0));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:746)
  RetTupleStruct x31 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(layout2, _super));
  return x31;
}
RetTupleStruct execChiMajor_0_(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<ChiMajor_0_Layout> layout2) {
  // chi_major(zirgen/circuit/keccak/keccak.zir:841)
  BoundLayout<ChiMajor_0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_major(zirgen/circuit/keccak/keccak.zir:840)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_10_Struct x5 = exec_OneHot_10_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct10Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:842)
    RetTupleStruct x8 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x9 = execChiMinor0_0__0_(ctx, x8, LAYOUT_LOOKUP(x3, arm0));
    x7 = x9;
  } else if (to_size_t(x6[1]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:843)
    RetTupleStruct x10 = execChiMinor1_0__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x10;
  } else if (to_size_t(x6[2]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:844)
    RetTupleStruct x11 = back_RetTuple(ctx, 3, arg1);
    RetTupleStruct x12 = execChiMinor0_1__0_(ctx, x11, LAYOUT_LOOKUP(x3, arm2));
    x7 = x12;
  } else if (to_size_t(x6[3]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:845)
    RetTupleStruct x13 = back_RetTuple(ctx, 4, arg1);
    RetTupleStruct x14 = execChiMinor0_2__0_(ctx, x13, LAYOUT_LOOKUP(x3, arm3));
    x7 = x14;
  } else if (to_size_t(x6[4]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:846)
    RetTupleStruct x15 = execChiMinor1_2__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x15;
  } else if (to_size_t(x6[5]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:847)
    RetTupleStruct x16 = back_RetTuple(ctx, 6, arg1);
    RetTupleStruct x17 = execChiMinor0_3__0_(ctx, x16, LAYOUT_LOOKUP(x3, arm5));
    x7 = x17;
  } else if (to_size_t(x6[6]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:848)
    RetTupleStruct x18 = back_RetTuple(ctx, 7, arg1);
    RetTupleStruct x19 = execChiMinor0_4__0_(ctx, x18, LAYOUT_LOOKUP(x3, arm6));
    x7 = x19;
  } else if (to_size_t(x6[7]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:849)
    RetTupleStruct x20 = execChiMinor1_4__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x20;
  } else if (to_size_t(x6[8]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:850)
    RetTupleStruct x21 = execChiMinor2_0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x21;
  } else if (to_size_t(x6[9]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:851)
    RetTupleStruct x22 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x23 = execIotaXorRc(ctx, x22, LAYOUT_LOOKUP(x3, arm9));
    x7 = x23;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // chi_major(zirgen/circuit/keccak/keccak.zir:841)
  RetTupleStruct x24 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x24;
}
RetTupleStruct execChiMinor0_0__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_0__1_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrA;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[18]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[19]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[21]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = arg0.arrB[0]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[15]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[16]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(1),
      Val(11),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_0__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_0__1_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_0__1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x6 = x4.arrA;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[17]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[20]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x70 = x4.arrB;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x71 = x70[1]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x72 = exec_ToBits_21_(ctx, x71, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x73 = x72._super;
  Val x74 = x73[0]._super;
  Val x75 = x73[1]._super;
  Val x76 = x73[2]._super;
  Val x77 = x73[3]._super;
  Val x78 = x73[4]._super;
  Val x79 = x73[5]._super;
  Val x80 = x73[6]._super;
  Val x81 = x73[7]._super;
  Val x82 = x73[8]._super;
  Val x83 = x73[9]._super;
  Val x84 = x73[10]._super;
  Val x85 = x73[11]._super;
  Val x86 = x73[12]._super;
  Val x87 = x73[13]._super;
  Val x88 = x73[14]._super;
  Val x89 = x73[15]._super;
  Val x90 = x73[16]._super;
  Val x91 = x73[17]._super;
  Val x92 = x73[18]._super;
  Val x93 = x73[19]._super;
  Val x94 = x73[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x95 = (((x74 + (x75 * Val(2))) + (x76 * Val(4))) + (x77 * Val(8)));
  Val x96 = (((x95 + (x78 * Val(16))) + (x79 * Val(32))) + (x80 * Val(64)));
  Val x97 = (((x96 + (x81 * Val(128))) + (x82 * Val(256))) + (x83 * Val(512)));
  Val x98 = (((x97 + (x84 * Val(1024))) + (x85 * Val(2048))) + (x86 * Val(4096)));
  Val x99 = (((x98 + (x87 * Val(8192))) + (x88 * Val(16384))) + (x89 * Val(32768)));
  Val x100 = (((x99 + (x90 * Val(65536))) + (x91 * Val(131072))) + (x92 * Val(262144)));
  Val x101 = (((x100 + (x93 * Val(524288))) + (x94 * Val(1048576))) - x71);
  EQZ(x101, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x102 = ((Val(1) - x42) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x103 = ((x10 + x102) - ((x10 * Val(2)) * x102));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x104 = ((Val(1) - x43) * x75);
  Val x105 = ((Val(1) - x44) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x106 = ((x12 + x105) - ((x12 * Val(2)) * x105));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x107 = ((Val(1) - x45) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x108 = ((x13 + x107) - ((x13 * Val(2)) * x107));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x109 = ((Val(1) - x46) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x110 = ((x14 + x109) - ((x14 * Val(2)) * x109));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x111 = ((Val(1) - x47) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x112 = ((x15 + x111) - ((x15 * Val(2)) * x111));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x113 = ((Val(1) - x48) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x114 = ((x16 + x113) - ((x16 * Val(2)) * x113));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x115 = ((Val(1) - x49) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x116 = ((x17 + x115) - ((x17 * Val(2)) * x115));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x117 = ((Val(1) - x50) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x118 = ((x18 + x117) - ((x18 * Val(2)) * x117));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x119 = ((Val(1) - x51) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x120 = ((x19 + x119) - ((x19 * Val(2)) * x119));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x121 = ((Val(1) - x52) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x122 = ((x20 + x121) - ((x20 * Val(2)) * x121));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x123 = ((Val(1) - x53) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x124 = ((x21 + x123) - ((x21 * Val(2)) * x123));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x125 = ((Val(1) - x54) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x126 = ((x22 + x125) - ((x22 * Val(2)) * x125));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x127 = ((Val(1) - x55) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x128 = ((x23 + x127) - ((x23 * Val(2)) * x127));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x129 = ((Val(1) - x56) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x130 = ((x24 + x129) - ((x24 * Val(2)) * x129));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x131 = ((Val(1) - x57) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x132 = ((x25 + x131) - ((x25 * Val(2)) * x131));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x133 = ((Val(1) - x58) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x134 = ((x26 + x133) - ((x26 * Val(2)) * x133));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x135 = ((Val(1) - x59) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x136 = ((x27 + x135) - ((x27 * Val(2)) * x135));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x137 = ((Val(1) - x60) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x138 = ((x28 + x137) - ((x28 * Val(2)) * x137));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x139 = ((Val(1) - x61) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x140 = ((x29 + x139) - ((x29 * Val(2)) * x139));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x141 = ((Val(1) - x62) * x94);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x142 = ((x30 + x141) - ((x30 * Val(2)) * x141));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x143 = (((x11 + x104) - (x31 * x104)) * Val(2));
  Val x144 = (((x103 + x143) + (x106 * Val(4))) + (x108 * Val(8)));
  Val x145 = (((x144 + (x110 * Val(16))) + (x112 * Val(32))) + (x114 * Val(64)));
  Val x146 = (((x145 + (x116 * Val(128))) + (x118 * Val(256))) + (x120 * Val(512)));
  Val x147 = (((x146 + (x122 * Val(1024))) + (x124 * Val(2048))) + (x126 * Val(4096)));
  Val x148 = (((x147 + (x128 * Val(8192))) + (x130 * Val(16384))) + (x132 * Val(32768)));
  Val x149 = (((x148 + (x134 * Val(65536))) + (x136 * Val(131072))) + (x138 * Val(262144)));
  NondetRegStruct x150 = exec_Reg(
      ctx, ((x149 + (x140 * Val(524288))) + (x142 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x151 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_0__1_Arm1_SuperLayout> x152 = LAYOUT_LOOKUP(x3, arm1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:699)
  ToBits_21_Struct x153 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(x152, unpack_2nx));
  NondetRegStruct21Array x154 = x153._super;
  Val x155 = x154[0]._super;
  Val x156 = x154[1]._super;
  Val x157 = x154[2]._super;
  Val x158 = x154[3]._super;
  Val x159 = x154[4]._super;
  Val x160 = x154[5]._super;
  Val x161 = x154[6]._super;
  Val x162 = x154[7]._super;
  Val x163 = x154[8]._super;
  Val x164 = x154[9]._super;
  Val x165 = x154[10]._super;
  Val x166 = x154[11]._super;
  Val x167 = x154[12]._super;
  Val x168 = x154[13]._super;
  Val x169 = x154[14]._super;
  Val x170 = x154[15]._super;
  Val x171 = x154[16]._super;
  Val x172 = x154[17]._super;
  Val x173 = x154[18]._super;
  Val x174 = x154[19]._super;
  Val x175 = x154[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:700)
  Val x176 = (x156 * Val(2));
  Val x177 = (((x155 + x176) + (x157 * Val(4))) + (x158 * Val(8)));
  Val x178 = (((x177 + (x159 * Val(16))) + (x160 * Val(32))) + (x161 * Val(64)));
  Val x179 = (((x178 + (x162 * Val(128))) + (x163 * Val(256))) + (x164 * Val(512)));
  Val x180 = (((x179 + (x165 * Val(1024))) + (x166 * Val(2048))) + (x167 * Val(4096)));
  Val x181 = (((x180 + (x168 * Val(8192))) + (x169 * Val(16384))) + (x170 * Val(32768)));
  Val x182 = (((x181 + (x171 * Val(65536))) + (x172 * Val(131072))) + (x173 * Val(262144)));
  Val x183 = (((x182 + (x174 * Val(524288))) + (x175 * Val(1048576))) - x39);
  EQZ(x183, "chi_minor1(zirgen/circuit/keccak/keccak.zir:700)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:713)
  ToBits_21_Struct x184 = exec_ToBits_21_(ctx, x71, LAYOUT_LOOKUP(x152, unpack_2nxp1));
  NondetRegStruct21Array x185 = x184._super;
  Val x186 = x185[0]._super;
  Val x187 = x185[1]._super;
  Val x188 = x185[2]._super;
  Val x189 = x185[3]._super;
  Val x190 = x185[4]._super;
  Val x191 = x185[5]._super;
  Val x192 = x185[6]._super;
  Val x193 = x185[7]._super;
  Val x194 = x185[8]._super;
  Val x195 = x185[9]._super;
  Val x196 = x185[10]._super;
  Val x197 = x185[11]._super;
  Val x198 = x185[12]._super;
  Val x199 = x185[13]._super;
  Val x200 = x185[14]._super;
  Val x201 = x185[15]._super;
  Val x202 = x185[16]._super;
  Val x203 = x185[17]._super;
  Val x204 = x185[18]._super;
  Val x205 = x185[19]._super;
  Val x206 = x185[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:714)
  Val x207 = (((x186 + (x187 * Val(2))) + (x188 * Val(4))) + (x189 * Val(8)));
  Val x208 = (((x207 + (x190 * Val(16))) + (x191 * Val(32))) + (x192 * Val(64)));
  Val x209 = (((x208 + (x193 * Val(128))) + (x194 * Val(256))) + (x195 * Val(512)));
  Val x210 = (((x209 + (x196 * Val(1024))) + (x197 * Val(2048))) + (x198 * Val(4096)));
  Val x211 = (((x210 + (x199 * Val(8192))) + (x200 * Val(16384))) + (x201 * Val(32768)));
  Val x212 = (((x211 + (x202 * Val(65536))) + (x203 * Val(131072))) + (x204 * Val(262144)));
  Val x213 = (((x212 + (x205 * Val(524288))) + (x206 * Val(1048576))) - x71);
  EQZ(x213, "chi_minor1(zirgen/circuit/keccak/keccak.zir:714)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:718)
  Val x214 = x70[4]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:726)
  ToBits_21_Struct x215 = exec_ToBits_21_(ctx, x214, LAYOUT_LOOKUP(x152, unpack_2nxp2));
  NondetRegStruct21Array x216 = x215._super;
  Val x217 = x216[0]._super;
  Val x218 = x216[1]._super;
  Val x219 = x216[2]._super;
  Val x220 = x216[3]._super;
  Val x221 = x216[4]._super;
  Val x222 = x216[5]._super;
  Val x223 = x216[6]._super;
  Val x224 = x216[7]._super;
  Val x225 = x216[8]._super;
  Val x226 = x216[9]._super;
  Val x227 = x216[10]._super;
  Val x228 = x216[11]._super;
  Val x229 = x216[12]._super;
  Val x230 = x216[13]._super;
  Val x231 = x216[14]._super;
  Val x232 = x216[15]._super;
  Val x233 = x216[16]._super;
  Val x234 = x216[17]._super;
  Val x235 = x216[18]._super;
  Val x236 = x216[19]._super;
  Val x237 = x216[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:727)
  Val x238 = (((x217 + (x218 * Val(2))) + (x219 * Val(4))) + (x220 * Val(8)));
  Val x239 = (((x238 + (x221 * Val(16))) + (x222 * Val(32))) + (x223 * Val(64)));
  Val x240 = (((x239 + (x224 * Val(128))) + (x225 * Val(256))) + (x226 * Val(512)));
  Val x241 = (((x240 + (x227 * Val(1024))) + (x228 * Val(2048))) + (x229 * Val(4096)));
  Val x242 = (((x241 + (x230 * Val(8192))) + (x231 * Val(16384))) + (x232 * Val(32768)));
  Val x243 = (((x242 + (x233 * Val(65536))) + (x234 * Val(131072))) + (x235 * Val(262144)));
  Val x244 = (((x243 + (x236 * Val(524288))) + (x237 * Val(1048576))) - x214);
  EQZ(x244, "chi_minor1(zirgen/circuit/keccak/keccak.zir:727)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:729)
  Val x245 = ((Val(1) - x186) * x217);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x246 = ((x155 + x245) - ((x155 * Val(2)) * x245));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x247 = ((Val(1) - x187) * x218);
  Val x248 = ((Val(1) - x188) * x219);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x157 + x248) - ((x157 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x189) * x220);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x158 + x250) - ((x158 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x190) * x221);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x159 + x252) - ((x159 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x191) * x222);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x160 + x254) - ((x160 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x192) * x223);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x161 + x256) - ((x161 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x193) * x224);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x162 + x258) - ((x162 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x194) * x225);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x163 + x260) - ((x163 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x195) * x226);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x164 + x262) - ((x164 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x196) * x227);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x165 + x264) - ((x165 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x197) * x228);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x166 + x266) - ((x166 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x198) * x229);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x167 + x268) - ((x167 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x199) * x230);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x168 + x270) - ((x168 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x200) * x231);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x169 + x272) - ((x169 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x201) * x232);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x170 + x274) - ((x170 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x202) * x233);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x171 + x276) - ((x171 * Val(2)) * x276));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x278 = ((Val(1) - x203) * x234);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x279 = ((x172 + x278) - ((x172 * Val(2)) * x278));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x280 = ((Val(1) - x204) * x235);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x281 = ((x173 + x280) - ((x173 * Val(2)) * x280));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x282 = ((Val(1) - x205) * x236);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x283 = ((x174 + x282) - ((x174 * Val(2)) * x282));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x284 = ((Val(1) - x206) * x237);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x285 = ((x175 + x284) - ((x175 * Val(2)) * x284));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:730)
  Val x286 = (((x156 + x247) - (x176 * x247)) * Val(2));
  Val x287 = (((x246 + x286) + (x249 * Val(4))) + (x251 * Val(8)));
  Val x288 = (((x287 + (x253 * Val(16))) + (x255 * Val(32))) + (x257 * Val(64)));
  Val x289 = (((x288 + (x259 * Val(128))) + (x261 * Val(256))) + (x263 * Val(512)));
  Val x290 = (((x289 + (x265 * Val(1024))) + (x267 * Val(2048))) + (x269 * Val(4096)));
  Val x291 = (((x290 + (x271 * Val(8192))) + (x273 * Val(16384))) + (x275 * Val(32768)));
  Val x292 = (((x291 + (x277 * Val(65536))) + (x279 * Val(131072))) + (x281 * Val(262144)));
  NondetRegStruct x293 = exec_Reg(
      ctx, ((x292 + (x283 * Val(524288))) + (x285 * Val(1048576))), LAYOUT_LOOKUP(x152, res3n));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x294 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x151[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x295 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x151[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:733)
  RetTupleStruct x296 =
      exec_RetTuple(ctx,
                    x294,
                    x295,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x150._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x293._super},
                    Val(2),
                    Val(11),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x152, _super));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x297 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x297;
}
RetTupleStruct execChiMinor0_1__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_1__1_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrA;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[21]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x35 = arg0.arrB;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x36 = x35[0]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x37 = exec_ToBits_21_(ctx, x36, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x38 = x37._super;
  Val x39 = x38[0]._super;
  Val x40 = x38[1]._super;
  Val x41 = x38[2]._super;
  Val x42 = x38[3]._super;
  Val x43 = x38[4]._super;
  Val x44 = x38[5]._super;
  Val x45 = x38[6]._super;
  Val x46 = x38[7]._super;
  Val x47 = x38[8]._super;
  Val x48 = x38[9]._super;
  Val x49 = x38[10]._super;
  Val x50 = x38[11]._super;
  Val x51 = x38[12]._super;
  Val x52 = x38[13]._super;
  Val x53 = x38[14]._super;
  Val x54 = x38[15]._super;
  Val x55 = x38[16]._super;
  Val x56 = x38[17]._super;
  Val x57 = x38[18]._super;
  Val x58 = x38[19]._super;
  Val x59 = x38[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x60 = (((x39 + (x40 * Val(2))) + (x41 * Val(4))) + (x42 * Val(8)));
  Val x61 = (((x60 + (x43 * Val(16))) + (x44 * Val(32))) + (x45 * Val(64)));
  Val x62 = (((x61 + (x46 * Val(128))) + (x47 * Val(256))) + (x48 * Val(512)));
  Val x63 = (((x62 + (x49 * Val(1024))) + (x50 * Val(2048))) + (x51 * Val(4096)));
  Val x64 = (((x63 + (x52 * Val(8192))) + (x53 * Val(16384))) + (x54 * Val(32768)));
  Val x65 = (((x64 + (x55 * Val(65536))) + (x56 * Val(131072))) + (x57 * Val(262144)));
  Val x66 = (((x65 + (x58 * Val(524288))) + (x59 * Val(1048576))) - x36);
  EQZ(x66, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x67 = x35[2]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x68 = exec_ToBits_22_(ctx, x67, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x69 = x68._super;
  Val x70 = x69[0]._super;
  Val x71 = x69[1]._super;
  Val x72 = x69[2]._super;
  Val x73 = x69[3]._super;
  Val x74 = x69[4]._super;
  Val x75 = x69[5]._super;
  Val x76 = x69[6]._super;
  Val x77 = x69[7]._super;
  Val x78 = x69[8]._super;
  Val x79 = x69[9]._super;
  Val x80 = x69[10]._super;
  Val x81 = x69[11]._super;
  Val x82 = x69[12]._super;
  Val x83 = x69[13]._super;
  Val x84 = x69[14]._super;
  Val x85 = x69[15]._super;
  Val x86 = x69[16]._super;
  Val x87 = x69[17]._super;
  Val x88 = x69[18]._super;
  Val x89 = x69[19]._super;
  Val x90 = x69[20]._super;
  Val x91 = x69[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x92 = (((x70 + (x71 * Val(2))) + (x72 * Val(4))) + (x73 * Val(8)));
  Val x93 = (((x92 + (x74 * Val(16))) + (x75 * Val(32))) + (x76 * Val(64)));
  Val x94 = (((x93 + (x77 * Val(128))) + (x78 * Val(256))) + (x79 * Val(512)));
  Val x95 = (((x94 + (x80 * Val(1024))) + (x81 * Val(2048))) + (x82 * Val(4096)));
  Val x96 = (((x95 + (x83 * Val(8192))) + (x84 * Val(16384))) + (x85 * Val(32768)));
  Val x97 = (((x96 + (x86 * Val(65536))) + (x87 * Val(131072))) + (x88 * Val(262144)));
  Val x98 = (((x97 + (x89 * Val(524288))) + (x90 * Val(1048576))) + (x91 * Val(2097152)));
  EQZ((x98 - x67), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x99 = x35[3]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x100 = exec_ToBits_21_(ctx, x99, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x123 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x124 = (((x123 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x125 = (((x124 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x126 = (((x125 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x127 = (((x126 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x128 = (((x127 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x129 = (((x128 + (x121 * Val(524288))) + (x122 * Val(1048576))) - x99);
  EQZ(x129, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x130 = x2[18]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x131 = exec_ToBits_22_(ctx, x130, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x132 = x131._super;
  Val x133 = x132[0]._super;
  Val x134 = x132[1]._super;
  Val x135 = x132[2]._super;
  Val x136 = x132[3]._super;
  Val x137 = x132[4]._super;
  Val x138 = x132[5]._super;
  Val x139 = x132[6]._super;
  Val x140 = x132[7]._super;
  Val x141 = x132[8]._super;
  Val x142 = x132[9]._super;
  Val x143 = x132[10]._super;
  Val x144 = x132[11]._super;
  Val x145 = x132[12]._super;
  Val x146 = x132[13]._super;
  Val x147 = x132[14]._super;
  Val x148 = x132[15]._super;
  Val x149 = x132[16]._super;
  Val x150 = x132[17]._super;
  Val x151 = x132[18]._super;
  Val x152 = x132[19]._super;
  Val x153 = x132[20]._super;
  Val x154 = x132[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x155 = (x134 * Val(2));
  Val x156 = (((x133 + x155) + (x135 * Val(4))) + (x136 * Val(8)));
  Val x157 = (((x156 + (x137 * Val(16))) + (x138 * Val(32))) + (x139 * Val(64)));
  Val x158 = (((x157 + (x140 * Val(128))) + (x141 * Val(256))) + (x142 * Val(512)));
  Val x159 = (((x158 + (x143 * Val(1024))) + (x144 * Val(2048))) + (x145 * Val(4096)));
  Val x160 = (((x159 + (x146 * Val(8192))) + (x147 * Val(16384))) + (x148 * Val(32768)));
  Val x161 = (((x160 + (x149 * Val(65536))) + (x150 * Val(131072))) + (x151 * Val(262144)));
  Val x162 = (((x161 + (x152 * Val(524288))) + (x153 * Val(1048576))) + (x154 * Val(2097152)));
  EQZ((x162 - x130), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x163 = x2[19]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x164 = exec_ToBits_21_(ctx, x163, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x165 = x164._super;
  Val x166 = x165[0]._super;
  Val x167 = x165[1]._super;
  Val x168 = x165[2]._super;
  Val x169 = x165[3]._super;
  Val x170 = x165[4]._super;
  Val x171 = x165[5]._super;
  Val x172 = x165[6]._super;
  Val x173 = x165[7]._super;
  Val x174 = x165[8]._super;
  Val x175 = x165[9]._super;
  Val x176 = x165[10]._super;
  Val x177 = x165[11]._super;
  Val x178 = x165[12]._super;
  Val x179 = x165[13]._super;
  Val x180 = x165[14]._super;
  Val x181 = x165[15]._super;
  Val x182 = x165[16]._super;
  Val x183 = x165[17]._super;
  Val x184 = x165[18]._super;
  Val x185 = x165[19]._super;
  Val x186 = x165[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x187 = (x167 * Val(2));
  Val x188 = (((x166 + x187) + (x168 * Val(4))) + (x169 * Val(8)));
  Val x189 = (((x188 + (x170 * Val(16))) + (x171 * Val(32))) + (x172 * Val(64)));
  Val x190 = (((x189 + (x173 * Val(128))) + (x174 * Val(256))) + (x175 * Val(512)));
  Val x191 = (((x190 + (x176 * Val(1024))) + (x177 * Val(2048))) + (x178 * Val(4096)));
  Val x192 = (((x191 + (x179 * Val(8192))) + (x180 * Val(16384))) + (x181 * Val(32768)));
  Val x193 = (((x192 + (x182 * Val(65536))) + (x183 * Val(131072))) + (x184 * Val(262144)));
  Val x194 = (((x193 + (x185 * Val(524288))) + (x186 * Val(1048576))) - x163);
  EQZ(x194, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x195 = ((Val(1) - x6) * x70);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x196 = ((x133 + x195) - ((x133 * Val(2)) * x195));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x197 = ((Val(1) - x7) * x71);
  Val x198 = ((Val(1) - x8) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x199 = ((x135 + x198) - ((x135 * Val(2)) * x198));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x200 = ((Val(1) - x9) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x201 = ((x136 + x200) - ((x136 * Val(2)) * x200));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x202 = ((Val(1) - x10) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x203 = ((x137 + x202) - ((x137 * Val(2)) * x202));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x204 = ((Val(1) - x11) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x205 = ((x138 + x204) - ((x138 * Val(2)) * x204));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x206 = ((Val(1) - x12) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x207 = ((x139 + x206) - ((x139 * Val(2)) * x206));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x208 = ((Val(1) - x13) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x209 = ((x140 + x208) - ((x140 * Val(2)) * x208));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x210 = ((Val(1) - x14) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x211 = ((x141 + x210) - ((x141 * Val(2)) * x210));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x212 = ((Val(1) - x15) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x213 = ((x142 + x212) - ((x142 * Val(2)) * x212));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x214 = ((Val(1) - x16) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x215 = ((x143 + x214) - ((x143 * Val(2)) * x214));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x216 = ((Val(1) - x17) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x217 = ((x144 + x216) - ((x144 * Val(2)) * x216));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x218 = ((Val(1) - x18) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x219 = ((x145 + x218) - ((x145 * Val(2)) * x218));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x220 = ((Val(1) - x19) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x221 = ((x146 + x220) - ((x146 * Val(2)) * x220));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x222 = ((Val(1) - x20) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x223 = ((x147 + x222) - ((x147 * Val(2)) * x222));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x224 = ((Val(1) - x21) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x225 = ((x148 + x224) - ((x148 * Val(2)) * x224));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x226 = ((Val(1) - x22) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x227 = ((x149 + x226) - ((x149 * Val(2)) * x226));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x228 = ((Val(1) - x23) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x229 = ((x150 + x228) - ((x150 * Val(2)) * x228));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x230 = ((Val(1) - x24) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x231 = ((x151 + x230) - ((x151 * Val(2)) * x230));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x232 = ((Val(1) - x25) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x233 = ((x152 + x232) - ((x152 * Val(2)) * x232));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x234 = ((Val(1) - x26) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x235 = ((x153 + x234) - ((x153 * Val(2)) * x234));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x236 = ((Val(1) - x27) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x237 = ((x154 + x236) - ((x154 * Val(2)) * x236));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x238 = ((Val(1) - x39) * x102);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x239 = ((x166 + x238) - ((x166 * Val(2)) * x238));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x240 = ((Val(1) - x40) * x103);
  Val x241 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x242 = ((x168 + x241) - ((x168 * Val(2)) * x241));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x243 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x244 = ((x169 + x243) - ((x169 * Val(2)) * x243));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x245 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x246 = ((x170 + x245) - ((x170 * Val(2)) * x245));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x247 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x171 + x247) - ((x171 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x172 + x249) - ((x172 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x173 + x251) - ((x173 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x174 + x253) - ((x174 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x175 + x255) - ((x175 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x176 + x257) - ((x176 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x177 + x259) - ((x177 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x178 + x261) - ((x178 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x179 + x263) - ((x179 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x180 + x265) - ((x180 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x181 + x267) - ((x181 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x182 + x269) - ((x182 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x183 + x271) - ((x183 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x184 + x273) - ((x184 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x185 + x275) - ((x185 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x59) * x122);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x186 + x277) - ((x186 * Val(2)) * x277));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x279 = (((x134 + x197) - (x155 * x197)) * Val(2));
  Val x280 = (((x196 + x279) + (x199 * Val(4))) + (x201 * Val(8)));
  Val x281 = (((x280 + (x203 * Val(16))) + (x205 * Val(32))) + (x207 * Val(64)));
  Val x282 = (((x281 + (x209 * Val(128))) + (x211 * Val(256))) + (x213 * Val(512)));
  Val x283 = (((x282 + (x215 * Val(1024))) + (x217 * Val(2048))) + (x219 * Val(4096)));
  Val x284 = (((x283 + (x221 * Val(8192))) + (x223 * Val(16384))) + (x225 * Val(32768)));
  Val x285 = (((x284 + (x227 * Val(65536))) + (x229 * Val(131072))) + (x231 * Val(262144)));
  Val x286 = (((x285 + (x233 * Val(524288))) + (x235 * Val(1048576))) + (x237 * Val(2097152)));
  NondetRegStruct x287 = exec_Reg(ctx, x286, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x288 = (((x167 + x240) - (x187 * x240)) * Val(2));
  Val x289 = (((x239 + x288) + (x242 * Val(4))) + (x244 * Val(8)));
  Val x290 = (((x289 + (x246 * Val(16))) + (x248 * Val(32))) + (x250 * Val(64)));
  Val x291 = (((x290 + (x252 * Val(128))) + (x254 * Val(256))) + (x256 * Val(512)));
  Val x292 = (((x291 + (x258 * Val(1024))) + (x260 * Val(2048))) + (x262 * Val(4096)));
  Val x293 = (((x292 + (x264 * Val(8192))) + (x266 * Val(16384))) + (x268 * Val(32768)));
  Val x294 = (((x293 + (x270 * Val(65536))) + (x272 * Val(131072))) + (x274 * Val(262144)));
  NondetRegStruct x295 = exec_Reg(
      ctx, ((x294 + (x276 * Val(524288))) + (x278 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x296 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x297 = exec_RetTuple(
      ctx,
      x296,
      x296,
      x296,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x287._super, x295._super},
      x296,
      x296,
      Val(3),
      Val(11),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x297;
}
RetTupleStruct execChiMinor0_2__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_2__1_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrB;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[2]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[3]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[5]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[6]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = arg0.arrA[21]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[0]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(4),
      Val(11),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_2__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_2__1_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_2__1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 5, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x6 = x4.arrB;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[1]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[4]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x6[7]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x10 + x101) - ((x10 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x12 + x104) - ((x12 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x13 + x106) - ((x13 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x14 + x108) - ((x14 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x15 + x110) - ((x15 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x16 + x112) - ((x16 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x17 + x114) - ((x17 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x18 + x116) - ((x18 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x19 + x118) - ((x19 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x20 + x120) - ((x20 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x21 + x122) - ((x21 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x22 + x124) - ((x22 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x23 + x126) - ((x23 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x24 + x128) - ((x24 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x25 + x130) - ((x25 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x26 + x132) - ((x26 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x27 + x134) - ((x27 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x28 + x136) - ((x28 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x29 + x138) - ((x29 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x30 + x140) - ((x30 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x11 + x103) - (x31 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_2__1_Arm1_SuperLayout> x151 = LAYOUT_LOOKUP(x3, arm1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:699)
  ToBits_21_Struct x152 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(x151, unpack_2nx));
  NondetRegStruct21Array x153 = x152._super;
  Val x154 = x153[0]._super;
  Val x155 = x153[1]._super;
  Val x156 = x153[2]._super;
  Val x157 = x153[3]._super;
  Val x158 = x153[4]._super;
  Val x159 = x153[5]._super;
  Val x160 = x153[6]._super;
  Val x161 = x153[7]._super;
  Val x162 = x153[8]._super;
  Val x163 = x153[9]._super;
  Val x164 = x153[10]._super;
  Val x165 = x153[11]._super;
  Val x166 = x153[12]._super;
  Val x167 = x153[13]._super;
  Val x168 = x153[14]._super;
  Val x169 = x153[15]._super;
  Val x170 = x153[16]._super;
  Val x171 = x153[17]._super;
  Val x172 = x153[18]._super;
  Val x173 = x153[19]._super;
  Val x174 = x153[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:700)
  Val x175 = (x155 * Val(2));
  Val x176 = (((x154 + x175) + (x156 * Val(4))) + (x157 * Val(8)));
  Val x177 = (((x176 + (x158 * Val(16))) + (x159 * Val(32))) + (x160 * Val(64)));
  Val x178 = (((x177 + (x161 * Val(128))) + (x162 * Val(256))) + (x163 * Val(512)));
  Val x179 = (((x178 + (x164 * Val(1024))) + (x165 * Val(2048))) + (x166 * Val(4096)));
  Val x180 = (((x179 + (x167 * Val(8192))) + (x168 * Val(16384))) + (x169 * Val(32768)));
  Val x181 = (((x180 + (x170 * Val(65536))) + (x171 * Val(131072))) + (x172 * Val(262144)));
  Val x182 = (((x181 + (x173 * Val(524288))) + (x174 * Val(1048576))) - x39);
  EQZ(x182, "chi_minor1(zirgen/circuit/keccak/keccak.zir:700)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:713)
  ToBits_21_Struct x183 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(x151, unpack_2nxp1));
  NondetRegStruct21Array x184 = x183._super;
  Val x185 = x184[0]._super;
  Val x186 = x184[1]._super;
  Val x187 = x184[2]._super;
  Val x188 = x184[3]._super;
  Val x189 = x184[4]._super;
  Val x190 = x184[5]._super;
  Val x191 = x184[6]._super;
  Val x192 = x184[7]._super;
  Val x193 = x184[8]._super;
  Val x194 = x184[9]._super;
  Val x195 = x184[10]._super;
  Val x196 = x184[11]._super;
  Val x197 = x184[12]._super;
  Val x198 = x184[13]._super;
  Val x199 = x184[14]._super;
  Val x200 = x184[15]._super;
  Val x201 = x184[16]._super;
  Val x202 = x184[17]._super;
  Val x203 = x184[18]._super;
  Val x204 = x184[19]._super;
  Val x205 = x184[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:714)
  Val x206 = (((x185 + (x186 * Val(2))) + (x187 * Val(4))) + (x188 * Val(8)));
  Val x207 = (((x206 + (x189 * Val(16))) + (x190 * Val(32))) + (x191 * Val(64)));
  Val x208 = (((x207 + (x192 * Val(128))) + (x193 * Val(256))) + (x194 * Val(512)));
  Val x209 = (((x208 + (x195 * Val(1024))) + (x196 * Val(2048))) + (x197 * Val(4096)));
  Val x210 = (((x209 + (x198 * Val(8192))) + (x199 * Val(16384))) + (x200 * Val(32768)));
  Val x211 = (((x210 + (x201 * Val(65536))) + (x202 * Val(131072))) + (x203 * Val(262144)));
  Val x212 = (((x211 + (x204 * Val(524288))) + (x205 * Val(1048576))) - x70);
  EQZ(x212, "chi_minor1(zirgen/circuit/keccak/keccak.zir:714)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:718)
  Val x213 = x4.arrA[17]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:726)
  ToBits_21_Struct x214 = exec_ToBits_21_(ctx, x213, LAYOUT_LOOKUP(x151, unpack_2nxp2));
  NondetRegStruct21Array x215 = x214._super;
  Val x216 = x215[0]._super;
  Val x217 = x215[1]._super;
  Val x218 = x215[2]._super;
  Val x219 = x215[3]._super;
  Val x220 = x215[4]._super;
  Val x221 = x215[5]._super;
  Val x222 = x215[6]._super;
  Val x223 = x215[7]._super;
  Val x224 = x215[8]._super;
  Val x225 = x215[9]._super;
  Val x226 = x215[10]._super;
  Val x227 = x215[11]._super;
  Val x228 = x215[12]._super;
  Val x229 = x215[13]._super;
  Val x230 = x215[14]._super;
  Val x231 = x215[15]._super;
  Val x232 = x215[16]._super;
  Val x233 = x215[17]._super;
  Val x234 = x215[18]._super;
  Val x235 = x215[19]._super;
  Val x236 = x215[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:727)
  Val x237 = (((x216 + (x217 * Val(2))) + (x218 * Val(4))) + (x219 * Val(8)));
  Val x238 = (((x237 + (x220 * Val(16))) + (x221 * Val(32))) + (x222 * Val(64)));
  Val x239 = (((x238 + (x223 * Val(128))) + (x224 * Val(256))) + (x225 * Val(512)));
  Val x240 = (((x239 + (x226 * Val(1024))) + (x227 * Val(2048))) + (x228 * Val(4096)));
  Val x241 = (((x240 + (x229 * Val(8192))) + (x230 * Val(16384))) + (x231 * Val(32768)));
  Val x242 = (((x241 + (x232 * Val(65536))) + (x233 * Val(131072))) + (x234 * Val(262144)));
  Val x243 = (((x242 + (x235 * Val(524288))) + (x236 * Val(1048576))) - x213);
  EQZ(x243, "chi_minor1(zirgen/circuit/keccak/keccak.zir:727)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:729)
  Val x244 = ((Val(1) - x185) * x216);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x154 + x244) - ((x154 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x186) * x217);
  Val x247 = ((Val(1) - x187) * x218);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x156 + x247) - ((x156 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x188) * x219);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x157 + x249) - ((x157 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x189) * x220);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x158 + x251) - ((x158 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x190) * x221);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x159 + x253) - ((x159 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x191) * x222);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x160 + x255) - ((x160 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x192) * x223);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x161 + x257) - ((x161 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x193) * x224);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x162 + x259) - ((x162 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x194) * x225);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x163 + x261) - ((x163 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x195) * x226);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x164 + x263) - ((x164 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x196) * x227);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x165 + x265) - ((x165 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x197) * x228);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x166 + x267) - ((x166 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x198) * x229);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x167 + x269) - ((x167 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x199) * x230);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x168 + x271) - ((x168 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x200) * x231);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x169 + x273) - ((x169 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x201) * x232);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x170 + x275) - ((x170 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x202) * x233);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x171 + x277) - ((x171 * Val(2)) * x277));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x279 = ((Val(1) - x203) * x234);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x280 = ((x172 + x279) - ((x172 * Val(2)) * x279));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x281 = ((Val(1) - x204) * x235);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x282 = ((x173 + x281) - ((x173 * Val(2)) * x281));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x283 = ((Val(1) - x205) * x236);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x284 = ((x174 + x283) - ((x174 * Val(2)) * x283));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:730)
  Val x285 = (((x155 + x246) - (x175 * x246)) * Val(2));
  Val x286 = (((x245 + x285) + (x248 * Val(4))) + (x250 * Val(8)));
  Val x287 = (((x286 + (x252 * Val(16))) + (x254 * Val(32))) + (x256 * Val(64)));
  Val x288 = (((x287 + (x258 * Val(128))) + (x260 * Val(256))) + (x262 * Val(512)));
  Val x289 = (((x288 + (x264 * Val(1024))) + (x266 * Val(2048))) + (x268 * Val(4096)));
  Val x290 = (((x289 + (x270 * Val(8192))) + (x272 * Val(16384))) + (x274 * Val(32768)));
  Val x291 = (((x290 + (x276 * Val(65536))) + (x278 * Val(131072))) + (x280 * Val(262144)));
  NondetRegStruct x292 = exec_Reg(
      ctx, ((x291 + (x282 * Val(524288))) + (x284 * Val(1048576))), LAYOUT_LOOKUP(x151, res3n));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x293 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x294 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:733)
  RetTupleStruct x295 =
      exec_RetTuple(ctx,
                    x293,
                    x294,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x292._super},
                    Val(5),
                    Val(11),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x151, _super));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x296 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x296;
}
RetTupleStruct execChiMinor0_3__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_3__1_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrB;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[5]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[6]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x66 = arg0.arrA;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x67 = x66[15]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x68 = exec_ToBits_22_(ctx, x67, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x69 = x68._super;
  Val x70 = x69[0]._super;
  Val x71 = x69[1]._super;
  Val x72 = x69[2]._super;
  Val x73 = x69[3]._super;
  Val x74 = x69[4]._super;
  Val x75 = x69[5]._super;
  Val x76 = x69[6]._super;
  Val x77 = x69[7]._super;
  Val x78 = x69[8]._super;
  Val x79 = x69[9]._super;
  Val x80 = x69[10]._super;
  Val x81 = x69[11]._super;
  Val x82 = x69[12]._super;
  Val x83 = x69[13]._super;
  Val x84 = x69[14]._super;
  Val x85 = x69[15]._super;
  Val x86 = x69[16]._super;
  Val x87 = x69[17]._super;
  Val x88 = x69[18]._super;
  Val x89 = x69[19]._super;
  Val x90 = x69[20]._super;
  Val x91 = x69[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x92 = (((x70 + (x71 * Val(2))) + (x72 * Val(4))) + (x73 * Val(8)));
  Val x93 = (((x92 + (x74 * Val(16))) + (x75 * Val(32))) + (x76 * Val(64)));
  Val x94 = (((x93 + (x77 * Val(128))) + (x78 * Val(256))) + (x79 * Val(512)));
  Val x95 = (((x94 + (x80 * Val(1024))) + (x81 * Val(2048))) + (x82 * Val(4096)));
  Val x96 = (((x95 + (x83 * Val(8192))) + (x84 * Val(16384))) + (x85 * Val(32768)));
  Val x97 = (((x96 + (x86 * Val(65536))) + (x87 * Val(131072))) + (x88 * Val(262144)));
  Val x98 = (((x97 + (x89 * Val(524288))) + (x90 * Val(1048576))) + (x91 * Val(2097152)));
  EQZ((x98 - x67), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x99 = x66[16]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x100 = exec_ToBits_21_(ctx, x99, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x123 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x124 = (((x123 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x125 = (((x124 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x126 = (((x125 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x127 = (((x126 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x128 = (((x127 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x129 = (((x128 + (x121 * Val(524288))) + (x122 * Val(1048576))) - x99);
  EQZ(x129, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x130 = x2[2]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x131 = exec_ToBits_22_(ctx, x130, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x132 = x131._super;
  Val x133 = x132[0]._super;
  Val x134 = x132[1]._super;
  Val x135 = x132[2]._super;
  Val x136 = x132[3]._super;
  Val x137 = x132[4]._super;
  Val x138 = x132[5]._super;
  Val x139 = x132[6]._super;
  Val x140 = x132[7]._super;
  Val x141 = x132[8]._super;
  Val x142 = x132[9]._super;
  Val x143 = x132[10]._super;
  Val x144 = x132[11]._super;
  Val x145 = x132[12]._super;
  Val x146 = x132[13]._super;
  Val x147 = x132[14]._super;
  Val x148 = x132[15]._super;
  Val x149 = x132[16]._super;
  Val x150 = x132[17]._super;
  Val x151 = x132[18]._super;
  Val x152 = x132[19]._super;
  Val x153 = x132[20]._super;
  Val x154 = x132[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x155 = (x134 * Val(2));
  Val x156 = (((x133 + x155) + (x135 * Val(4))) + (x136 * Val(8)));
  Val x157 = (((x156 + (x137 * Val(16))) + (x138 * Val(32))) + (x139 * Val(64)));
  Val x158 = (((x157 + (x140 * Val(128))) + (x141 * Val(256))) + (x142 * Val(512)));
  Val x159 = (((x158 + (x143 * Val(1024))) + (x144 * Val(2048))) + (x145 * Val(4096)));
  Val x160 = (((x159 + (x146 * Val(8192))) + (x147 * Val(16384))) + (x148 * Val(32768)));
  Val x161 = (((x160 + (x149 * Val(65536))) + (x150 * Val(131072))) + (x151 * Val(262144)));
  Val x162 = (((x161 + (x152 * Val(524288))) + (x153 * Val(1048576))) + (x154 * Val(2097152)));
  EQZ((x162 - x130), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x163 = x2[3]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x164 = exec_ToBits_21_(ctx, x163, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x165 = x164._super;
  Val x166 = x165[0]._super;
  Val x167 = x165[1]._super;
  Val x168 = x165[2]._super;
  Val x169 = x165[3]._super;
  Val x170 = x165[4]._super;
  Val x171 = x165[5]._super;
  Val x172 = x165[6]._super;
  Val x173 = x165[7]._super;
  Val x174 = x165[8]._super;
  Val x175 = x165[9]._super;
  Val x176 = x165[10]._super;
  Val x177 = x165[11]._super;
  Val x178 = x165[12]._super;
  Val x179 = x165[13]._super;
  Val x180 = x165[14]._super;
  Val x181 = x165[15]._super;
  Val x182 = x165[16]._super;
  Val x183 = x165[17]._super;
  Val x184 = x165[18]._super;
  Val x185 = x165[19]._super;
  Val x186 = x165[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x187 = (x167 * Val(2));
  Val x188 = (((x166 + x187) + (x168 * Val(4))) + (x169 * Val(8)));
  Val x189 = (((x188 + (x170 * Val(16))) + (x171 * Val(32))) + (x172 * Val(64)));
  Val x190 = (((x189 + (x173 * Val(128))) + (x174 * Val(256))) + (x175 * Val(512)));
  Val x191 = (((x190 + (x176 * Val(1024))) + (x177 * Val(2048))) + (x178 * Val(4096)));
  Val x192 = (((x191 + (x179 * Val(8192))) + (x180 * Val(16384))) + (x181 * Val(32768)));
  Val x193 = (((x192 + (x182 * Val(65536))) + (x183 * Val(131072))) + (x184 * Val(262144)));
  Val x194 = (((x193 + (x185 * Val(524288))) + (x186 * Val(1048576))) - x163);
  EQZ(x194, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x195 = ((Val(1) - x6) * x70);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x196 = ((x133 + x195) - ((x133 * Val(2)) * x195));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x197 = ((Val(1) - x7) * x71);
  Val x198 = ((Val(1) - x8) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x199 = ((x135 + x198) - ((x135 * Val(2)) * x198));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x200 = ((Val(1) - x9) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x201 = ((x136 + x200) - ((x136 * Val(2)) * x200));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x202 = ((Val(1) - x10) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x203 = ((x137 + x202) - ((x137 * Val(2)) * x202));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x204 = ((Val(1) - x11) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x205 = ((x138 + x204) - ((x138 * Val(2)) * x204));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x206 = ((Val(1) - x12) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x207 = ((x139 + x206) - ((x139 * Val(2)) * x206));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x208 = ((Val(1) - x13) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x209 = ((x140 + x208) - ((x140 * Val(2)) * x208));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x210 = ((Val(1) - x14) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x211 = ((x141 + x210) - ((x141 * Val(2)) * x210));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x212 = ((Val(1) - x15) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x213 = ((x142 + x212) - ((x142 * Val(2)) * x212));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x214 = ((Val(1) - x16) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x215 = ((x143 + x214) - ((x143 * Val(2)) * x214));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x216 = ((Val(1) - x17) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x217 = ((x144 + x216) - ((x144 * Val(2)) * x216));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x218 = ((Val(1) - x18) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x219 = ((x145 + x218) - ((x145 * Val(2)) * x218));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x220 = ((Val(1) - x19) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x221 = ((x146 + x220) - ((x146 * Val(2)) * x220));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x222 = ((Val(1) - x20) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x223 = ((x147 + x222) - ((x147 * Val(2)) * x222));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x224 = ((Val(1) - x21) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x225 = ((x148 + x224) - ((x148 * Val(2)) * x224));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x226 = ((Val(1) - x22) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x227 = ((x149 + x226) - ((x149 * Val(2)) * x226));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x228 = ((Val(1) - x23) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x229 = ((x150 + x228) - ((x150 * Val(2)) * x228));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x230 = ((Val(1) - x24) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x231 = ((x151 + x230) - ((x151 * Val(2)) * x230));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x232 = ((Val(1) - x25) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x233 = ((x152 + x232) - ((x152 * Val(2)) * x232));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x234 = ((Val(1) - x26) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x235 = ((x153 + x234) - ((x153 * Val(2)) * x234));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x236 = ((Val(1) - x27) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x237 = ((x154 + x236) - ((x154 * Val(2)) * x236));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x238 = ((Val(1) - x38) * x102);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x239 = ((x166 + x238) - ((x166 * Val(2)) * x238));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x240 = ((Val(1) - x39) * x103);
  Val x241 = ((Val(1) - x40) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x242 = ((x168 + x241) - ((x168 * Val(2)) * x241));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x243 = ((Val(1) - x41) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x244 = ((x169 + x243) - ((x169 * Val(2)) * x243));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x245 = ((Val(1) - x42) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x246 = ((x170 + x245) - ((x170 * Val(2)) * x245));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x247 = ((Val(1) - x43) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x171 + x247) - ((x171 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x44) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x172 + x249) - ((x172 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x45) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x173 + x251) - ((x173 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x46) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x174 + x253) - ((x174 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x47) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x175 + x255) - ((x175 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x48) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x176 + x257) - ((x176 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x49) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x177 + x259) - ((x177 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x50) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x178 + x261) - ((x178 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x51) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x179 + x263) - ((x179 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x52) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x180 + x265) - ((x180 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x53) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x181 + x267) - ((x181 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x54) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x182 + x269) - ((x182 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x55) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x183 + x271) - ((x183 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x56) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x184 + x273) - ((x184 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x57) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x185 + x275) - ((x185 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x58) * x122);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x186 + x277) - ((x186 * Val(2)) * x277));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x279 = (((x134 + x197) - (x155 * x197)) * Val(2));
  Val x280 = (((x196 + x279) + (x199 * Val(4))) + (x201 * Val(8)));
  Val x281 = (((x280 + (x203 * Val(16))) + (x205 * Val(32))) + (x207 * Val(64)));
  Val x282 = (((x281 + (x209 * Val(128))) + (x211 * Val(256))) + (x213 * Val(512)));
  Val x283 = (((x282 + (x215 * Val(1024))) + (x217 * Val(2048))) + (x219 * Val(4096)));
  Val x284 = (((x283 + (x221 * Val(8192))) + (x223 * Val(16384))) + (x225 * Val(32768)));
  Val x285 = (((x284 + (x227 * Val(65536))) + (x229 * Val(131072))) + (x231 * Val(262144)));
  Val x286 = (((x285 + (x233 * Val(524288))) + (x235 * Val(1048576))) + (x237 * Val(2097152)));
  NondetRegStruct x287 = exec_Reg(ctx, x286, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x288 = (((x167 + x240) - (x187 * x240)) * Val(2));
  Val x289 = (((x239 + x288) + (x242 * Val(4))) + (x244 * Val(8)));
  Val x290 = (((x289 + (x246 * Val(16))) + (x248 * Val(32))) + (x250 * Val(64)));
  Val x291 = (((x290 + (x252 * Val(128))) + (x254 * Val(256))) + (x256 * Val(512)));
  Val x292 = (((x291 + (x258 * Val(1024))) + (x260 * Val(2048))) + (x262 * Val(4096)));
  Val x293 = (((x292 + (x264 * Val(8192))) + (x266 * Val(16384))) + (x268 * Val(32768)));
  Val x294 = (((x293 + (x270 * Val(65536))) + (x272 * Val(131072))) + (x274 * Val(262144)));
  NondetRegStruct x295 = exec_Reg(
      ctx, ((x294 + (x276 * Val(524288))) + (x278 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x296 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x297 = exec_RetTuple(
      ctx,
      x296,
      x296,
      x296,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x287._super, x295._super},
      x296,
      x296,
      Val(6),
      Val(11),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x297;
}
RetTupleStruct execChiMinor0_4__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_4__1_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrA;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[15]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[16]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[18]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[19]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x129 = arg0.arrB;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x130 = x129[5]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x131 = exec_ToBits_22_(ctx, x130, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x132 = x131._super;
  Val x133 = x132[0]._super;
  Val x134 = x132[1]._super;
  Val x135 = x132[2]._super;
  Val x136 = x132[3]._super;
  Val x137 = x132[4]._super;
  Val x138 = x132[5]._super;
  Val x139 = x132[6]._super;
  Val x140 = x132[7]._super;
  Val x141 = x132[8]._super;
  Val x142 = x132[9]._super;
  Val x143 = x132[10]._super;
  Val x144 = x132[11]._super;
  Val x145 = x132[12]._super;
  Val x146 = x132[13]._super;
  Val x147 = x132[14]._super;
  Val x148 = x132[15]._super;
  Val x149 = x132[16]._super;
  Val x150 = x132[17]._super;
  Val x151 = x132[18]._super;
  Val x152 = x132[19]._super;
  Val x153 = x132[20]._super;
  Val x154 = x132[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x155 = (x134 * Val(2));
  Val x156 = (((x133 + x155) + (x135 * Val(4))) + (x136 * Val(8)));
  Val x157 = (((x156 + (x137 * Val(16))) + (x138 * Val(32))) + (x139 * Val(64)));
  Val x158 = (((x157 + (x140 * Val(128))) + (x141 * Val(256))) + (x142 * Val(512)));
  Val x159 = (((x158 + (x143 * Val(1024))) + (x144 * Val(2048))) + (x145 * Val(4096)));
  Val x160 = (((x159 + (x146 * Val(8192))) + (x147 * Val(16384))) + (x148 * Val(32768)));
  Val x161 = (((x160 + (x149 * Val(65536))) + (x150 * Val(131072))) + (x151 * Val(262144)));
  Val x162 = (((x161 + (x152 * Val(524288))) + (x153 * Val(1048576))) + (x154 * Val(2097152)));
  EQZ((x162 - x130), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x163 = x129[6]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x164 = exec_ToBits_21_(ctx, x163, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x165 = x164._super;
  Val x166 = x165[0]._super;
  Val x167 = x165[1]._super;
  Val x168 = x165[2]._super;
  Val x169 = x165[3]._super;
  Val x170 = x165[4]._super;
  Val x171 = x165[5]._super;
  Val x172 = x165[6]._super;
  Val x173 = x165[7]._super;
  Val x174 = x165[8]._super;
  Val x175 = x165[9]._super;
  Val x176 = x165[10]._super;
  Val x177 = x165[11]._super;
  Val x178 = x165[12]._super;
  Val x179 = x165[13]._super;
  Val x180 = x165[14]._super;
  Val x181 = x165[15]._super;
  Val x182 = x165[16]._super;
  Val x183 = x165[17]._super;
  Val x184 = x165[18]._super;
  Val x185 = x165[19]._super;
  Val x186 = x165[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x187 = (x167 * Val(2));
  Val x188 = (((x166 + x187) + (x168 * Val(4))) + (x169 * Val(8)));
  Val x189 = (((x188 + (x170 * Val(16))) + (x171 * Val(32))) + (x172 * Val(64)));
  Val x190 = (((x189 + (x173 * Val(128))) + (x174 * Val(256))) + (x175 * Val(512)));
  Val x191 = (((x190 + (x176 * Val(1024))) + (x177 * Val(2048))) + (x178 * Val(4096)));
  Val x192 = (((x191 + (x179 * Val(8192))) + (x180 * Val(16384))) + (x181 * Val(32768)));
  Val x193 = (((x192 + (x182 * Val(65536))) + (x183 * Val(131072))) + (x184 * Val(262144)));
  Val x194 = (((x193 + (x185 * Val(524288))) + (x186 * Val(1048576))) - x163);
  EQZ(x194, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x195 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x196 = ((x133 + x195) - ((x133 * Val(2)) * x195));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x197 = ((Val(1) - x7) * x70);
  Val x198 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x199 = ((x135 + x198) - ((x135 * Val(2)) * x198));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x200 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x201 = ((x136 + x200) - ((x136 * Val(2)) * x200));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x202 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x203 = ((x137 + x202) - ((x137 * Val(2)) * x202));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x204 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x205 = ((x138 + x204) - ((x138 * Val(2)) * x204));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x206 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x207 = ((x139 + x206) - ((x139 * Val(2)) * x206));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x208 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x209 = ((x140 + x208) - ((x140 * Val(2)) * x208));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x210 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x211 = ((x141 + x210) - ((x141 * Val(2)) * x210));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x212 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x213 = ((x142 + x212) - ((x142 * Val(2)) * x212));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x214 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x215 = ((x143 + x214) - ((x143 * Val(2)) * x214));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x216 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x217 = ((x144 + x216) - ((x144 * Val(2)) * x216));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x218 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x219 = ((x145 + x218) - ((x145 * Val(2)) * x218));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x220 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x221 = ((x146 + x220) - ((x146 * Val(2)) * x220));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x222 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x223 = ((x147 + x222) - ((x147 * Val(2)) * x222));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x224 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x225 = ((x148 + x224) - ((x148 * Val(2)) * x224));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x226 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x227 = ((x149 + x226) - ((x149 * Val(2)) * x226));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x228 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x229 = ((x150 + x228) - ((x150 * Val(2)) * x228));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x230 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x231 = ((x151 + x230) - ((x151 * Val(2)) * x230));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x232 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x233 = ((x152 + x232) - ((x152 * Val(2)) * x232));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x234 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x235 = ((x153 + x234) - ((x153 * Val(2)) * x234));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x236 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x237 = ((x154 + x236) - ((x154 * Val(2)) * x236));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x238 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x239 = ((x166 + x238) - ((x166 * Val(2)) * x238));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x240 = ((Val(1) - x39) * x102);
  Val x241 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x242 = ((x168 + x241) - ((x168 * Val(2)) * x241));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x243 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x244 = ((x169 + x243) - ((x169 * Val(2)) * x243));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x245 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x246 = ((x170 + x245) - ((x170 * Val(2)) * x245));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x247 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x171 + x247) - ((x171 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x172 + x249) - ((x172 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x173 + x251) - ((x173 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x174 + x253) - ((x174 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x175 + x255) - ((x175 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x176 + x257) - ((x176 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x177 + x259) - ((x177 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x178 + x261) - ((x178 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x179 + x263) - ((x179 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x180 + x265) - ((x180 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x181 + x267) - ((x181 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x182 + x269) - ((x182 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x183 + x271) - ((x183 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x184 + x273) - ((x184 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x185 + x275) - ((x185 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x186 + x277) - ((x186 * Val(2)) * x277));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x279 = (((x134 + x197) - (x155 * x197)) * Val(2));
  Val x280 = (((x196 + x279) + (x199 * Val(4))) + (x201 * Val(8)));
  Val x281 = (((x280 + (x203 * Val(16))) + (x205 * Val(32))) + (x207 * Val(64)));
  Val x282 = (((x281 + (x209 * Val(128))) + (x211 * Val(256))) + (x213 * Val(512)));
  Val x283 = (((x282 + (x215 * Val(1024))) + (x217 * Val(2048))) + (x219 * Val(4096)));
  Val x284 = (((x283 + (x221 * Val(8192))) + (x223 * Val(16384))) + (x225 * Val(32768)));
  Val x285 = (((x284 + (x227 * Val(65536))) + (x229 * Val(131072))) + (x231 * Val(262144)));
  Val x286 = (((x285 + (x233 * Val(524288))) + (x235 * Val(1048576))) + (x237 * Val(2097152)));
  NondetRegStruct x287 = exec_Reg(ctx, x286, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x288 = (((x167 + x240) - (x187 * x240)) * Val(2));
  Val x289 = (((x239 + x288) + (x242 * Val(4))) + (x244 * Val(8)));
  Val x290 = (((x289 + (x246 * Val(16))) + (x248 * Val(32))) + (x250 * Val(64)));
  Val x291 = (((x290 + (x252 * Val(128))) + (x254 * Val(256))) + (x256 * Val(512)));
  Val x292 = (((x291 + (x258 * Val(1024))) + (x260 * Val(2048))) + (x262 * Val(4096)));
  Val x293 = (((x292 + (x264 * Val(8192))) + (x266 * Val(16384))) + (x268 * Val(32768)));
  Val x294 = (((x293 + (x270 * Val(65536))) + (x272 * Val(131072))) + (x274 * Val(262144)));
  NondetRegStruct x295 = exec_Reg(
      ctx, ((x294 + (x276 * Val(524288))) + (x278 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x296 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x297 = exec_RetTuple(
      ctx,
      x296,
      x296,
      x296,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x287._super, x295._super},
      x296,
      x296,
      Val(7),
      Val(11),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x297;
}
RetTupleStruct execChiMinor1_4__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_4__1_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_4__1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 8, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x6 = x4.arrB[7]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x7 = exec_ToBits_21_(ctx, x6, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x30 = (x10 * Val(2));
  Val x31 = (((x9 + x30) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) - x6);
  EQZ(x37, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x38 = x4.arrA;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x38[17]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x38[20]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x9 + x101) - ((x9 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x11 + x104) - ((x11 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x12 + x106) - ((x12 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x13 + x108) - ((x13 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x14 + x110) - ((x14 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x15 + x112) - ((x15 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x16 + x114) - ((x16 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x17 + x116) - ((x17 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x18 + x118) - ((x18 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x19 + x120) - ((x19 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x20 + x122) - ((x20 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x21 + x124) - ((x21 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x22 + x126) - ((x22 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x23 + x128) - ((x23 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x24 + x130) - ((x24 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x25 + x132) - ((x25 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x26 + x134) - ((x26 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x27 + x136) - ((x27 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x28 + x138) - ((x28 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x29 + x140) - ((x29 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x10 + x103) - (x30 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x151 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x152 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:686)
  Val22Array x153 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x154 =
      exec_RetTuple(ctx,
                    x151,
                    x152,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x153,
                    x153,
                    Val(8),
                    Val(11),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x155 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x155;
}
RetTupleStruct execChiMinor2_1_(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<ChiMinor2_1__SuperLayout> layout2) {
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:739)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:740)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  RetTupleStruct x5 = back_RetTuple(ctx, 4, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:742)
  RetTupleStruct x6 = back_RetTuple(ctx, 6, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:743)
  RetTupleStruct x7 = back_RetTuple(ctx, 7, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  RetTupleStruct x8 = back_RetTuple(ctx, 9, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:746)
  BoundLayout<ChiMinor2_1_Arm1_SuperLayout> x9 = LAYOUT_LOOKUP(layout2, arm1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:742)
  NondetRegStruct24Array x10 = x6.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  Val x11 = x5.arrA[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:743)
  Val x12 = x7.arrA[21]._super;
  Val x13 = x7.arrB[21]._super;
  Val x14 = x7.arrC[21]._super;
  Val x15 = x7.arrF[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  NondetRegStruct22Array x16 = x8.arrA;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  Val x17 = x5.arrC[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:740)
  NondetRegStruct24Array x18 = x4.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  Val x19 = x5.arrB[21]._super;
  Val x20 = x5.arrF[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:739)
  Val x21 = x3.arrA[21]._super;
  Val x22 = x3.arrB[21]._super;
  Val x23 = x3.arrC[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  NondetRegStruct22Array x24 = x8.arrB;
  NondetRegStruct22Array x25 = x8.arrC;
  NondetRegStruct24Array x26 = x8.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:762)
  Val22Array x27 = Val22Array{x16[0]._super,
                              x16[1]._super,
                              x16[2]._super,
                              x16[3]._super,
                              x16[4]._super,
                              x16[5]._super,
                              x16[6]._super,
                              x16[7]._super,
                              x16[8]._super,
                              x16[9]._super,
                              x16[10]._super,
                              x16[11]._super,
                              x16[12]._super,
                              x16[13]._super,
                              x16[14]._super,
                              x12,
                              x13,
                              x14,
                              x10[22]._super,
                              x10[23]._super,
                              x15,
                              x11};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  Val22Array x28 =
      Val22Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super};
  Val24Array x29 =
      Val24Array{x26[0]._super,  x26[1]._super,  x26[2]._super,  x26[3]._super,  x26[4]._super,
                 x26[5]._super,  x26[6]._super,  x26[7]._super,  x26[8]._super,  x26[9]._super,
                 x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x26[22]._super, x26[23]._super};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:767)
  Val22Array x30 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x31 = exec_RetTuple(ctx,
                                     x27,
                                     Val22Array{x19,
                                                x17,
                                                x18[22]._super,
                                                x18[23]._super,
                                                x20,
                                                x21,
                                                x22,
                                                x23,
                                                x24[8]._super,
                                                x24[9]._super,
                                                x24[10]._super,
                                                x24[11]._super,
                                                x24[12]._super,
                                                x24[13]._super,
                                                x24[14]._super,
                                                x24[15]._super,
                                                x24[16]._super,
                                                x24[17]._super,
                                                x24[18]._super,
                                                x24[19]._super,
                                                x24[20]._super,
                                                x24[21]._super},
                                     x28,
                                     x29,
                                     x30,
                                     x30,
                                     Val(0),
                                     Val(12),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(x9, arm0));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:758)
  RetTupleStruct x32 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x9, _super));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:746)
  RetTupleStruct x33 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(layout2, _super));
  return x33;
}
RetTupleStruct execChiMajor_1_(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<ChiMajor_1_Layout> layout2) {
  // chi_major(zirgen/circuit/keccak/keccak.zir:841)
  BoundLayout<ChiMajor_1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_major(zirgen/circuit/keccak/keccak.zir:840)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_10_Struct x5 = exec_OneHot_10_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct10Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:842)
    RetTupleStruct x8 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x9 = execChiMinor0_0__1_(ctx, x8, LAYOUT_LOOKUP(x3, arm0));
    x7 = x9;
  } else if (to_size_t(x6[1]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:843)
    RetTupleStruct x10 = execChiMinor1_0__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x10;
  } else if (to_size_t(x6[2]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:844)
    RetTupleStruct x11 = back_RetTuple(ctx, 3, arg1);
    RetTupleStruct x12 = execChiMinor0_1__1_(ctx, x11, LAYOUT_LOOKUP(x3, arm2));
    x7 = x12;
  } else if (to_size_t(x6[3]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:845)
    RetTupleStruct x13 = back_RetTuple(ctx, 4, arg1);
    RetTupleStruct x14 = execChiMinor0_2__1_(ctx, x13, LAYOUT_LOOKUP(x3, arm3));
    x7 = x14;
  } else if (to_size_t(x6[4]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:846)
    RetTupleStruct x15 = execChiMinor1_2__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x15;
  } else if (to_size_t(x6[5]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:847)
    RetTupleStruct x16 = back_RetTuple(ctx, 6, arg1);
    RetTupleStruct x17 = execChiMinor0_3__1_(ctx, x16, LAYOUT_LOOKUP(x3, arm5));
    x7 = x17;
  } else if (to_size_t(x6[6]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:848)
    RetTupleStruct x18 = back_RetTuple(ctx, 7, arg1);
    RetTupleStruct x19 = execChiMinor0_4__1_(ctx, x18, LAYOUT_LOOKUP(x3, arm6));
    x7 = x19;
  } else if (to_size_t(x6[7]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:849)
    RetTupleStruct x20 = execChiMinor1_4__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x20;
  } else if (to_size_t(x6[8]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:850)
    RetTupleStruct x21 = execChiMinor2_1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x21;
  } else if (to_size_t(x6[9]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:851)
    RetTupleStruct x22 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x23 = execIotaXorRc(ctx, x22, LAYOUT_LOOKUP(x3, arm9));
    x7 = x23;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // chi_major(zirgen/circuit/keccak/keccak.zir:841)
  RetTupleStruct x24 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x24;
}
RetTupleStruct execChiMinor0_0__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_0__2_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrB;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[11]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[12]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[14]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[15]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[8]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[9]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(1),
      Val(12),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_0__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_0__2_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_0__2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x6 = x4.arrB;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[10]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[13]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x6[16]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x10 + x101) - ((x10 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x12 + x104) - ((x12 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x13 + x106) - ((x13 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x14 + x108) - ((x14 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x15 + x110) - ((x15 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x16 + x112) - ((x16 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x17 + x114) - ((x17 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x18 + x116) - ((x18 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x19 + x118) - ((x19 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x20 + x120) - ((x20 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x21 + x122) - ((x21 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x22 + x124) - ((x22 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x23 + x126) - ((x23 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x24 + x128) - ((x24 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x25 + x130) - ((x25 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x26 + x132) - ((x26 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x27 + x134) - ((x27 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x28 + x136) - ((x28 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x29 + x138) - ((x29 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x30 + x140) - ((x30 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x11 + x103) - (x31 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_0__2_Arm1_SuperLayout> x151 = LAYOUT_LOOKUP(x3, arm1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:699)
  ToBits_21_Struct x152 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(x151, unpack_2nx));
  NondetRegStruct21Array x153 = x152._super;
  Val x154 = x153[0]._super;
  Val x155 = x153[1]._super;
  Val x156 = x153[2]._super;
  Val x157 = x153[3]._super;
  Val x158 = x153[4]._super;
  Val x159 = x153[5]._super;
  Val x160 = x153[6]._super;
  Val x161 = x153[7]._super;
  Val x162 = x153[8]._super;
  Val x163 = x153[9]._super;
  Val x164 = x153[10]._super;
  Val x165 = x153[11]._super;
  Val x166 = x153[12]._super;
  Val x167 = x153[13]._super;
  Val x168 = x153[14]._super;
  Val x169 = x153[15]._super;
  Val x170 = x153[16]._super;
  Val x171 = x153[17]._super;
  Val x172 = x153[18]._super;
  Val x173 = x153[19]._super;
  Val x174 = x153[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:700)
  Val x175 = (x155 * Val(2));
  Val x176 = (((x154 + x175) + (x156 * Val(4))) + (x157 * Val(8)));
  Val x177 = (((x176 + (x158 * Val(16))) + (x159 * Val(32))) + (x160 * Val(64)));
  Val x178 = (((x177 + (x161 * Val(128))) + (x162 * Val(256))) + (x163 * Val(512)));
  Val x179 = (((x178 + (x164 * Val(1024))) + (x165 * Val(2048))) + (x166 * Val(4096)));
  Val x180 = (((x179 + (x167 * Val(8192))) + (x168 * Val(16384))) + (x169 * Val(32768)));
  Val x181 = (((x180 + (x170 * Val(65536))) + (x171 * Val(131072))) + (x172 * Val(262144)));
  Val x182 = (((x181 + (x173 * Val(524288))) + (x174 * Val(1048576))) - x39);
  EQZ(x182, "chi_minor1(zirgen/circuit/keccak/keccak.zir:700)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:713)
  ToBits_21_Struct x183 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(x151, unpack_2nxp1));
  NondetRegStruct21Array x184 = x183._super;
  Val x185 = x184[0]._super;
  Val x186 = x184[1]._super;
  Val x187 = x184[2]._super;
  Val x188 = x184[3]._super;
  Val x189 = x184[4]._super;
  Val x190 = x184[5]._super;
  Val x191 = x184[6]._super;
  Val x192 = x184[7]._super;
  Val x193 = x184[8]._super;
  Val x194 = x184[9]._super;
  Val x195 = x184[10]._super;
  Val x196 = x184[11]._super;
  Val x197 = x184[12]._super;
  Val x198 = x184[13]._super;
  Val x199 = x184[14]._super;
  Val x200 = x184[15]._super;
  Val x201 = x184[16]._super;
  Val x202 = x184[17]._super;
  Val x203 = x184[18]._super;
  Val x204 = x184[19]._super;
  Val x205 = x184[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:714)
  Val x206 = (((x185 + (x186 * Val(2))) + (x187 * Val(4))) + (x188 * Val(8)));
  Val x207 = (((x206 + (x189 * Val(16))) + (x190 * Val(32))) + (x191 * Val(64)));
  Val x208 = (((x207 + (x192 * Val(128))) + (x193 * Val(256))) + (x194 * Val(512)));
  Val x209 = (((x208 + (x195 * Val(1024))) + (x196 * Val(2048))) + (x197 * Val(4096)));
  Val x210 = (((x209 + (x198 * Val(8192))) + (x199 * Val(16384))) + (x200 * Val(32768)));
  Val x211 = (((x210 + (x201 * Val(65536))) + (x202 * Val(131072))) + (x203 * Val(262144)));
  Val x212 = (((x211 + (x204 * Val(524288))) + (x205 * Val(1048576))) - x70);
  EQZ(x212, "chi_minor1(zirgen/circuit/keccak/keccak.zir:714)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:718)
  Val x213 = x6[19]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:726)
  ToBits_21_Struct x214 = exec_ToBits_21_(ctx, x213, LAYOUT_LOOKUP(x151, unpack_2nxp2));
  NondetRegStruct21Array x215 = x214._super;
  Val x216 = x215[0]._super;
  Val x217 = x215[1]._super;
  Val x218 = x215[2]._super;
  Val x219 = x215[3]._super;
  Val x220 = x215[4]._super;
  Val x221 = x215[5]._super;
  Val x222 = x215[6]._super;
  Val x223 = x215[7]._super;
  Val x224 = x215[8]._super;
  Val x225 = x215[9]._super;
  Val x226 = x215[10]._super;
  Val x227 = x215[11]._super;
  Val x228 = x215[12]._super;
  Val x229 = x215[13]._super;
  Val x230 = x215[14]._super;
  Val x231 = x215[15]._super;
  Val x232 = x215[16]._super;
  Val x233 = x215[17]._super;
  Val x234 = x215[18]._super;
  Val x235 = x215[19]._super;
  Val x236 = x215[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:727)
  Val x237 = (((x216 + (x217 * Val(2))) + (x218 * Val(4))) + (x219 * Val(8)));
  Val x238 = (((x237 + (x220 * Val(16))) + (x221 * Val(32))) + (x222 * Val(64)));
  Val x239 = (((x238 + (x223 * Val(128))) + (x224 * Val(256))) + (x225 * Val(512)));
  Val x240 = (((x239 + (x226 * Val(1024))) + (x227 * Val(2048))) + (x228 * Val(4096)));
  Val x241 = (((x240 + (x229 * Val(8192))) + (x230 * Val(16384))) + (x231 * Val(32768)));
  Val x242 = (((x241 + (x232 * Val(65536))) + (x233 * Val(131072))) + (x234 * Val(262144)));
  Val x243 = (((x242 + (x235 * Val(524288))) + (x236 * Val(1048576))) - x213);
  EQZ(x243, "chi_minor1(zirgen/circuit/keccak/keccak.zir:727)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:729)
  Val x244 = ((Val(1) - x185) * x216);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x154 + x244) - ((x154 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x186) * x217);
  Val x247 = ((Val(1) - x187) * x218);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x156 + x247) - ((x156 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x188) * x219);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x157 + x249) - ((x157 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x189) * x220);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x158 + x251) - ((x158 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x190) * x221);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x159 + x253) - ((x159 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x191) * x222);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x160 + x255) - ((x160 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x192) * x223);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x161 + x257) - ((x161 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x193) * x224);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x162 + x259) - ((x162 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x194) * x225);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x163 + x261) - ((x163 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x195) * x226);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x164 + x263) - ((x164 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x196) * x227);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x165 + x265) - ((x165 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x197) * x228);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x166 + x267) - ((x166 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x198) * x229);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x167 + x269) - ((x167 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x199) * x230);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x168 + x271) - ((x168 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x200) * x231);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x169 + x273) - ((x169 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x201) * x232);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x170 + x275) - ((x170 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x202) * x233);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x171 + x277) - ((x171 * Val(2)) * x277));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x279 = ((Val(1) - x203) * x234);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x280 = ((x172 + x279) - ((x172 * Val(2)) * x279));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x281 = ((Val(1) - x204) * x235);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x282 = ((x173 + x281) - ((x173 * Val(2)) * x281));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x283 = ((Val(1) - x205) * x236);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x284 = ((x174 + x283) - ((x174 * Val(2)) * x283));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:730)
  Val x285 = (((x155 + x246) - (x175 * x246)) * Val(2));
  Val x286 = (((x245 + x285) + (x248 * Val(4))) + (x250 * Val(8)));
  Val x287 = (((x286 + (x252 * Val(16))) + (x254 * Val(32))) + (x256 * Val(64)));
  Val x288 = (((x287 + (x258 * Val(128))) + (x260 * Val(256))) + (x262 * Val(512)));
  Val x289 = (((x288 + (x264 * Val(1024))) + (x266 * Val(2048))) + (x268 * Val(4096)));
  Val x290 = (((x289 + (x270 * Val(8192))) + (x272 * Val(16384))) + (x274 * Val(32768)));
  Val x291 = (((x290 + (x276 * Val(65536))) + (x278 * Val(131072))) + (x280 * Val(262144)));
  NondetRegStruct x292 = exec_Reg(
      ctx, ((x291 + (x282 * Val(524288))) + (x284 * Val(1048576))), LAYOUT_LOOKUP(x151, res3n));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x293 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x294 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:733)
  RetTupleStruct x295 =
      exec_RetTuple(ctx,
                    x293,
                    x294,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x292._super},
                    Val(2),
                    Val(12),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x151, _super));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x296 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x296;
}
RetTupleStruct execChiMinor0_1__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_1__2_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrB;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[14]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[15]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[17]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[18]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[11]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[12]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(3),
      Val(12),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor0_2__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_2__2_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrB;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[17]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[18]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[20]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[21]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[14]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[15]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(4),
      Val(12),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_2__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_2__2_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_2__2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 5, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x6 = x4.arrB;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[16]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[19]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x4.arrC[0]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x10 + x101) - ((x10 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x12 + x104) - ((x12 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x13 + x106) - ((x13 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x14 + x108) - ((x14 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x15 + x110) - ((x15 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x16 + x112) - ((x16 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x17 + x114) - ((x17 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x18 + x116) - ((x18 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x19 + x118) - ((x19 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x20 + x120) - ((x20 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x21 + x122) - ((x21 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x22 + x124) - ((x22 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x23 + x126) - ((x23 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x24 + x128) - ((x24 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x25 + x130) - ((x25 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x26 + x132) - ((x26 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x27 + x134) - ((x27 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x28 + x136) - ((x28 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x29 + x138) - ((x29 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x30 + x140) - ((x30 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x11 + x103) - (x31 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_2__2_Arm1_SuperLayout> x151 = LAYOUT_LOOKUP(x3, arm1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:699)
  ToBits_21_Struct x152 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(x151, unpack_2nx));
  NondetRegStruct21Array x153 = x152._super;
  Val x154 = x153[0]._super;
  Val x155 = x153[1]._super;
  Val x156 = x153[2]._super;
  Val x157 = x153[3]._super;
  Val x158 = x153[4]._super;
  Val x159 = x153[5]._super;
  Val x160 = x153[6]._super;
  Val x161 = x153[7]._super;
  Val x162 = x153[8]._super;
  Val x163 = x153[9]._super;
  Val x164 = x153[10]._super;
  Val x165 = x153[11]._super;
  Val x166 = x153[12]._super;
  Val x167 = x153[13]._super;
  Val x168 = x153[14]._super;
  Val x169 = x153[15]._super;
  Val x170 = x153[16]._super;
  Val x171 = x153[17]._super;
  Val x172 = x153[18]._super;
  Val x173 = x153[19]._super;
  Val x174 = x153[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:700)
  Val x175 = (x155 * Val(2));
  Val x176 = (((x154 + x175) + (x156 * Val(4))) + (x157 * Val(8)));
  Val x177 = (((x176 + (x158 * Val(16))) + (x159 * Val(32))) + (x160 * Val(64)));
  Val x178 = (((x177 + (x161 * Val(128))) + (x162 * Val(256))) + (x163 * Val(512)));
  Val x179 = (((x178 + (x164 * Val(1024))) + (x165 * Val(2048))) + (x166 * Val(4096)));
  Val x180 = (((x179 + (x167 * Val(8192))) + (x168 * Val(16384))) + (x169 * Val(32768)));
  Val x181 = (((x180 + (x170 * Val(65536))) + (x171 * Val(131072))) + (x172 * Val(262144)));
  Val x182 = (((x181 + (x173 * Val(524288))) + (x174 * Val(1048576))) - x39);
  EQZ(x182, "chi_minor1(zirgen/circuit/keccak/keccak.zir:700)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:713)
  ToBits_21_Struct x183 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(x151, unpack_2nxp1));
  NondetRegStruct21Array x184 = x183._super;
  Val x185 = x184[0]._super;
  Val x186 = x184[1]._super;
  Val x187 = x184[2]._super;
  Val x188 = x184[3]._super;
  Val x189 = x184[4]._super;
  Val x190 = x184[5]._super;
  Val x191 = x184[6]._super;
  Val x192 = x184[7]._super;
  Val x193 = x184[8]._super;
  Val x194 = x184[9]._super;
  Val x195 = x184[10]._super;
  Val x196 = x184[11]._super;
  Val x197 = x184[12]._super;
  Val x198 = x184[13]._super;
  Val x199 = x184[14]._super;
  Val x200 = x184[15]._super;
  Val x201 = x184[16]._super;
  Val x202 = x184[17]._super;
  Val x203 = x184[18]._super;
  Val x204 = x184[19]._super;
  Val x205 = x184[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:714)
  Val x206 = (((x185 + (x186 * Val(2))) + (x187 * Val(4))) + (x188 * Val(8)));
  Val x207 = (((x206 + (x189 * Val(16))) + (x190 * Val(32))) + (x191 * Val(64)));
  Val x208 = (((x207 + (x192 * Val(128))) + (x193 * Val(256))) + (x194 * Val(512)));
  Val x209 = (((x208 + (x195 * Val(1024))) + (x196 * Val(2048))) + (x197 * Val(4096)));
  Val x210 = (((x209 + (x198 * Val(8192))) + (x199 * Val(16384))) + (x200 * Val(32768)));
  Val x211 = (((x210 + (x201 * Val(65536))) + (x202 * Val(131072))) + (x203 * Val(262144)));
  Val x212 = (((x211 + (x204 * Val(524288))) + (x205 * Val(1048576))) - x70);
  EQZ(x212, "chi_minor1(zirgen/circuit/keccak/keccak.zir:714)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:718)
  Val x213 = x6[10]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:726)
  ToBits_21_Struct x214 = exec_ToBits_21_(ctx, x213, LAYOUT_LOOKUP(x151, unpack_2nxp2));
  NondetRegStruct21Array x215 = x214._super;
  Val x216 = x215[0]._super;
  Val x217 = x215[1]._super;
  Val x218 = x215[2]._super;
  Val x219 = x215[3]._super;
  Val x220 = x215[4]._super;
  Val x221 = x215[5]._super;
  Val x222 = x215[6]._super;
  Val x223 = x215[7]._super;
  Val x224 = x215[8]._super;
  Val x225 = x215[9]._super;
  Val x226 = x215[10]._super;
  Val x227 = x215[11]._super;
  Val x228 = x215[12]._super;
  Val x229 = x215[13]._super;
  Val x230 = x215[14]._super;
  Val x231 = x215[15]._super;
  Val x232 = x215[16]._super;
  Val x233 = x215[17]._super;
  Val x234 = x215[18]._super;
  Val x235 = x215[19]._super;
  Val x236 = x215[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:727)
  Val x237 = (((x216 + (x217 * Val(2))) + (x218 * Val(4))) + (x219 * Val(8)));
  Val x238 = (((x237 + (x220 * Val(16))) + (x221 * Val(32))) + (x222 * Val(64)));
  Val x239 = (((x238 + (x223 * Val(128))) + (x224 * Val(256))) + (x225 * Val(512)));
  Val x240 = (((x239 + (x226 * Val(1024))) + (x227 * Val(2048))) + (x228 * Val(4096)));
  Val x241 = (((x240 + (x229 * Val(8192))) + (x230 * Val(16384))) + (x231 * Val(32768)));
  Val x242 = (((x241 + (x232 * Val(65536))) + (x233 * Val(131072))) + (x234 * Val(262144)));
  Val x243 = (((x242 + (x235 * Val(524288))) + (x236 * Val(1048576))) - x213);
  EQZ(x243, "chi_minor1(zirgen/circuit/keccak/keccak.zir:727)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:729)
  Val x244 = ((Val(1) - x185) * x216);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x154 + x244) - ((x154 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x186) * x217);
  Val x247 = ((Val(1) - x187) * x218);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x156 + x247) - ((x156 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x188) * x219);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x157 + x249) - ((x157 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x189) * x220);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x158 + x251) - ((x158 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x190) * x221);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x159 + x253) - ((x159 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x191) * x222);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x160 + x255) - ((x160 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x192) * x223);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x161 + x257) - ((x161 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x193) * x224);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x162 + x259) - ((x162 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x194) * x225);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x163 + x261) - ((x163 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x195) * x226);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x164 + x263) - ((x164 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x196) * x227);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x165 + x265) - ((x165 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x197) * x228);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x166 + x267) - ((x166 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x198) * x229);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x167 + x269) - ((x167 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x199) * x230);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x168 + x271) - ((x168 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x200) * x231);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x169 + x273) - ((x169 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x201) * x232);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x170 + x275) - ((x170 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x202) * x233);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x171 + x277) - ((x171 * Val(2)) * x277));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x279 = ((Val(1) - x203) * x234);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x280 = ((x172 + x279) - ((x172 * Val(2)) * x279));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x281 = ((Val(1) - x204) * x235);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x282 = ((x173 + x281) - ((x173 * Val(2)) * x281));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x283 = ((Val(1) - x205) * x236);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x284 = ((x174 + x283) - ((x174 * Val(2)) * x283));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:730)
  Val x285 = (((x155 + x246) - (x175 * x246)) * Val(2));
  Val x286 = (((x245 + x285) + (x248 * Val(4))) + (x250 * Val(8)));
  Val x287 = (((x286 + (x252 * Val(16))) + (x254 * Val(32))) + (x256 * Val(64)));
  Val x288 = (((x287 + (x258 * Val(128))) + (x260 * Val(256))) + (x262 * Val(512)));
  Val x289 = (((x288 + (x264 * Val(1024))) + (x266 * Val(2048))) + (x268 * Val(4096)));
  Val x290 = (((x289 + (x270 * Val(8192))) + (x272 * Val(16384))) + (x274 * Val(32768)));
  Val x291 = (((x290 + (x276 * Val(65536))) + (x278 * Val(131072))) + (x280 * Val(262144)));
  NondetRegStruct x292 = exec_Reg(
      ctx, ((x291 + (x282 * Val(524288))) + (x284 * Val(1048576))), LAYOUT_LOOKUP(x151, res3n));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x293 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x294 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:733)
  RetTupleStruct x295 =
      exec_RetTuple(ctx,
                    x293,
                    x294,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x292._super},
                    Val(5),
                    Val(12),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x151, _super));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x296 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x296;
}
RetTupleStruct execChiMinor0_3__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_3__2_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrB;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[20]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[21]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[8]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[9]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[17]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[18]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(6),
      Val(12),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor0_4__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_4__2_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrB;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[8]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[9]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[11]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[12]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[20]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[21]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(7),
      Val(12),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_4__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_4__2_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_4__2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 8, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x6 = x4.arrC[0]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x7 = exec_ToBits_21_(ctx, x6, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x30 = (x10 * Val(2));
  Val x31 = (((x9 + x30) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) - x6);
  EQZ(x37, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x38 = x4.arrB;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x38[10]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x38[13]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x9 + x101) - ((x9 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x11 + x104) - ((x11 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x12 + x106) - ((x12 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x13 + x108) - ((x13 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x14 + x110) - ((x14 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x15 + x112) - ((x15 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x16 + x114) - ((x16 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x17 + x116) - ((x17 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x18 + x118) - ((x18 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x19 + x120) - ((x19 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x20 + x122) - ((x20 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x21 + x124) - ((x21 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x22 + x126) - ((x22 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x23 + x128) - ((x23 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x24 + x130) - ((x24 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x25 + x132) - ((x25 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x26 + x134) - ((x26 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x27 + x136) - ((x27 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x28 + x138) - ((x28 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x29 + x140) - ((x29 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x10 + x103) - (x30 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x151 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x152 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:686)
  Val22Array x153 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x154 =
      exec_RetTuple(ctx,
                    x151,
                    x152,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x153,
                    x153,
                    Val(8),
                    Val(12),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x155 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x155;
}
RetTupleStruct execChiMinor2_2_(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<ChiMinor2_2__SuperLayout> layout2) {
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:739)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:740)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  RetTupleStruct x5 = back_RetTuple(ctx, 4, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:742)
  RetTupleStruct x6 = back_RetTuple(ctx, 6, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:743)
  RetTupleStruct x7 = back_RetTuple(ctx, 7, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  RetTupleStruct x8 = back_RetTuple(ctx, 9, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:746)
  BoundLayout<ChiMinor2_2_Arm1_SuperLayout> x9 = LAYOUT_LOOKUP(layout2, arm1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:758)
  BoundLayout<ChiMinor2_2_Arm1Arm1_SuperLayout> x10 = LAYOUT_LOOKUP(x9, arm1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:742)
  NondetRegStruct24Array x11 = x6.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:740)
  NondetRegStruct24Array x12 = x4.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:739)
  Val x13 = x3.arrB[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:743)
  Val x14 = x7.arrA[21]._super;
  Val x15 = x7.arrB[21]._super;
  Val x16 = x7.arrC[21]._super;
  Val x17 = x7.arrF[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  Val x18 = x5.arrA[21]._super;
  Val x19 = x5.arrB[21]._super;
  Val x20 = x5.arrC[21]._super;
  Val x21 = x5.arrF[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:739)
  Val x22 = x3.arrA[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  NondetRegStruct22Array x23 = x8.arrB;
  NondetRegStruct22Array x24 = x8.arrC;
  // Concatenate(zirgen/circuit/keccak/sha256_for_keccak.zir:88)
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:778)
  Val x25 = x3.arrC[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  NondetRegStruct22Array x26 = x8.arrA;
  NondetRegStruct24Array x27 = x8.arrD;
  Val22Array x28 =
      Val22Array{x26[0]._super,  x26[1]._super,  x26[2]._super,  x26[3]._super,  x26[4]._super,
                 x26[5]._super,  x26[6]._super,  x26[7]._super,  x26[8]._super,  x26[9]._super,
                 x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:776)
  Val22Array x29 = Val22Array{x23[0]._super,
                              x23[1]._super,
                              x23[2]._super,
                              x23[3]._super,
                              x23[4]._super,
                              x23[5]._super,
                              x23[6]._super,
                              x23[7]._super,
                              x14,
                              x15,
                              x16,
                              x11[22]._super,
                              x11[23]._super,
                              x17,
                              x18,
                              x19,
                              x20,
                              x12[22]._super,
                              x12[23]._super,
                              x21,
                              x22,
                              x13};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  Val24Array x30 =
      Val24Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x27[22]._super, x27[23]._super};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:779)
  Val22Array x31 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x32 = exec_RetTuple(ctx,
                                     x28,
                                     x29,
                                     Val22Array{x25,
                                                x24[1]._super,
                                                x24[2]._super,
                                                x24[3]._super,
                                                x24[4]._super,
                                                x24[5]._super,
                                                x24[6]._super,
                                                x24[7]._super,
                                                x24[8]._super,
                                                x24[9]._super,
                                                x24[10]._super,
                                                x24[11]._super,
                                                x24[12]._super,
                                                x24[13]._super,
                                                x24[14]._super,
                                                x24[15]._super,
                                                x24[16]._super,
                                                x24[17]._super,
                                                x24[18]._super,
                                                x24[19]._super,
                                                x24[20]._super,
                                                x24[21]._super},
                                     x30,
                                     x31,
                                     x31,
                                     Val(0),
                                     Val(13),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(x10, arm0));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:770)
  RetTupleStruct x33 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x10, _super));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:758)
  RetTupleStruct x34 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x9, _super));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:746)
  RetTupleStruct x35 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(layout2, _super));
  return x35;
}
RetTupleStruct execChiMajor_2_(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<ChiMajor_2_Layout> layout2) {
  // chi_major(zirgen/circuit/keccak/keccak.zir:841)
  BoundLayout<ChiMajor_2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_major(zirgen/circuit/keccak/keccak.zir:840)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_10_Struct x5 = exec_OneHot_10_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct10Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:842)
    RetTupleStruct x8 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x9 = execChiMinor0_0__2_(ctx, x8, LAYOUT_LOOKUP(x3, arm0));
    x7 = x9;
  } else if (to_size_t(x6[1]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:843)
    RetTupleStruct x10 = execChiMinor1_0__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x10;
  } else if (to_size_t(x6[2]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:844)
    RetTupleStruct x11 = back_RetTuple(ctx, 3, arg1);
    RetTupleStruct x12 = execChiMinor0_1__2_(ctx, x11, LAYOUT_LOOKUP(x3, arm2));
    x7 = x12;
  } else if (to_size_t(x6[3]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:845)
    RetTupleStruct x13 = back_RetTuple(ctx, 4, arg1);
    RetTupleStruct x14 = execChiMinor0_2__2_(ctx, x13, LAYOUT_LOOKUP(x3, arm3));
    x7 = x14;
  } else if (to_size_t(x6[4]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:846)
    RetTupleStruct x15 = execChiMinor1_2__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x15;
  } else if (to_size_t(x6[5]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:847)
    RetTupleStruct x16 = back_RetTuple(ctx, 6, arg1);
    RetTupleStruct x17 = execChiMinor0_3__2_(ctx, x16, LAYOUT_LOOKUP(x3, arm5));
    x7 = x17;
  } else if (to_size_t(x6[6]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:848)
    RetTupleStruct x18 = back_RetTuple(ctx, 7, arg1);
    RetTupleStruct x19 = execChiMinor0_4__2_(ctx, x18, LAYOUT_LOOKUP(x3, arm6));
    x7 = x19;
  } else if (to_size_t(x6[7]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:849)
    RetTupleStruct x20 = execChiMinor1_4__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x20;
  } else if (to_size_t(x6[8]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:850)
    RetTupleStruct x21 = execChiMinor2_2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x21;
  } else if (to_size_t(x6[9]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:851)
    RetTupleStruct x22 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x23 = execIotaXorRc(ctx, x22, LAYOUT_LOOKUP(x3, arm9));
    x7 = x23;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // chi_major(zirgen/circuit/keccak/keccak.zir:841)
  RetTupleStruct x24 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x24;
}
RetTupleStruct execChiMinor0_0__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_0__3_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrC;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[4]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[5]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[7]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[8]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[1]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[2]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(1),
      Val(13),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_0__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_0__3_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_0__3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x6 = x4.arrC;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[3]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[6]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x6[9]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x10 + x101) - ((x10 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x12 + x104) - ((x12 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x13 + x106) - ((x13 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x14 + x108) - ((x14 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x15 + x110) - ((x15 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x16 + x112) - ((x16 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x17 + x114) - ((x17 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x18 + x116) - ((x18 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x19 + x118) - ((x19 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x20 + x120) - ((x20 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x21 + x122) - ((x21 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x22 + x124) - ((x22 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x23 + x126) - ((x23 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x24 + x128) - ((x24 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x25 + x130) - ((x25 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x26 + x132) - ((x26 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x27 + x134) - ((x27 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x28 + x136) - ((x28 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x29 + x138) - ((x29 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x30 + x140) - ((x30 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x11 + x103) - (x31 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_0__3_Arm1_SuperLayout> x151 = LAYOUT_LOOKUP(x3, arm1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:699)
  ToBits_21_Struct x152 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(x151, unpack_2nx));
  NondetRegStruct21Array x153 = x152._super;
  Val x154 = x153[0]._super;
  Val x155 = x153[1]._super;
  Val x156 = x153[2]._super;
  Val x157 = x153[3]._super;
  Val x158 = x153[4]._super;
  Val x159 = x153[5]._super;
  Val x160 = x153[6]._super;
  Val x161 = x153[7]._super;
  Val x162 = x153[8]._super;
  Val x163 = x153[9]._super;
  Val x164 = x153[10]._super;
  Val x165 = x153[11]._super;
  Val x166 = x153[12]._super;
  Val x167 = x153[13]._super;
  Val x168 = x153[14]._super;
  Val x169 = x153[15]._super;
  Val x170 = x153[16]._super;
  Val x171 = x153[17]._super;
  Val x172 = x153[18]._super;
  Val x173 = x153[19]._super;
  Val x174 = x153[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:700)
  Val x175 = (x155 * Val(2));
  Val x176 = (((x154 + x175) + (x156 * Val(4))) + (x157 * Val(8)));
  Val x177 = (((x176 + (x158 * Val(16))) + (x159 * Val(32))) + (x160 * Val(64)));
  Val x178 = (((x177 + (x161 * Val(128))) + (x162 * Val(256))) + (x163 * Val(512)));
  Val x179 = (((x178 + (x164 * Val(1024))) + (x165 * Val(2048))) + (x166 * Val(4096)));
  Val x180 = (((x179 + (x167 * Val(8192))) + (x168 * Val(16384))) + (x169 * Val(32768)));
  Val x181 = (((x180 + (x170 * Val(65536))) + (x171 * Val(131072))) + (x172 * Val(262144)));
  Val x182 = (((x181 + (x173 * Val(524288))) + (x174 * Val(1048576))) - x39);
  EQZ(x182, "chi_minor1(zirgen/circuit/keccak/keccak.zir:700)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:713)
  ToBits_21_Struct x183 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(x151, unpack_2nxp1));
  NondetRegStruct21Array x184 = x183._super;
  Val x185 = x184[0]._super;
  Val x186 = x184[1]._super;
  Val x187 = x184[2]._super;
  Val x188 = x184[3]._super;
  Val x189 = x184[4]._super;
  Val x190 = x184[5]._super;
  Val x191 = x184[6]._super;
  Val x192 = x184[7]._super;
  Val x193 = x184[8]._super;
  Val x194 = x184[9]._super;
  Val x195 = x184[10]._super;
  Val x196 = x184[11]._super;
  Val x197 = x184[12]._super;
  Val x198 = x184[13]._super;
  Val x199 = x184[14]._super;
  Val x200 = x184[15]._super;
  Val x201 = x184[16]._super;
  Val x202 = x184[17]._super;
  Val x203 = x184[18]._super;
  Val x204 = x184[19]._super;
  Val x205 = x184[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:714)
  Val x206 = (((x185 + (x186 * Val(2))) + (x187 * Val(4))) + (x188 * Val(8)));
  Val x207 = (((x206 + (x189 * Val(16))) + (x190 * Val(32))) + (x191 * Val(64)));
  Val x208 = (((x207 + (x192 * Val(128))) + (x193 * Val(256))) + (x194 * Val(512)));
  Val x209 = (((x208 + (x195 * Val(1024))) + (x196 * Val(2048))) + (x197 * Val(4096)));
  Val x210 = (((x209 + (x198 * Val(8192))) + (x199 * Val(16384))) + (x200 * Val(32768)));
  Val x211 = (((x210 + (x201 * Val(65536))) + (x202 * Val(131072))) + (x203 * Val(262144)));
  Val x212 = (((x211 + (x204 * Val(524288))) + (x205 * Val(1048576))) - x70);
  EQZ(x212, "chi_minor1(zirgen/circuit/keccak/keccak.zir:714)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:718)
  Val x213 = x6[12]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:726)
  ToBits_21_Struct x214 = exec_ToBits_21_(ctx, x213, LAYOUT_LOOKUP(x151, unpack_2nxp2));
  NondetRegStruct21Array x215 = x214._super;
  Val x216 = x215[0]._super;
  Val x217 = x215[1]._super;
  Val x218 = x215[2]._super;
  Val x219 = x215[3]._super;
  Val x220 = x215[4]._super;
  Val x221 = x215[5]._super;
  Val x222 = x215[6]._super;
  Val x223 = x215[7]._super;
  Val x224 = x215[8]._super;
  Val x225 = x215[9]._super;
  Val x226 = x215[10]._super;
  Val x227 = x215[11]._super;
  Val x228 = x215[12]._super;
  Val x229 = x215[13]._super;
  Val x230 = x215[14]._super;
  Val x231 = x215[15]._super;
  Val x232 = x215[16]._super;
  Val x233 = x215[17]._super;
  Val x234 = x215[18]._super;
  Val x235 = x215[19]._super;
  Val x236 = x215[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:727)
  Val x237 = (((x216 + (x217 * Val(2))) + (x218 * Val(4))) + (x219 * Val(8)));
  Val x238 = (((x237 + (x220 * Val(16))) + (x221 * Val(32))) + (x222 * Val(64)));
  Val x239 = (((x238 + (x223 * Val(128))) + (x224 * Val(256))) + (x225 * Val(512)));
  Val x240 = (((x239 + (x226 * Val(1024))) + (x227 * Val(2048))) + (x228 * Val(4096)));
  Val x241 = (((x240 + (x229 * Val(8192))) + (x230 * Val(16384))) + (x231 * Val(32768)));
  Val x242 = (((x241 + (x232 * Val(65536))) + (x233 * Val(131072))) + (x234 * Val(262144)));
  Val x243 = (((x242 + (x235 * Val(524288))) + (x236 * Val(1048576))) - x213);
  EQZ(x243, "chi_minor1(zirgen/circuit/keccak/keccak.zir:727)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:729)
  Val x244 = ((Val(1) - x185) * x216);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x154 + x244) - ((x154 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x186) * x217);
  Val x247 = ((Val(1) - x187) * x218);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x156 + x247) - ((x156 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x188) * x219);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x157 + x249) - ((x157 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x189) * x220);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x158 + x251) - ((x158 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x190) * x221);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x159 + x253) - ((x159 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x191) * x222);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x160 + x255) - ((x160 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x192) * x223);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x161 + x257) - ((x161 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x193) * x224);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x162 + x259) - ((x162 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x194) * x225);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x163 + x261) - ((x163 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x195) * x226);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x164 + x263) - ((x164 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x196) * x227);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x165 + x265) - ((x165 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x197) * x228);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x166 + x267) - ((x166 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x198) * x229);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x167 + x269) - ((x167 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x199) * x230);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x168 + x271) - ((x168 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x200) * x231);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x169 + x273) - ((x169 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x201) * x232);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x170 + x275) - ((x170 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x202) * x233);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x171 + x277) - ((x171 * Val(2)) * x277));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x279 = ((Val(1) - x203) * x234);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x280 = ((x172 + x279) - ((x172 * Val(2)) * x279));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x281 = ((Val(1) - x204) * x235);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x282 = ((x173 + x281) - ((x173 * Val(2)) * x281));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x283 = ((Val(1) - x205) * x236);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x284 = ((x174 + x283) - ((x174 * Val(2)) * x283));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:730)
  Val x285 = (((x155 + x246) - (x175 * x246)) * Val(2));
  Val x286 = (((x245 + x285) + (x248 * Val(4))) + (x250 * Val(8)));
  Val x287 = (((x286 + (x252 * Val(16))) + (x254 * Val(32))) + (x256 * Val(64)));
  Val x288 = (((x287 + (x258 * Val(128))) + (x260 * Val(256))) + (x262 * Val(512)));
  Val x289 = (((x288 + (x264 * Val(1024))) + (x266 * Val(2048))) + (x268 * Val(4096)));
  Val x290 = (((x289 + (x270 * Val(8192))) + (x272 * Val(16384))) + (x274 * Val(32768)));
  Val x291 = (((x290 + (x276 * Val(65536))) + (x278 * Val(131072))) + (x280 * Val(262144)));
  NondetRegStruct x292 = exec_Reg(
      ctx, ((x291 + (x282 * Val(524288))) + (x284 * Val(1048576))), LAYOUT_LOOKUP(x151, res3n));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x293 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x294 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:733)
  RetTupleStruct x295 =
      exec_RetTuple(ctx,
                    x293,
                    x294,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x292._super},
                    Val(2),
                    Val(13),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x151, _super));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x296 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x296;
}
RetTupleStruct execChiMinor0_1__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_1__3_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrC;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[7]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[8]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[10]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[11]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[4]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[5]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(3),
      Val(13),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor0_2__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_2__3_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrC;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[10]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[11]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[13]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[14]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[7]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[8]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(4),
      Val(13),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_2__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_2__3_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_2__3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 5, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x6 = x4.arrC;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[9]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[12]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x6[15]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x10 + x101) - ((x10 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x12 + x104) - ((x12 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x13 + x106) - ((x13 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x14 + x108) - ((x14 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x15 + x110) - ((x15 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x16 + x112) - ((x16 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x17 + x114) - ((x17 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x18 + x116) - ((x18 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x19 + x118) - ((x19 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x20 + x120) - ((x20 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x21 + x122) - ((x21 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x22 + x124) - ((x22 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x23 + x126) - ((x23 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x24 + x128) - ((x24 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x25 + x130) - ((x25 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x26 + x132) - ((x26 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x27 + x134) - ((x27 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x28 + x136) - ((x28 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x29 + x138) - ((x29 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x30 + x140) - ((x30 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x11 + x103) - (x31 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_2__3_Arm1_SuperLayout> x151 = LAYOUT_LOOKUP(x3, arm1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:699)
  ToBits_21_Struct x152 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(x151, unpack_2nx));
  NondetRegStruct21Array x153 = x152._super;
  Val x154 = x153[0]._super;
  Val x155 = x153[1]._super;
  Val x156 = x153[2]._super;
  Val x157 = x153[3]._super;
  Val x158 = x153[4]._super;
  Val x159 = x153[5]._super;
  Val x160 = x153[6]._super;
  Val x161 = x153[7]._super;
  Val x162 = x153[8]._super;
  Val x163 = x153[9]._super;
  Val x164 = x153[10]._super;
  Val x165 = x153[11]._super;
  Val x166 = x153[12]._super;
  Val x167 = x153[13]._super;
  Val x168 = x153[14]._super;
  Val x169 = x153[15]._super;
  Val x170 = x153[16]._super;
  Val x171 = x153[17]._super;
  Val x172 = x153[18]._super;
  Val x173 = x153[19]._super;
  Val x174 = x153[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:700)
  Val x175 = (x155 * Val(2));
  Val x176 = (((x154 + x175) + (x156 * Val(4))) + (x157 * Val(8)));
  Val x177 = (((x176 + (x158 * Val(16))) + (x159 * Val(32))) + (x160 * Val(64)));
  Val x178 = (((x177 + (x161 * Val(128))) + (x162 * Val(256))) + (x163 * Val(512)));
  Val x179 = (((x178 + (x164 * Val(1024))) + (x165 * Val(2048))) + (x166 * Val(4096)));
  Val x180 = (((x179 + (x167 * Val(8192))) + (x168 * Val(16384))) + (x169 * Val(32768)));
  Val x181 = (((x180 + (x170 * Val(65536))) + (x171 * Val(131072))) + (x172 * Val(262144)));
  Val x182 = (((x181 + (x173 * Val(524288))) + (x174 * Val(1048576))) - x39);
  EQZ(x182, "chi_minor1(zirgen/circuit/keccak/keccak.zir:700)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:713)
  ToBits_21_Struct x183 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(x151, unpack_2nxp1));
  NondetRegStruct21Array x184 = x183._super;
  Val x185 = x184[0]._super;
  Val x186 = x184[1]._super;
  Val x187 = x184[2]._super;
  Val x188 = x184[3]._super;
  Val x189 = x184[4]._super;
  Val x190 = x184[5]._super;
  Val x191 = x184[6]._super;
  Val x192 = x184[7]._super;
  Val x193 = x184[8]._super;
  Val x194 = x184[9]._super;
  Val x195 = x184[10]._super;
  Val x196 = x184[11]._super;
  Val x197 = x184[12]._super;
  Val x198 = x184[13]._super;
  Val x199 = x184[14]._super;
  Val x200 = x184[15]._super;
  Val x201 = x184[16]._super;
  Val x202 = x184[17]._super;
  Val x203 = x184[18]._super;
  Val x204 = x184[19]._super;
  Val x205 = x184[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:714)
  Val x206 = (((x185 + (x186 * Val(2))) + (x187 * Val(4))) + (x188 * Val(8)));
  Val x207 = (((x206 + (x189 * Val(16))) + (x190 * Val(32))) + (x191 * Val(64)));
  Val x208 = (((x207 + (x192 * Val(128))) + (x193 * Val(256))) + (x194 * Val(512)));
  Val x209 = (((x208 + (x195 * Val(1024))) + (x196 * Val(2048))) + (x197 * Val(4096)));
  Val x210 = (((x209 + (x198 * Val(8192))) + (x199 * Val(16384))) + (x200 * Val(32768)));
  Val x211 = (((x210 + (x201 * Val(65536))) + (x202 * Val(131072))) + (x203 * Val(262144)));
  Val x212 = (((x211 + (x204 * Val(524288))) + (x205 * Val(1048576))) - x70);
  EQZ(x212, "chi_minor1(zirgen/circuit/keccak/keccak.zir:714)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:718)
  Val x213 = x6[3]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:726)
  ToBits_21_Struct x214 = exec_ToBits_21_(ctx, x213, LAYOUT_LOOKUP(x151, unpack_2nxp2));
  NondetRegStruct21Array x215 = x214._super;
  Val x216 = x215[0]._super;
  Val x217 = x215[1]._super;
  Val x218 = x215[2]._super;
  Val x219 = x215[3]._super;
  Val x220 = x215[4]._super;
  Val x221 = x215[5]._super;
  Val x222 = x215[6]._super;
  Val x223 = x215[7]._super;
  Val x224 = x215[8]._super;
  Val x225 = x215[9]._super;
  Val x226 = x215[10]._super;
  Val x227 = x215[11]._super;
  Val x228 = x215[12]._super;
  Val x229 = x215[13]._super;
  Val x230 = x215[14]._super;
  Val x231 = x215[15]._super;
  Val x232 = x215[16]._super;
  Val x233 = x215[17]._super;
  Val x234 = x215[18]._super;
  Val x235 = x215[19]._super;
  Val x236 = x215[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:727)
  Val x237 = (((x216 + (x217 * Val(2))) + (x218 * Val(4))) + (x219 * Val(8)));
  Val x238 = (((x237 + (x220 * Val(16))) + (x221 * Val(32))) + (x222 * Val(64)));
  Val x239 = (((x238 + (x223 * Val(128))) + (x224 * Val(256))) + (x225 * Val(512)));
  Val x240 = (((x239 + (x226 * Val(1024))) + (x227 * Val(2048))) + (x228 * Val(4096)));
  Val x241 = (((x240 + (x229 * Val(8192))) + (x230 * Val(16384))) + (x231 * Val(32768)));
  Val x242 = (((x241 + (x232 * Val(65536))) + (x233 * Val(131072))) + (x234 * Val(262144)));
  Val x243 = (((x242 + (x235 * Val(524288))) + (x236 * Val(1048576))) - x213);
  EQZ(x243, "chi_minor1(zirgen/circuit/keccak/keccak.zir:727)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:729)
  Val x244 = ((Val(1) - x185) * x216);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x154 + x244) - ((x154 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x186) * x217);
  Val x247 = ((Val(1) - x187) * x218);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x156 + x247) - ((x156 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x188) * x219);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x157 + x249) - ((x157 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x189) * x220);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x158 + x251) - ((x158 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x190) * x221);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x159 + x253) - ((x159 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x191) * x222);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x160 + x255) - ((x160 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x192) * x223);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x161 + x257) - ((x161 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x193) * x224);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x162 + x259) - ((x162 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x194) * x225);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x163 + x261) - ((x163 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x195) * x226);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x164 + x263) - ((x164 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x196) * x227);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x165 + x265) - ((x165 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x197) * x228);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x166 + x267) - ((x166 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x198) * x229);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x167 + x269) - ((x167 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x199) * x230);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x168 + x271) - ((x168 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x200) * x231);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x169 + x273) - ((x169 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x201) * x232);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x170 + x275) - ((x170 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x202) * x233);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x171 + x277) - ((x171 * Val(2)) * x277));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x279 = ((Val(1) - x203) * x234);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x280 = ((x172 + x279) - ((x172 * Val(2)) * x279));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x281 = ((Val(1) - x204) * x235);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x282 = ((x173 + x281) - ((x173 * Val(2)) * x281));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x283 = ((Val(1) - x205) * x236);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x284 = ((x174 + x283) - ((x174 * Val(2)) * x283));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:730)
  Val x285 = (((x155 + x246) - (x175 * x246)) * Val(2));
  Val x286 = (((x245 + x285) + (x248 * Val(4))) + (x250 * Val(8)));
  Val x287 = (((x286 + (x252 * Val(16))) + (x254 * Val(32))) + (x256 * Val(64)));
  Val x288 = (((x287 + (x258 * Val(128))) + (x260 * Val(256))) + (x262 * Val(512)));
  Val x289 = (((x288 + (x264 * Val(1024))) + (x266 * Val(2048))) + (x268 * Val(4096)));
  Val x290 = (((x289 + (x270 * Val(8192))) + (x272 * Val(16384))) + (x274 * Val(32768)));
  Val x291 = (((x290 + (x276 * Val(65536))) + (x278 * Val(131072))) + (x280 * Val(262144)));
  NondetRegStruct x292 = exec_Reg(
      ctx, ((x291 + (x282 * Val(524288))) + (x284 * Val(1048576))), LAYOUT_LOOKUP(x151, res3n));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x293 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x294 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:733)
  RetTupleStruct x295 =
      exec_RetTuple(ctx,
                    x293,
                    x294,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x292._super},
                    Val(5),
                    Val(13),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x151, _super));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x296 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x296;
}
RetTupleStruct execChiMinor0_3__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_3__3_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrC;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[13]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[14]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[1]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[2]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[10]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[11]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(6),
      Val(13),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor0_4__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_4__3_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrC;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[1]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[2]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[4]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[5]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[13]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[14]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(7),
      Val(13),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_4__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_4__3_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_4__3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 8, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x6 = x4.arrC;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[15]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[3]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x6[6]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x10 + x101) - ((x10 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x12 + x104) - ((x12 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x13 + x106) - ((x13 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x14 + x108) - ((x14 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x15 + x110) - ((x15 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x16 + x112) - ((x16 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x17 + x114) - ((x17 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x18 + x116) - ((x18 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x19 + x118) - ((x19 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x20 + x120) - ((x20 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x21 + x122) - ((x21 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x22 + x124) - ((x22 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x23 + x126) - ((x23 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x24 + x128) - ((x24 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x25 + x130) - ((x25 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x26 + x132) - ((x26 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x27 + x134) - ((x27 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x28 + x136) - ((x28 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x29 + x138) - ((x29 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x30 + x140) - ((x30 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x11 + x103) - (x31 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x151 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x152 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:686)
  Val22Array x153 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x154 =
      exec_RetTuple(ctx,
                    x151,
                    x152,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x153,
                    x153,
                    Val(8),
                    Val(13),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x155 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x155;
}
RetTupleStruct execChiMinor2_3_(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<ChiMinor2_3__SuperLayout> layout2) {
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:739)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:740)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  RetTupleStruct x5 = back_RetTuple(ctx, 4, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:742)
  RetTupleStruct x6 = back_RetTuple(ctx, 6, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:743)
  RetTupleStruct x7 = back_RetTuple(ctx, 7, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  RetTupleStruct x8 = back_RetTuple(ctx, 9, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:746)
  BoundLayout<ChiMinor2_3_Arm1_SuperLayout> x9 = LAYOUT_LOOKUP(layout2, arm1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:758)
  BoundLayout<ChiMinor2_3_Arm1Arm1_SuperLayout> x10 = LAYOUT_LOOKUP(x9, arm1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:770)
  BoundLayout<ChiMinor2_3_Arm1Arm1Arm1_SuperLayout> x11 = LAYOUT_LOOKUP(x10, arm1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:743)
  Val x12 = x7.arrC[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:742)
  NondetRegStruct24Array x13 = x6.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:740)
  NondetRegStruct24Array x14 = x4.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:743)
  Val x15 = x7.arrA[21]._super;
  Val x16 = x7.arrB[21]._super;
  Val x17 = x7.arrF[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  Val x18 = x5.arrA[21]._super;
  Val x19 = x5.arrB[21]._super;
  Val x20 = x5.arrC[21]._super;
  Val x21 = x5.arrF[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:739)
  Val x22 = x3.arrA[21]._super;
  Val x23 = x3.arrB[21]._super;
  Val x24 = x3.arrC[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  NondetRegStruct22Array x25 = x8.arrC;
  NondetRegStruct22Array x26 = x8.arrA;
  NondetRegStruct22Array x27 = x8.arrB;
  NondetRegStruct24Array x28 = x8.arrD;
  Val22Array x29 =
      Val22Array{x26[0]._super,  x26[1]._super,  x26[2]._super,  x26[3]._super,  x26[4]._super,
                 x26[5]._super,  x26[6]._super,  x26[7]._super,  x26[8]._super,  x26[9]._super,
                 x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super};
  Val22Array x30 =
      Val22Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:789)
  Val22Array x31 = Val22Array{x25[0]._super,
                              x15,
                              x16,
                              x12,
                              x13[22]._super,
                              x13[23]._super,
                              x17,
                              x18,
                              x19,
                              x20,
                              x14[22]._super,
                              x14[23]._super,
                              x21,
                              x22,
                              x23,
                              x24,
                              x25[16]._super,
                              x25[17]._super,
                              x25[18]._super,
                              x25[19]._super,
                              x25[20]._super,
                              x25[21]._super};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  Val24Array x32 =
      Val24Array{x28[0]._super,  x28[1]._super,  x28[2]._super,  x28[3]._super,  x28[4]._super,
                 x28[5]._super,  x28[6]._super,  x28[7]._super,  x28[8]._super,  x28[9]._super,
                 x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x28[22]._super, x28[23]._super};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:790)
  Val22Array x33 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x34 = exec_RetTuple(ctx,
                                     x29,
                                     x30,
                                     x31,
                                     x32,
                                     x33,
                                     x33,
                                     Val(0),
                                     Val(14),
                                     x3.rnd._super,
                                     x3.blk._super,
                                     x3.midx._super,
                                     LAYOUT_LOOKUP(x11, arm0));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:782)
  RetTupleStruct x35 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x11, _super));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:770)
  RetTupleStruct x36 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x10, _super));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:758)
  RetTupleStruct x37 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x9, _super));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:746)
  RetTupleStruct x38 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(layout2, _super));
  return x38;
}
RetTupleStruct execChiMajor_3_(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<ChiMajor_3_Layout> layout2) {
  // chi_major(zirgen/circuit/keccak/keccak.zir:841)
  BoundLayout<ChiMajor_3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_major(zirgen/circuit/keccak/keccak.zir:840)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_10_Struct x5 = exec_OneHot_10_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct10Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:842)
    RetTupleStruct x8 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x9 = execChiMinor0_0__3_(ctx, x8, LAYOUT_LOOKUP(x3, arm0));
    x7 = x9;
  } else if (to_size_t(x6[1]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:843)
    RetTupleStruct x10 = execChiMinor1_0__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x10;
  } else if (to_size_t(x6[2]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:844)
    RetTupleStruct x11 = back_RetTuple(ctx, 3, arg1);
    RetTupleStruct x12 = execChiMinor0_1__3_(ctx, x11, LAYOUT_LOOKUP(x3, arm2));
    x7 = x12;
  } else if (to_size_t(x6[3]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:845)
    RetTupleStruct x13 = back_RetTuple(ctx, 4, arg1);
    RetTupleStruct x14 = execChiMinor0_2__3_(ctx, x13, LAYOUT_LOOKUP(x3, arm3));
    x7 = x14;
  } else if (to_size_t(x6[4]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:846)
    RetTupleStruct x15 = execChiMinor1_2__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x15;
  } else if (to_size_t(x6[5]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:847)
    RetTupleStruct x16 = back_RetTuple(ctx, 6, arg1);
    RetTupleStruct x17 = execChiMinor0_3__3_(ctx, x16, LAYOUT_LOOKUP(x3, arm5));
    x7 = x17;
  } else if (to_size_t(x6[6]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:848)
    RetTupleStruct x18 = back_RetTuple(ctx, 7, arg1);
    RetTupleStruct x19 = execChiMinor0_4__3_(ctx, x18, LAYOUT_LOOKUP(x3, arm6));
    x7 = x19;
  } else if (to_size_t(x6[7]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:849)
    RetTupleStruct x20 = execChiMinor1_4__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x20;
  } else if (to_size_t(x6[8]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:850)
    RetTupleStruct x21 = execChiMinor2_3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x21;
  } else if (to_size_t(x6[9]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:851)
    RetTupleStruct x22 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x23 = execIotaXorRc(ctx, x22, LAYOUT_LOOKUP(x3, arm9));
    x7 = x23;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // chi_major(zirgen/circuit/keccak/keccak.zir:841)
  RetTupleStruct x24 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x24;
}
RetTupleStruct execChiMinor0_0__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_0__4_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrC;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[19]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[20]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct24Array x66 = arg0.arrD;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x67 = x66[0]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x68 = exec_ToBits_22_(ctx, x67, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x69 = x68._super;
  Val x70 = x69[0]._super;
  Val x71 = x69[1]._super;
  Val x72 = x69[2]._super;
  Val x73 = x69[3]._super;
  Val x74 = x69[4]._super;
  Val x75 = x69[5]._super;
  Val x76 = x69[6]._super;
  Val x77 = x69[7]._super;
  Val x78 = x69[8]._super;
  Val x79 = x69[9]._super;
  Val x80 = x69[10]._super;
  Val x81 = x69[11]._super;
  Val x82 = x69[12]._super;
  Val x83 = x69[13]._super;
  Val x84 = x69[14]._super;
  Val x85 = x69[15]._super;
  Val x86 = x69[16]._super;
  Val x87 = x69[17]._super;
  Val x88 = x69[18]._super;
  Val x89 = x69[19]._super;
  Val x90 = x69[20]._super;
  Val x91 = x69[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x92 = (((x70 + (x71 * Val(2))) + (x72 * Val(4))) + (x73 * Val(8)));
  Val x93 = (((x92 + (x74 * Val(16))) + (x75 * Val(32))) + (x76 * Val(64)));
  Val x94 = (((x93 + (x77 * Val(128))) + (x78 * Val(256))) + (x79 * Val(512)));
  Val x95 = (((x94 + (x80 * Val(1024))) + (x81 * Val(2048))) + (x82 * Val(4096)));
  Val x96 = (((x95 + (x83 * Val(8192))) + (x84 * Val(16384))) + (x85 * Val(32768)));
  Val x97 = (((x96 + (x86 * Val(65536))) + (x87 * Val(131072))) + (x88 * Val(262144)));
  Val x98 = (((x97 + (x89 * Val(524288))) + (x90 * Val(1048576))) + (x91 * Val(2097152)));
  EQZ((x98 - x67), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x99 = x66[1]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x100 = exec_ToBits_21_(ctx, x99, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x123 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x124 = (((x123 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x125 = (((x124 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x126 = (((x125 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x127 = (((x126 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x128 = (((x127 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x129 = (((x128 + (x121 * Val(524288))) + (x122 * Val(1048576))) - x99);
  EQZ(x129, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x130 = x2[16]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x131 = exec_ToBits_22_(ctx, x130, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x132 = x131._super;
  Val x133 = x132[0]._super;
  Val x134 = x132[1]._super;
  Val x135 = x132[2]._super;
  Val x136 = x132[3]._super;
  Val x137 = x132[4]._super;
  Val x138 = x132[5]._super;
  Val x139 = x132[6]._super;
  Val x140 = x132[7]._super;
  Val x141 = x132[8]._super;
  Val x142 = x132[9]._super;
  Val x143 = x132[10]._super;
  Val x144 = x132[11]._super;
  Val x145 = x132[12]._super;
  Val x146 = x132[13]._super;
  Val x147 = x132[14]._super;
  Val x148 = x132[15]._super;
  Val x149 = x132[16]._super;
  Val x150 = x132[17]._super;
  Val x151 = x132[18]._super;
  Val x152 = x132[19]._super;
  Val x153 = x132[20]._super;
  Val x154 = x132[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x155 = (x134 * Val(2));
  Val x156 = (((x133 + x155) + (x135 * Val(4))) + (x136 * Val(8)));
  Val x157 = (((x156 + (x137 * Val(16))) + (x138 * Val(32))) + (x139 * Val(64)));
  Val x158 = (((x157 + (x140 * Val(128))) + (x141 * Val(256))) + (x142 * Val(512)));
  Val x159 = (((x158 + (x143 * Val(1024))) + (x144 * Val(2048))) + (x145 * Val(4096)));
  Val x160 = (((x159 + (x146 * Val(8192))) + (x147 * Val(16384))) + (x148 * Val(32768)));
  Val x161 = (((x160 + (x149 * Val(65536))) + (x150 * Val(131072))) + (x151 * Val(262144)));
  Val x162 = (((x161 + (x152 * Val(524288))) + (x153 * Val(1048576))) + (x154 * Val(2097152)));
  EQZ((x162 - x130), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x163 = x2[17]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x164 = exec_ToBits_21_(ctx, x163, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x165 = x164._super;
  Val x166 = x165[0]._super;
  Val x167 = x165[1]._super;
  Val x168 = x165[2]._super;
  Val x169 = x165[3]._super;
  Val x170 = x165[4]._super;
  Val x171 = x165[5]._super;
  Val x172 = x165[6]._super;
  Val x173 = x165[7]._super;
  Val x174 = x165[8]._super;
  Val x175 = x165[9]._super;
  Val x176 = x165[10]._super;
  Val x177 = x165[11]._super;
  Val x178 = x165[12]._super;
  Val x179 = x165[13]._super;
  Val x180 = x165[14]._super;
  Val x181 = x165[15]._super;
  Val x182 = x165[16]._super;
  Val x183 = x165[17]._super;
  Val x184 = x165[18]._super;
  Val x185 = x165[19]._super;
  Val x186 = x165[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x187 = (x167 * Val(2));
  Val x188 = (((x166 + x187) + (x168 * Val(4))) + (x169 * Val(8)));
  Val x189 = (((x188 + (x170 * Val(16))) + (x171 * Val(32))) + (x172 * Val(64)));
  Val x190 = (((x189 + (x173 * Val(128))) + (x174 * Val(256))) + (x175 * Val(512)));
  Val x191 = (((x190 + (x176 * Val(1024))) + (x177 * Val(2048))) + (x178 * Val(4096)));
  Val x192 = (((x191 + (x179 * Val(8192))) + (x180 * Val(16384))) + (x181 * Val(32768)));
  Val x193 = (((x192 + (x182 * Val(65536))) + (x183 * Val(131072))) + (x184 * Val(262144)));
  Val x194 = (((x193 + (x185 * Val(524288))) + (x186 * Val(1048576))) - x163);
  EQZ(x194, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x195 = ((Val(1) - x6) * x70);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x196 = ((x133 + x195) - ((x133 * Val(2)) * x195));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x197 = ((Val(1) - x7) * x71);
  Val x198 = ((Val(1) - x8) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x199 = ((x135 + x198) - ((x135 * Val(2)) * x198));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x200 = ((Val(1) - x9) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x201 = ((x136 + x200) - ((x136 * Val(2)) * x200));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x202 = ((Val(1) - x10) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x203 = ((x137 + x202) - ((x137 * Val(2)) * x202));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x204 = ((Val(1) - x11) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x205 = ((x138 + x204) - ((x138 * Val(2)) * x204));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x206 = ((Val(1) - x12) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x207 = ((x139 + x206) - ((x139 * Val(2)) * x206));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x208 = ((Val(1) - x13) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x209 = ((x140 + x208) - ((x140 * Val(2)) * x208));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x210 = ((Val(1) - x14) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x211 = ((x141 + x210) - ((x141 * Val(2)) * x210));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x212 = ((Val(1) - x15) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x213 = ((x142 + x212) - ((x142 * Val(2)) * x212));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x214 = ((Val(1) - x16) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x215 = ((x143 + x214) - ((x143 * Val(2)) * x214));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x216 = ((Val(1) - x17) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x217 = ((x144 + x216) - ((x144 * Val(2)) * x216));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x218 = ((Val(1) - x18) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x219 = ((x145 + x218) - ((x145 * Val(2)) * x218));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x220 = ((Val(1) - x19) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x221 = ((x146 + x220) - ((x146 * Val(2)) * x220));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x222 = ((Val(1) - x20) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x223 = ((x147 + x222) - ((x147 * Val(2)) * x222));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x224 = ((Val(1) - x21) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x225 = ((x148 + x224) - ((x148 * Val(2)) * x224));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x226 = ((Val(1) - x22) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x227 = ((x149 + x226) - ((x149 * Val(2)) * x226));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x228 = ((Val(1) - x23) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x229 = ((x150 + x228) - ((x150 * Val(2)) * x228));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x230 = ((Val(1) - x24) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x231 = ((x151 + x230) - ((x151 * Val(2)) * x230));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x232 = ((Val(1) - x25) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x233 = ((x152 + x232) - ((x152 * Val(2)) * x232));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x234 = ((Val(1) - x26) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x235 = ((x153 + x234) - ((x153 * Val(2)) * x234));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x236 = ((Val(1) - x27) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x237 = ((x154 + x236) - ((x154 * Val(2)) * x236));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x238 = ((Val(1) - x38) * x102);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x239 = ((x166 + x238) - ((x166 * Val(2)) * x238));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x240 = ((Val(1) - x39) * x103);
  Val x241 = ((Val(1) - x40) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x242 = ((x168 + x241) - ((x168 * Val(2)) * x241));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x243 = ((Val(1) - x41) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x244 = ((x169 + x243) - ((x169 * Val(2)) * x243));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x245 = ((Val(1) - x42) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x246 = ((x170 + x245) - ((x170 * Val(2)) * x245));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x247 = ((Val(1) - x43) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x171 + x247) - ((x171 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x44) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x172 + x249) - ((x172 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x45) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x173 + x251) - ((x173 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x46) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x174 + x253) - ((x174 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x47) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x175 + x255) - ((x175 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x48) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x176 + x257) - ((x176 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x49) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x177 + x259) - ((x177 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x50) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x178 + x261) - ((x178 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x51) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x179 + x263) - ((x179 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x52) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x180 + x265) - ((x180 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x53) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x181 + x267) - ((x181 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x54) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x182 + x269) - ((x182 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x55) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x183 + x271) - ((x183 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x56) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x184 + x273) - ((x184 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x57) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x185 + x275) - ((x185 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x58) * x122);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x186 + x277) - ((x186 * Val(2)) * x277));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x279 = (((x134 + x197) - (x155 * x197)) * Val(2));
  Val x280 = (((x196 + x279) + (x199 * Val(4))) + (x201 * Val(8)));
  Val x281 = (((x280 + (x203 * Val(16))) + (x205 * Val(32))) + (x207 * Val(64)));
  Val x282 = (((x281 + (x209 * Val(128))) + (x211 * Val(256))) + (x213 * Val(512)));
  Val x283 = (((x282 + (x215 * Val(1024))) + (x217 * Val(2048))) + (x219 * Val(4096)));
  Val x284 = (((x283 + (x221 * Val(8192))) + (x223 * Val(16384))) + (x225 * Val(32768)));
  Val x285 = (((x284 + (x227 * Val(65536))) + (x229 * Val(131072))) + (x231 * Val(262144)));
  Val x286 = (((x285 + (x233 * Val(524288))) + (x235 * Val(1048576))) + (x237 * Val(2097152)));
  NondetRegStruct x287 = exec_Reg(ctx, x286, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x288 = (((x167 + x240) - (x187 * x240)) * Val(2));
  Val x289 = (((x239 + x288) + (x242 * Val(4))) + (x244 * Val(8)));
  Val x290 = (((x289 + (x246 * Val(16))) + (x248 * Val(32))) + (x250 * Val(64)));
  Val x291 = (((x290 + (x252 * Val(128))) + (x254 * Val(256))) + (x256 * Val(512)));
  Val x292 = (((x291 + (x258 * Val(1024))) + (x260 * Val(2048))) + (x262 * Val(4096)));
  Val x293 = (((x292 + (x264 * Val(8192))) + (x266 * Val(16384))) + (x268 * Val(32768)));
  Val x294 = (((x293 + (x270 * Val(65536))) + (x272 * Val(131072))) + (x274 * Val(262144)));
  NondetRegStruct x295 = exec_Reg(
      ctx, ((x294 + (x276 * Val(524288))) + (x278 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x296 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x297 = exec_RetTuple(
      ctx,
      x296,
      x296,
      x296,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x287._super, x295._super},
      x296,
      x296,
      Val(1),
      Val(14),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x297;
}
RetTupleStruct execChiMinor1_0__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_0__4_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_0__4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 2, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x6 = x4.arrC;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[18]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[21]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct24Array x70 = x4.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x71 = x70[2]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x72 = exec_ToBits_21_(ctx, x71, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x73 = x72._super;
  Val x74 = x73[0]._super;
  Val x75 = x73[1]._super;
  Val x76 = x73[2]._super;
  Val x77 = x73[3]._super;
  Val x78 = x73[4]._super;
  Val x79 = x73[5]._super;
  Val x80 = x73[6]._super;
  Val x81 = x73[7]._super;
  Val x82 = x73[8]._super;
  Val x83 = x73[9]._super;
  Val x84 = x73[10]._super;
  Val x85 = x73[11]._super;
  Val x86 = x73[12]._super;
  Val x87 = x73[13]._super;
  Val x88 = x73[14]._super;
  Val x89 = x73[15]._super;
  Val x90 = x73[16]._super;
  Val x91 = x73[17]._super;
  Val x92 = x73[18]._super;
  Val x93 = x73[19]._super;
  Val x94 = x73[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x95 = (((x74 + (x75 * Val(2))) + (x76 * Val(4))) + (x77 * Val(8)));
  Val x96 = (((x95 + (x78 * Val(16))) + (x79 * Val(32))) + (x80 * Val(64)));
  Val x97 = (((x96 + (x81 * Val(128))) + (x82 * Val(256))) + (x83 * Val(512)));
  Val x98 = (((x97 + (x84 * Val(1024))) + (x85 * Val(2048))) + (x86 * Val(4096)));
  Val x99 = (((x98 + (x87 * Val(8192))) + (x88 * Val(16384))) + (x89 * Val(32768)));
  Val x100 = (((x99 + (x90 * Val(65536))) + (x91 * Val(131072))) + (x92 * Val(262144)));
  Val x101 = (((x100 + (x93 * Val(524288))) + (x94 * Val(1048576))) - x71);
  EQZ(x101, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x102 = ((Val(1) - x42) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x103 = ((x10 + x102) - ((x10 * Val(2)) * x102));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x104 = ((Val(1) - x43) * x75);
  Val x105 = ((Val(1) - x44) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x106 = ((x12 + x105) - ((x12 * Val(2)) * x105));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x107 = ((Val(1) - x45) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x108 = ((x13 + x107) - ((x13 * Val(2)) * x107));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x109 = ((Val(1) - x46) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x110 = ((x14 + x109) - ((x14 * Val(2)) * x109));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x111 = ((Val(1) - x47) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x112 = ((x15 + x111) - ((x15 * Val(2)) * x111));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x113 = ((Val(1) - x48) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x114 = ((x16 + x113) - ((x16 * Val(2)) * x113));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x115 = ((Val(1) - x49) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x116 = ((x17 + x115) - ((x17 * Val(2)) * x115));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x117 = ((Val(1) - x50) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x118 = ((x18 + x117) - ((x18 * Val(2)) * x117));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x119 = ((Val(1) - x51) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x120 = ((x19 + x119) - ((x19 * Val(2)) * x119));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x121 = ((Val(1) - x52) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x122 = ((x20 + x121) - ((x20 * Val(2)) * x121));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x123 = ((Val(1) - x53) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x124 = ((x21 + x123) - ((x21 * Val(2)) * x123));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x125 = ((Val(1) - x54) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x126 = ((x22 + x125) - ((x22 * Val(2)) * x125));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x127 = ((Val(1) - x55) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x128 = ((x23 + x127) - ((x23 * Val(2)) * x127));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x129 = ((Val(1) - x56) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x130 = ((x24 + x129) - ((x24 * Val(2)) * x129));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x131 = ((Val(1) - x57) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x132 = ((x25 + x131) - ((x25 * Val(2)) * x131));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x133 = ((Val(1) - x58) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x134 = ((x26 + x133) - ((x26 * Val(2)) * x133));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x135 = ((Val(1) - x59) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x136 = ((x27 + x135) - ((x27 * Val(2)) * x135));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x137 = ((Val(1) - x60) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x138 = ((x28 + x137) - ((x28 * Val(2)) * x137));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x139 = ((Val(1) - x61) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x140 = ((x29 + x139) - ((x29 * Val(2)) * x139));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x141 = ((Val(1) - x62) * x94);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x142 = ((x30 + x141) - ((x30 * Val(2)) * x141));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x143 = (((x11 + x104) - (x31 * x104)) * Val(2));
  Val x144 = (((x103 + x143) + (x106 * Val(4))) + (x108 * Val(8)));
  Val x145 = (((x144 + (x110 * Val(16))) + (x112 * Val(32))) + (x114 * Val(64)));
  Val x146 = (((x145 + (x116 * Val(128))) + (x118 * Val(256))) + (x120 * Val(512)));
  Val x147 = (((x146 + (x122 * Val(1024))) + (x124 * Val(2048))) + (x126 * Val(4096)));
  Val x148 = (((x147 + (x128 * Val(8192))) + (x130 * Val(16384))) + (x132 * Val(32768)));
  Val x149 = (((x148 + (x134 * Val(65536))) + (x136 * Val(131072))) + (x138 * Val(262144)));
  NondetRegStruct x150 = exec_Reg(
      ctx, ((x149 + (x140 * Val(524288))) + (x142 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x151 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_0__4_Arm1_SuperLayout> x152 = LAYOUT_LOOKUP(x3, arm1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:699)
  ToBits_21_Struct x153 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(x152, unpack_2nx));
  NondetRegStruct21Array x154 = x153._super;
  Val x155 = x154[0]._super;
  Val x156 = x154[1]._super;
  Val x157 = x154[2]._super;
  Val x158 = x154[3]._super;
  Val x159 = x154[4]._super;
  Val x160 = x154[5]._super;
  Val x161 = x154[6]._super;
  Val x162 = x154[7]._super;
  Val x163 = x154[8]._super;
  Val x164 = x154[9]._super;
  Val x165 = x154[10]._super;
  Val x166 = x154[11]._super;
  Val x167 = x154[12]._super;
  Val x168 = x154[13]._super;
  Val x169 = x154[14]._super;
  Val x170 = x154[15]._super;
  Val x171 = x154[16]._super;
  Val x172 = x154[17]._super;
  Val x173 = x154[18]._super;
  Val x174 = x154[19]._super;
  Val x175 = x154[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:700)
  Val x176 = (x156 * Val(2));
  Val x177 = (((x155 + x176) + (x157 * Val(4))) + (x158 * Val(8)));
  Val x178 = (((x177 + (x159 * Val(16))) + (x160 * Val(32))) + (x161 * Val(64)));
  Val x179 = (((x178 + (x162 * Val(128))) + (x163 * Val(256))) + (x164 * Val(512)));
  Val x180 = (((x179 + (x165 * Val(1024))) + (x166 * Val(2048))) + (x167 * Val(4096)));
  Val x181 = (((x180 + (x168 * Val(8192))) + (x169 * Val(16384))) + (x170 * Val(32768)));
  Val x182 = (((x181 + (x171 * Val(65536))) + (x172 * Val(131072))) + (x173 * Val(262144)));
  Val x183 = (((x182 + (x174 * Val(524288))) + (x175 * Val(1048576))) - x39);
  EQZ(x183, "chi_minor1(zirgen/circuit/keccak/keccak.zir:700)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:713)
  ToBits_21_Struct x184 = exec_ToBits_21_(ctx, x71, LAYOUT_LOOKUP(x152, unpack_2nxp1));
  NondetRegStruct21Array x185 = x184._super;
  Val x186 = x185[0]._super;
  Val x187 = x185[1]._super;
  Val x188 = x185[2]._super;
  Val x189 = x185[3]._super;
  Val x190 = x185[4]._super;
  Val x191 = x185[5]._super;
  Val x192 = x185[6]._super;
  Val x193 = x185[7]._super;
  Val x194 = x185[8]._super;
  Val x195 = x185[9]._super;
  Val x196 = x185[10]._super;
  Val x197 = x185[11]._super;
  Val x198 = x185[12]._super;
  Val x199 = x185[13]._super;
  Val x200 = x185[14]._super;
  Val x201 = x185[15]._super;
  Val x202 = x185[16]._super;
  Val x203 = x185[17]._super;
  Val x204 = x185[18]._super;
  Val x205 = x185[19]._super;
  Val x206 = x185[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:714)
  Val x207 = (((x186 + (x187 * Val(2))) + (x188 * Val(4))) + (x189 * Val(8)));
  Val x208 = (((x207 + (x190 * Val(16))) + (x191 * Val(32))) + (x192 * Val(64)));
  Val x209 = (((x208 + (x193 * Val(128))) + (x194 * Val(256))) + (x195 * Val(512)));
  Val x210 = (((x209 + (x196 * Val(1024))) + (x197 * Val(2048))) + (x198 * Val(4096)));
  Val x211 = (((x210 + (x199 * Val(8192))) + (x200 * Val(16384))) + (x201 * Val(32768)));
  Val x212 = (((x211 + (x202 * Val(65536))) + (x203 * Val(131072))) + (x204 * Val(262144)));
  Val x213 = (((x212 + (x205 * Val(524288))) + (x206 * Val(1048576))) - x71);
  EQZ(x213, "chi_minor1(zirgen/circuit/keccak/keccak.zir:714)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:718)
  Val x214 = x70[5]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:726)
  ToBits_21_Struct x215 = exec_ToBits_21_(ctx, x214, LAYOUT_LOOKUP(x152, unpack_2nxp2));
  NondetRegStruct21Array x216 = x215._super;
  Val x217 = x216[0]._super;
  Val x218 = x216[1]._super;
  Val x219 = x216[2]._super;
  Val x220 = x216[3]._super;
  Val x221 = x216[4]._super;
  Val x222 = x216[5]._super;
  Val x223 = x216[6]._super;
  Val x224 = x216[7]._super;
  Val x225 = x216[8]._super;
  Val x226 = x216[9]._super;
  Val x227 = x216[10]._super;
  Val x228 = x216[11]._super;
  Val x229 = x216[12]._super;
  Val x230 = x216[13]._super;
  Val x231 = x216[14]._super;
  Val x232 = x216[15]._super;
  Val x233 = x216[16]._super;
  Val x234 = x216[17]._super;
  Val x235 = x216[18]._super;
  Val x236 = x216[19]._super;
  Val x237 = x216[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:727)
  Val x238 = (((x217 + (x218 * Val(2))) + (x219 * Val(4))) + (x220 * Val(8)));
  Val x239 = (((x238 + (x221 * Val(16))) + (x222 * Val(32))) + (x223 * Val(64)));
  Val x240 = (((x239 + (x224 * Val(128))) + (x225 * Val(256))) + (x226 * Val(512)));
  Val x241 = (((x240 + (x227 * Val(1024))) + (x228 * Val(2048))) + (x229 * Val(4096)));
  Val x242 = (((x241 + (x230 * Val(8192))) + (x231 * Val(16384))) + (x232 * Val(32768)));
  Val x243 = (((x242 + (x233 * Val(65536))) + (x234 * Val(131072))) + (x235 * Val(262144)));
  Val x244 = (((x243 + (x236 * Val(524288))) + (x237 * Val(1048576))) - x214);
  EQZ(x244, "chi_minor1(zirgen/circuit/keccak/keccak.zir:727)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:729)
  Val x245 = ((Val(1) - x186) * x217);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x246 = ((x155 + x245) - ((x155 * Val(2)) * x245));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x247 = ((Val(1) - x187) * x218);
  Val x248 = ((Val(1) - x188) * x219);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x157 + x248) - ((x157 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x189) * x220);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x158 + x250) - ((x158 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x190) * x221);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x159 + x252) - ((x159 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x191) * x222);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x160 + x254) - ((x160 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x192) * x223);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x161 + x256) - ((x161 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x193) * x224);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x162 + x258) - ((x162 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x194) * x225);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x163 + x260) - ((x163 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x195) * x226);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x164 + x262) - ((x164 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x196) * x227);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x165 + x264) - ((x165 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x197) * x228);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x166 + x266) - ((x166 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x198) * x229);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x167 + x268) - ((x167 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x199) * x230);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x168 + x270) - ((x168 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x200) * x231);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x169 + x272) - ((x169 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x201) * x232);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x170 + x274) - ((x170 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x202) * x233);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x171 + x276) - ((x171 * Val(2)) * x276));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x278 = ((Val(1) - x203) * x234);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x279 = ((x172 + x278) - ((x172 * Val(2)) * x278));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x280 = ((Val(1) - x204) * x235);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x281 = ((x173 + x280) - ((x173 * Val(2)) * x280));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x282 = ((Val(1) - x205) * x236);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x283 = ((x174 + x282) - ((x174 * Val(2)) * x282));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x284 = ((Val(1) - x206) * x237);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x285 = ((x175 + x284) - ((x175 * Val(2)) * x284));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:730)
  Val x286 = (((x156 + x247) - (x176 * x247)) * Val(2));
  Val x287 = (((x246 + x286) + (x249 * Val(4))) + (x251 * Val(8)));
  Val x288 = (((x287 + (x253 * Val(16))) + (x255 * Val(32))) + (x257 * Val(64)));
  Val x289 = (((x288 + (x259 * Val(128))) + (x261 * Val(256))) + (x263 * Val(512)));
  Val x290 = (((x289 + (x265 * Val(1024))) + (x267 * Val(2048))) + (x269 * Val(4096)));
  Val x291 = (((x290 + (x271 * Val(8192))) + (x273 * Val(16384))) + (x275 * Val(32768)));
  Val x292 = (((x291 + (x277 * Val(65536))) + (x279 * Val(131072))) + (x281 * Val(262144)));
  NondetRegStruct x293 = exec_Reg(
      ctx, ((x292 + (x283 * Val(524288))) + (x285 * Val(1048576))), LAYOUT_LOOKUP(x152, res3n));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x294 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x151[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x295 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x151[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:733)
  RetTupleStruct x296 =
      exec_RetTuple(ctx,
                    x294,
                    x295,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x150._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x293._super},
                    Val(2),
                    Val(14),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x152, _super));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x297 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x297;
}
RetTupleStruct execChiMinor0_1__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_1__4_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct24Array x2 = arg0.arrD;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[0]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[1]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[3]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[4]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x129 = arg0.arrC;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x130 = x129[19]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x131 = exec_ToBits_22_(ctx, x130, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x132 = x131._super;
  Val x133 = x132[0]._super;
  Val x134 = x132[1]._super;
  Val x135 = x132[2]._super;
  Val x136 = x132[3]._super;
  Val x137 = x132[4]._super;
  Val x138 = x132[5]._super;
  Val x139 = x132[6]._super;
  Val x140 = x132[7]._super;
  Val x141 = x132[8]._super;
  Val x142 = x132[9]._super;
  Val x143 = x132[10]._super;
  Val x144 = x132[11]._super;
  Val x145 = x132[12]._super;
  Val x146 = x132[13]._super;
  Val x147 = x132[14]._super;
  Val x148 = x132[15]._super;
  Val x149 = x132[16]._super;
  Val x150 = x132[17]._super;
  Val x151 = x132[18]._super;
  Val x152 = x132[19]._super;
  Val x153 = x132[20]._super;
  Val x154 = x132[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x155 = (x134 * Val(2));
  Val x156 = (((x133 + x155) + (x135 * Val(4))) + (x136 * Val(8)));
  Val x157 = (((x156 + (x137 * Val(16))) + (x138 * Val(32))) + (x139 * Val(64)));
  Val x158 = (((x157 + (x140 * Val(128))) + (x141 * Val(256))) + (x142 * Val(512)));
  Val x159 = (((x158 + (x143 * Val(1024))) + (x144 * Val(2048))) + (x145 * Val(4096)));
  Val x160 = (((x159 + (x146 * Val(8192))) + (x147 * Val(16384))) + (x148 * Val(32768)));
  Val x161 = (((x160 + (x149 * Val(65536))) + (x150 * Val(131072))) + (x151 * Val(262144)));
  Val x162 = (((x161 + (x152 * Val(524288))) + (x153 * Val(1048576))) + (x154 * Val(2097152)));
  EQZ((x162 - x130), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x163 = x129[20]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x164 = exec_ToBits_21_(ctx, x163, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x165 = x164._super;
  Val x166 = x165[0]._super;
  Val x167 = x165[1]._super;
  Val x168 = x165[2]._super;
  Val x169 = x165[3]._super;
  Val x170 = x165[4]._super;
  Val x171 = x165[5]._super;
  Val x172 = x165[6]._super;
  Val x173 = x165[7]._super;
  Val x174 = x165[8]._super;
  Val x175 = x165[9]._super;
  Val x176 = x165[10]._super;
  Val x177 = x165[11]._super;
  Val x178 = x165[12]._super;
  Val x179 = x165[13]._super;
  Val x180 = x165[14]._super;
  Val x181 = x165[15]._super;
  Val x182 = x165[16]._super;
  Val x183 = x165[17]._super;
  Val x184 = x165[18]._super;
  Val x185 = x165[19]._super;
  Val x186 = x165[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x187 = (x167 * Val(2));
  Val x188 = (((x166 + x187) + (x168 * Val(4))) + (x169 * Val(8)));
  Val x189 = (((x188 + (x170 * Val(16))) + (x171 * Val(32))) + (x172 * Val(64)));
  Val x190 = (((x189 + (x173 * Val(128))) + (x174 * Val(256))) + (x175 * Val(512)));
  Val x191 = (((x190 + (x176 * Val(1024))) + (x177 * Val(2048))) + (x178 * Val(4096)));
  Val x192 = (((x191 + (x179 * Val(8192))) + (x180 * Val(16384))) + (x181 * Val(32768)));
  Val x193 = (((x192 + (x182 * Val(65536))) + (x183 * Val(131072))) + (x184 * Val(262144)));
  Val x194 = (((x193 + (x185 * Val(524288))) + (x186 * Val(1048576))) - x163);
  EQZ(x194, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x195 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x196 = ((x133 + x195) - ((x133 * Val(2)) * x195));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x197 = ((Val(1) - x7) * x70);
  Val x198 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x199 = ((x135 + x198) - ((x135 * Val(2)) * x198));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x200 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x201 = ((x136 + x200) - ((x136 * Val(2)) * x200));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x202 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x203 = ((x137 + x202) - ((x137 * Val(2)) * x202));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x204 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x205 = ((x138 + x204) - ((x138 * Val(2)) * x204));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x206 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x207 = ((x139 + x206) - ((x139 * Val(2)) * x206));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x208 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x209 = ((x140 + x208) - ((x140 * Val(2)) * x208));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x210 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x211 = ((x141 + x210) - ((x141 * Val(2)) * x210));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x212 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x213 = ((x142 + x212) - ((x142 * Val(2)) * x212));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x214 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x215 = ((x143 + x214) - ((x143 * Val(2)) * x214));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x216 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x217 = ((x144 + x216) - ((x144 * Val(2)) * x216));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x218 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x219 = ((x145 + x218) - ((x145 * Val(2)) * x218));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x220 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x221 = ((x146 + x220) - ((x146 * Val(2)) * x220));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x222 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x223 = ((x147 + x222) - ((x147 * Val(2)) * x222));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x224 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x225 = ((x148 + x224) - ((x148 * Val(2)) * x224));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x226 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x227 = ((x149 + x226) - ((x149 * Val(2)) * x226));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x228 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x229 = ((x150 + x228) - ((x150 * Val(2)) * x228));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x230 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x231 = ((x151 + x230) - ((x151 * Val(2)) * x230));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x232 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x233 = ((x152 + x232) - ((x152 * Val(2)) * x232));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x234 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x235 = ((x153 + x234) - ((x153 * Val(2)) * x234));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x236 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x237 = ((x154 + x236) - ((x154 * Val(2)) * x236));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x238 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x239 = ((x166 + x238) - ((x166 * Val(2)) * x238));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x240 = ((Val(1) - x39) * x102);
  Val x241 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x242 = ((x168 + x241) - ((x168 * Val(2)) * x241));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x243 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x244 = ((x169 + x243) - ((x169 * Val(2)) * x243));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x245 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x246 = ((x170 + x245) - ((x170 * Val(2)) * x245));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x247 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x171 + x247) - ((x171 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x172 + x249) - ((x172 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x173 + x251) - ((x173 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x174 + x253) - ((x174 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x175 + x255) - ((x175 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x176 + x257) - ((x176 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x177 + x259) - ((x177 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x178 + x261) - ((x178 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x179 + x263) - ((x179 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x180 + x265) - ((x180 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x181 + x267) - ((x181 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x182 + x269) - ((x182 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x183 + x271) - ((x183 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x184 + x273) - ((x184 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x185 + x275) - ((x185 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x186 + x277) - ((x186 * Val(2)) * x277));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x279 = (((x134 + x197) - (x155 * x197)) * Val(2));
  Val x280 = (((x196 + x279) + (x199 * Val(4))) + (x201 * Val(8)));
  Val x281 = (((x280 + (x203 * Val(16))) + (x205 * Val(32))) + (x207 * Val(64)));
  Val x282 = (((x281 + (x209 * Val(128))) + (x211 * Val(256))) + (x213 * Val(512)));
  Val x283 = (((x282 + (x215 * Val(1024))) + (x217 * Val(2048))) + (x219 * Val(4096)));
  Val x284 = (((x283 + (x221 * Val(8192))) + (x223 * Val(16384))) + (x225 * Val(32768)));
  Val x285 = (((x284 + (x227 * Val(65536))) + (x229 * Val(131072))) + (x231 * Val(262144)));
  Val x286 = (((x285 + (x233 * Val(524288))) + (x235 * Val(1048576))) + (x237 * Val(2097152)));
  NondetRegStruct x287 = exec_Reg(ctx, x286, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x288 = (((x167 + x240) - (x187 * x240)) * Val(2));
  Val x289 = (((x239 + x288) + (x242 * Val(4))) + (x244 * Val(8)));
  Val x290 = (((x289 + (x246 * Val(16))) + (x248 * Val(32))) + (x250 * Val(64)));
  Val x291 = (((x290 + (x252 * Val(128))) + (x254 * Val(256))) + (x256 * Val(512)));
  Val x292 = (((x291 + (x258 * Val(1024))) + (x260 * Val(2048))) + (x262 * Val(4096)));
  Val x293 = (((x292 + (x264 * Val(8192))) + (x266 * Val(16384))) + (x268 * Val(32768)));
  Val x294 = (((x293 + (x270 * Val(65536))) + (x272 * Val(131072))) + (x274 * Val(262144)));
  NondetRegStruct x295 = exec_Reg(
      ctx, ((x294 + (x276 * Val(524288))) + (x278 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x296 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x297 = exec_RetTuple(
      ctx,
      x296,
      x296,
      x296,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x287._super, x295._super},
      x296,
      x296,
      Val(3),
      Val(14),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x297;
}
RetTupleStruct execChiMinor0_2__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_2__4_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct24Array x2 = arg0.arrD;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[3]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[4]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[6]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[7]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x129 = x2[0]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x130 = exec_ToBits_22_(ctx, x129, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x131 = x130._super;
  Val x132 = x131[0]._super;
  Val x133 = x131[1]._super;
  Val x134 = x131[2]._super;
  Val x135 = x131[3]._super;
  Val x136 = x131[4]._super;
  Val x137 = x131[5]._super;
  Val x138 = x131[6]._super;
  Val x139 = x131[7]._super;
  Val x140 = x131[8]._super;
  Val x141 = x131[9]._super;
  Val x142 = x131[10]._super;
  Val x143 = x131[11]._super;
  Val x144 = x131[12]._super;
  Val x145 = x131[13]._super;
  Val x146 = x131[14]._super;
  Val x147 = x131[15]._super;
  Val x148 = x131[16]._super;
  Val x149 = x131[17]._super;
  Val x150 = x131[18]._super;
  Val x151 = x131[19]._super;
  Val x152 = x131[20]._super;
  Val x153 = x131[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x154 = (x133 * Val(2));
  Val x155 = (((x132 + x154) + (x134 * Val(4))) + (x135 * Val(8)));
  Val x156 = (((x155 + (x136 * Val(16))) + (x137 * Val(32))) + (x138 * Val(64)));
  Val x157 = (((x156 + (x139 * Val(128))) + (x140 * Val(256))) + (x141 * Val(512)));
  Val x158 = (((x157 + (x142 * Val(1024))) + (x143 * Val(2048))) + (x144 * Val(4096)));
  Val x159 = (((x158 + (x145 * Val(8192))) + (x146 * Val(16384))) + (x147 * Val(32768)));
  Val x160 = (((x159 + (x148 * Val(65536))) + (x149 * Val(131072))) + (x150 * Val(262144)));
  Val x161 = (((x160 + (x151 * Val(524288))) + (x152 * Val(1048576))) + (x153 * Val(2097152)));
  EQZ((x161 - x129), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x162 = x2[1]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x163 = exec_ToBits_21_(ctx, x162, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x164 = x163._super;
  Val x165 = x164[0]._super;
  Val x166 = x164[1]._super;
  Val x167 = x164[2]._super;
  Val x168 = x164[3]._super;
  Val x169 = x164[4]._super;
  Val x170 = x164[5]._super;
  Val x171 = x164[6]._super;
  Val x172 = x164[7]._super;
  Val x173 = x164[8]._super;
  Val x174 = x164[9]._super;
  Val x175 = x164[10]._super;
  Val x176 = x164[11]._super;
  Val x177 = x164[12]._super;
  Val x178 = x164[13]._super;
  Val x179 = x164[14]._super;
  Val x180 = x164[15]._super;
  Val x181 = x164[16]._super;
  Val x182 = x164[17]._super;
  Val x183 = x164[18]._super;
  Val x184 = x164[19]._super;
  Val x185 = x164[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x186 = (x166 * Val(2));
  Val x187 = (((x165 + x186) + (x167 * Val(4))) + (x168 * Val(8)));
  Val x188 = (((x187 + (x169 * Val(16))) + (x170 * Val(32))) + (x171 * Val(64)));
  Val x189 = (((x188 + (x172 * Val(128))) + (x173 * Val(256))) + (x174 * Val(512)));
  Val x190 = (((x189 + (x175 * Val(1024))) + (x176 * Val(2048))) + (x177 * Val(4096)));
  Val x191 = (((x190 + (x178 * Val(8192))) + (x179 * Val(16384))) + (x180 * Val(32768)));
  Val x192 = (((x191 + (x181 * Val(65536))) + (x182 * Val(131072))) + (x183 * Val(262144)));
  Val x193 = (((x192 + (x184 * Val(524288))) + (x185 * Val(1048576))) - x162);
  EQZ(x193, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x194 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x195 = ((x132 + x194) - ((x132 * Val(2)) * x194));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x196 = ((Val(1) - x7) * x70);
  Val x197 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x198 = ((x134 + x197) - ((x134 * Val(2)) * x197));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x199 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x200 = ((x135 + x199) - ((x135 * Val(2)) * x199));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x201 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x202 = ((x136 + x201) - ((x136 * Val(2)) * x201));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x203 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x204 = ((x137 + x203) - ((x137 * Val(2)) * x203));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x205 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x206 = ((x138 + x205) - ((x138 * Val(2)) * x205));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x207 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x208 = ((x139 + x207) - ((x139 * Val(2)) * x207));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x209 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x210 = ((x140 + x209) - ((x140 * Val(2)) * x209));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x211 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x212 = ((x141 + x211) - ((x141 * Val(2)) * x211));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x213 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x214 = ((x142 + x213) - ((x142 * Val(2)) * x213));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x215 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x216 = ((x143 + x215) - ((x143 * Val(2)) * x215));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x217 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x218 = ((x144 + x217) - ((x144 * Val(2)) * x217));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x219 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x220 = ((x145 + x219) - ((x145 * Val(2)) * x219));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x221 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x222 = ((x146 + x221) - ((x146 * Val(2)) * x221));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x223 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x224 = ((x147 + x223) - ((x147 * Val(2)) * x223));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x225 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x226 = ((x148 + x225) - ((x148 * Val(2)) * x225));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x227 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x228 = ((x149 + x227) - ((x149 * Val(2)) * x227));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x229 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x230 = ((x150 + x229) - ((x150 * Val(2)) * x229));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x231 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x232 = ((x151 + x231) - ((x151 * Val(2)) * x231));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x233 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x234 = ((x152 + x233) - ((x152 * Val(2)) * x233));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x235 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x236 = ((x153 + x235) - ((x153 * Val(2)) * x235));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x237 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x238 = ((x165 + x237) - ((x165 * Val(2)) * x237));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x239 = ((Val(1) - x39) * x102);
  Val x240 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x241 = ((x167 + x240) - ((x167 * Val(2)) * x240));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x242 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x243 = ((x168 + x242) - ((x168 * Val(2)) * x242));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x244 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x169 + x244) - ((x169 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x247 = ((x170 + x246) - ((x170 * Val(2)) * x246));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x248 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x249 = ((x171 + x248) - ((x171 * Val(2)) * x248));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x250 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x251 = ((x172 + x250) - ((x172 * Val(2)) * x250));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x252 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x253 = ((x173 + x252) - ((x173 * Val(2)) * x252));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x254 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x255 = ((x174 + x254) - ((x174 * Val(2)) * x254));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x256 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x257 = ((x175 + x256) - ((x175 * Val(2)) * x256));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x258 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x259 = ((x176 + x258) - ((x176 * Val(2)) * x258));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x260 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x261 = ((x177 + x260) - ((x177 * Val(2)) * x260));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x262 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x263 = ((x178 + x262) - ((x178 * Val(2)) * x262));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x264 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x265 = ((x179 + x264) - ((x179 * Val(2)) * x264));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x266 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x267 = ((x180 + x266) - ((x180 * Val(2)) * x266));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x268 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x269 = ((x181 + x268) - ((x181 * Val(2)) * x268));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x270 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x271 = ((x182 + x270) - ((x182 * Val(2)) * x270));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x272 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x273 = ((x183 + x272) - ((x183 * Val(2)) * x272));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x274 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x275 = ((x184 + x274) - ((x184 * Val(2)) * x274));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x276 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x277 = ((x185 + x276) - ((x185 * Val(2)) * x276));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x278 = (((x133 + x196) - (x154 * x196)) * Val(2));
  Val x279 = (((x195 + x278) + (x198 * Val(4))) + (x200 * Val(8)));
  Val x280 = (((x279 + (x202 * Val(16))) + (x204 * Val(32))) + (x206 * Val(64)));
  Val x281 = (((x280 + (x208 * Val(128))) + (x210 * Val(256))) + (x212 * Val(512)));
  Val x282 = (((x281 + (x214 * Val(1024))) + (x216 * Val(2048))) + (x218 * Val(4096)));
  Val x283 = (((x282 + (x220 * Val(8192))) + (x222 * Val(16384))) + (x224 * Val(32768)));
  Val x284 = (((x283 + (x226 * Val(65536))) + (x228 * Val(131072))) + (x230 * Val(262144)));
  Val x285 = (((x284 + (x232 * Val(524288))) + (x234 * Val(1048576))) + (x236 * Val(2097152)));
  NondetRegStruct x286 = exec_Reg(ctx, x285, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x287 = (((x166 + x239) - (x186 * x239)) * Val(2));
  Val x288 = (((x238 + x287) + (x241 * Val(4))) + (x243 * Val(8)));
  Val x289 = (((x288 + (x245 * Val(16))) + (x247 * Val(32))) + (x249 * Val(64)));
  Val x290 = (((x289 + (x251 * Val(128))) + (x253 * Val(256))) + (x255 * Val(512)));
  Val x291 = (((x290 + (x257 * Val(1024))) + (x259 * Val(2048))) + (x261 * Val(4096)));
  Val x292 = (((x291 + (x263 * Val(8192))) + (x265 * Val(16384))) + (x267 * Val(32768)));
  Val x293 = (((x292 + (x269 * Val(65536))) + (x271 * Val(131072))) + (x273 * Val(262144)));
  NondetRegStruct x294 = exec_Reg(
      ctx, ((x293 + (x275 * Val(524288))) + (x277 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x295 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x296 = exec_RetTuple(
      ctx,
      x295,
      x295,
      x295,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x286._super, x294._super},
      x295,
      x295,
      Val(4),
      Val(14),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x296;
}
RetTupleStruct execChiMinor1_2__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_2__4_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_2__4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 5, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct24Array x6 = x4.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x7 = x6[2]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x8 = exec_ToBits_21_(ctx, x7, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x9 = x8._super;
  Val x10 = x9[0]._super;
  Val x11 = x9[1]._super;
  Val x12 = x9[2]._super;
  Val x13 = x9[3]._super;
  Val x14 = x9[4]._super;
  Val x15 = x9[5]._super;
  Val x16 = x9[6]._super;
  Val x17 = x9[7]._super;
  Val x18 = x9[8]._super;
  Val x19 = x9[9]._super;
  Val x20 = x9[10]._super;
  Val x21 = x9[11]._super;
  Val x22 = x9[12]._super;
  Val x23 = x9[13]._super;
  Val x24 = x9[14]._super;
  Val x25 = x9[15]._super;
  Val x26 = x9[16]._super;
  Val x27 = x9[17]._super;
  Val x28 = x9[18]._super;
  Val x29 = x9[19]._super;
  Val x30 = x9[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x31 = (x11 * Val(2));
  Val x32 = (((x10 + x31) + (x12 * Val(4))) + (x13 * Val(8)));
  Val x33 = (((x32 + (x14 * Val(16))) + (x15 * Val(32))) + (x16 * Val(64)));
  Val x34 = (((x33 + (x17 * Val(128))) + (x18 * Val(256))) + (x19 * Val(512)));
  Val x35 = (((x34 + (x20 * Val(1024))) + (x21 * Val(2048))) + (x22 * Val(4096)));
  Val x36 = (((x35 + (x23 * Val(8192))) + (x24 * Val(16384))) + (x25 * Val(32768)));
  Val x37 = (((x36 + (x26 * Val(65536))) + (x27 * Val(131072))) + (x28 * Val(262144)));
  Val x38 = (((x37 + (x29 * Val(524288))) + (x30 * Val(1048576))) - x7);
  EQZ(x38, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x6[5]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x6[8]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x10 + x101) - ((x10 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x12 + x104) - ((x12 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x13 + x106) - ((x13 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x14 + x108) - ((x14 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x15 + x110) - ((x15 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x16 + x112) - ((x16 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x17 + x114) - ((x17 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x18 + x116) - ((x18 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x19 + x118) - ((x19 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x20 + x120) - ((x20 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x21 + x122) - ((x21 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x22 + x124) - ((x22 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x23 + x126) - ((x23 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x24 + x128) - ((x24 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x25 + x130) - ((x25 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x26 + x132) - ((x26 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x27 + x134) - ((x27 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x28 + x136) - ((x28 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x29 + x138) - ((x29 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x30 + x140) - ((x30 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x11 + x103) - (x31 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_2__4_Arm1_SuperLayout> x151 = LAYOUT_LOOKUP(x3, arm1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:699)
  ToBits_21_Struct x152 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(x151, unpack_2nx));
  NondetRegStruct21Array x153 = x152._super;
  Val x154 = x153[0]._super;
  Val x155 = x153[1]._super;
  Val x156 = x153[2]._super;
  Val x157 = x153[3]._super;
  Val x158 = x153[4]._super;
  Val x159 = x153[5]._super;
  Val x160 = x153[6]._super;
  Val x161 = x153[7]._super;
  Val x162 = x153[8]._super;
  Val x163 = x153[9]._super;
  Val x164 = x153[10]._super;
  Val x165 = x153[11]._super;
  Val x166 = x153[12]._super;
  Val x167 = x153[13]._super;
  Val x168 = x153[14]._super;
  Val x169 = x153[15]._super;
  Val x170 = x153[16]._super;
  Val x171 = x153[17]._super;
  Val x172 = x153[18]._super;
  Val x173 = x153[19]._super;
  Val x174 = x153[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:700)
  Val x175 = (x155 * Val(2));
  Val x176 = (((x154 + x175) + (x156 * Val(4))) + (x157 * Val(8)));
  Val x177 = (((x176 + (x158 * Val(16))) + (x159 * Val(32))) + (x160 * Val(64)));
  Val x178 = (((x177 + (x161 * Val(128))) + (x162 * Val(256))) + (x163 * Val(512)));
  Val x179 = (((x178 + (x164 * Val(1024))) + (x165 * Val(2048))) + (x166 * Val(4096)));
  Val x180 = (((x179 + (x167 * Val(8192))) + (x168 * Val(16384))) + (x169 * Val(32768)));
  Val x181 = (((x180 + (x170 * Val(65536))) + (x171 * Val(131072))) + (x172 * Val(262144)));
  Val x182 = (((x181 + (x173 * Val(524288))) + (x174 * Val(1048576))) - x39);
  EQZ(x182, "chi_minor1(zirgen/circuit/keccak/keccak.zir:700)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:713)
  ToBits_21_Struct x183 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(x151, unpack_2nxp1));
  NondetRegStruct21Array x184 = x183._super;
  Val x185 = x184[0]._super;
  Val x186 = x184[1]._super;
  Val x187 = x184[2]._super;
  Val x188 = x184[3]._super;
  Val x189 = x184[4]._super;
  Val x190 = x184[5]._super;
  Val x191 = x184[6]._super;
  Val x192 = x184[7]._super;
  Val x193 = x184[8]._super;
  Val x194 = x184[9]._super;
  Val x195 = x184[10]._super;
  Val x196 = x184[11]._super;
  Val x197 = x184[12]._super;
  Val x198 = x184[13]._super;
  Val x199 = x184[14]._super;
  Val x200 = x184[15]._super;
  Val x201 = x184[16]._super;
  Val x202 = x184[17]._super;
  Val x203 = x184[18]._super;
  Val x204 = x184[19]._super;
  Val x205 = x184[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:714)
  Val x206 = (((x185 + (x186 * Val(2))) + (x187 * Val(4))) + (x188 * Val(8)));
  Val x207 = (((x206 + (x189 * Val(16))) + (x190 * Val(32))) + (x191 * Val(64)));
  Val x208 = (((x207 + (x192 * Val(128))) + (x193 * Val(256))) + (x194 * Val(512)));
  Val x209 = (((x208 + (x195 * Val(1024))) + (x196 * Val(2048))) + (x197 * Val(4096)));
  Val x210 = (((x209 + (x198 * Val(8192))) + (x199 * Val(16384))) + (x200 * Val(32768)));
  Val x211 = (((x210 + (x201 * Val(65536))) + (x202 * Val(131072))) + (x203 * Val(262144)));
  Val x212 = (((x211 + (x204 * Val(524288))) + (x205 * Val(1048576))) - x70);
  EQZ(x212, "chi_minor1(zirgen/circuit/keccak/keccak.zir:714)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:718)
  Val x213 = x4.arrC[18]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:726)
  ToBits_21_Struct x214 = exec_ToBits_21_(ctx, x213, LAYOUT_LOOKUP(x151, unpack_2nxp2));
  NondetRegStruct21Array x215 = x214._super;
  Val x216 = x215[0]._super;
  Val x217 = x215[1]._super;
  Val x218 = x215[2]._super;
  Val x219 = x215[3]._super;
  Val x220 = x215[4]._super;
  Val x221 = x215[5]._super;
  Val x222 = x215[6]._super;
  Val x223 = x215[7]._super;
  Val x224 = x215[8]._super;
  Val x225 = x215[9]._super;
  Val x226 = x215[10]._super;
  Val x227 = x215[11]._super;
  Val x228 = x215[12]._super;
  Val x229 = x215[13]._super;
  Val x230 = x215[14]._super;
  Val x231 = x215[15]._super;
  Val x232 = x215[16]._super;
  Val x233 = x215[17]._super;
  Val x234 = x215[18]._super;
  Val x235 = x215[19]._super;
  Val x236 = x215[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:727)
  Val x237 = (((x216 + (x217 * Val(2))) + (x218 * Val(4))) + (x219 * Val(8)));
  Val x238 = (((x237 + (x220 * Val(16))) + (x221 * Val(32))) + (x222 * Val(64)));
  Val x239 = (((x238 + (x223 * Val(128))) + (x224 * Val(256))) + (x225 * Val(512)));
  Val x240 = (((x239 + (x226 * Val(1024))) + (x227 * Val(2048))) + (x228 * Val(4096)));
  Val x241 = (((x240 + (x229 * Val(8192))) + (x230 * Val(16384))) + (x231 * Val(32768)));
  Val x242 = (((x241 + (x232 * Val(65536))) + (x233 * Val(131072))) + (x234 * Val(262144)));
  Val x243 = (((x242 + (x235 * Val(524288))) + (x236 * Val(1048576))) - x213);
  EQZ(x243, "chi_minor1(zirgen/circuit/keccak/keccak.zir:727)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:729)
  Val x244 = ((Val(1) - x185) * x216);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x245 = ((x154 + x244) - ((x154 * Val(2)) * x244));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x246 = ((Val(1) - x186) * x217);
  Val x247 = ((Val(1) - x187) * x218);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x156 + x247) - ((x156 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x188) * x219);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x157 + x249) - ((x157 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x189) * x220);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x158 + x251) - ((x158 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x190) * x221);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x159 + x253) - ((x159 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x191) * x222);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x160 + x255) - ((x160 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x192) * x223);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x161 + x257) - ((x161 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x193) * x224);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x162 + x259) - ((x162 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x194) * x225);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x163 + x261) - ((x163 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x195) * x226);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x164 + x263) - ((x164 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x196) * x227);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x165 + x265) - ((x165 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x197) * x228);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x166 + x267) - ((x166 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x198) * x229);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x167 + x269) - ((x167 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x199) * x230);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x168 + x271) - ((x168 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x200) * x231);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x169 + x273) - ((x169 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x201) * x232);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x170 + x275) - ((x170 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x202) * x233);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x171 + x277) - ((x171 * Val(2)) * x277));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x279 = ((Val(1) - x203) * x234);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x280 = ((x172 + x279) - ((x172 * Val(2)) * x279));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x281 = ((Val(1) - x204) * x235);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x282 = ((x173 + x281) - ((x173 * Val(2)) * x281));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x283 = ((Val(1) - x205) * x236);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x284 = ((x174 + x283) - ((x174 * Val(2)) * x283));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:730)
  Val x285 = (((x155 + x246) - (x175 * x246)) * Val(2));
  Val x286 = (((x245 + x285) + (x248 * Val(4))) + (x250 * Val(8)));
  Val x287 = (((x286 + (x252 * Val(16))) + (x254 * Val(32))) + (x256 * Val(64)));
  Val x288 = (((x287 + (x258 * Val(128))) + (x260 * Val(256))) + (x262 * Val(512)));
  Val x289 = (((x288 + (x264 * Val(1024))) + (x266 * Val(2048))) + (x268 * Val(4096)));
  Val x290 = (((x289 + (x270 * Val(8192))) + (x272 * Val(16384))) + (x274 * Val(32768)));
  Val x291 = (((x290 + (x276 * Val(65536))) + (x278 * Val(131072))) + (x280 * Val(262144)));
  NondetRegStruct x292 = exec_Reg(
      ctx, ((x291 + (x282 * Val(524288))) + (x284 * Val(1048576))), LAYOUT_LOOKUP(x151, res3n));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x293 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x294 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:733)
  RetTupleStruct x295 =
      exec_RetTuple(ctx,
                    x293,
                    x294,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x292._super},
                    Val(5),
                    Val(14),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x151, _super));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x296 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x296;
}
RetTupleStruct execChiMinor0_3__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_3__4_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct24Array x2 = arg0.arrD;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[6]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[7]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x66 = arg0.arrC;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x67 = x66[16]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x68 = exec_ToBits_22_(ctx, x67, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x69 = x68._super;
  Val x70 = x69[0]._super;
  Val x71 = x69[1]._super;
  Val x72 = x69[2]._super;
  Val x73 = x69[3]._super;
  Val x74 = x69[4]._super;
  Val x75 = x69[5]._super;
  Val x76 = x69[6]._super;
  Val x77 = x69[7]._super;
  Val x78 = x69[8]._super;
  Val x79 = x69[9]._super;
  Val x80 = x69[10]._super;
  Val x81 = x69[11]._super;
  Val x82 = x69[12]._super;
  Val x83 = x69[13]._super;
  Val x84 = x69[14]._super;
  Val x85 = x69[15]._super;
  Val x86 = x69[16]._super;
  Val x87 = x69[17]._super;
  Val x88 = x69[18]._super;
  Val x89 = x69[19]._super;
  Val x90 = x69[20]._super;
  Val x91 = x69[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x92 = (((x70 + (x71 * Val(2))) + (x72 * Val(4))) + (x73 * Val(8)));
  Val x93 = (((x92 + (x74 * Val(16))) + (x75 * Val(32))) + (x76 * Val(64)));
  Val x94 = (((x93 + (x77 * Val(128))) + (x78 * Val(256))) + (x79 * Val(512)));
  Val x95 = (((x94 + (x80 * Val(1024))) + (x81 * Val(2048))) + (x82 * Val(4096)));
  Val x96 = (((x95 + (x83 * Val(8192))) + (x84 * Val(16384))) + (x85 * Val(32768)));
  Val x97 = (((x96 + (x86 * Val(65536))) + (x87 * Val(131072))) + (x88 * Val(262144)));
  Val x98 = (((x97 + (x89 * Val(524288))) + (x90 * Val(1048576))) + (x91 * Val(2097152)));
  EQZ((x98 - x67), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x99 = x66[17]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x100 = exec_ToBits_21_(ctx, x99, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x101 = x100._super;
  Val x102 = x101[0]._super;
  Val x103 = x101[1]._super;
  Val x104 = x101[2]._super;
  Val x105 = x101[3]._super;
  Val x106 = x101[4]._super;
  Val x107 = x101[5]._super;
  Val x108 = x101[6]._super;
  Val x109 = x101[7]._super;
  Val x110 = x101[8]._super;
  Val x111 = x101[9]._super;
  Val x112 = x101[10]._super;
  Val x113 = x101[11]._super;
  Val x114 = x101[12]._super;
  Val x115 = x101[13]._super;
  Val x116 = x101[14]._super;
  Val x117 = x101[15]._super;
  Val x118 = x101[16]._super;
  Val x119 = x101[17]._super;
  Val x120 = x101[18]._super;
  Val x121 = x101[19]._super;
  Val x122 = x101[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x123 = (((x102 + (x103 * Val(2))) + (x104 * Val(4))) + (x105 * Val(8)));
  Val x124 = (((x123 + (x106 * Val(16))) + (x107 * Val(32))) + (x108 * Val(64)));
  Val x125 = (((x124 + (x109 * Val(128))) + (x110 * Val(256))) + (x111 * Val(512)));
  Val x126 = (((x125 + (x112 * Val(1024))) + (x113 * Val(2048))) + (x114 * Val(4096)));
  Val x127 = (((x126 + (x115 * Val(8192))) + (x116 * Val(16384))) + (x117 * Val(32768)));
  Val x128 = (((x127 + (x118 * Val(65536))) + (x119 * Val(131072))) + (x120 * Val(262144)));
  Val x129 = (((x128 + (x121 * Val(524288))) + (x122 * Val(1048576))) - x99);
  EQZ(x129, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x130 = x2[3]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x131 = exec_ToBits_22_(ctx, x130, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x132 = x131._super;
  Val x133 = x132[0]._super;
  Val x134 = x132[1]._super;
  Val x135 = x132[2]._super;
  Val x136 = x132[3]._super;
  Val x137 = x132[4]._super;
  Val x138 = x132[5]._super;
  Val x139 = x132[6]._super;
  Val x140 = x132[7]._super;
  Val x141 = x132[8]._super;
  Val x142 = x132[9]._super;
  Val x143 = x132[10]._super;
  Val x144 = x132[11]._super;
  Val x145 = x132[12]._super;
  Val x146 = x132[13]._super;
  Val x147 = x132[14]._super;
  Val x148 = x132[15]._super;
  Val x149 = x132[16]._super;
  Val x150 = x132[17]._super;
  Val x151 = x132[18]._super;
  Val x152 = x132[19]._super;
  Val x153 = x132[20]._super;
  Val x154 = x132[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x155 = (x134 * Val(2));
  Val x156 = (((x133 + x155) + (x135 * Val(4))) + (x136 * Val(8)));
  Val x157 = (((x156 + (x137 * Val(16))) + (x138 * Val(32))) + (x139 * Val(64)));
  Val x158 = (((x157 + (x140 * Val(128))) + (x141 * Val(256))) + (x142 * Val(512)));
  Val x159 = (((x158 + (x143 * Val(1024))) + (x144 * Val(2048))) + (x145 * Val(4096)));
  Val x160 = (((x159 + (x146 * Val(8192))) + (x147 * Val(16384))) + (x148 * Val(32768)));
  Val x161 = (((x160 + (x149 * Val(65536))) + (x150 * Val(131072))) + (x151 * Val(262144)));
  Val x162 = (((x161 + (x152 * Val(524288))) + (x153 * Val(1048576))) + (x154 * Val(2097152)));
  EQZ((x162 - x130), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x163 = x2[4]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x164 = exec_ToBits_21_(ctx, x163, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x165 = x164._super;
  Val x166 = x165[0]._super;
  Val x167 = x165[1]._super;
  Val x168 = x165[2]._super;
  Val x169 = x165[3]._super;
  Val x170 = x165[4]._super;
  Val x171 = x165[5]._super;
  Val x172 = x165[6]._super;
  Val x173 = x165[7]._super;
  Val x174 = x165[8]._super;
  Val x175 = x165[9]._super;
  Val x176 = x165[10]._super;
  Val x177 = x165[11]._super;
  Val x178 = x165[12]._super;
  Val x179 = x165[13]._super;
  Val x180 = x165[14]._super;
  Val x181 = x165[15]._super;
  Val x182 = x165[16]._super;
  Val x183 = x165[17]._super;
  Val x184 = x165[18]._super;
  Val x185 = x165[19]._super;
  Val x186 = x165[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x187 = (x167 * Val(2));
  Val x188 = (((x166 + x187) + (x168 * Val(4))) + (x169 * Val(8)));
  Val x189 = (((x188 + (x170 * Val(16))) + (x171 * Val(32))) + (x172 * Val(64)));
  Val x190 = (((x189 + (x173 * Val(128))) + (x174 * Val(256))) + (x175 * Val(512)));
  Val x191 = (((x190 + (x176 * Val(1024))) + (x177 * Val(2048))) + (x178 * Val(4096)));
  Val x192 = (((x191 + (x179 * Val(8192))) + (x180 * Val(16384))) + (x181 * Val(32768)));
  Val x193 = (((x192 + (x182 * Val(65536))) + (x183 * Val(131072))) + (x184 * Val(262144)));
  Val x194 = (((x193 + (x185 * Val(524288))) + (x186 * Val(1048576))) - x163);
  EQZ(x194, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x195 = ((Val(1) - x6) * x70);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x196 = ((x133 + x195) - ((x133 * Val(2)) * x195));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x197 = ((Val(1) - x7) * x71);
  Val x198 = ((Val(1) - x8) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x199 = ((x135 + x198) - ((x135 * Val(2)) * x198));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x200 = ((Val(1) - x9) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x201 = ((x136 + x200) - ((x136 * Val(2)) * x200));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x202 = ((Val(1) - x10) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x203 = ((x137 + x202) - ((x137 * Val(2)) * x202));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x204 = ((Val(1) - x11) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x205 = ((x138 + x204) - ((x138 * Val(2)) * x204));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x206 = ((Val(1) - x12) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x207 = ((x139 + x206) - ((x139 * Val(2)) * x206));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x208 = ((Val(1) - x13) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x209 = ((x140 + x208) - ((x140 * Val(2)) * x208));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x210 = ((Val(1) - x14) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x211 = ((x141 + x210) - ((x141 * Val(2)) * x210));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x212 = ((Val(1) - x15) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x213 = ((x142 + x212) - ((x142 * Val(2)) * x212));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x214 = ((Val(1) - x16) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x215 = ((x143 + x214) - ((x143 * Val(2)) * x214));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x216 = ((Val(1) - x17) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x217 = ((x144 + x216) - ((x144 * Val(2)) * x216));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x218 = ((Val(1) - x18) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x219 = ((x145 + x218) - ((x145 * Val(2)) * x218));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x220 = ((Val(1) - x19) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x221 = ((x146 + x220) - ((x146 * Val(2)) * x220));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x222 = ((Val(1) - x20) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x223 = ((x147 + x222) - ((x147 * Val(2)) * x222));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x224 = ((Val(1) - x21) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x225 = ((x148 + x224) - ((x148 * Val(2)) * x224));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x226 = ((Val(1) - x22) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x227 = ((x149 + x226) - ((x149 * Val(2)) * x226));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x228 = ((Val(1) - x23) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x229 = ((x150 + x228) - ((x150 * Val(2)) * x228));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x230 = ((Val(1) - x24) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x231 = ((x151 + x230) - ((x151 * Val(2)) * x230));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x232 = ((Val(1) - x25) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x233 = ((x152 + x232) - ((x152 * Val(2)) * x232));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x234 = ((Val(1) - x26) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x235 = ((x153 + x234) - ((x153 * Val(2)) * x234));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x236 = ((Val(1) - x27) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x237 = ((x154 + x236) - ((x154 * Val(2)) * x236));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x238 = ((Val(1) - x38) * x102);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x239 = ((x166 + x238) - ((x166 * Val(2)) * x238));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x240 = ((Val(1) - x39) * x103);
  Val x241 = ((Val(1) - x40) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x242 = ((x168 + x241) - ((x168 * Val(2)) * x241));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x243 = ((Val(1) - x41) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x244 = ((x169 + x243) - ((x169 * Val(2)) * x243));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x245 = ((Val(1) - x42) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x246 = ((x170 + x245) - ((x170 * Val(2)) * x245));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x247 = ((Val(1) - x43) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x171 + x247) - ((x171 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x44) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x172 + x249) - ((x172 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x45) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x173 + x251) - ((x173 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x46) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x174 + x253) - ((x174 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x47) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x175 + x255) - ((x175 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x48) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x176 + x257) - ((x176 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x49) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x177 + x259) - ((x177 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x50) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x178 + x261) - ((x178 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x51) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x179 + x263) - ((x179 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x52) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x180 + x265) - ((x180 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x53) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x181 + x267) - ((x181 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x54) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x182 + x269) - ((x182 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x55) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x183 + x271) - ((x183 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x56) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x184 + x273) - ((x184 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x57) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x185 + x275) - ((x185 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x58) * x122);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x186 + x277) - ((x186 * Val(2)) * x277));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x279 = (((x134 + x197) - (x155 * x197)) * Val(2));
  Val x280 = (((x196 + x279) + (x199 * Val(4))) + (x201 * Val(8)));
  Val x281 = (((x280 + (x203 * Val(16))) + (x205 * Val(32))) + (x207 * Val(64)));
  Val x282 = (((x281 + (x209 * Val(128))) + (x211 * Val(256))) + (x213 * Val(512)));
  Val x283 = (((x282 + (x215 * Val(1024))) + (x217 * Val(2048))) + (x219 * Val(4096)));
  Val x284 = (((x283 + (x221 * Val(8192))) + (x223 * Val(16384))) + (x225 * Val(32768)));
  Val x285 = (((x284 + (x227 * Val(65536))) + (x229 * Val(131072))) + (x231 * Val(262144)));
  Val x286 = (((x285 + (x233 * Val(524288))) + (x235 * Val(1048576))) + (x237 * Val(2097152)));
  NondetRegStruct x287 = exec_Reg(ctx, x286, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x288 = (((x167 + x240) - (x187 * x240)) * Val(2));
  Val x289 = (((x239 + x288) + (x242 * Val(4))) + (x244 * Val(8)));
  Val x290 = (((x289 + (x246 * Val(16))) + (x248 * Val(32))) + (x250 * Val(64)));
  Val x291 = (((x290 + (x252 * Val(128))) + (x254 * Val(256))) + (x256 * Val(512)));
  Val x292 = (((x291 + (x258 * Val(1024))) + (x260 * Val(2048))) + (x262 * Val(4096)));
  Val x293 = (((x292 + (x264 * Val(8192))) + (x266 * Val(16384))) + (x268 * Val(32768)));
  Val x294 = (((x293 + (x270 * Val(65536))) + (x272 * Val(131072))) + (x274 * Val(262144)));
  NondetRegStruct x295 = exec_Reg(
      ctx, ((x294 + (x276 * Val(524288))) + (x278 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x296 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x297 = exec_RetTuple(
      ctx,
      x296,
      x296,
      x296,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x287._super, x295._super},
      x296,
      x296,
      Val(6),
      Val(14),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x297;
}
RetTupleStruct execChiMinor0_4__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<ChiMinor0_4__4_Layout> layout1) {
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct22Array x2 = arg0.arrC;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:546)
  Val x3 = x2[16]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:554)
  ToBits_22_Struct x4 = exec_ToBits_22_(ctx, x3, LAYOUT_LOOKUP(layout1, unpack_0xp1));
  NondetRegStruct22Array x5 = x4._super;
  Val x6 = x5[0]._super;
  Val x7 = x5[1]._super;
  Val x8 = x5[2]._super;
  Val x9 = x5[3]._super;
  Val x10 = x5[4]._super;
  Val x11 = x5[5]._super;
  Val x12 = x5[6]._super;
  Val x13 = x5[7]._super;
  Val x14 = x5[8]._super;
  Val x15 = x5[9]._super;
  Val x16 = x5[10]._super;
  Val x17 = x5[11]._super;
  Val x18 = x5[12]._super;
  Val x19 = x5[13]._super;
  Val x20 = x5[14]._super;
  Val x21 = x5[15]._super;
  Val x22 = x5[16]._super;
  Val x23 = x5[17]._super;
  Val x24 = x5[18]._super;
  Val x25 = x5[19]._super;
  Val x26 = x5[20]._super;
  Val x27 = x5[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:555)
  Val x28 = (((x6 + (x7 * Val(2))) + (x8 * Val(4))) + (x9 * Val(8)));
  Val x29 = (((x28 + (x10 * Val(16))) + (x11 * Val(32))) + (x12 * Val(64)));
  Val x30 = (((x29 + (x13 * Val(128))) + (x14 * Val(256))) + (x15 * Val(512)));
  Val x31 = (((x30 + (x16 * Val(1024))) + (x17 * Val(2048))) + (x18 * Val(4096)));
  Val x32 = (((x31 + (x19 * Val(8192))) + (x20 * Val(16384))) + (x21 * Val(32768)));
  Val x33 = (((x32 + (x22 * Val(65536))) + (x23 * Val(131072))) + (x24 * Val(262144)));
  Val x34 = (((x33 + (x25 * Val(524288))) + (x26 * Val(1048576))) + (x27 * Val(2097152)));
  EQZ((x34 - x3), "chi_minor0(zirgen/circuit/keccak/keccak.zir:555)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:559)
  Val x35 = x2[17]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:567)
  ToBits_21_Struct x36 = exec_ToBits_21_(ctx, x35, LAYOUT_LOOKUP(layout1, unpack_1xp1));
  NondetRegStruct21Array x37 = x36._super;
  Val x38 = x37[0]._super;
  Val x39 = x37[1]._super;
  Val x40 = x37[2]._super;
  Val x41 = x37[3]._super;
  Val x42 = x37[4]._super;
  Val x43 = x37[5]._super;
  Val x44 = x37[6]._super;
  Val x45 = x37[7]._super;
  Val x46 = x37[8]._super;
  Val x47 = x37[9]._super;
  Val x48 = x37[10]._super;
  Val x49 = x37[11]._super;
  Val x50 = x37[12]._super;
  Val x51 = x37[13]._super;
  Val x52 = x37[14]._super;
  Val x53 = x37[15]._super;
  Val x54 = x37[16]._super;
  Val x55 = x37[17]._super;
  Val x56 = x37[18]._super;
  Val x57 = x37[19]._super;
  Val x58 = x37[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:568)
  Val x59 = (((x38 + (x39 * Val(2))) + (x40 * Val(4))) + (x41 * Val(8)));
  Val x60 = (((x59 + (x42 * Val(16))) + (x43 * Val(32))) + (x44 * Val(64)));
  Val x61 = (((x60 + (x45 * Val(128))) + (x46 * Val(256))) + (x47 * Val(512)));
  Val x62 = (((x61 + (x48 * Val(1024))) + (x49 * Val(2048))) + (x50 * Val(4096)));
  Val x63 = (((x62 + (x51 * Val(8192))) + (x52 * Val(16384))) + (x53 * Val(32768)));
  Val x64 = (((x63 + (x54 * Val(65536))) + (x55 * Val(131072))) + (x56 * Val(262144)));
  Val x65 = (((x64 + (x57 * Val(524288))) + (x58 * Val(1048576))) - x35);
  EQZ(x65, "chi_minor0(zirgen/circuit/keccak/keccak.zir:568)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:573)
  Val x66 = x2[19]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:581)
  ToBits_22_Struct x67 = exec_ToBits_22_(ctx, x66, LAYOUT_LOOKUP(layout1, unpack_0xp2));
  NondetRegStruct22Array x68 = x67._super;
  Val x69 = x68[0]._super;
  Val x70 = x68[1]._super;
  Val x71 = x68[2]._super;
  Val x72 = x68[3]._super;
  Val x73 = x68[4]._super;
  Val x74 = x68[5]._super;
  Val x75 = x68[6]._super;
  Val x76 = x68[7]._super;
  Val x77 = x68[8]._super;
  Val x78 = x68[9]._super;
  Val x79 = x68[10]._super;
  Val x80 = x68[11]._super;
  Val x81 = x68[12]._super;
  Val x82 = x68[13]._super;
  Val x83 = x68[14]._super;
  Val x84 = x68[15]._super;
  Val x85 = x68[16]._super;
  Val x86 = x68[17]._super;
  Val x87 = x68[18]._super;
  Val x88 = x68[19]._super;
  Val x89 = x68[20]._super;
  Val x90 = x68[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:582)
  Val x91 = (((x69 + (x70 * Val(2))) + (x71 * Val(4))) + (x72 * Val(8)));
  Val x92 = (((x91 + (x73 * Val(16))) + (x74 * Val(32))) + (x75 * Val(64)));
  Val x93 = (((x92 + (x76 * Val(128))) + (x77 * Val(256))) + (x78 * Val(512)));
  Val x94 = (((x93 + (x79 * Val(1024))) + (x80 * Val(2048))) + (x81 * Val(4096)));
  Val x95 = (((x94 + (x82 * Val(8192))) + (x83 * Val(16384))) + (x84 * Val(32768)));
  Val x96 = (((x95 + (x85 * Val(65536))) + (x86 * Val(131072))) + (x87 * Val(262144)));
  Val x97 = (((x96 + (x88 * Val(524288))) + (x89 * Val(1048576))) + (x90 * Val(2097152)));
  EQZ((x97 - x66), "chi_minor0(zirgen/circuit/keccak/keccak.zir:582)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:586)
  Val x98 = x2[20]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:594)
  ToBits_21_Struct x99 = exec_ToBits_21_(ctx, x98, LAYOUT_LOOKUP(layout1, unpack_1xp2));
  NondetRegStruct21Array x100 = x99._super;
  Val x101 = x100[0]._super;
  Val x102 = x100[1]._super;
  Val x103 = x100[2]._super;
  Val x104 = x100[3]._super;
  Val x105 = x100[4]._super;
  Val x106 = x100[5]._super;
  Val x107 = x100[6]._super;
  Val x108 = x100[7]._super;
  Val x109 = x100[8]._super;
  Val x110 = x100[9]._super;
  Val x111 = x100[10]._super;
  Val x112 = x100[11]._super;
  Val x113 = x100[12]._super;
  Val x114 = x100[13]._super;
  Val x115 = x100[14]._super;
  Val x116 = x100[15]._super;
  Val x117 = x100[16]._super;
  Val x118 = x100[17]._super;
  Val x119 = x100[18]._super;
  Val x120 = x100[19]._super;
  Val x121 = x100[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:595)
  Val x122 = (((x101 + (x102 * Val(2))) + (x103 * Val(4))) + (x104 * Val(8)));
  Val x123 = (((x122 + (x105 * Val(16))) + (x106 * Val(32))) + (x107 * Val(64)));
  Val x124 = (((x123 + (x108 * Val(128))) + (x109 * Val(256))) + (x110 * Val(512)));
  Val x125 = (((x124 + (x111 * Val(1024))) + (x112 * Val(2048))) + (x113 * Val(4096)));
  Val x126 = (((x125 + (x114 * Val(8192))) + (x115 * Val(16384))) + (x116 * Val(32768)));
  Val x127 = (((x126 + (x117 * Val(65536))) + (x118 * Val(131072))) + (x119 * Val(262144)));
  Val x128 = (((x127 + (x120 * Val(524288))) + (x121 * Val(1048576))) - x98);
  EQZ(x128, "chi_minor0(zirgen/circuit/keccak/keccak.zir:595)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:542)
  NondetRegStruct24Array x129 = arg0.arrD;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:599)
  Val x130 = x129[6]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:607)
  ToBits_22_Struct x131 = exec_ToBits_22_(ctx, x130, LAYOUT_LOOKUP(layout1, unpack_0x));
  NondetRegStruct22Array x132 = x131._super;
  Val x133 = x132[0]._super;
  Val x134 = x132[1]._super;
  Val x135 = x132[2]._super;
  Val x136 = x132[3]._super;
  Val x137 = x132[4]._super;
  Val x138 = x132[5]._super;
  Val x139 = x132[6]._super;
  Val x140 = x132[7]._super;
  Val x141 = x132[8]._super;
  Val x142 = x132[9]._super;
  Val x143 = x132[10]._super;
  Val x144 = x132[11]._super;
  Val x145 = x132[12]._super;
  Val x146 = x132[13]._super;
  Val x147 = x132[14]._super;
  Val x148 = x132[15]._super;
  Val x149 = x132[16]._super;
  Val x150 = x132[17]._super;
  Val x151 = x132[18]._super;
  Val x152 = x132[19]._super;
  Val x153 = x132[20]._super;
  Val x154 = x132[21]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:608)
  Val x155 = (x134 * Val(2));
  Val x156 = (((x133 + x155) + (x135 * Val(4))) + (x136 * Val(8)));
  Val x157 = (((x156 + (x137 * Val(16))) + (x138 * Val(32))) + (x139 * Val(64)));
  Val x158 = (((x157 + (x140 * Val(128))) + (x141 * Val(256))) + (x142 * Val(512)));
  Val x159 = (((x158 + (x143 * Val(1024))) + (x144 * Val(2048))) + (x145 * Val(4096)));
  Val x160 = (((x159 + (x146 * Val(8192))) + (x147 * Val(16384))) + (x148 * Val(32768)));
  Val x161 = (((x160 + (x149 * Val(65536))) + (x150 * Val(131072))) + (x151 * Val(262144)));
  Val x162 = (((x161 + (x152 * Val(524288))) + (x153 * Val(1048576))) + (x154 * Val(2097152)));
  EQZ((x162 - x130), "chi_minor0(zirgen/circuit/keccak/keccak.zir:608)");
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:612)
  Val x163 = x129[7]._super;
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:620)
  ToBits_21_Struct x164 = exec_ToBits_21_(ctx, x163, LAYOUT_LOOKUP(layout1, unpack_1x));
  NondetRegStruct21Array x165 = x164._super;
  Val x166 = x165[0]._super;
  Val x167 = x165[1]._super;
  Val x168 = x165[2]._super;
  Val x169 = x165[3]._super;
  Val x170 = x165[4]._super;
  Val x171 = x165[5]._super;
  Val x172 = x165[6]._super;
  Val x173 = x165[7]._super;
  Val x174 = x165[8]._super;
  Val x175 = x165[9]._super;
  Val x176 = x165[10]._super;
  Val x177 = x165[11]._super;
  Val x178 = x165[12]._super;
  Val x179 = x165[13]._super;
  Val x180 = x165[14]._super;
  Val x181 = x165[15]._super;
  Val x182 = x165[16]._super;
  Val x183 = x165[17]._super;
  Val x184 = x165[18]._super;
  Val x185 = x165[19]._super;
  Val x186 = x165[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:621)
  Val x187 = (x167 * Val(2));
  Val x188 = (((x166 + x187) + (x168 * Val(4))) + (x169 * Val(8)));
  Val x189 = (((x188 + (x170 * Val(16))) + (x171 * Val(32))) + (x172 * Val(64)));
  Val x190 = (((x189 + (x173 * Val(128))) + (x174 * Val(256))) + (x175 * Val(512)));
  Val x191 = (((x190 + (x176 * Val(1024))) + (x177 * Val(2048))) + (x178 * Val(4096)));
  Val x192 = (((x191 + (x179 * Val(8192))) + (x180 * Val(16384))) + (x181 * Val(32768)));
  Val x193 = (((x192 + (x182 * Val(65536))) + (x183 * Val(131072))) + (x184 * Val(262144)));
  Val x194 = (((x193 + (x185 * Val(524288))) + (x186 * Val(1048576))) - x163);
  EQZ(x194, "chi_minor0(zirgen/circuit/keccak/keccak.zir:621)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:623)
  Val x195 = ((Val(1) - x6) * x69);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x196 = ((x133 + x195) - ((x133 * Val(2)) * x195));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x197 = ((Val(1) - x7) * x70);
  Val x198 = ((Val(1) - x8) * x71);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x199 = ((x135 + x198) - ((x135 * Val(2)) * x198));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x200 = ((Val(1) - x9) * x72);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x201 = ((x136 + x200) - ((x136 * Val(2)) * x200));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x202 = ((Val(1) - x10) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x203 = ((x137 + x202) - ((x137 * Val(2)) * x202));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x204 = ((Val(1) - x11) * x74);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x205 = ((x138 + x204) - ((x138 * Val(2)) * x204));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x206 = ((Val(1) - x12) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x207 = ((x139 + x206) - ((x139 * Val(2)) * x206));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x208 = ((Val(1) - x13) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x209 = ((x140 + x208) - ((x140 * Val(2)) * x208));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x210 = ((Val(1) - x14) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x211 = ((x141 + x210) - ((x141 * Val(2)) * x210));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x212 = ((Val(1) - x15) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x213 = ((x142 + x212) - ((x142 * Val(2)) * x212));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x214 = ((Val(1) - x16) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x215 = ((x143 + x214) - ((x143 * Val(2)) * x214));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x216 = ((Val(1) - x17) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x217 = ((x144 + x216) - ((x144 * Val(2)) * x216));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x218 = ((Val(1) - x18) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x219 = ((x145 + x218) - ((x145 * Val(2)) * x218));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x220 = ((Val(1) - x19) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x221 = ((x146 + x220) - ((x146 * Val(2)) * x220));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x222 = ((Val(1) - x20) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x223 = ((x147 + x222) - ((x147 * Val(2)) * x222));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x224 = ((Val(1) - x21) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x225 = ((x148 + x224) - ((x148 * Val(2)) * x224));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x226 = ((Val(1) - x22) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x227 = ((x149 + x226) - ((x149 * Val(2)) * x226));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x228 = ((Val(1) - x23) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x229 = ((x150 + x228) - ((x150 * Val(2)) * x228));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x230 = ((Val(1) - x24) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x231 = ((x151 + x230) - ((x151 * Val(2)) * x230));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x232 = ((Val(1) - x25) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x233 = ((x152 + x232) - ((x152 * Val(2)) * x232));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x234 = ((Val(1) - x26) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x235 = ((x153 + x234) - ((x153 * Val(2)) * x234));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x236 = ((Val(1) - x27) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x237 = ((x154 + x236) - ((x154 * Val(2)) * x236));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:624)
  Val x238 = ((Val(1) - x38) * x101);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x239 = ((x166 + x238) - ((x166 * Val(2)) * x238));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x240 = ((Val(1) - x39) * x102);
  Val x241 = ((Val(1) - x40) * x103);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x242 = ((x168 + x241) - ((x168 * Val(2)) * x241));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x243 = ((Val(1) - x41) * x104);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x244 = ((x169 + x243) - ((x169 * Val(2)) * x243));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x245 = ((Val(1) - x42) * x105);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x246 = ((x170 + x245) - ((x170 * Val(2)) * x245));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x247 = ((Val(1) - x43) * x106);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x248 = ((x171 + x247) - ((x171 * Val(2)) * x247));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x249 = ((Val(1) - x44) * x107);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x250 = ((x172 + x249) - ((x172 * Val(2)) * x249));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x251 = ((Val(1) - x45) * x108);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x252 = ((x173 + x251) - ((x173 * Val(2)) * x251));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x253 = ((Val(1) - x46) * x109);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x254 = ((x174 + x253) - ((x174 * Val(2)) * x253));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x255 = ((Val(1) - x47) * x110);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x256 = ((x175 + x255) - ((x175 * Val(2)) * x255));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x257 = ((Val(1) - x48) * x111);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x258 = ((x176 + x257) - ((x176 * Val(2)) * x257));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x259 = ((Val(1) - x49) * x112);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x260 = ((x177 + x259) - ((x177 * Val(2)) * x259));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x261 = ((Val(1) - x50) * x113);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x262 = ((x178 + x261) - ((x178 * Val(2)) * x261));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x263 = ((Val(1) - x51) * x114);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x264 = ((x179 + x263) - ((x179 * Val(2)) * x263));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x265 = ((Val(1) - x52) * x115);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x266 = ((x180 + x265) - ((x180 * Val(2)) * x265));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x267 = ((Val(1) - x53) * x116);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x268 = ((x181 + x267) - ((x181 * Val(2)) * x267));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x269 = ((Val(1) - x54) * x117);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x270 = ((x182 + x269) - ((x182 * Val(2)) * x269));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x271 = ((Val(1) - x55) * x118);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x272 = ((x183 + x271) - ((x183 * Val(2)) * x271));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x273 = ((Val(1) - x56) * x119);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x274 = ((x184 + x273) - ((x184 * Val(2)) * x273));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x275 = ((Val(1) - x57) * x120);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x276 = ((x185 + x275) - ((x185 * Val(2)) * x275));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x277 = ((Val(1) - x58) * x121);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x278 = ((x186 + x277) - ((x186 * Val(2)) * x277));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:625)
  Val x279 = (((x134 + x197) - (x155 * x197)) * Val(2));
  Val x280 = (((x196 + x279) + (x199 * Val(4))) + (x201 * Val(8)));
  Val x281 = (((x280 + (x203 * Val(16))) + (x205 * Val(32))) + (x207 * Val(64)));
  Val x282 = (((x281 + (x209 * Val(128))) + (x211 * Val(256))) + (x213 * Val(512)));
  Val x283 = (((x282 + (x215 * Val(1024))) + (x217 * Val(2048))) + (x219 * Val(4096)));
  Val x284 = (((x283 + (x221 * Val(8192))) + (x223 * Val(16384))) + (x225 * Val(32768)));
  Val x285 = (((x284 + (x227 * Val(65536))) + (x229 * Val(131072))) + (x231 * Val(262144)));
  Val x286 = (((x285 + (x233 * Val(524288))) + (x235 * Val(1048576))) + (x237 * Val(2097152)));
  NondetRegStruct x287 = exec_Reg(ctx, x286, LAYOUT_LOOKUP(layout1, _0));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  Val x288 = (((x167 + x240) - (x187 * x240)) * Val(2));
  Val x289 = (((x239 + x288) + (x242 * Val(4))) + (x244 * Val(8)));
  Val x290 = (((x289 + (x246 * Val(16))) + (x248 * Val(32))) + (x250 * Val(64)));
  Val x291 = (((x290 + (x252 * Val(128))) + (x254 * Val(256))) + (x256 * Val(512)));
  Val x292 = (((x291 + (x258 * Val(1024))) + (x260 * Val(2048))) + (x262 * Val(4096)));
  Val x293 = (((x292 + (x264 * Val(8192))) + (x266 * Val(16384))) + (x268 * Val(32768)));
  Val x294 = (((x293 + (x270 * Val(65536))) + (x272 * Val(131072))) + (x274 * Val(262144)));
  NondetRegStruct x295 = exec_Reg(
      ctx, ((x294 + (x276 * Val(524288))) + (x278 * Val(1048576))), LAYOUT_LOOKUP(layout1, _1));
  // chi_minor0(zirgen/circuit/keccak/keccak.zir:630)
  Val22Array x296 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x297 = exec_RetTuple(
      ctx,
      x296,
      x296,
      x296,
      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),      Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), x287._super, x295._super},
      x296,
      x296,
      Val(7),
      Val(14),
      arg0.rnd._super,
      arg0.blk._super,
      arg0.midx._super,
      LAYOUT_LOOKUP(layout1, _super));
  return x297;
}
RetTupleStruct execChiMinor1_4__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<ChiMinor1_4__4_Layout> layout2) {
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  BoundLayout<ChiMinor1_4__4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  RetTupleStruct x4 = back_RetTuple(ctx, 8, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  RetTupleStruct x5 = back_RetTuple(ctx, 1, arg1);
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:640)
  Val x6 = x4.arrD[8]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:648)
  ToBits_21_Struct x7 = exec_ToBits_21_(ctx, x6, LAYOUT_LOOKUP(layout2, unpack_2x));
  NondetRegStruct21Array x8 = x7._super;
  Val x9 = x8[0]._super;
  Val x10 = x8[1]._super;
  Val x11 = x8[2]._super;
  Val x12 = x8[3]._super;
  Val x13 = x8[4]._super;
  Val x14 = x8[5]._super;
  Val x15 = x8[6]._super;
  Val x16 = x8[7]._super;
  Val x17 = x8[8]._super;
  Val x18 = x8[9]._super;
  Val x19 = x8[10]._super;
  Val x20 = x8[11]._super;
  Val x21 = x8[12]._super;
  Val x22 = x8[13]._super;
  Val x23 = x8[14]._super;
  Val x24 = x8[15]._super;
  Val x25 = x8[16]._super;
  Val x26 = x8[17]._super;
  Val x27 = x8[18]._super;
  Val x28 = x8[19]._super;
  Val x29 = x8[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:649)
  Val x30 = (x10 * Val(2));
  Val x31 = (((x9 + x30) + (x11 * Val(4))) + (x12 * Val(8)));
  Val x32 = (((x31 + (x13 * Val(16))) + (x14 * Val(32))) + (x15 * Val(64)));
  Val x33 = (((x32 + (x16 * Val(128))) + (x17 * Val(256))) + (x18 * Val(512)));
  Val x34 = (((x33 + (x19 * Val(1024))) + (x20 * Val(2048))) + (x21 * Val(4096)));
  Val x35 = (((x34 + (x22 * Val(8192))) + (x23 * Val(16384))) + (x24 * Val(32768)));
  Val x36 = (((x35 + (x25 * Val(65536))) + (x26 * Val(131072))) + (x27 * Val(262144)));
  Val x37 = (((x36 + (x28 * Val(524288))) + (x29 * Val(1048576))) - x6);
  EQZ(x37, "chi_minor1(zirgen/circuit/keccak/keccak.zir:649)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:635)
  NondetRegStruct22Array x38 = x4.arrC;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:654)
  Val x39 = x38[18]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:662)
  ToBits_21_Struct x40 = exec_ToBits_21_(ctx, x39, LAYOUT_LOOKUP(layout2, unpack_2xp1));
  NondetRegStruct21Array x41 = x40._super;
  Val x42 = x41[0]._super;
  Val x43 = x41[1]._super;
  Val x44 = x41[2]._super;
  Val x45 = x41[3]._super;
  Val x46 = x41[4]._super;
  Val x47 = x41[5]._super;
  Val x48 = x41[6]._super;
  Val x49 = x41[7]._super;
  Val x50 = x41[8]._super;
  Val x51 = x41[9]._super;
  Val x52 = x41[10]._super;
  Val x53 = x41[11]._super;
  Val x54 = x41[12]._super;
  Val x55 = x41[13]._super;
  Val x56 = x41[14]._super;
  Val x57 = x41[15]._super;
  Val x58 = x41[16]._super;
  Val x59 = x41[17]._super;
  Val x60 = x41[18]._super;
  Val x61 = x41[19]._super;
  Val x62 = x41[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:663)
  Val x63 = (((x42 + (x43 * Val(2))) + (x44 * Val(4))) + (x45 * Val(8)));
  Val x64 = (((x63 + (x46 * Val(16))) + (x47 * Val(32))) + (x48 * Val(64)));
  Val x65 = (((x64 + (x49 * Val(128))) + (x50 * Val(256))) + (x51 * Val(512)));
  Val x66 = (((x65 + (x52 * Val(1024))) + (x53 * Val(2048))) + (x54 * Val(4096)));
  Val x67 = (((x66 + (x55 * Val(8192))) + (x56 * Val(16384))) + (x57 * Val(32768)));
  Val x68 = (((x67 + (x58 * Val(65536))) + (x59 * Val(131072))) + (x60 * Val(262144)));
  Val x69 = (((x68 + (x61 * Val(524288))) + (x62 * Val(1048576))) - x39);
  EQZ(x69, "chi_minor1(zirgen/circuit/keccak/keccak.zir:663)");
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:667)
  Val x70 = x38[21]._super;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:675)
  ToBits_21_Struct x71 = exec_ToBits_21_(ctx, x70, LAYOUT_LOOKUP(layout2, unpack_2xp2));
  NondetRegStruct21Array x72 = x71._super;
  Val x73 = x72[0]._super;
  Val x74 = x72[1]._super;
  Val x75 = x72[2]._super;
  Val x76 = x72[3]._super;
  Val x77 = x72[4]._super;
  Val x78 = x72[5]._super;
  Val x79 = x72[6]._super;
  Val x80 = x72[7]._super;
  Val x81 = x72[8]._super;
  Val x82 = x72[9]._super;
  Val x83 = x72[10]._super;
  Val x84 = x72[11]._super;
  Val x85 = x72[12]._super;
  Val x86 = x72[13]._super;
  Val x87 = x72[14]._super;
  Val x88 = x72[15]._super;
  Val x89 = x72[16]._super;
  Val x90 = x72[17]._super;
  Val x91 = x72[18]._super;
  Val x92 = x72[19]._super;
  Val x93 = x72[20]._super;
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:676)
  Val x94 = (((x73 + (x74 * Val(2))) + (x75 * Val(4))) + (x76 * Val(8)));
  Val x95 = (((x94 + (x77 * Val(16))) + (x78 * Val(32))) + (x79 * Val(64)));
  Val x96 = (((x95 + (x80 * Val(128))) + (x81 * Val(256))) + (x82 * Val(512)));
  Val x97 = (((x96 + (x83 * Val(1024))) + (x84 * Val(2048))) + (x85 * Val(4096)));
  Val x98 = (((x97 + (x86 * Val(8192))) + (x87 * Val(16384))) + (x88 * Val(32768)));
  Val x99 = (((x98 + (x89 * Val(65536))) + (x90 * Val(131072))) + (x91 * Val(262144)));
  Val x100 = (((x99 + (x92 * Val(524288))) + (x93 * Val(1048576))) - x70);
  EQZ(x100, "chi_minor1(zirgen/circuit/keccak/keccak.zir:676)");
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:678)
  Val x101 = ((Val(1) - x42) * x73);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x102 = ((x9 + x101) - ((x9 * Val(2)) * x101));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x103 = ((Val(1) - x43) * x74);
  Val x104 = ((Val(1) - x44) * x75);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x105 = ((x11 + x104) - ((x11 * Val(2)) * x104));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x106 = ((Val(1) - x45) * x76);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x107 = ((x12 + x106) - ((x12 * Val(2)) * x106));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x108 = ((Val(1) - x46) * x77);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x109 = ((x13 + x108) - ((x13 * Val(2)) * x108));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x110 = ((Val(1) - x47) * x78);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x111 = ((x14 + x110) - ((x14 * Val(2)) * x110));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x112 = ((Val(1) - x48) * x79);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x113 = ((x15 + x112) - ((x15 * Val(2)) * x112));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x114 = ((Val(1) - x49) * x80);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x115 = ((x16 + x114) - ((x16 * Val(2)) * x114));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x116 = ((Val(1) - x50) * x81);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x117 = ((x17 + x116) - ((x17 * Val(2)) * x116));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x118 = ((Val(1) - x51) * x82);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x119 = ((x18 + x118) - ((x18 * Val(2)) * x118));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x120 = ((Val(1) - x52) * x83);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x121 = ((x19 + x120) - ((x19 * Val(2)) * x120));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x122 = ((Val(1) - x53) * x84);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x123 = ((x20 + x122) - ((x20 * Val(2)) * x122));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x124 = ((Val(1) - x54) * x85);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x125 = ((x21 + x124) - ((x21 * Val(2)) * x124));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x126 = ((Val(1) - x55) * x86);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x127 = ((x22 + x126) - ((x22 * Val(2)) * x126));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x128 = ((Val(1) - x56) * x87);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x129 = ((x23 + x128) - ((x23 * Val(2)) * x128));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x130 = ((Val(1) - x57) * x88);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x131 = ((x24 + x130) - ((x24 * Val(2)) * x130));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x132 = ((Val(1) - x58) * x89);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x133 = ((x25 + x132) - ((x25 * Val(2)) * x132));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x134 = ((Val(1) - x59) * x90);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x135 = ((x26 + x134) - ((x26 * Val(2)) * x134));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x136 = ((Val(1) - x60) * x91);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x137 = ((x27 + x136) - ((x27 * Val(2)) * x136));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x138 = ((Val(1) - x61) * x92);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x139 = ((x28 + x138) - ((x28 * Val(2)) * x138));
  // andnxor(zirgen/circuit/keccak/keccak.zir:118)
  Val x140 = ((Val(1) - x62) * x93);
  // andnxor(zirgen/circuit/keccak/keccak.zir:119)
  Val x141 = ((x29 + x140) - ((x29 * Val(2)) * x140));
  // FromBits(zirgen/circuit/keccak/sha256_for_keccak.zir:83)
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:679)
  Val x142 = (((x10 + x103) - (x30 * x103)) * Val(2));
  Val x143 = (((x102 + x142) + (x105 * Val(4))) + (x107 * Val(8)));
  Val x144 = (((x143 + (x109 * Val(16))) + (x111 * Val(32))) + (x113 * Val(64)));
  Val x145 = (((x144 + (x115 * Val(128))) + (x117 * Val(256))) + (x119 * Val(512)));
  Val x146 = (((x145 + (x121 * Val(1024))) + (x123 * Val(2048))) + (x125 * Val(4096)));
  Val x147 = (((x146 + (x127 * Val(8192))) + (x129 * Val(16384))) + (x131 * Val(32768)));
  Val x148 = (((x147 + (x133 * Val(65536))) + (x135 * Val(131072))) + (x137 * Val(262144)));
  NondetRegStruct x149 = exec_Reg(
      ctx, ((x148 + (x139 * Val(524288))) + (x141 * Val(1048576))), LAYOUT_LOOKUP(layout2, res3));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:636)
  NondetRegStruct24Array x150 = x5.arrD;
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:680)
  Val22Array x151 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[22]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:681)
  Val22Array x152 =
      Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),         Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0), Val(0), x150[23]._super};
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:686)
  Val22Array x153 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x154 =
      exec_RetTuple(ctx,
                    x151,
                    x152,
                    Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),     Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), x149._super},
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    x153,
                    x153,
                    Val(8),
                    Val(14),
                    x5.rnd._super,
                    x5.blk._super,
                    x5.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // chi_minor1(zirgen/circuit/keccak/keccak.zir:685)
  RetTupleStruct x155 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x155;
}
RetTupleStruct execChiMinor2_4_(ExecContext& ctx,
                                RetTupleStruct arg0,
                                BoundLayout<RetTupleLayout> arg1,
                                BoundLayout<ChiMinor2_4__SuperLayout> layout2) {
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:739)
  RetTupleStruct x3 = back_RetTuple(ctx, 1, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:740)
  RetTupleStruct x4 = back_RetTuple(ctx, 3, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  RetTupleStruct x5 = back_RetTuple(ctx, 4, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:742)
  RetTupleStruct x6 = back_RetTuple(ctx, 6, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:743)
  RetTupleStruct x7 = back_RetTuple(ctx, 7, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  RetTupleStruct x8 = back_RetTuple(ctx, 9, arg1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:746)
  BoundLayout<ChiMinor2_4_Arm1_SuperLayout> x9 = LAYOUT_LOOKUP(layout2, arm1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:758)
  BoundLayout<ChiMinor2_4_Arm1Arm1_SuperLayout> x10 = LAYOUT_LOOKUP(x9, arm1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:770)
  BoundLayout<ChiMinor2_4_Arm1Arm1Arm1_SuperLayout> x11 = LAYOUT_LOOKUP(x10, arm1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:782)
  BoundLayout<ChiMinor2_4_Arm1Arm1Arm1Arm1_SuperLayout> x12 = LAYOUT_LOOKUP(x11, arm1);
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:743)
  Val x13 = x7.arrC[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:742)
  NondetRegStruct24Array x14 = x6.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:743)
  Val x15 = x7.arrA[21]._super;
  Val x16 = x7.arrB[21]._super;
  Val x17 = x7.arrF[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  NondetRegStruct22Array x18 = x8.arrC;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  Val x19 = x5.arrC[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:740)
  NondetRegStruct24Array x20 = x4.arrD;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:741)
  Val x21 = x5.arrA[21]._super;
  Val x22 = x5.arrB[21]._super;
  Val x23 = x5.arrF[21]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:739)
  Val x24 = x3.arrA[21]._super;
  Val x25 = x3.arrB[21]._super;
  Val x26 = x3.arrC[21]._super;
  Val x27 = x3.rnd._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:800)
  OneHot_24_Struct x28 = exec_OneHot_24_(ctx, x27, LAYOUT_LOOKUP(x12, unpackRnd));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  NondetRegStruct22Array x29 = x8.arrA;
  Val x30 = x29[2]._super;
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:801)
  ToBits_22_Struct x31 = exec_ToBits_22_(ctx, x30, LAYOUT_LOOKUP(x12, unpackA002));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:744)
  NondetRegStruct22Array x32 = x8.arrB;
  Val22Array x33 = Val22Array{x29[0]._super,  x29[1]._super,  x30,
                              x29[3]._super,  x29[4]._super,  x29[5]._super,
                              x29[6]._super,  x29[7]._super,  x29[8]._super,
                              x29[9]._super,  x29[10]._super, x29[11]._super,
                              x29[12]._super, x29[13]._super, x29[14]._super,
                              x29[15]._super, x29[16]._super, x29[17]._super,
                              x29[18]._super, x29[19]._super, x29[20]._super,
                              x29[21]._super};
  Val22Array x34 =
      Val22Array{x32[0]._super,  x32[1]._super,  x32[2]._super,  x32[3]._super,  x32[4]._super,
                 x32[5]._super,  x32[6]._super,  x32[7]._super,  x32[8]._super,  x32[9]._super,
                 x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:795)
  Val22Array x35 = Val22Array{x18[0]._super,
                              x18[1]._super,
                              x18[2]._super,
                              x18[3]._super,
                              x18[4]._super,
                              x18[5]._super,
                              x18[6]._super,
                              x18[7]._super,
                              x18[8]._super,
                              x18[9]._super,
                              x18[10]._super,
                              x18[11]._super,
                              x18[12]._super,
                              x18[13]._super,
                              x18[14]._super,
                              x18[15]._super,
                              x15,
                              x16,
                              x13,
                              x14[22]._super,
                              x14[23]._super,
                              x17};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:800)
  NondetRegStruct24Array x36 = x28._super;
  Val24Array x37 =
      Val24Array{x36[0]._super,  x36[1]._super,  x36[2]._super,  x36[3]._super,  x36[4]._super,
                 x36[5]._super,  x36[6]._super,  x36[7]._super,  x36[8]._super,  x36[9]._super,
                 x36[10]._super, x36[11]._super, x36[12]._super, x36[13]._super, x36[14]._super,
                 x36[15]._super, x36[16]._super, x36[17]._super, x36[18]._super, x36[19]._super,
                 x36[20]._super, x36[21]._super, x36[22]._super, x36[23]._super};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:801)
  NondetRegStruct22Array x38 = x31._super;
  Val22Array x39 =
      Val22Array{x38[0]._super,  x38[1]._super,  x38[2]._super,  x38[3]._super,  x38[4]._super,
                 x38[5]._super,  x38[6]._super,  x38[7]._super,  x38[8]._super,  x38[9]._super,
                 x38[10]._super, x38[11]._super, x38[12]._super, x38[13]._super, x38[14]._super,
                 x38[15]._super, x38[16]._super, x38[17]._super, x38[18]._super, x38[19]._super,
                 x38[20]._super, x38[21]._super};
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:802)
  RetTupleStruct x40 = exec_RetTuple(
      ctx,
      x33,
      x34,
      x35,
      x37,
      Val22Array{x21,    x22,    x19,    x20[22]._super, x20[23]._super, x23,    x24,    x25,
                 x26,    Val(0), Val(0), Val(0),         Val(0),         Val(0), Val(0), Val(0),
                 Val(0), Val(0), Val(0), Val(0),         Val(0),         Val(0)},
      x39,
      Val(9),
      Val(14),
      x27,
      x3.blk._super,
      x3.midx._super,
      LAYOUT_LOOKUP(x12, _super));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:782)
  RetTupleStruct x41 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x11, _super));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:770)
  RetTupleStruct x42 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x10, _super));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:758)
  RetTupleStruct x43 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x9, _super));
  // chi_minor2(zirgen/circuit/keccak/keccak.zir:746)
  RetTupleStruct x44 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(layout2, _super));
  return x44;
}
RetTupleStruct execChiMajor_4_(ExecContext& ctx,
                               RetTupleStruct arg0,
                               BoundLayout<RetTupleLayout> arg1,
                               BoundLayout<ChiMajor_4_Layout> layout2) {
  // chi_major(zirgen/circuit/keccak/keccak.zir:841)
  BoundLayout<ChiMajor_4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // chi_major(zirgen/circuit/keccak/keccak.zir:840)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_10_Struct x5 = exec_OneHot_10_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct10Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:842)
    RetTupleStruct x8 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x9 = execChiMinor0_0__4_(ctx, x8, LAYOUT_LOOKUP(x3, arm0));
    x7 = x9;
  } else if (to_size_t(x6[1]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:843)
    RetTupleStruct x10 = execChiMinor1_0__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x10;
  } else if (to_size_t(x6[2]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:844)
    RetTupleStruct x11 = back_RetTuple(ctx, 3, arg1);
    RetTupleStruct x12 = execChiMinor0_1__4_(ctx, x11, LAYOUT_LOOKUP(x3, arm2));
    x7 = x12;
  } else if (to_size_t(x6[3]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:845)
    RetTupleStruct x13 = back_RetTuple(ctx, 4, arg1);
    RetTupleStruct x14 = execChiMinor0_2__4_(ctx, x13, LAYOUT_LOOKUP(x3, arm3));
    x7 = x14;
  } else if (to_size_t(x6[4]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:846)
    RetTupleStruct x15 = execChiMinor1_2__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x15;
  } else if (to_size_t(x6[5]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:847)
    RetTupleStruct x16 = back_RetTuple(ctx, 6, arg1);
    RetTupleStruct x17 = execChiMinor0_3__4_(ctx, x16, LAYOUT_LOOKUP(x3, arm5));
    x7 = x17;
  } else if (to_size_t(x6[6]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:848)
    RetTupleStruct x18 = back_RetTuple(ctx, 7, arg1);
    RetTupleStruct x19 = execChiMinor0_4__4_(ctx, x18, LAYOUT_LOOKUP(x3, arm6));
    x7 = x19;
  } else if (to_size_t(x6[7]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:849)
    RetTupleStruct x20 = execChiMinor1_4__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x20;
  } else if (to_size_t(x6[8]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:850)
    RetTupleStruct x21 = execChiMinor2_4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x21;
  } else if (to_size_t(x6[9]._super)) {
    // chi_major(zirgen/circuit/keccak/keccak.zir:851)
    RetTupleStruct x22 = back_RetTuple(ctx, 1, arg1);
    RetTupleStruct x23 = execIotaXorRc(ctx, x22, LAYOUT_LOOKUP(x3, arm9));
    x7 = x23;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // chi_major(zirgen/circuit/keccak/keccak.zir:841)
  RetTupleStruct x24 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x24;
}
RetTupleStruct execSha256mix_0__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_0__0_Layout> layout2) {
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  BoundLayout<Sha256mix_0__0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(27073), .high = Val(58523)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(1),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_0__1_Layout> layout2) {
  BoundLayout<Sha256mix_0__1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(18310), .high = Val(61374)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(2),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_0__2_Layout> layout2) {
  BoundLayout<Sha256mix_0__2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(40390), .high = Val(4033)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(3),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_0__3_Layout> layout2) {
  BoundLayout<Sha256mix_0__3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(41420), .high = Val(9228)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(4),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_0__4_Layout> layout2) {
  BoundLayout<Sha256mix_0__4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(11375), .high = Val(11753)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(5),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__5_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_0__5_Layout> layout2) {
  BoundLayout<Sha256mix_0__5__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(33962), .high = Val(19060)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(6),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__6_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_0__6_Layout> layout2) {
  BoundLayout<Sha256mix_0__6__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(43484), .high = Val(23728)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(7),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__7_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_0__7_Layout> layout2) {
  BoundLayout<Sha256mix_0__7__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(35034), .high = Val(30457)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(8),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__8_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_0__8_Layout> layout2) {
  BoundLayout<Sha256mix_0__8__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(20818), .high = Val(38974)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(9),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__9_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_0__9_Layout> layout2) {
  BoundLayout<Sha256mix_0__9__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(50797), .high = Val(43057)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(10),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__10_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_0__10_Layout> layout2) {
  BoundLayout<Sha256mix_0__10__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(10184), .high = Val(45059)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(11),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__11_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_0__11_Layout> layout2) {
  BoundLayout<Sha256mix_0__11__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(32711), .high = Val(48985)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(12),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__12_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_0__12_Layout> layout2) {
  BoundLayout<Sha256mix_0__12__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(3059), .high = Val(50912)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(13),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__13_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_0__13_Layout> layout2) {
  BoundLayout<Sha256mix_0__13__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(37191), .high = Val(54695)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(14),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__14_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_0__14_Layout> layout2) {
  BoundLayout<Sha256mix_0__14__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(25425), .high = Val(1738)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(15),
                    Val(20),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_0__15_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_0__15_Layout> layout2) {
  BoundLayout<Sha256mix_0__15__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(10599), .high = Val(5161)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  BoundLayout<Sha256mix_0__15_Arm1_Super_SuperLayout> x85 = LAYOUT_LOOKUP(x3, arm1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  NondetRegStruct24Array x86 = x4.arrD;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x87 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x88 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x89 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  Val24Array x90 =
      Val24Array{x86[0]._super,  x86[1]._super,  x86[2]._super,  x86[3]._super,  x86[4]._super,
                 x86[5]._super,  x86[6]._super,  x86[7]._super,  x86[8]._super,  x86[9]._super,
                 x86[10]._super, x86[11]._super, x86[12]._super, x86[13]._super, x86[14]._super,
                 x86[15]._super, x86[16]._super, x86[17]._super, x86[18]._super, x86[19]._super,
                 x86[20]._super, x86[21]._super, x86[22]._super, x86[23]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:380)
  RetTupleStruct x91 =
      exec_RetTuple(ctx,
                    x87,
                    x88,
                    x89,
                    x90,
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(0),
                    Val(21),
                    x4.rnd._super,
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x85, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:379)
  RetTupleStruct x92 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x85, _super));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x93 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x93;
}
RetTupleStruct execSha256mixAll_0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mixAll_0_Layout> layout2) {
  // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:391)
  BoundLayout<Sha256mixAll_0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:390)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_16_Struct x5 = exec_OneHot_16_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct16Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:392)
    RetTupleStruct x8 = execSha256mix_0__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm0));
    x7 = x8;
  } else if (to_size_t(x6[1]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:393)
    RetTupleStruct x9 = execSha256mix_0__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x9;
  } else if (to_size_t(x6[2]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:394)
    RetTupleStruct x10 = execSha256mix_0__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x10;
  } else if (to_size_t(x6[3]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:395)
    RetTupleStruct x11 = execSha256mix_0__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x11;
  } else if (to_size_t(x6[4]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:396)
    RetTupleStruct x12 = execSha256mix_0__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x12;
  } else if (to_size_t(x6[5]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:397)
    RetTupleStruct x13 = execSha256mix_0__5_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm5));
    x7 = x13;
  } else if (to_size_t(x6[6]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:398)
    RetTupleStruct x14 = execSha256mix_0__6_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm6));
    x7 = x14;
  } else if (to_size_t(x6[7]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:399)
    RetTupleStruct x15 = execSha256mix_0__7_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x15;
  } else if (to_size_t(x6[8]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:400)
    RetTupleStruct x16 = execSha256mix_0__8_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x16;
  } else if (to_size_t(x6[9]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:401)
    RetTupleStruct x17 = execSha256mix_0__9_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm9));
    x7 = x17;
  } else if (to_size_t(x6[10]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:402)
    RetTupleStruct x18 = execSha256mix_0__10_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm10));
    x7 = x18;
  } else if (to_size_t(x6[11]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:403)
    RetTupleStruct x19 = execSha256mix_0__11_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm11));
    x7 = x19;
  } else if (to_size_t(x6[12]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:404)
    RetTupleStruct x20 = execSha256mix_0__12_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm12));
    x7 = x20;
  } else if (to_size_t(x6[13]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:405)
    RetTupleStruct x21 = execSha256mix_0__13_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm13));
    x7 = x21;
  } else if (to_size_t(x6[14]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:406)
    RetTupleStruct x22 = execSha256mix_0__14_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm14));
    x7 = x22;
  } else if (to_size_t(x6[15]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:407)
    RetTupleStruct x23 = execSha256mix_0__15_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm15));
    x7 = x23;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:391)
  RetTupleStruct x24 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x24;
}
RetTupleStruct execSha256mix_1__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_1__0_Layout> layout2) {
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  BoundLayout<Sha256mix_1__0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(2693), .high = Val(10167)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(1),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_1__1_Layout> layout2) {
  BoundLayout<Sha256mix_1__1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(8504), .high = Val(11803)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(2),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_1__2_Layout> layout2) {
  BoundLayout<Sha256mix_1__2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(28156), .high = Val(19756)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(3),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_1__3_Layout> layout2) {
  BoundLayout<Sha256mix_1__3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(3347), .high = Val(21304)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(4),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_1__4_Layout> layout2) {
  BoundLayout<Sha256mix_1__4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(29524), .high = Val(25866)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(5),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__5_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_1__5_Layout> layout2) {
  BoundLayout<Sha256mix_1__5__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(2747), .high = Val(30314)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(6),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__6_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_1__6_Layout> layout2) {
  BoundLayout<Sha256mix_1__6__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(51502), .high = Val(33218)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(7),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__7_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_1__7_Layout> layout2) {
  BoundLayout<Sha256mix_1__7__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(11397), .high = Val(37490)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(8),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__8_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_1__8_Layout> layout2) {
  BoundLayout<Sha256mix_1__8__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(59553), .high = Val(41663)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(9),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__9_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_1__9_Layout> layout2) {
  BoundLayout<Sha256mix_1__9__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(26187), .high = Val(43034)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(10),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__10_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_1__10_Layout> layout2) {
  BoundLayout<Sha256mix_1__10__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(35696), .high = Val(49739)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(11),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__11_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_1__11_Layout> layout2) {
  BoundLayout<Sha256mix_1__11__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(20899), .high = Val(51052)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(12),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__12_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_1__12_Layout> layout2) {
  BoundLayout<Sha256mix_1__12__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(59417), .high = Val(53650)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(13),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__13_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_1__13_Layout> layout2) {
  BoundLayout<Sha256mix_1__13__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(1572), .high = Val(54937)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(14),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__14_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_1__14_Layout> layout2) {
  BoundLayout<Sha256mix_1__14__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(13701), .high = Val(62478)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(15),
                    Val(21),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_1__15_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_1__15_Layout> layout2) {
  BoundLayout<Sha256mix_1__15__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(41072), .high = Val(4202)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  BoundLayout<Sha256mix_1__15_Arm1_Super_SuperLayout> x85 = LAYOUT_LOOKUP(x3, arm1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  NondetRegStruct24Array x86 = x4.arrD;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x87 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x88 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x89 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  Val24Array x90 =
      Val24Array{x86[0]._super,  x86[1]._super,  x86[2]._super,  x86[3]._super,  x86[4]._super,
                 x86[5]._super,  x86[6]._super,  x86[7]._super,  x86[8]._super,  x86[9]._super,
                 x86[10]._super, x86[11]._super, x86[12]._super, x86[13]._super, x86[14]._super,
                 x86[15]._super, x86[16]._super, x86[17]._super, x86[18]._super, x86[19]._super,
                 x86[20]._super, x86[21]._super, x86[22]._super, x86[23]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:380)
  RetTupleStruct x91 =
      exec_RetTuple(ctx,
                    x87,
                    x88,
                    x89,
                    x90,
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(0),
                    Val(22),
                    x4.rnd._super,
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x85, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:379)
  RetTupleStruct x92 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x85, _super));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x93 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x93;
}
RetTupleStruct execSha256mixAll_1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mixAll_1_Layout> layout2) {
  // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:391)
  BoundLayout<Sha256mixAll_1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:390)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_16_Struct x5 = exec_OneHot_16_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct16Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:392)
    RetTupleStruct x8 = execSha256mix_1__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm0));
    x7 = x8;
  } else if (to_size_t(x6[1]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:393)
    RetTupleStruct x9 = execSha256mix_1__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x9;
  } else if (to_size_t(x6[2]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:394)
    RetTupleStruct x10 = execSha256mix_1__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x10;
  } else if (to_size_t(x6[3]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:395)
    RetTupleStruct x11 = execSha256mix_1__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x11;
  } else if (to_size_t(x6[4]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:396)
    RetTupleStruct x12 = execSha256mix_1__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x12;
  } else if (to_size_t(x6[5]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:397)
    RetTupleStruct x13 = execSha256mix_1__5_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm5));
    x7 = x13;
  } else if (to_size_t(x6[6]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:398)
    RetTupleStruct x14 = execSha256mix_1__6_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm6));
    x7 = x14;
  } else if (to_size_t(x6[7]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:399)
    RetTupleStruct x15 = execSha256mix_1__7_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x15;
  } else if (to_size_t(x6[8]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:400)
    RetTupleStruct x16 = execSha256mix_1__8_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x16;
  } else if (to_size_t(x6[9]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:401)
    RetTupleStruct x17 = execSha256mix_1__9_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm9));
    x7 = x17;
  } else if (to_size_t(x6[10]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:402)
    RetTupleStruct x18 = execSha256mix_1__10_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm10));
    x7 = x18;
  } else if (to_size_t(x6[11]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:403)
    RetTupleStruct x19 = execSha256mix_1__11_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm11));
    x7 = x19;
  } else if (to_size_t(x6[12]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:404)
    RetTupleStruct x20 = execSha256mix_1__12_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm12));
    x7 = x20;
  } else if (to_size_t(x6[13]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:405)
    RetTupleStruct x21 = execSha256mix_1__13_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm13));
    x7 = x21;
  } else if (to_size_t(x6[14]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:406)
    RetTupleStruct x22 = execSha256mix_1__14_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm14));
    x7 = x22;
  } else if (to_size_t(x6[15]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:407)
    RetTupleStruct x23 = execSha256mix_1__15_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm15));
    x7 = x23;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:391)
  RetTupleStruct x24 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x24;
}
RetTupleStruct execSha256mix_2__0_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_2__0_Layout> layout2) {
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  BoundLayout<Sha256mix_2__0__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(49430), .high = Val(6564)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(1),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__1_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_2__1_Layout> layout2) {
  BoundLayout<Sha256mix_2__1__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(27656), .high = Val(7735)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(2),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_2__2_Layout> layout2) {
  BoundLayout<Sha256mix_2__2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(30540), .high = Val(10056)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(3),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__3_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_2__3_Layout> layout2) {
  BoundLayout<Sha256mix_2__3__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(48309), .high = Val(13488)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(4),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__4_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_2__4_Layout> layout2) {
  BoundLayout<Sha256mix_2__4__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(3251), .high = Val(14620)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(5),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__5_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_2__5_Layout> layout2) {
  BoundLayout<Sha256mix_2__5__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(43594), .high = Val(20184)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(6),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__6_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_2__6_Layout> layout2) {
  BoundLayout<Sha256mix_2__6__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(51791), .high = Val(23452)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(7),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__7_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_2__7_Layout> layout2) {
  BoundLayout<Sha256mix_2__7__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(28659), .high = Val(26670)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(8),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__8_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_2__8_Layout> layout2) {
  BoundLayout<Sha256mix_2__8__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(33518), .high = Val(29839)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(9),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__9_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mix_2__9_Layout> layout2) {
  BoundLayout<Sha256mix_2__9__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(25455), .high = Val(30885)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(10),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__10_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_2__10_Layout> layout2) {
  BoundLayout<Sha256mix_2__10__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(30740), .high = Val(33992)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(11),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__11_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_2__11_Layout> layout2) {
  BoundLayout<Sha256mix_2__11__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(520), .high = Val(36039)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(12),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__12_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_2__12_Layout> layout2) {
  BoundLayout<Sha256mix_2__12__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(65530), .high = Val(37054)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(13),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__13_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_2__13_Layout> layout2) {
  BoundLayout<Sha256mix_2__13__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(27883), .high = Val(42064)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(14),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__14_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_2__14_Layout> layout2) {
  BoundLayout<Sha256mix_2__14__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(41975), .high = Val(48889)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x85 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x86 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x87 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:376)
  RetTupleStruct x88 =
      exec_RetTuple(ctx,
                    x85,
                    x86,
                    x87,
                    Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(15),
                    Val(22),
                    Val(0),
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x3, arm0));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x89 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x89;
}
RetTupleStruct execSha256mix_2__15_(ExecContext& ctx,
                                    RetTupleStruct arg0,
                                    BoundLayout<RetTupleLayout> arg1,
                                    BoundLayout<Sha256mix_2__15_Layout> layout2) {
  BoundLayout<Sha256mix_2__15__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:359)
  RetTupleStruct x5 = back_RetTuple(ctx, 2, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:360)
  RetTupleStruct x6 = back_RetTuple(ctx, 3, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:361)
  RetTupleStruct x7 = back_RetTuple(ctx, 4, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:362)
  RetTupleStruct x8 = back_RetTuple(ctx, 7, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:363)
  RetTupleStruct x9 = back_RetTuple(ctx, 15, arg1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:364)
  RetTupleStruct x10 = back_RetTuple(ctx, 16, arg1);
  // s2w(zirgen/circuit/keccak/sha256_for_keccak.zir:155)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:366)
  NondetRegStruct22Array x11 = x5.arrE;
  NondetRegStruct22Array x12 = x5.arrF;
  NondetRegStruct22Array x13 = x8.arrE;
  NondetRegStruct22Array x14 = x8.arrF;
  NondetRegStruct22Array x15 = x9.arrE;
  NondetRegStruct22Array x16 = x9.arrF;
  NondetRegStruct22Array x17 = x10.arrE;
  NondetRegStruct22Array x18 = x10.arrF;
  Val32Array x19 =
      Val32Array{x11[0]._super,  x11[1]._super,  x11[2]._super,  x11[3]._super,  x11[4]._super,
                 x11[5]._super,  x11[6]._super,  x11[7]._super,  x11[8]._super,  x11[9]._super,
                 x11[10]._super, x11[11]._super, x11[12]._super, x11[13]._super, x11[14]._super,
                 x11[15]._super, x11[16]._super, x11[17]._super, x11[18]._super, x11[19]._super,
                 x11[20]._super, x11[21]._super, x12[0]._super,  x12[1]._super,  x12[2]._super,
                 x12[3]._super,  x12[4]._super,  x12[5]._super,  x12[6]._super,  x12[7]._super,
                 x12[8]._super,  x12[9]._super};
  Val32Array x20 =
      Val32Array{x13[0]._super,  x13[1]._super,  x13[2]._super,  x13[3]._super,  x13[4]._super,
                 x13[5]._super,  x13[6]._super,  x13[7]._super,  x13[8]._super,  x13[9]._super,
                 x13[10]._super, x13[11]._super, x13[12]._super, x13[13]._super, x13[14]._super,
                 x13[15]._super, x13[16]._super, x13[17]._super, x13[18]._super, x13[19]._super,
                 x13[20]._super, x13[21]._super, x14[0]._super,  x14[1]._super,  x14[2]._super,
                 x14[3]._super,  x14[4]._super,  x14[5]._super,  x14[6]._super,  x14[7]._super,
                 x14[8]._super,  x14[9]._super};
  Val32Array x21 =
      Val32Array{x15[0]._super,  x15[1]._super,  x15[2]._super,  x15[3]._super,  x15[4]._super,
                 x15[5]._super,  x15[6]._super,  x15[7]._super,  x15[8]._super,  x15[9]._super,
                 x15[10]._super, x15[11]._super, x15[12]._super, x15[13]._super, x15[14]._super,
                 x15[15]._super, x15[16]._super, x15[17]._super, x15[18]._super, x15[19]._super,
                 x15[20]._super, x15[21]._super, x16[0]._super,  x16[1]._super,  x16[2]._super,
                 x16[3]._super,  x16[4]._super,  x16[5]._super,  x16[6]._super,  x16[7]._super,
                 x16[8]._super,  x16[9]._super};
  Val32Array x22 =
      Val32Array{x17[0]._super,  x17[1]._super,  x17[2]._super,  x17[3]._super,  x17[4]._super,
                 x17[5]._super,  x17[6]._super,  x17[7]._super,  x17[8]._super,  x17[9]._super,
                 x17[10]._super, x17[11]._super, x17[12]._super, x17[13]._super, x17[14]._super,
                 x17[15]._super, x17[16]._super, x17[17]._super, x17[18]._super, x17[19]._super,
                 x17[20]._super, x17[21]._super, x18[0]._super,  x18[1]._super,  x18[2]._super,
                 x18[3]._super,  x18[4]._super,  x18[5]._super,  x18[6]._super,  x18[7]._super,
                 x18[8]._super,  x18[9]._super};
  TwoShortsStruct x23 = execComputeW(ctx, x19, x20, x21, x22, LAYOUT_LOOKUP(layout2, packedW));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16_Struct x24 =
      execUnpackWithCarry(ctx, x23.low, x23.high, LAYOUT_LOOKUP(layout2, newW));
  // s2a(zirgen/circuit/keccak/sha256_for_keccak.zir:145)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  NondetRegStruct22Array x25 = x4.arrA;
  NondetRegStruct22Array x26 = x4.arrB;
  NondetRegStruct22Array x27 = x5.arrA;
  NondetRegStruct22Array x28 = x5.arrB;
  NondetRegStruct22Array x29 = x6.arrA;
  NondetRegStruct22Array x30 = x6.arrB;
  NondetRegStruct22Array x31 = x7.arrA;
  NondetRegStruct22Array x32 = x7.arrB;
  // s2e(zirgen/circuit/keccak/sha256_for_keccak.zir:150)
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  NondetRegStruct22Array x33 = x4.arrC;
  NondetRegStruct22Array x34 = x5.arrC;
  NondetRegStruct22Array x35 = x6.arrC;
  NondetRegStruct22Array x36 = x7.arrC;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  Val32Array x37 =
      Val32Array{x25[0]._super,  x25[1]._super,  x25[2]._super,  x25[3]._super,  x25[4]._super,
                 x25[5]._super,  x25[6]._super,  x25[7]._super,  x25[8]._super,  x25[9]._super,
                 x25[10]._super, x25[11]._super, x25[12]._super, x25[13]._super, x25[14]._super,
                 x25[15]._super, x25[16]._super, x25[17]._super, x25[18]._super, x25[19]._super,
                 x25[20]._super, x25[21]._super, x26[0]._super,  x26[1]._super,  x26[2]._super,
                 x26[3]._super,  x26[4]._super,  x26[5]._super,  x26[6]._super,  x26[7]._super,
                 x26[8]._super,  x26[9]._super};
  Val32Array x38 =
      Val32Array{x27[0]._super,  x27[1]._super,  x27[2]._super,  x27[3]._super,  x27[4]._super,
                 x27[5]._super,  x27[6]._super,  x27[7]._super,  x27[8]._super,  x27[9]._super,
                 x27[10]._super, x27[11]._super, x27[12]._super, x27[13]._super, x27[14]._super,
                 x27[15]._super, x27[16]._super, x27[17]._super, x27[18]._super, x27[19]._super,
                 x27[20]._super, x27[21]._super, x28[0]._super,  x28[1]._super,  x28[2]._super,
                 x28[3]._super,  x28[4]._super,  x28[5]._super,  x28[6]._super,  x28[7]._super,
                 x28[8]._super,  x28[9]._super};
  Val32Array x39 =
      Val32Array{x29[0]._super,  x29[1]._super,  x29[2]._super,  x29[3]._super,  x29[4]._super,
                 x29[5]._super,  x29[6]._super,  x29[7]._super,  x29[8]._super,  x29[9]._super,
                 x29[10]._super, x29[11]._super, x29[12]._super, x29[13]._super, x29[14]._super,
                 x29[15]._super, x29[16]._super, x29[17]._super, x29[18]._super, x29[19]._super,
                 x29[20]._super, x29[21]._super, x30[0]._super,  x30[1]._super,  x30[2]._super,
                 x30[3]._super,  x30[4]._super,  x30[5]._super,  x30[6]._super,  x30[7]._super,
                 x30[8]._super,  x30[9]._super};
  Val32Array x40 =
      Val32Array{x31[0]._super,  x31[1]._super,  x31[2]._super,  x31[3]._super,  x31[4]._super,
                 x31[5]._super,  x31[6]._super,  x31[7]._super,  x31[8]._super,  x31[9]._super,
                 x31[10]._super, x31[11]._super, x31[12]._super, x31[13]._super, x31[14]._super,
                 x31[15]._super, x31[16]._super, x31[17]._super, x31[18]._super, x31[19]._super,
                 x31[20]._super, x31[21]._super, x32[0]._super,  x32[1]._super,  x32[2]._super,
                 x32[3]._super,  x32[4]._super,  x32[5]._super,  x32[6]._super,  x32[7]._super,
                 x32[8]._super,  x32[9]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:369)
  Val32Array x41 =
      Val32Array{x26[10]._super, x26[11]._super, x26[12]._super, x26[13]._super, x26[14]._super,
                 x26[15]._super, x26[16]._super, x26[17]._super, x26[18]._super, x26[19]._super,
                 x26[20]._super, x26[21]._super, x33[0]._super,  x33[1]._super,  x33[2]._super,
                 x33[3]._super,  x33[4]._super,  x33[5]._super,  x33[6]._super,  x33[7]._super,
                 x33[8]._super,  x33[9]._super,  x33[10]._super, x33[11]._super, x33[12]._super,
                 x33[13]._super, x33[14]._super, x33[15]._super, x33[16]._super, x33[17]._super,
                 x33[18]._super, x33[19]._super};
  Val32Array x42 =
      Val32Array{x28[10]._super, x28[11]._super, x28[12]._super, x28[13]._super, x28[14]._super,
                 x28[15]._super, x28[16]._super, x28[17]._super, x28[18]._super, x28[19]._super,
                 x28[20]._super, x28[21]._super, x34[0]._super,  x34[1]._super,  x34[2]._super,
                 x34[3]._super,  x34[4]._super,  x34[5]._super,  x34[6]._super,  x34[7]._super,
                 x34[8]._super,  x34[9]._super,  x34[10]._super, x34[11]._super, x34[12]._super,
                 x34[13]._super, x34[14]._super, x34[15]._super, x34[16]._super, x34[17]._super,
                 x34[18]._super, x34[19]._super};
  Val32Array x43 =
      Val32Array{x30[10]._super, x30[11]._super, x30[12]._super, x30[13]._super, x30[14]._super,
                 x30[15]._super, x30[16]._super, x30[17]._super, x30[18]._super, x30[19]._super,
                 x30[20]._super, x30[21]._super, x35[0]._super,  x35[1]._super,  x35[2]._super,
                 x35[3]._super,  x35[4]._super,  x35[5]._super,  x35[6]._super,  x35[7]._super,
                 x35[8]._super,  x35[9]._super,  x35[10]._super, x35[11]._super, x35[12]._super,
                 x35[13]._super, x35[14]._super, x35[15]._super, x35[16]._super, x35[17]._super,
                 x35[18]._super, x35[19]._super};
  Val32Array x44 =
      Val32Array{x32[10]._super, x32[11]._super, x32[12]._super, x32[13]._super, x32[14]._super,
                 x32[15]._super, x32[16]._super, x32[17]._super, x32[18]._super, x32[19]._super,
                 x32[20]._super, x32[21]._super, x36[0]._super,  x36[1]._super,  x36[2]._super,
                 x36[3]._super,  x36[4]._super,  x36[5]._super,  x36[6]._super,  x36[7]._super,
                 x36[8]._super,  x36[9]._super,  x36[10]._super, x36[11]._super, x36[12]._super,
                 x36[13]._super, x36[14]._super, x36[15]._super, x36[16]._super, x36[17]._super,
                 x36[18]._super, x36[19]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:367)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x45 = x24._super;
  Val x46 = x45[0]._super;
  Val x47 = x45[1]._super;
  Val x48 = x45[2]._super;
  Val x49 = x45[3]._super;
  Val x50 = x45[4]._super;
  Val x51 = x45[5]._super;
  Val x52 = x45[6]._super;
  Val x53 = x45[7]._super;
  Val x54 = x45[8]._super;
  Val x55 = x45[9]._super;
  Val x56 = x45[10]._super;
  Val x57 = x45[11]._super;
  Val x58 = x45[12]._super;
  Val x59 = x45[13]._super;
  Val x60 = x45[14]._super;
  Val x61 = x45[15]._super;
  Val x62 = x45[16]._super;
  Val x63 = x45[17]._super;
  Val x64 = x45[18]._super;
  Val x65 = x45[19]._super;
  Val x66 = x45[20]._super;
  Val x67 = x45[21]._super;
  Val x68 = x45[22]._super;
  Val x69 = x45[23]._super;
  Val x70 = x45[24]._super;
  Val x71 = x45[25]._super;
  Val x72 = x45[26]._super;
  Val x73 = x45[27]._super;
  Val x74 = x45[28]._super;
  Val x75 = x45[29]._super;
  Val x76 = x45[30]._super;
  Val x77 = x45[31]._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  ComputeAEStruct x78 = execComputeAE(
      ctx,
      x37,
      x38,
      x39,
      x40,
      x41,
      x42,
      x43,
      x44,
      Val32Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61,
                 x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77},
      TwoShortsStruct{.low = Val(30962), .high = Val(50801)},
      LAYOUT_LOOKUP(layout2, ae));
  TwoShortsStruct x79 = x78.aOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16_Struct x80 =
      execUnpackWithCarry(ctx, x79.low, x79.high, LAYOUT_LOOKUP(layout2, newA));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:368)
  TwoShortsStruct x81 = x78.eOut;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16_Struct x82 =
      execUnpackWithCarry(ctx, x81.low, x81.high, LAYOUT_LOOKUP(layout2, newE));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:371)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x83 = x80._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:372)
  Concatenate_NondetReg__16__16__Super_SuperStruct32Array x84 = x82._super;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  BoundLayout<Sha256mix_2__15_Arm1_Super_SuperLayout> x85 = LAYOUT_LOOKUP(x3, arm1);
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  NondetRegStruct24Array x86 = x4.arrD;
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:373)
  Val22Array x87 =
      Val22Array{x83[0]._super,  x83[1]._super,  x83[2]._super,  x83[3]._super,  x83[4]._super,
                 x83[5]._super,  x83[6]._super,  x83[7]._super,  x83[8]._super,  x83[9]._super,
                 x83[10]._super, x83[11]._super, x83[12]._super, x83[13]._super, x83[14]._super,
                 x83[15]._super, x83[16]._super, x83[17]._super, x83[18]._super, x83[19]._super,
                 x83[20]._super, x83[21]._super};
  Val22Array x88 =
      Val22Array{x83[22]._super, x83[23]._super, x83[24]._super, x83[25]._super, x83[26]._super,
                 x83[27]._super, x83[28]._super, x83[29]._super, x83[30]._super, x83[31]._super,
                 x84[0]._super,  x84[1]._super,  x84[2]._super,  x84[3]._super,  x84[4]._super,
                 x84[5]._super,  x84[6]._super,  x84[7]._super,  x84[8]._super,  x84[9]._super,
                 x84[10]._super, x84[11]._super};
  Val22Array x89 =
      Val22Array{x84[12]._super, x84[13]._super, x84[14]._super, x84[15]._super, x84[16]._super,
                 x84[17]._super, x84[18]._super, x84[19]._super, x84[20]._super, x84[21]._super,
                 x84[22]._super, x84[23]._super, x84[24]._super, x84[25]._super, x84[26]._super,
                 x84[27]._super, x84[28]._super, x84[29]._super, x84[30]._super, x84[31]._super,
                 Val(0),         Val(0)};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:358)
  Val24Array x90 =
      Val24Array{x86[0]._super,  x86[1]._super,  x86[2]._super,  x86[3]._super,  x86[4]._super,
                 x86[5]._super,  x86[6]._super,  x86[7]._super,  x86[8]._super,  x86[9]._super,
                 x86[10]._super, x86[11]._super, x86[12]._super, x86[13]._super, x86[14]._super,
                 x86[15]._super, x86[16]._super, x86[17]._super, x86[18]._super, x86[19]._super,
                 x86[20]._super, x86[21]._super, x86[22]._super, x86[23]._super};
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:383)
  RetTupleStruct x91 =
      exec_RetTuple(ctx,
                    x87,
                    x88,
                    x89,
                    x90,
                    Val22Array{x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56,
                               x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67},
                    Val22Array{x68,    x69,    x70,    x71,    x72,    x73,    x74,    x75,
                               x76,    x77,    Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                               Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                    Val(9),
                    Val(17),
                    x4.rnd._super,
                    x4.blk._super,
                    x4.midx._super,
                    LAYOUT_LOOKUP(x85, arm1));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:379)
  RetTupleStruct x92 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x85, _super));
  // sha256mix(zirgen/circuit/keccak/sha256_for_keccak.zir:375)
  RetTupleStruct x93 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x93;
}
RetTupleStruct execSha256mixAll_2_(ExecContext& ctx,
                                   RetTupleStruct arg0,
                                   BoundLayout<RetTupleLayout> arg1,
                                   BoundLayout<Sha256mixAll_2_Layout> layout2) {
  // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:391)
  BoundLayout<Sha256mixAll_2__SuperLayout> x3 = LAYOUT_LOOKUP(layout2, _super);
  // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:390)
  RetTupleStruct x4 = back_RetTuple(ctx, 1, arg1);
  OneHot_16_Struct x5 = exec_OneHot_16_(ctx, x4.minor._super, LAYOUT_LOOKUP(layout2, minorOnehot));
  NondetRegStruct16Array x6 = x5._super;
  RetTupleStruct x7;
  if (to_size_t(x6[0]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:392)
    RetTupleStruct x8 = execSha256mix_2__0_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm0));
    x7 = x8;
  } else if (to_size_t(x6[1]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:393)
    RetTupleStruct x9 = execSha256mix_2__1_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm1));
    x7 = x9;
  } else if (to_size_t(x6[2]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:394)
    RetTupleStruct x10 = execSha256mix_2__2_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm2));
    x7 = x10;
  } else if (to_size_t(x6[3]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:395)
    RetTupleStruct x11 = execSha256mix_2__3_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm3));
    x7 = x11;
  } else if (to_size_t(x6[4]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:396)
    RetTupleStruct x12 = execSha256mix_2__4_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm4));
    x7 = x12;
  } else if (to_size_t(x6[5]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:397)
    RetTupleStruct x13 = execSha256mix_2__5_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm5));
    x7 = x13;
  } else if (to_size_t(x6[6]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:398)
    RetTupleStruct x14 = execSha256mix_2__6_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm6));
    x7 = x14;
  } else if (to_size_t(x6[7]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:399)
    RetTupleStruct x15 = execSha256mix_2__7_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm7));
    x7 = x15;
  } else if (to_size_t(x6[8]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:400)
    RetTupleStruct x16 = execSha256mix_2__8_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm8));
    x7 = x16;
  } else if (to_size_t(x6[9]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:401)
    RetTupleStruct x17 = execSha256mix_2__9_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm9));
    x7 = x17;
  } else if (to_size_t(x6[10]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:402)
    RetTupleStruct x18 = execSha256mix_2__10_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm10));
    x7 = x18;
  } else if (to_size_t(x6[11]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:403)
    RetTupleStruct x19 = execSha256mix_2__11_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm11));
    x7 = x19;
  } else if (to_size_t(x6[12]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:404)
    RetTupleStruct x20 = execSha256mix_2__12_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm12));
    x7 = x20;
  } else if (to_size_t(x6[13]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:405)
    RetTupleStruct x21 = execSha256mix_2__13_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm13));
    x7 = x21;
  } else if (to_size_t(x6[14]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:406)
    RetTupleStruct x22 = execSha256mix_2__14_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm14));
    x7 = x22;
  } else if (to_size_t(x6[15]._super)) {
    // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:407)
    RetTupleStruct x23 = execSha256mix_2__15_(ctx, arg0, arg1, LAYOUT_LOOKUP(x3, arm15));
    x7 = x23;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // sha256mix_all(zirgen/circuit/keccak/sha256_for_keccak.zir:391)
  RetTupleStruct x24 = back_RetTuple(ctx, 0, LAYOUT_LOOKUP(x3, _super));
  return x24;
}
TopStruct exec_Top(ExecContext& ctx, BoundLayout<TopLayout> layout0, GlobalBuf global1) {
  // Top(zirgen/circuit/keccak/keccak.zir:1170)
  BoundLayout<NondetRegLayout> x2 = LAYOUT_LOOKUP(layout0, pC);
  // Top(zirgen/circuit/keccak/keccak.zir:1184)
  BoundLayout<TopRetvalsLayout> x3 = LAYOUT_LOOKUP(layout0, retvals);
  BoundLayout<RetTupleLayout> x4 = LAYOUT_LOOKUP(x3, _super);
  // configureInput(zirgen/circuit/keccak/keccak.zir:6)
  // Top(zirgen/circuit/keccak/keccak.zir:1167)
  INVOKE_EXTERN(ctx, configureInput, Val(2));
  // GetCycle(zirgen/circuit/keccak/keccak.zir:5)
  // Top(zirgen/circuit/keccak/keccak.zir:1170)
  Val x5 = INVOKE_EXTERN(ctx, getCycle);
  NondetRegStruct x6 = exec_NondetReg(ctx, x5, x2);
  Val x7 = x6._super;
  // Top(zirgen/circuit/keccak/keccak.zir:1171)
  NondetRegStruct x8 = exec_NondetReg(ctx, inv(x7), LAYOUT_LOOKUP(layout0, invPC));
  // Top(zirgen/circuit/keccak/keccak.zir:1172)
  Val x9 = (Val(1) - (x7 * x8._super));
  // Top(zirgen/circuit/keccak/keccak.zir:1173)
  EQZ((x9 * x7), "Top(zirgen/circuit/keccak/keccak.zir:1173)");
  Val x10;
  if (to_size_t(x9)) {
    x10 = Val(18);
  } else if (to_size_t((Val(1) - x9))) {
    // Top(zirgen/circuit/keccak/keccak.zir:1180)
    NondetRegStruct x11 = back_NondetReg(ctx, 1, x2);
    EQZ((x7 - (x11._super + Val(1))), "Top(zirgen/circuit/keccak/keccak.zir:1180)");
    // Top(zirgen/circuit/keccak/keccak.zir:1181)
    RetTupleStruct x12 = back_RetTuple(ctx, 1, x4);
    x10 = x12.major._super;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // Top(zirgen/circuit/keccak/keccak.zir:1183)
  OneHot_23_Struct x13 = exec_OneHot_23_(ctx, x10, LAYOUT_LOOKUP(layout0, majorOnehot));
  NondetRegStruct23Array x14 = x13._super;
  // Top(zirgen/circuit/keccak/keccak.zir:1184)
  BoundLayout<TopArm18_SuperLayout> x15 = LAYOUT_LOOKUP(x3, arm18);
  // Top(zirgen/circuit/keccak/keccak.zir:1207)
  Val22Array x16 = Val22Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                              Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)};
  RetTupleStruct x17;
  if (to_size_t(x14[0]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1185)
    RetTupleStruct x18 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x19 = execXor5wordsMajor_0_(ctx, x18, x4, LAYOUT_LOOKUP(x3, arm0));
    x17 = x19;
  } else if (to_size_t(x14[1]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1186)
    RetTupleStruct x20 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x21 = execXor5wordsMajor_1_(ctx, x20, x4, LAYOUT_LOOKUP(x3, arm1));
    x17 = x21;
  } else if (to_size_t(x14[2]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1187)
    RetTupleStruct x22 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x23 = execXor5wordsMajor_2_(ctx, x22, x4, LAYOUT_LOOKUP(x3, arm2));
    x17 = x23;
  } else if (to_size_t(x14[3]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1188)
    RetTupleStruct x24 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x25 = execXor5wordsMajor_3_(ctx, x24, x4, LAYOUT_LOOKUP(x3, arm3));
    x17 = x25;
  } else if (to_size_t(x14[4]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1189)
    RetTupleStruct x26 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x27 = execXor5wordsMajor_4_(ctx, x26, x4, LAYOUT_LOOKUP(x3, arm4));
    x17 = x27;
  } else if (to_size_t(x14[5]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1190)
    RetTupleStruct x28 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x29 = execRhoMajor_0_(ctx, x28, x4, LAYOUT_LOOKUP(x3, arm5));
    x17 = x29;
  } else if (to_size_t(x14[6]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1191)
    RetTupleStruct x30 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x31 = execRhoMajor_1_(ctx, x30, x4, LAYOUT_LOOKUP(x3, arm6));
    x17 = x31;
  } else if (to_size_t(x14[7]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1192)
    RetTupleStruct x32 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x33 = execRhoMajor_2_(ctx, x32, x4, LAYOUT_LOOKUP(x3, arm7));
    x17 = x33;
  } else if (to_size_t(x14[8]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1193)
    RetTupleStruct x34 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x35 = execRhoMajor_3_(ctx, x34, x4, LAYOUT_LOOKUP(x3, arm8));
    x17 = x35;
  } else if (to_size_t(x14[9]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1194)
    RetTupleStruct x36 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x37 = execRhoMajor_4_(ctx, x36, x4, LAYOUT_LOOKUP(x3, arm9));
    x17 = x37;
  } else if (to_size_t(x14[10]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1195)
    RetTupleStruct x38 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x39 = execChiMajor_0_(ctx, x38, x4, LAYOUT_LOOKUP(x3, arm10));
    x17 = x39;
  } else if (to_size_t(x14[11]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1196)
    RetTupleStruct x40 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x41 = execChiMajor_1_(ctx, x40, x4, LAYOUT_LOOKUP(x3, arm11));
    x17 = x41;
  } else if (to_size_t(x14[12]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1197)
    RetTupleStruct x42 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x43 = execChiMajor_2_(ctx, x42, x4, LAYOUT_LOOKUP(x3, arm12));
    x17 = x43;
  } else if (to_size_t(x14[13]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1198)
    RetTupleStruct x44 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x45 = execChiMajor_3_(ctx, x44, x4, LAYOUT_LOOKUP(x3, arm13));
    x17 = x45;
  } else if (to_size_t(x14[14]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1199)
    RetTupleStruct x46 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x47 = execChiMajor_4_(ctx, x46, x4, LAYOUT_LOOKUP(x3, arm14));
    x17 = x47;
  } else if (to_size_t(x14[15]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1200)
    RetTupleStruct x48 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x49 = execAbsorbMajor1(ctx, x48, x4, LAYOUT_LOOKUP(x3, arm15));
    x17 = x49;
  } else if (to_size_t(x14[16]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1201)
    RetTupleStruct x50 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x51 = execAbsorbMajor2(ctx, x50, x4, LAYOUT_LOOKUP(x3, arm16));
    x17 = x51;
  } else if (to_size_t(x14[17]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1202)
    RetTupleStruct x52 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x53 = execSetupMajor(ctx, x52, x4, LAYOUT_LOOKUP(x3, arm17), global1);
    x17 = x53;
  } else if (to_size_t(x14[18]._super)) {
    // readInput(zirgen/circuit/keccak/keccak.zir:7)
    // Top(zirgen/circuit/keccak/keccak.zir:1203)
    Val x54 = INVOKE_EXTERN(ctx, readInput);
    NondetRegStruct x55 = exec_NondetReg(ctx, x54, LAYOUT_LOOKUP(x15, blk));
    // readInput(zirgen/circuit/keccak/keccak.zir:7)
    // Top(zirgen/circuit/keccak/keccak.zir:1205)
    Val x56 = INVOKE_EXTERN(ctx, readInput);
    Val x57 = INVOKE_EXTERN(ctx, readInput);
    Val x58 = INVOKE_EXTERN(ctx, readInput);
    // Top(zirgen/circuit/keccak/keccak.zir:1203)
    Val x59 = x55._super;
    // Top(zirgen/circuit/keccak/keccak.zir:1206)
    WriteMemoryStruct x60 =
        exec_WriteMemory(ctx,
                         Val(0),
                         MemDigestStruct{._super = Val4Array{x59, Val(0), Val(0), Val(0)}},
                         LAYOUT_LOOKUP(x15, _0));
    // Top(zirgen/circuit/keccak/keccak.zir:1207)
    RetTupleStruct x61 =
        exec_RetTuple(ctx,
                      x16,
                      x16,
                      x16,
                      Val24Array{Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0),
                                 Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0), Val(0)},
                      x16,
                      x16,
                      Val(0),
                      Val(15),
                      Val(0),
                      x59,
                      Val(0),
                      LAYOUT_LOOKUP(x15, _super));
    x17 = x61;
  } else if (to_size_t(x14[19]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1210)
    RetTupleStruct x62 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x63 = execSha256loadAll(ctx, x62, x4, LAYOUT_LOOKUP(x3, arm19));
    x17 = x63;
  } else if (to_size_t(x14[20]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1211)
    RetTupleStruct x64 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x65 = execSha256mixAll_0_(ctx, x64, x4, LAYOUT_LOOKUP(x3, arm20));
    x17 = x65;
  } else if (to_size_t(x14[21]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1212)
    RetTupleStruct x66 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x67 = execSha256mixAll_1_(ctx, x66, x4, LAYOUT_LOOKUP(x3, arm21));
    x17 = x67;
  } else if (to_size_t(x14[22]._super)) {
    // Top(zirgen/circuit/keccak/keccak.zir:1213)
    RetTupleStruct x68 = back_RetTuple(ctx, 0, x4);
    RetTupleStruct x69 = execSha256mixAll_2_(ctx, x68, x4, LAYOUT_LOOKUP(x3, arm22));
    x17 = x69;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  // Top(zirgen/circuit/keccak/keccak.zir:1184)
  RetTupleStruct x70 = back_RetTuple(ctx, 0, x4);
  return TopStruct{};
}
void step_Top(ExecContext& ctx, MutableBuf data0, GlobalBuf global1) {
  // Top(zirgen/circuit/keccak/keccak.zir:1166)
  BoundLayout<TopLayout> x2 = BIND_LAYOUT(kLayout_Top, data0);
  TopStruct x3 = exec_Top(ctx, x2, global1);
  return;
}
ComponentStruct exec_TopAccum(ExecContext& ctx,
                              BoundLayout<TopLayout> arg0,
                              BoundLayout<Reg1LayoutArray> layout1,
                              GlobalBuf mix2) {
  // zirgen/dsl/passes/GenerateAccum.cpp:402
  BoundLayout<_mixLayout> x3 = BIND_LAYOUT(kLayoutMix, mix2);
  // zirgen/dsl/passes/GenerateAccum.cpp:409
  BoundLayout<_accumLayout> x4 = LAYOUT_LOOKUP(x3, randomness);
  // zirgen/dsl/passes/GenerateAccum.cpp:415
  BoundLayout<TopRetvalsLayout> x5 = LAYOUT_LOOKUP(arg0, retvals);
  // zirgen/dsl/passes/GenerateAccum.cpp:424
  BoundLayout<NondetRegLayout23LayoutArray> x6 = LAYOUT_LOOKUP(x5, _selector);
  // zirgen/dsl/passes/GenerateAccum.cpp:473
  ComponentStruct x7 = ComponentStruct{};
  // zirgen/dsl/passes/GenerateAccum.cpp:50
  BoundLayout<Arg_UseOnceMemoryElementLayout> x8 = LAYOUT_LOOKUP(x4, useOnceMemoryElement);
  BoundLayout<Reg> x9 = LAYOUT_LOOKUP(x8, index);
  BoundLayout<Reg> x10 = LAYOUT_LOOKUP(x8, _0);
  BoundLayout<Reg> x11 = LAYOUT_LOOKUP(x8, _1);
  BoundLayout<Reg> x12 = LAYOUT_LOOKUP(x8, _2);
  BoundLayout<Reg> x13 = LAYOUT_LOOKUP(x8, _3);
  // zirgen/dsl/passes/GenerateAccum.cpp:80
  BoundLayout<Reg> x14 = LAYOUT_LOOKUP(x4, _offset);
  // zirgen/dsl/passes/GenerateAccum.cpp:273
  BoundLayout<UseOnceMemoryElementLayout1LayoutArray> x15 = LAYOUT_LOOKUP(
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(x5, arm15), _arguments_Super), useOnceMemoryElement);
  BoundLayout<UseOnceMemoryElementLayout1LayoutArray> x16 = LAYOUT_LOOKUP(
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(x5, arm16), _arguments_Super), useOnceMemoryElement);
  BoundLayout<UseOnceMemoryElementLayout3LayoutArray> x17 = LAYOUT_LOOKUP(
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(x5, arm17), _arguments_Super), useOnceMemoryElement);
  BoundLayout<UseOnceMemoryElementLayout> x18 =
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x5, arm18), _0), elem);
  BoundLayout<UseOnceMemoryElementLayout1LayoutArray> x19 = LAYOUT_LOOKUP(
      LAYOUT_LOOKUP(LAYOUT_LOOKUP(x5, arm19), _arguments_Super), useOnceMemoryElement);
  ComponentStruct x20;
  if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 0), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x21 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x21, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 1), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x22 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x22, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 2), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x23 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x23, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 3), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x24 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x24, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 4), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x25 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x25, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 5), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x26 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x26, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 6), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x27 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x27, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 7), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x28 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x28, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 8), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x29 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x29, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 9), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x30 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x30, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 10), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x31 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x31, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 11), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x32 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x32, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 12), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x33 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x33, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 13), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x34 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x34, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 14), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x35 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x35, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 15), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:231
    BoundLayout<Reg> x36 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x15, 0), count), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x37 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x15, 0), index), _super);
    BoundLayout<Reg> x38 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x15, 0), _0), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x39 = ((LOAD_EXT(x9, 0) * LOAD(x37, 0)) + (LOAD_EXT(x10, 0) * LOAD(x38, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x40 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x15, 0), _1), _super);
    BoundLayout<Reg> x41 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x15, 0), _2), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x42 = ((x39 + (LOAD_EXT(x11, 0) * LOAD(x40, 0))) + (LOAD_EXT(x12, 0) * LOAD(x41, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x43 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x15, 0), _3), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:235
    ExtVal x44 = ((x42 + (LOAD_EXT(x13, 0) * LOAD(x43, 0))) + LOAD_EXT(x14, 0));
    // zirgen/dsl/passes/GenerateAccum.cpp:238
    ExtVal x45 = (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1) + (LOAD(x36, 0) * inv(x44)));
    // zirgen/dsl/passes/GenerateAccum.cpp:186
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), x45);
    // zirgen/dsl/passes/GenerateAccum.cpp:174
    ExtVal x46 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:179
    EQZ(((x46 * x44) - LOAD(x36, 0)), "zirgen/dsl/passes/GenerateAccum.cpp:179");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 16), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:231
    BoundLayout<Reg> x47 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x16, 0), count), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x48 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x16, 0), index), _super);
    BoundLayout<Reg> x49 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x16, 0), _0), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x50 = ((LOAD_EXT(x9, 0) * LOAD(x48, 0)) + (LOAD_EXT(x10, 0) * LOAD(x49, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x51 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x16, 0), _1), _super);
    BoundLayout<Reg> x52 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x16, 0), _2), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x53 = ((x50 + (LOAD_EXT(x11, 0) * LOAD(x51, 0))) + (LOAD_EXT(x12, 0) * LOAD(x52, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x54 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x16, 0), _3), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:235
    ExtVal x55 = ((x53 + (LOAD_EXT(x13, 0) * LOAD(x54, 0))) + LOAD_EXT(x14, 0));
    // zirgen/dsl/passes/GenerateAccum.cpp:238
    ExtVal x56 = (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1) + (LOAD(x47, 0) * inv(x55)));
    // zirgen/dsl/passes/GenerateAccum.cpp:186
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), x56);
    // zirgen/dsl/passes/GenerateAccum.cpp:174
    ExtVal x57 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:179
    EQZ(((x57 * x55) - LOAD(x47, 0)), "zirgen/dsl/passes/GenerateAccum.cpp:179");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 17), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:231
    BoundLayout<Reg> x58 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 0), count), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x59 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 0), index), _super);
    BoundLayout<Reg> x60 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 0), _0), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x61 = ((LOAD_EXT(x9, 0) * LOAD(x59, 0)) + (LOAD_EXT(x10, 0) * LOAD(x60, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x62 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 0), _1), _super);
    BoundLayout<Reg> x63 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 0), _2), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x64 = ((x61 + (LOAD_EXT(x11, 0) * LOAD(x62, 0))) + (LOAD_EXT(x12, 0) * LOAD(x63, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x65 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 0), _3), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:235
    ExtVal x66 = ((x64 + (LOAD_EXT(x13, 0) * LOAD(x65, 0))) + LOAD_EXT(x14, 0));
    // zirgen/dsl/passes/GenerateAccum.cpp:238
    ExtVal x67 = (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1) + (LOAD(x58, 0) * inv(x66)));
    // zirgen/dsl/passes/GenerateAccum.cpp:231
    BoundLayout<Reg> x68 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 1), count), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x69 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 1), index), _super);
    BoundLayout<Reg> x70 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 1), _0), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x71 = ((LOAD_EXT(x9, 0) * LOAD(x69, 0)) + (LOAD_EXT(x10, 0) * LOAD(x70, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x72 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 1), _1), _super);
    BoundLayout<Reg> x73 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 1), _2), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x74 = ((x71 + (LOAD_EXT(x11, 0) * LOAD(x72, 0))) + (LOAD_EXT(x12, 0) * LOAD(x73, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x75 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 1), _3), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:235
    ExtVal x76 = ((x74 + (LOAD_EXT(x13, 0) * LOAD(x75, 0))) + LOAD_EXT(x14, 0));
    // zirgen/dsl/passes/GenerateAccum.cpp:214
    ExtVal x77 = (x66 * x76);
    // zirgen/dsl/passes/GenerateAccum.cpp:231
    BoundLayout<Reg> x78 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 2), count), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x79 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 2), index), _super);
    BoundLayout<Reg> x80 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 2), _0), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x81 = ((LOAD_EXT(x9, 0) * LOAD(x79, 0)) + (LOAD_EXT(x10, 0) * LOAD(x80, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x82 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 2), _1), _super);
    BoundLayout<Reg> x83 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 2), _2), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x84 = ((x81 + (LOAD_EXT(x11, 0) * LOAD(x82, 0))) + (LOAD_EXT(x12, 0) * LOAD(x83, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x85 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x17, 2), _3), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:235
    ExtVal x86 = ((x84 + (LOAD_EXT(x13, 0) * LOAD(x85, 0))) + LOAD_EXT(x14, 0));
    // zirgen/dsl/passes/GenerateAccum.cpp:238
    ExtVal x87 = ((x67 + (LOAD(x68, 0) * inv(x76))) + (LOAD(x78, 0) * inv(x86)));
    // zirgen/dsl/passes/GenerateAccum.cpp:220
    ExtVal x88 = ((LOAD(x58, 0) * x76) * x86);
    // zirgen/dsl/passes/GenerateAccum.cpp:186
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), x87);
    // zirgen/dsl/passes/GenerateAccum.cpp:174
    ExtVal x89 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:177
    ExtVal x90 = (((x89 * (x77 * x86)) - x88) - ((x66 * LOAD(x68, 0)) * x86));
    // zirgen/dsl/passes/GenerateAccum.cpp:179
    EQZ((x90 - (x77 * LOAD(x78, 0))), "zirgen/dsl/passes/GenerateAccum.cpp:179");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 18), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:143
    ExtVal x91 = (LOAD_EXT(x9, 0) * LOAD(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x18, index), _super), 0));
    ExtVal x92 = (LOAD_EXT(x10, 0) * LOAD(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x18, _0), _super), 0));
    ExtVal x93 = (LOAD_EXT(x11, 0) * LOAD(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x18, _1), _super), 0));
    ExtVal x94 = (LOAD_EXT(x12, 0) * LOAD(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x18, _2), _super), 0));
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x95 = (((x91 + x92) + x93) + x94);
    // zirgen/dsl/passes/GenerateAccum.cpp:143
    ExtVal x96 = (LOAD_EXT(x13, 0) * LOAD(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x18, _3), _super), 0));
    // zirgen/dsl/passes/GenerateAccum.cpp:235
    ExtVal x97 = ((x95 + x96) + LOAD_EXT(x14, 0));
    // zirgen/dsl/passes/GenerateAccum.cpp:237
    ExtVal x98 = (LOAD(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x18, count), _super), 0) * inv(x97));
    // zirgen/dsl/passes/GenerateAccum.cpp:238
    ExtVal x99 = (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1) + x98);
    // zirgen/dsl/passes/GenerateAccum.cpp:186
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), x99);
    // zirgen/dsl/passes/GenerateAccum.cpp:174
    ExtVal x100 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:177
    ExtVal x101 = ((x100 * x97) - LOAD(LAYOUT_LOOKUP(LAYOUT_LOOKUP(x18, count), _super), 0));
    // zirgen/dsl/passes/GenerateAccum.cpp:179
    EQZ(x101, "zirgen/dsl/passes/GenerateAccum.cpp:179");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 19), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:231
    BoundLayout<Reg> x102 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x19, 0), count), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x103 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x19, 0), index), _super);
    BoundLayout<Reg> x104 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x19, 0), _0), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x105 = ((LOAD_EXT(x9, 0) * LOAD(x103, 0)) + (LOAD_EXT(x10, 0) * LOAD(x104, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x106 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x19, 0), _1), _super);
    BoundLayout<Reg> x107 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x19, 0), _2), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:154
    ExtVal x108 =
        ((x105 + (LOAD_EXT(x11, 0) * LOAD(x106, 0))) + (LOAD_EXT(x12, 0) * LOAD(x107, 0)));
    // zirgen/dsl/passes/GenerateAccum.cpp:141
    BoundLayout<Reg> x109 = LAYOUT_LOOKUP(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x19, 0), _3), _super);
    // zirgen/dsl/passes/GenerateAccum.cpp:235
    ExtVal x110 = ((x108 + (LOAD_EXT(x13, 0) * LOAD(x109, 0))) + LOAD_EXT(x14, 0));
    // zirgen/dsl/passes/GenerateAccum.cpp:238
    ExtVal x111 = (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1) + (LOAD(x102, 0) * inv(x110)));
    // zirgen/dsl/passes/GenerateAccum.cpp:186
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), x111);
    // zirgen/dsl/passes/GenerateAccum.cpp:174
    ExtVal x112 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:179
    EQZ(((x112 * x110) - LOAD(x102, 0)), "zirgen/dsl/passes/GenerateAccum.cpp:179");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 20), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x113 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x113, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 21), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x114 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x114, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else if (to_size_t(LOAD(LAYOUT_LOOKUP(LAYOUT_SUBSCRIPT(x6, 22), _super), 0))) {
    // zirgen/dsl/passes/GenerateAccum.cpp:119
    STORE_EXT(LAYOUT_SUBSCRIPT(layout1, 0), LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:121
    ExtVal x115 =
        (LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 0) - LOAD_EXT(LAYOUT_SUBSCRIPT(layout1, 0), 1));
    // zirgen/dsl/passes/GenerateAccum.cpp:122
    EQZ(x115, "zirgen/dsl/passes/GenerateAccum.cpp:122");
    x20 = x7;
  } else {
    assert(0 && "Reached unreachable mux arm");
  }
  return x7;
}
void step_TopAccum(ExecContext& ctx, MutableBuf accum0, MutableBuf data1, GlobalBuf mix2) {
  // zirgen/dsl/passes/GenerateAccum.cpp:402
  BoundLayout<TopLayout> x3 = BIND_LAYOUT(kLayout_Top, data1);
  BoundLayout<Reg1LayoutArray> x4 = BIND_LAYOUT(kLayout_TopAccum, accum0);
  ComponentStruct x5 = exec_TopAccum(ctx, x3, x4, mix2);
  return;
}
