load("@rules_pkg//pkg:zip.bzl", "pkg_zip")
load("//bazel/rules/zirgen:edsl-defs.bzl", "build_circuit")

package(
    default_visibility = ["//visibility:public"],
)

cc_library(
    name = "lib",
    srcs = [
        "predicates.cpp",
    ],
    hdrs = [
        "predicates.h",
        "//zirgen/circuit/recursion",
        "//zirgen/circuit/rv32im/v1/edsl:rv32im",
    ],
    deps = [
        "//zirgen/circuit/recursion:lib",
        "//zirgen/circuit/verify:lib",
        "//zirgen/compiler/edsl",
    ],
)

# Must match constants in gen_predicates.cpp
MIN_RV32IM_PO2 = 14;
MAX_RV32IM_PO2 = 24;
MIN_RECURSION_PO2 = 18;
MAX_RECURSION_PO2 = 21;
MAX_JOIN_WIDTH = 12;

RV32IM_PO2S = list(range(MIN_RV32IM_PO2, MAX_RV32IM_PO2+1))
RECURSION_PO2S = list(range(MIN_RECURSION_PO2, MAX_RECURSION_PO2+1))
JOIN_WIDTHS = list(range(2, MAX_JOIN_WIDTH+1))

ZKRS = [
    ("lift_" + str(po2))
    for po2 in RV32IM_PO2S
] + [
    ("lift_join" + str(n) + "_" + str(po2))
    for n in JOIN_WIDTHS
    for po2 in RV32IM_PO2S
] + [
    ("join" + str(n) + "_" + str(po2))
    for n in JOIN_WIDTHS
    for po2 in RECURSION_PO2S
] + [
    ("resolve_" + str(po2))
    for po2 in RECURSION_PO2S
] + [
    ("identity_" + str(po2))
    for po2 in RECURSION_PO2S
] + [
    ("union_" + str(po2))
    for po2 in RECURSION_PO2S
] + [
    "test_recursion_circuit",
]

build_circuit(
    name = "gen_predicates",
    srcs = ["gen_predicates.cpp"],
    outs = [fn for zkr in ZKRS for fn in [
        zkr + ".zkr",
        zkr + ".zkr.dbg",
    ]],
    deps = [":lib"],
)

pkg_zip(
    name = "recursion_zkr",
    srcs = [x + ".zkr" for x in ZKRS],
)

genrule(
    name = "actual_hashes",
    srcs = [x + ".zkr" for x in ZKRS],
    outs = ["actual_hashes.txt"],
    cmd = "shasum -a 256 $(SRCS) | sed 's@ .*/@ @g' >$(location actual_hashes.txt)",
)

# Make sure that we only change predicate hashes on purpose, not by accident.
sh_test(
    name = "golden_hashes_test",
    srcs = ["golden_hashes_test.sh"],
    args = [
        "$(location :actual_hashes.txt)",
        "$(location :golden_hashes.txt)",
    ],
    data = [
        ":actual_hashes.txt",
        ":golden_hashes.txt",
    ],
)
